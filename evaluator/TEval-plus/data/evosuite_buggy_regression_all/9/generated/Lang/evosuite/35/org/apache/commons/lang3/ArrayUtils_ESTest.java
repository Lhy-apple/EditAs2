/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:28:31 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, 'a');
      assertArrayEquals(new char[] {'a'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, 0, (long) (-1));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) "d'JvE]");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, (double) (byte)0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-2828.0F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 98L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1));
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String string0 = ArrayUtils.toString((Object) arrayUtils0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)100);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (short)2375);
      assertArrayEquals(new short[] {(short)2375}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, 48, (byte) (-77));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEquals(arrayUtils0, arrayUtils0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (short)2428);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1681.756519887375, (-2011.3665295558));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '3');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)29);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) 1930);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-218));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, 3062, (double) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3062, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-56));
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-56)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), 1.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = ArrayUtils.toArray(objectArray0);
      assertEquals(1, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 3045.73028657168);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), 'K');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BYTE_ARRAY, 2128);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2128, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) objectArray0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 1, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_LONG_ARRAY, (long[]) null);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, ':');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-59));
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, 48, 48);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer[] integerArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, 0, (-1));
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-4118), 3221);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      short short0 = (short)0;
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (int) (short)48, (int) short0);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short) (-68), 2);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1885, 2136);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-1), (-1));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short)0, (int) (short)0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-345), 4670);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 4034, 4034);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, (int) (byte)29, (int) (byte)29);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)56);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), 0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 1046, 1046);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[] charArray1 = ArrayUtils.subarray(charArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), 466);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, (-1), (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      short short0 = (short)0;
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 6, (int) short0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)56, 0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 2571);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1985, (-2120));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 3, (-2120));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-669), 1985);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-184), (int) (byte)15);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 2, 2);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 2);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1985, 1985);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (int) (byte)102, 950);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), (-2056));
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-2146565208), 2190);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_STRING_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, (Object) null);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, (Object) "3b51-x");
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = new Object[5];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long[] longArray0 = new long[3];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long[] longArray0 = new long[5];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = new int[4];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, arrayUtils0.EMPTY_INT_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      short[] shortArray0 = new short[5];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      short[] shortArray0 = new short[5];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = new char[4];
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float[] floatArray0 = new float[6];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float[] floatArray0 = new float[7];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float[] floatArray1 = new float[9];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, "U-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(object0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameType(",7jn=3O{}pv'S0;N", ",7jn=3O{}pv'S0;N");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Short[] shortArray0 = new Short[8];
      ArrayUtils.reverse((Object[]) shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long[] longArray0 = new long[5];
      ArrayUtils.reverse(longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      short[] shortArray0 = new short[7];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char[] charArray0 = new char[6];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float[] floatArray0 = new float[6];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Integer integer0 = new Integer(2);
      AbstractMap.SimpleEntry<String, Object>[] abstractMap_SimpleEntryArray0 = ArrayUtils.removeElement((AbstractMap.SimpleEntry<String, Object>[]) null, (Object) integer0);
      assertNull(abstractMap_SimpleEntryArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Integer integer0 = new Integer(1);
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer0, (-102));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long[] longArray0 = new long[8];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.indexOf((Object[]) longArray1, (Object) null, 0);
      assertEquals((-1), int0);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      String[] stringArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_STRING_ARRAY, (Object) map0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      AbstractMap.SimpleEntry<String, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<String, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 6);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(", Length: ", "EV FTm(se");
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<String, Object>[] abstractMap_SimpleEntryArray1 = ArrayUtils.removeElement(abstractMap_SimpleEntryArray0, (Object) abstractMap_SimpleEntry0);
      assertEquals(5, abstractMap_SimpleEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Object object0 = new Object();
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 2595);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      int int0 = ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, object0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integerArray0[1], 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, object0);
      assertNotNull(objectArray0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 6);
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, (Object) arrayUtils0.INDEX_NOT_FOUND, 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Integer integer0 = new Integer((-1283));
      Integer[] integerArray0 = new Integer[4];
      integerArray0[1] = integer0;
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integerArray0[1], 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[7]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_LONG_ARRAY, 0L, (-302));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 69L);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 69L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 69L);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long[] longArray0 = new long[2];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1014L), (int) (byte) (-29));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      long[] longArray0 = new long[5];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-651L), (int) (byte)3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 98L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 98L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (byte) (-120));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (long) (byte) (-120);
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (byte) (-120));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (short)13);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)0, (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1826);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 2417, 2417);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_INT_ARRAY, 911, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (short) (-102), (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1886;
      boolean boolean0 = ArrayUtils.contains(intArray0, 1886);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short)89, (int) (byte)33);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      short[] shortArray0 = new short[5];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte)56, (-1156));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Short short0 = new Short((short) (-190));
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short0;
      shortArray0[5] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[5]);
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short) shortArray0[0]);
      assertArrayEquals(new short[] {(short) (-190), (short) (-190), (short) (-190), (short) (-190), (short) (-190), (short) (-190), (short) (-190)}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)1930, (int) (short)1930);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      short[] shortArray0 = new short[1];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2380), (int) (short) (-389));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      short[] shortArray0 = new short[8];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1, (int) (short)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[4] = (short)1202;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1202, (int) (short)1202);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)788);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      char[] charArray0 = new char[7];
      int int0 = ArrayUtils.indexOf(charArray0, 'L', (-2046));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'V');
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'z', (-7152));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '&', (-218));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = ArrayUtils.lastIndexOf(charArray0, ')', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'L', (int) (short)1090);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      char[] charArray0 = new char[9];
      boolean boolean0 = ArrayUtils.contains(charArray0, '4');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'g';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'g');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-79), (-1195));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-63));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-63);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-63));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-7), (int) (byte) (-7));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)3, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-24);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-24));
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (int) (byte) (-102));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, (-1.0), (-2072), 1064.17);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 3051, (-1), (-565.3158555747609));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 3051, 2, (-3492.0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-287.974108824);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-287.974108824), (double) (short)3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 338L, 512);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 338L, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2.0, 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-2449.14));
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 3662.3145709655, Integer.MAX_VALUE, (-1.0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2095.350015297979), (-1459), 0.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-102), 0, (-3913.3998));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 90, (-1.0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-453.605360932978));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 168.0200682425, (double) (byte)100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      float[] floatArray0 = new float[9];
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), (-359));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (byte) (-102);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-102.0F));
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      float[] floatArray0 = new float[7];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      float[] floatArray0 = new float[7];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, (-1585));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1393.7F), 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-2236));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1080));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (short)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 1985);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray1, false);
      assertEquals(1, booleanArray1.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('e');
      characterArray0[0] = character0;
      characterArray0[1] = characterArray0[0];
      characterArray0[2] = characterArray0[1];
      characterArray0[3] = characterArray0[2];
      characterArray0[4] = characterArray0[1];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'e', 'e', 'e', 'e', 'e'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'D');
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, ')');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Character character0 = new Character('1');
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'W');
      assertArrayEquals(new char[] {'1', 'W', 'W', 'W'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Character[] characterArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      char[] charArray0 = new char[3];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(3, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-269L));
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {(-269L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 0);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) 4540);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, 1461L);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-2331L));
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 0);
      assertArrayEquals(new long[] {(-2331L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Integer integer0 = new Integer((-1283));
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integerArray0[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-1283), (-1283), (-1283), (-1283)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (int) (short)2);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (int) (short)405);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      integerArray0[4] = (Integer) (-1);
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[4]);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer[] integerArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      int[] intArray0 = new int[4];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Short short0 = new Short((byte)0);
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)2136);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1448));
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte)109);
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byteArray0[0];
      byteArray0[3] = byteArray0[2];
      byteArray0[4] = byteArray0[0];
      byteArray0[5] = byteArray0[3];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)109, (byte)109, (byte)109, (byte)109, (byte)109, (byte)109}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte) (-56));
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-49));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Byte[] byteArray0 = new Byte[19];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-13));
      assertEquals(19, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Byte[] byteArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.0);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-1425.37897798873));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 1);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1.0);
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.0);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Float[] floatArray0 = new Float[9];
      floatArray0[0] = (Float) 760.3254F;
      floatArray0[1] = (Float) 760.3254F;
      floatArray0[2] = (Float) 760.3254F;
      floatArray0[3] = (Float) 760.3254F;
      floatArray0[4] = (Float) 760.3254F;
      floatArray0[5] = (Float) 760.3254F;
      floatArray0[6] = (Float) 1.0F;
      floatArray0[7] = (Float) 760.3254F;
      floatArray0[8] = (Float) 1.0F;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {760.3254F, 760.3254F, 760.3254F, 760.3254F, 760.3254F, 760.3254F, 1.0F, 760.3254F, 1.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 1.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (-2782.8718F));
      assertSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((float) (byte) (-100));
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 3853.336F);
      assertArrayEquals(new float[] {(-100.0F), 3853.336F, 3853.336F, 3853.336F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      float[] floatArray0 = new float[6];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = (Boolean) false;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(9, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = ArrayUtils.isEmpty(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      boolean boolean0 = ArrayUtils.isEmpty(integerArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      long[] longArray0 = new long[5];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (Object[]) null);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) "Rs^!y Q_";
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) integerArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Object in an array of java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.addAll((char[]) null, charArray0);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertNotNull(charArray1);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, (short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, (int[]) null);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, (float[]) null);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer[] integerArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Integer) arrayUtils0.INDEX_NOT_FOUND);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, (-1223), (Object) null);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_STRING_ARRAY, (-1), "{");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Object object0 = new Object();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(", '", object0);
      // Undeclared exception!
      try { 
        ArrayUtils.add((AbstractMap.SimpleEntry<String, Object>[]) null, 57, abstractMap_SimpleEntry0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Object object0 = new Object();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("&H", object0);
      AbstractMap.SimpleEntry<String, Object>[] abstractMap_SimpleEntryArray0 = ArrayUtils.add((AbstractMap.SimpleEntry<String, Object>[]) null, (int) 0, abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntryArray0);
      assertEquals(1, abstractMap_SimpleEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Object object0 = new Object();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(",pda{#0", object0);
      AbstractMap.SimpleEntry<String, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<String, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 1);
      AbstractMap.SimpleEntry<String, Object>[] abstractMap_SimpleEntryArray1 = ArrayUtils.add(abstractMap_SimpleEntryArray0, 0, abstractMap_SimpleEntry0);
      assertEquals(2, abstractMap_SimpleEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-100));
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2.147483647E9);
      assertArrayEquals(new double[] {0.0, 2.147483647E9, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[3] = (int) (short) (-193);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-193));
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
  }
}
