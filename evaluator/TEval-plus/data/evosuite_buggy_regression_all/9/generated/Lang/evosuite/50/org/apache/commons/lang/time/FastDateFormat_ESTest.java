/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:32:42 GMT 2023
 */

package org.apache.commons.lang.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(94, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 94
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      
      fastDateFormat0.toString();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      assertEquals("EEEE, d. MMMM yyyy HH:mm' Uhr 'z", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("[~2\"");
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("[~2\"", timeZone0, locale0);
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Long long0 = new Long(1);
      String string0 = fastDateFormat0.format((Object) long0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("1/1/70 12:00 AM", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(32, 32, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 32
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang.time.FastDateFormat$TimeZoneDisplayKey", timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("dd-MMM-yyyy", locale0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertEquals("8:21:21 PM GMT", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("H:mm:ss z");
      try { 
        fastDateFormat0.parseObject("H:mm:ss z");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
      fastDateFormat0.getLocale();
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2528), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2528
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.getPattern();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2082), "yyy'\u5E74'M'\u6708'Z'\u65E5' EEEE ah'\u65F6'mm''ss'\u79D2'z");
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyy'\u5E74'M'\u6708'Z'\u65E5' EEEE ah'\u65F6'mm''ss'\u79D2'z", (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.format((-1L));
      assertEquals("69\u5E7412\u6708-0000\u65E5 mercoled\u00EC PM11\u65F659'57\u79D2GMT+00:00", string0);
      assertEquals(45, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k");
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("k", fastDateFormat0.getPattern());
      assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
      
      String string0 = fastDateFormat0.format((long) (-820));
      assertNotNull(string0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals("23", string0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("k", fastDateFormat0.getPattern());
      assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("dddMM/ HH:m");
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("dddMM/ HH:m", fastDateFormat0.getPattern());
      
      String string0 = fastDateFormat0.format((long) 0);
      assertNotNull(string0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals("00101/ 00:0", string0);
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("dddMM/ HH:m", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      
      String string0 = locale0.getDisplayLanguage();
      assertNotNull(string0);
      assertEquals("Chinese", string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      int int0 = mockGregorianCalendar0.getWeekYear();
      assertEquals(2014, int0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertNotNull(string1);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("2014\u5E742\u670814\u65E5 \u661F\u671F\u4E94", string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertFalse(string1.equals((Object)string0));
      
      int int1 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(17, int1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      assertFalse(int1 == int0);
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      assertNotSame(locale0, locale1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(locale0.equals((Object)locale1));
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("2", timeZone0, locale0);
      assertNotNull(fastDateFormat1);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, fastDateFormat1.getMaxLengthEstimate());
      assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals("2", fastDateFormat1.getPattern());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat1);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertEquals("M/d/yy h:mm a", fastDateFormat1.getPattern());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
      assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("<[9A[5N@HmFN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("]Bw|CXH@\"^CQ7.|GR0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("C8OSzM4A+\"AyNcI8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("M{+#DS)Z3");
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M{+#DS)Z3", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("kG|G7pk%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Iu&Wt=l5m|_PIr (");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("#&3M4yJ=bNU)RO8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("=+KH1%>E^XBT%t[gz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("3FL#3P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("<)s9\"[5N@HmFN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("FOkD1\"ZrfG<Bn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("9Py#cDT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("FQDat]Format[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(")R,1:$`sXfFl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("The validated array contains null element at index: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("2U'fr-j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("!}0V6MXajk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("h+GWXJL~HxCYqw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("7Y#2lzl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("bB@t-WB7i(v^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(" c0wdmn*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("e{+#D)Z3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("&fM{+D)3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("g|*HGM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("*ic[cz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("2H~5j|yn9FV|[8+3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("w%yHG l>X2C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("<;n^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("q=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("rr\"'UCP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: rr
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(" at index: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("uN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("vgH)n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("6xpRBX+/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\u5E74'M'\u6708'd'\u65E5' ahh'\u6642'mm'\u5206'ss'\u79D2'");
      assertNotNull(fastDateFormat0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(25, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' ahh'\u6642'mm'\u5206'ss'\u79D2'", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      
      MockDate mockDate0 = new MockDate(3, 90, 3);
      assertNotNull(mockDate0);
      
      String string0 = fastDateFormat0.format((Object) mockDate0);
      assertNotNull(string0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals("7/3/10 12:00 AM", string0);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals("Sun Jul 03 00:00:00 GMT 1910", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      String string0 = fastDateFormat0.format((Object) calendar0);
      assertNotNull(string0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("Friday, February 14, 2014 8:21:21 PM GMT", string0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("EEEE d MMMM yyyy");
      assertNotNull(fastDateFormat0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      // Undeclared exception!
      try { 
        fastDateFormat0.formatToCharacterIterator("EEEE d MMMM yyyy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      
      boolean boolean0 = fastDateFormat0.equals("11:59:59 PM GMT");
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertFalse(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 2);
      assertNotNull(fastDateFormat1);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertEquals(45, fastDateFormat1.getMaxLengthEstimate());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a", fastDateFormat1.getPattern());
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertFalse(boolean0);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(45, fastDateFormat1.getMaxLengthEstimate());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a", fastDateFormat1.getPattern());
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertTrue(boolean0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("M{+#D)Z3");
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("M{+#D)Z3", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      
      String string0 = fastDateFormat0.format((-253L));
      assertNotNull(string0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("12{+#365)+00003", string0);
      assertEquals("M{+#D)Z3", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\u5E74'M'\u6708'Z'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z");
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'Z'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(41, fastDateFormat0.getMaxLengthEstimate());
      
      MockDate mockDate0 = new MockDate((-838), (-838), 3);
      assertNotNull(mockDate0);
      
      String string0 = fastDateFormat0.format((Date) mockDate0);
      assertNotNull(string0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("0992\u5E743\u6708+0000\u65E5 Thursday AM12\u65F600\u520600\u79D2 GMT", string0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'Z'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(41, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("Thu Mar 03 00:00:00 GMT 992", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("ky'y'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z");
      assertNotNull(fastDateFormat0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(30, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("ky'y'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      String string0 = fastDateFormat0.format(0L);
      assertNotNull(string0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals("2470y\u5E74M\u6708d\u65E5 EEEE ahh\u65F6mm\u5206ss\u79D2 z", string0);
      assertEquals(30, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("ky'y'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "EEEE d MMMM yyyy HH' h 'mm z", 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2);
      assertNotNull(simpleTimeZone0);
      assertEquals(2, simpleTimeZone0.getDSTSavings());
      assertEquals("EEEE d MMMM yyyy HH' h 'mm z", simpleTimeZone0.getID());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=EEEE d MMMM yyyy HH' h 'mm z,offset=2,dstSavings=2,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=2,startTime=2,startTimeMode=2,endMode=2,endMonth=2,endDay=2,endDayOfWeek=2,endTime=2,endTimeMode=2]", simpleTimeZone0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("EEEE d MMMM yyyy HH' h 'mm z", (TimeZone) simpleTimeZone0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, simpleTimeZone0.getDSTSavings());
      assertEquals("EEEE d MMMM yyyy HH' h 'mm z", simpleTimeZone0.getID());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=EEEE d MMMM yyyy HH' h 'mm z,offset=2,dstSavings=2,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=2,startTime=2,startTimeMode=2,endMode=2,endMonth=2,endDay=2,endDayOfWeek=2,endTime=2,endTimeMode=2]", simpleTimeZone0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("EEEE d MMMM yyyy HH' h 'mm z", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(47, fastDateFormat0.getMaxLengthEstimate());
      
      String string0 = fastDateFormat0.format(4023L);
      assertNotNull(string0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals("Thursday 1 January 1970 00 h 00 GMT+00:00", string0);
      assertEquals(2, simpleTimeZone0.getDSTSavings());
      assertEquals("EEEE d MMMM yyyy HH' h 'mm z", simpleTimeZone0.getID());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=EEEE d MMMM yyyy HH' h 'mm z,offset=2,dstSavings=2,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=2,startTime=2,startTimeMode=2,endMode=2,endMonth=2,endDay=2,endDayOfWeek=2,endTime=2,endTimeMode=2]", simpleTimeZone0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("EEEE d MMMM yyyy HH' h 'mm z", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(47, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "EEEE d MMMM yyyy HH' h 'mm z", 2, 2, 2, 2, 2, 2, 2, 2, 2);
      assertNotNull(simpleTimeZone0);
      assertEquals("EEEE d MMMM yyyy HH' h 'mm z", simpleTimeZone0.getID());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(2, simpleTimeZone0.getDSTSavings());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=EEEE d MMMM yyyy HH' h 'mm z,offset=2,dstSavings=2,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=2,startTime=2,startTimeMode=0,endMode=2,endMonth=2,endDay=2,endDayOfWeek=2,endTime=2,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("EEEE d MMMM yyyy HH' h 'mm z", (TimeZone) simpleTimeZone0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals("EEEE d MMMM yyyy HH' h 'mm z", simpleTimeZone0.getID());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(2, simpleTimeZone0.getDSTSavings());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=EEEE d MMMM yyyy HH' h 'mm z,offset=2,dstSavings=2,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=2,startTime=2,startTimeMode=0,endMode=2,endMonth=2,endDay=2,endDayOfWeek=2,endTime=2,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(35, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE d MMMM yyyy HH' h 'mm z", fastDateFormat0.getPattern());
      
      String string0 = fastDateFormat0.format(4023L);
      assertNotNull(string0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals("\u661F\u671F\u56DB 1 \u4E00\u6708 1970 00 h 00 GMT+00:00", string0);
      assertEquals("EEEE d MMMM yyyy HH' h 'mm z", simpleTimeZone0.getID());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(2, simpleTimeZone0.getDSTSavings());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=EEEE d MMMM yyyy HH' h 'mm z,offset=2,dstSavings=2,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=2,startTime=2,startTimeMode=0,endMode=2,endMonth=2,endDay=2,endDayOfWeek=2,endTime=2,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(35, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE d MMMM yyyy HH' h 'mm z", fastDateFormat0.getPattern());
  }
}
