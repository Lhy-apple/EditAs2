/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:33:37 GMT 2023
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Entities_ESTest extends Entities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Entities entities0 = Entities.XML;
      entities0.unescape((Writer) stringWriter0, "&~*Uc_];@:KJz&57S{*");
      assertEquals("&~*Uc_];@:KJz&57S{*", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(82);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Entities entities0 = Entities.XML;
      Entities.fillWithHtml40Entities(entities0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("", 102);
      int int0 = entities_BinaryEntityMap0.value("");
      assertEquals(102, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      entities_TreeEntityMap0.add("", 53);
      int int0 = entities_TreeEntityMap0.value("");
      assertEquals(53, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      int int0 = entities_HashEntityMap0.value("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      String string0 = entities0.unescape("qN)&quot;g&amp;UzH/`d.");
      assertEquals("qN)\"g&UzH/`d.", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      String string0 = entities0.HTML40.entityName(Integer.MAX_VALUE);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Entities entities0 = Entities.XML;
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      entities0.XML.map = (Entities.EntityMap) entities_ArrayEntityMap0;
      Entities.fillWithHtml40Entities(entities0);
      String string0 = entities0.escape(" Bu(df&|IL&\"{X;#1W");
      assertEquals(" Bu(df&amp;|IL&amp;&quot;{X;#1W", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Entities entities0 = Entities.XML;
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      entities0.XML.map = (Entities.EntityMap) entities_ArrayEntityMap0;
      Entities.fillWithHtml40Entities(entities0);
      String string0 = entities0.unescape(" Bu(df&|IL&\"{X;#1W");
      assertEquals(" Bu(df&|IL&\"{X;#1W", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Entities entities0 = Entities.XML;
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities0.XML.map = (Entities.EntityMap) entities_BinaryEntityMap0;
      Entities.fillWithHtml40Entities(entities0);
      String string0 = entities0.escape(" Bu(df&|IL&\"{X;#1W");
      assertEquals(" Bu(df&amp;|IL&amp;&quot;{X;#1W", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.size = 6;
      entities_BinaryEntityMap0.add("t/9WbTy+(ho}N}5", 6);
      entities_BinaryEntityMap0.add("LT%]>", 6);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      StringWriter stringWriter0 = new StringWriter();
      entities0.escape((Writer) stringWriter0, "{Kv<M5WW`");
      assertEquals("{Kv&lt;M5WW`", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      String string0 = entities0.unescape("gE");
      assertEquals("gE", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.unescape("/K(t*GP{&$g7");
      assertEquals("/K(t*GP{&$g7", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      String string0 = entities0.unescape("-&;nbt$");
      assertEquals("-&;nbt$", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.unescape("ZR&#X\"yrI$.fs;");
      assertEquals("ZR&#X\"yrI$.fs;", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.unescape("<&#;");
      assertEquals("<&#;", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.unescape("<&#7isI;");
      assertEquals("<&#7isI;", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "-");
      assertEquals("-", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Entities entities0 = Entities.XML;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, " Bu(df&|IL&\"{X;#1W");
      assertEquals(" Bu(df&|IL&\"{X;#1W", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Entities entities0 = Entities.XML;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "\u0002/-&;;;b$n");
      assertEquals("\u0002/-&;;;b$n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Entities entities0 = Entities.HTML32;
      entities0.unescape((Writer) stringWriter0, "ZR&#X\"yrI$.fs;");
      assertEquals("ZR&#X\"yrI$.fs;", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "<&#;");
      assertEquals("<&#;", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Entities entities0 = Entities.HTML40;
      entities0.unescape((Writer) stringWriter0, "<&#7YfwsI;");
      assertEquals("<&#7YfwsI;", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "qN)&quot;g&amp;UzH/`d.");
      assertEquals("qN)\"g&UzH/`d.", stringWriter0.toString());
  }
}
