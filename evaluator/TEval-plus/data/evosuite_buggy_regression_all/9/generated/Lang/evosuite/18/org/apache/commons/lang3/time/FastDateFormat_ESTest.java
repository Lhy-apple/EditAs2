/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:25:38 GMT 2023
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("dd.MM.yyyy HH:mm' Uhr 'z");
      String string0 = fastDateFormat0.format((long) 2);
      assertEquals("01.01.1970 00:00 Uhr GMT", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("4", (TimeZone) null, locale0);
      boolean boolean0 = fastDateFormat0.equals("4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      String string0 = fastDateFormat0.getPattern();
      assertEquals("EEEE, MMMM d, yyyy", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null);
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      try { 
        fastDateFormat0.parseObject("W7sy.C?5do");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.getLocale();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.toString();
      assertEquals("FastDateFormat[M/d/yy h:mm a]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = fastDateFormat0.format(calendar0);
      assertEquals("2/14/14 8:21 PM", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-923), (-923), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -923
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      fastDateFormat0.getTimeZone();
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      fastDateFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("S", locale0);
      String string0 = fastDateFormat0.format((-1L));
      assertEquals("999", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(14, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 14
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(2502, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 2502
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(83, 83, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 83
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1341), timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1341
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Long long0 = new Long(2);
      String string0 = fastDateFormat0.format((Object) long0);
      assertEquals("1/1/70 12:00 AM", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FastDateFormat.getInstance("ZZ&O#Hf{[");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FastDateFormat.getInstance("4A9\"\".~_iY3|Db3");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FastDateFormat.getInstance(";\"5G DB)2$58x%");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FastDateFormat.getInstance("CS");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'' '('EE')'ah'\uC2DC' x'\uBD84'ss'\uCD08~");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FastDateFormat.getInstance("Ie/&1N]");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FastDateFormat.getInstance("-!J%1l]&W)gR||NpFo");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FastDateFormat.getInstance("K@lJ'.QDA{W6Gfc*");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FastDateFormat.getInstance("[L%@]70SK RE(.!+Ts");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FastDateFormat.getInstance("N*?kE<BZs");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FastDateFormat.getInstance("~$$P22]");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' '('EE')'Qah'\uC2DC' m'\uBD84' ss'\uCD08'");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FastDateFormat.getInstance("RHY");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FastDateFormat.getInstance("The validated array contains null element at index: %d");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FastDateFormat.getInstance("M)MM d, yyUy");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FastDateFormat.getInstance("VA;'g?lLlRk((N3i<?");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FastDateFormat.getInstance("W*-{t$I/~Suf=9gL K");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FastDateFormat.getInstance("X*iu%B?}T-~NY~P");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FastDateFormat.getInstance("Ym,");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FastDateFormat.getInstance("9bS");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FastDateFormat.getInstance("!=cU'zO1ZS}.<wf");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FastDateFormat.getInstance("8eKj/F");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FastDateFormat.getInstance("@ {{f9R['m|4J>");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastDateFormat.getInstance("h)gA6p&a%:BI$");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FastDateFormat.getInstance(";i0on(O(RRmQFLG~");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FastDateFormat.getInstance("Zjd{@3H-!+y");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("h:m:s d");
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FastDateFormat.getInstance("=nQ<qV");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FastDateFormat.getInstance("org.apache.commons.lang3.time.FormatCache$MultipartKey");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FastDateFormat.getInstance("pG#[AqI/<(;a'zdTAqr");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FastDateFormat.getInstance("qDP");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FastDateFormat.getInstance("rlr&&246$");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FastDateFormat.getInstance("/u2`pra");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FastDateFormat.getInstance("v");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FastDateFormat.getInstance("-wBB(;}55E");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate(2);
      String string0 = fastDateFormat0.format((Object) mockDate0);
      assertEquals("1/1/70 12:00 AM", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string0 = fastDateFormat0.format((Object) mockGregorianCalendar0);
      assertEquals("2/14/14 8:21 PM", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        fastDateFormat0.format(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("K", timeZone0, locale0);
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1);
      fastDateFormat1.equals(fastDateFormat0);
      assertEquals("MMMM d, yyyy", fastDateFormat1.getPattern());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("_");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "_", 0, 2, 2, 1, 1, 2, 2, 3, 1, 2, 1);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("_", (TimeZone) simpleTimeZone0);
      fastDateFormat0.equals(fastDateFormat1);
      assertEquals(1, fastDateFormat1.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("K", timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("K", timeZone0);
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 1, 1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDateFormat0.format(date0, stringBuffer0);
      assertEquals(17, stringBuffer0.length());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 1, 1);
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals("Thursday, February 1, 0003 12:00:00 AM GMT", stringBuffer0.toString());
      assertEquals(42, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2);
      MockDate mockDate0 = new MockDate((-910), 2, (-910), (-910), (-910), (-910));
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      assertEquals(33, stringBuffer0.length());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("\" G:k");
      fastDateFormat0.format((-78L), stringBuffer0);
      assertEquals(7, stringBuffer0.length());
      assertEquals("\" AD:23", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(";k+(");
      String string0 = fastDateFormat0.format(0L);
      assertEquals(";24+(", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(" Z'@3r,!y");
      String string0 = fastDateFormat0.format((long) 3);
      assertEquals(" +0000@3r,!y", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-533), "Z'{@3D-!+y");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("Z'{@3D-!+y", (TimeZone) simpleTimeZone0);
      String string0 = fastDateFormat0.format((-1593L));
      assertEquals("-0000{@3D-!+y", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALY;
      String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
      assertEquals("GMT", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-536), locale0);
  }
}
