/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:03:47 GMT 2023
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CombiningEvaluator_ESTest extends CombiningEvaluator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedHashSet<Evaluator> linkedHashSet0 = new LinkedHashSet<Evaluator>();
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(linkedHashSet0);
      String string0 = combiningEvaluator_Or0.toString();
      assertEquals(":or[]", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedHashSet<Evaluator> linkedHashSet0 = new LinkedHashSet<Evaluator>();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(linkedHashSet0);
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(linkedHashSet0);
      combiningEvaluator_Or0.add(combiningEvaluator_And0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[1];
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      // Undeclared exception!
      try { 
        combiningEvaluator_And0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Evaluator> linkedList0 = new LinkedList<Evaluator>();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(linkedList0);
      linkedList0.add((Evaluator) combiningEvaluator_And0);
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(linkedList0);
      Document document0 = Document.createShell("^VW@");
      boolean boolean0 = combiningEvaluator_Or0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan((-13));
      Document document0 = Document.createShell("");
      Evaluator[] evaluatorArray0 = new Evaluator[3];
      evaluatorArray0[0] = (Evaluator) evaluator_IndexGreaterThan0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      // Undeclared exception!
      try { 
        combiningEvaluator_And0.matches((Element) null, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.CombiningEvaluator$And", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[1];
      Pattern pattern0 = Pattern.compile(":or%s", (-441));
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching(" ", pattern0);
      evaluatorArray0[0] = (Evaluator) evaluator_AttributeWithValueMatching0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      Document document0 = Document.createShell("bX8#~H:7kx$g,");
      boolean boolean0 = combiningEvaluator_And0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedHashSet<Evaluator> linkedHashSet0 = new LinkedHashSet<Evaluator>();
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag((String) null);
      linkedHashSet0.add(evaluator_Tag0);
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("Ni|kNH,xgwQu");
      linkedHashSet0.add(evaluator_Attribute0);
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<Evaluator> linkedList0 = new LinkedList<Evaluator>();
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(0);
      linkedList0.add((Evaluator) evaluator_IndexGreaterThan0);
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(linkedList0);
      Document document0 = Document.createShell("");
      boolean boolean0 = combiningEvaluator_Or0.matches(document0, document0);
      assertFalse(boolean0);
  }
}
