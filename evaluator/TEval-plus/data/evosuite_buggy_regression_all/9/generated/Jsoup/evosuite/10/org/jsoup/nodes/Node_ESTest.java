/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:04:17 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextNode textNode0 = new TextNode("bsxabs:", "bsxabs:");
      textNode0.setBaseUri("bsxabs:");
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextNode textNode0 = new TextNode("bsxabs:", "bsxabs:");
      Node node0 = textNode0.removeAttr("bsxabs:");
      assertEquals(0, (int)node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextNode textNode0 = new TextNode("bsxabs:", "bsxabs:");
      textNode0.toString();
      assertEquals(0, (int)textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("PL");
      Element element0 = document0.prepend("PL");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "(YPvu!D@&+Z8q9\\u^";
      Document document0 = Document.createShell(string0);
      // Undeclared exception!
      try { 
        document0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("P<", "P<", false);
      assertEquals("P<", xmlDeclaration0.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("bsxabs:", "bsxabs:");
      Node node0 = textNode0.clone();
      assertNotNull(node0);
      assertEquals(0, (int)node0.siblingIndex());
      assertNotSame(node0, textNode0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("P<");
      assertEquals(0, (int)document0.siblingIndex());
      
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = new TextNode("bsxabs:", "bsxabs:");
      // Undeclared exception!
      try { 
        textNode0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = new TextNode("bsxabs:", "bsxabs:");
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("bs|abs:");
      document0.attr("bs|abs:", "bs|abs:");
      String string0 = document0.absUrl("bs|abs:");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("abs:");
      // Undeclared exception!
      try { 
        document0.absUrl("abs:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("bsxabs:");
      String string0 = document0.absUrl("bsxabs:");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("Tak`VM'i],n<\"I");
      Document document1 = (Document)document0.appendChild(document0);
      document1.setParentNode(document0);
      assertEquals(1, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "(YPvu!D@&+Z8q9\\u^";
      Document document0 = Document.createShell(string0);
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "(YPvu!D@&+Z8q9\\u^";
      Document document0 = new Document(string0);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      try { 
        document0.replaceWith(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("maKK3z;6uCwRu;");
      TextNode textNode0 = new TextNode("abs:fwz)(c$", "maKK3z;6uCwRu;");
      document0.appendChild(document0);
      document0.replaceWith(textNode0);
      assertEquals(1, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("PL");
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("oP<z");
      Element element0 = document0.empty();
      document0.appendChild(element0);
      document0.previousSibling();
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("oP<z");
      document0.appendChild(document0);
      document0.previousSibling();
      assertEquals(1, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("bsxabs:", "bsxabs:");
      boolean boolean0 = textNode0.equals("bsxabs:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("PL", "PL");
      boolean boolean0 = textNode0.equals(textNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("bsxabs:");
      Element element0 = document0.appendElement("bsxabs:");
      element0.hashCode();
      assertEquals(0, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextNode textNode0 = new TextNode("bsxabs:", "bsxabs:");
      textNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("maKK3z;6uCwRu;");
      Node node0 = document0.clone();
      assertEquals(0, (int)node0.siblingIndex());
      assertNotSame(node0, document0);
  }
}
