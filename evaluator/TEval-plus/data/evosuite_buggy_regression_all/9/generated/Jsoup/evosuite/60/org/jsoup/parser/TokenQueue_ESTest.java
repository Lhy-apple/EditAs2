/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:11:01 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("hMqgPt");
      boolean boolean0 = tokenQueue0.matchesCS("hMqgPt");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(">!mR");
      // Undeclared exception!
      try { 
        tokenQueue0.addFirst((Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("H0w I@L,Ogu/");
      String string0 = tokenQueue0.toString();
      assertEquals("H0w I@L,Ogu/", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("FJ!]J3Z'p;G{e%W");
      tokenQueue0.addFirst("FJ!]J3Z'p;G{e%W");
      tokenQueue0.chompBalanced('F', 'F');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Xol=$P9q]U");
      char char0 = tokenQueue0.peek();
      assertEquals('X', char0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("H0w I@L,Ogu/");
      tokenQueue0.chompTo("H0w I@L,Ogu/");
      char char0 = tokenQueue0.peek();
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("4\"j");
      String[] stringArray0 = new String[0];
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("y");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "y";
      tokenQueue0.consumeToAny(stringArray0);
      assertTrue(tokenQueue0.matchesWord());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("4\"j");
      String string0 = tokenQueue0.consumeTagName();
      assertEquals("4", string0);
      assertEquals("\"j", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      char[] charArray0 = new char[0];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals("", tokenQueue0.toString());
      assertEquals("_", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Ve jX]^Wo&y");
      tokenQueue0.chompTo("Ve jX]^Wo&y");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("</y#T^qy~");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
      assertEquals("</y#T^qy~", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("):yQSC`vJn");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
      assertEquals(')', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<y^y~");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("       ");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("@}=W6\"x!PN+n");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertEquals('@', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.advance();
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<vy*|^qny~");
      tokenQueue0.advance();
      assertEquals("vy*|^qny~", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("y");
      assertEquals("y", tokenQueue0.toString());
      
      tokenQueue0.consume("y");
      assertEquals('\u0000', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("4\"j");
      // Undeclared exception!
      try { 
        tokenQueue0.consume("ho-]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("H0w I@L,Ogu/");
      tokenQueue0.chompTo("H0w I@L,Ogu/");
      tokenQueue0.consumeTo("H0w I@L,Ogu/");
      assertFalse(tokenQueue0.matchesWord());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<vy*|^qy~");
      tokenQueue0.chompToIgnoreCase("H=E9e^vq+a");
      assertFalse(tokenQueue0.matchesStartTag());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Ve jXR]^W7&y");
      tokenQueue0.chompToIgnoreCase(" ");
      assertEquals('j', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org*|soup.helper.stringutil");
      tokenQueue0.chompToIgnoreCase("(a");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#\"@Y3lQwNONvj");
      tokenQueue0.chompToIgnoreCase("#\"@Y3lQwNONvj");
      tokenQueue0.chompBalanced('$', '\\');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#\"@Y3lQwNONvj");
      tokenQueue0.chompBalanced('$', '\\');
      tokenQueue0.chompBalanced('\"', '$');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("FJ!]J3Z'p;G{e%W");
      tokenQueue0.chompBalanced('F', 'F');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("String must not be empty");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.chompBalanced(' ', 'M');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("$");
      tokenQueue0.chompBalanced('+', '$');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = TokenQueue.unescape(">LT.7VM\\$u`:e");
      assertEquals(">LT.7VM$u`:e", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("BA");
      tokenQueue0.consumeWord();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      tokenQueue0.consumeTagName();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      tokenQueue0.consumeElementSelector();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      tokenQueue0.consumeCssIdentifier();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("H0w I@L,Ogu/");
      tokenQueue0.consumeCssIdentifier();
      assertEquals(' ', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("FJ!]J3Z'p;G{e%W");
      tokenQueue0.consumeAttributeKey();
      assertEquals("!]J3Z'p;G{e%W", tokenQueue0.toString());
  }
}
