/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:03:30 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("zrlar(", "zrlar(");
      textNode0.setBaseUri("zrlar(");
      assertEquals("zrlar(", textNode0.baseUri());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("rlqarr", "rlqarr");
      Node node0 = textNode0.removeAttr("rlqarr");
      assertSame(node0, textNode0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("['/7lYo_P>");
      Element element0 = document0.prepend("['/7lYo_P>");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("rlqarr", "rlqarr");
      // Undeclared exception!
      try { 
        textNode0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("['/7lYo_P>");
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = new TextNode("rlrr", "rlrr");
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = new TextNode("rlrr", "rlrr");
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("abs:['/7lyo_p>");
      Elements elements0 = document0.getElementsByAttributeValueNot("abs:['/7lyo_p>", "abs:['/7lyo_p>");
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("8p");
      Element element0 = document0.attr("8p", "8p");
      String string0 = element0.absUrl("8p");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      assertNotNull(element0);
      
      element0.setParentNode(document0);
      assertEquals(1, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("['/7lYo_P>");
      Comment comment0 = new Comment("['/7lYo_P>", "['/7lYo_P>");
      // Undeclared exception!
      try { 
        comment0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("P~$1A,y");
      Element element0 = document0.appendElement("P~$1A,y");
      element0.replaceWith(document0);
      assertEquals(1, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Node$OuterHtmlVisitor");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.replaceWith(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("['/7lYo_P>");
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("org.js6up.nodes.Node$OuterHtmlVisitor", "org.js6up.nodes.Node$OuterHtmlVisitor");
      Document document0 = new Document("org.js6up.nodes.Node$OuterHtmlVisitor");
      document0.prependChild(textNode0);
      Node node0 = textNode0.previousSibling();
      assertNull(node0);
      assertEquals(0, (int)textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("abs:['/7lyo_p>");
      Element element0 = document0.appendElement("abs:['/7lyo_p>");
      Element element1 = (Element)element0.previousSibling();
      assertTrue(element1.isBlock());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("rlarr", "rlarr");
      boolean boolean0 = textNode0.equals("rlarr");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("rlarr", "rlarr");
      boolean boolean0 = textNode0.equals(textNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("olcir");
      Element element0 = document0.appendElement("olcir");
      Elements elements0 = element0.select("olcir");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextNode textNode0 = new TextNode("rlrr", "rlrr");
      textNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("['/7lYo_P>");
      document0.text("['/7lYo_P>");
      String string0 = document0.html();
      assertEquals("<html>\n <head></head>\n <body>\n  ['/7lYo_P&gt;\n </body>\n</html>", string0);
  }
}
