/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:11:38 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = Document.createShell("");
      htmlTreeBuilder0.parseFragment("j<Wu", document0, "L]MxvnV#", parseErrorList0, parseSettings0);
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, false);
      htmlTreeBuilder0.insertInFosterParent(formElement0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tr");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.initialiseParse(stringReader0, "tr", (ParseErrorList) null, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("tr");
      element0.prepend("#root");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      List<Node> list0 = htmlTreeBuilder0.parseFragment("opgrouip", (Element) null, "opgrouip", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.processEndTag("opgrouip");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      htmlTreeBuilder0.setPendingTableCharacters(arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("title");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("blo`kquote");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFosterInserts(false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.push((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Element element0 = new Element("head");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("width must be > 0", element0, "dt", (ParseErrorList) null, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Element element0 = new Element("title");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("title", element0, "title", parseErrorList0, (ParseSettings) null);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("C`wWq[DHX\"ebe@l;kz");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(5);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.initialiseParse(stringReader0, "C`wWq[DHX\"ebe@l;kz", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("style");
      htmlTreeBuilder0.parseFragment("(^T|Z&gy$", element0, "&nbsp;", parseErrorList0, parseSettings0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("noscript");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1985444595));
      htmlTreeBuilder0.initialiseParse(stringReader0, "noscript", parseErrorList0, (ParseSettings) null);
      Element element0 = htmlTreeBuilder0.insertStartTag("script");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("noscript", element0, "autofocus", parseErrorList0, (ParseSettings) null);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Element element0 = new Element("noscript");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("th", element0, "noscript", parseErrorList0, (ParseSettings) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("plaintext");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      List<Node> list0 = htmlTreeBuilder0.parseFragment("plaintext", element0, "plaintext", (ParseErrorList) null, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("cQ");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "cQ", attributes0);
      htmlTreeBuilder0.parseFragment("|kPF~P\"J:RS<\"5OqvF", formElement0, "|kPF~P\"J:RS<\"5OqvF", parseErrorList0, parseSettings0);
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("|kPF~P\"J:RS<\"5OqvF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("");
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertEquals("", document0.location());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("C`wWq[DHX\"ebe@l;kz");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(28);
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.initialiseParse(stringReader0, "C`wWq[DHX\"ebe@l;kz", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("tfoot");
      htmlTreeBuilder0.parseFragment("U5<8{OH/?", element0, "<i{lrk@3", parseErrorList0, parseSettings0);
      assertEquals(3, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("noscript");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.initialiseParse(stringReader0, "noscript", parseErrorList0, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("noscript", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("opgroup");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.initialiseParse(stringReader0, "opgroup", parseErrorList0, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("opgroup", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("optgroup");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.initialiseParse(stringReader0, "optgroup", parseErrorList0, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("optgroup", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("j#b?|f2V?+hG-Xe^!Y");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.initialiseParse(stringReader0, "j#b?|f2V?+hG-Xe^!Y", (ParseErrorList) null, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("select", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, true);
      assertEquals(0, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("(");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.initialiseParse(stringReader0, "script", parseErrorList0, (ParseSettings) null);
      htmlTreeBuilder0.insertStartTag("script");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Token.Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("C`wWq[DHX\"ebe@l;kz");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(5);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.initialiseParse(stringReader0, "C`wWq[DHX\"ebe@l;kz", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("style");
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.Character token_Character0 = tokeniser0.charPending;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("-");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.initialiseParse(stringReader0, "-", parseErrorList0, parseSettings0);
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      htmlTreeBuilder0.insert(token_Comment0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("frame");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.initialiseParse(stringReader0, "'", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("frame");
      htmlTreeBuilder0.parseFragment("'", element0, "r`..}/k>>J@)", parseErrorList0, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("-");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.initialiseParse(stringReader0, "-", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("-");
      Element element0 = htmlTreeBuilder0.getFromStack("-");
      assertEquals("-", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      List<Node> list0 = htmlTreeBuilder0.parseFragment("c0Q", (Element) null, "c0Q", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.removeFromStack((Element) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("'");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.initialiseParse(stringReader0, "'", parseErrorList0, (ParseSettings) null);
      Element element0 = htmlTreeBuilder0.insertStartTag("select");
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("sG[5\"<d3F#4%z8\"z", (Element) null, "sG[5\"<d3F#4%z8\"z", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.popStackToClose("colgroup");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("C`wWq[DHX\"ebe@l;k)z");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      htmlTreeBuilder0.initialiseParse(stringReader0, "C`wWq[DHX\"ebe@l;k)z", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("C`wWq[DHX\"ebe@l;k)z");
      htmlTreeBuilder0.popStackToClose("C`wWq[DHX\"ebe@l;k)z");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.initialiseParse(stringReader0, "%V2pFocb", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("G6D%$Et");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "%V2pFocb";
      stringArray0[1] = "G6D%$Et";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("th");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(41);
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.initialiseParse(stringReader0, "th", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("th");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "th";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("C`wWq[DHX\"ebe@l;kz");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      htmlTreeBuilder0.initialiseParse(stringReader0, "C`wWq[DHX\"ebe@l;kz", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("C`wWq[DHX\"ebe@l;kz");
      htmlTreeBuilder0.popStackToBefore("C`wWq[DHX\"ebe@l;kz");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.initialiseParse(stringReader0, "", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("G6D%$Et");
      htmlTreeBuilder0.popStackToBefore(", currentElement=");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("|kPi~W\"J:RS<\"5OqvF");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.initialiseParse(stringReader0, "|kPi~W\"J:RS<\"5OqvF", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.clearStackToTableContext();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("frame");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.initialiseParse(stringReader0, "'", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("frame");
      htmlTreeBuilder0.clearStackToTableBodyContext();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("C`wWq[DHX\"ebe@l;kz");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(28);
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.initialiseParse(stringReader0, "C`wWq[DHX\"ebe@l;kz", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("tfoot");
      htmlTreeBuilder0.clearStackToTableBodyContext();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("frame");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.initialiseParse(stringReader0, "'", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("frame");
      htmlTreeBuilder0.parseFragment("'", element0, "r`..}/k>>J@)", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.clearStackToTableBodyContext();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("th");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.initialiseParse(stringReader0, "th", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("th");
      htmlTreeBuilder0.insertStartTag("th");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("C`wWq[DHX\"ebe@l;k)z");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      htmlTreeBuilder0.initialiseParse(stringReader0, "C`wWq[DHX\"ebe@l;k)z", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.currentElement();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(element0, element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("th");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(41);
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.initialiseParse(stringReader0, "th", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("th");
      htmlTreeBuilder0.insertOnStackAfter(element0, element0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      htmlTreeBuilder0.initialiseParse(stringReader0, "", parseErrorList0, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      htmlTreeBuilder0.initialiseParse(stringReader0, "", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, (Element) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("t");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.initialiseParse(stringReader0, "t", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.resetInsertionMode();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("th");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.initialiseParse(stringReader0, "th", parseErrorList0, (ParseSettings) null);
      htmlTreeBuilder0.insertStartTag("th");
      htmlTreeBuilder0.insertStartTag("th");
      htmlTreeBuilder0.resetInsertionMode();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Element element0 = new Element("select");
      List<Node> list0 = htmlTreeBuilder0.parseFragment(" a,gy; E`oIN\"'", element0, "(q8jwia{", parseErrorList0, (ParseSettings) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Element element0 = new Element("td");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("base", element0, "base", parseErrorList0, (ParseSettings) null);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("th");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.initialiseParse(stringReader0, "th", parseErrorList0, (ParseSettings) null);
      Element element0 = htmlTreeBuilder0.insertStartTag("th");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("width must be > 0", element0, "xmp", parseErrorList0, (ParseSettings) null);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Element element0 = new Element("tbody");
      htmlTreeBuilder0.parseFragment("tbody", element0, "tbody", parseErrorList0, parseSettings0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("thead");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("KtW),)mzOIk(^AF.4", element0, "thead", (ParseErrorList) null, parseSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Element element0 = new Element("caption");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("optgroup", element0, "(2f]r-|", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("colgroup");
      Element element0 = document0.createElement("colgroup");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("colgroup", element0, "1|~`_j`Fz5Ox902/>OX", parseErrorList0, (ParseSettings) null);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Element element0 = new Element("table");
      htmlTreeBuilder0.parseFragment("table", element0, "VL57oS@or0#b{Bq(", parseErrorList0, (ParseSettings) null);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Element element0 = new Element("frameset");
      List<Node> list0 = htmlTreeBuilder0.parseFragment(">+U4:9{o7r/", element0, ":has(%s)", parseErrorList0, (ParseSettings) null);
      assertEquals(0, list0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("html");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("html", element0, "html", (ParseErrorList) null, (ParseSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("width must be > 0", (Element) null, "width must be > 0", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("t'pM*");
      htmlTreeBuilder0.resetInsertionMode();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("'");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.initialiseParse(stringReader0, "'", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("'");
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      List<Node> list0 = htmlTreeBuilder0.parseFragment("cQ", (Element) null, "cQ", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("cQ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      List<Node> list0 = htmlTreeBuilder0.parseFragment("4h", (Element) null, "4h", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("4h");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("C`wWq[DHX\"ebe@l;kz");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-28));
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      htmlTreeBuilder0.initialiseParse(stringReader0, "C`wWq[DHX\"ebe@l;kz", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("C`wWq[DHX\"ebe@l;kz");
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("'");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.initialiseParse(stringReader0, "'", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("'");
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.initialiseParse(stringReader0, "%V2pFocb", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("option");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("G6D%$Et");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("param");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1719483650));
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.initialiseParse(stringReader0, "thead", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("area");
      htmlTreeBuilder0.generateImpliedEndTags("area");
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("C`wWq[DHX\"ebe@l;kz");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(5);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.initialiseParse(stringReader0, "C`wWq[DHX\"ebe@l;kz", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("Irame");
      htmlTreeBuilder0.generateImpliedEndTags("Irame");
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("optgroup");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.initialiseParse(stringReader0, "figcaption", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.insertStartTag("optgroup");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.generateImpliedEndTags("org.jsoup.select.Evaluator$TagEndsWith");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("th");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(41);
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.initialiseParse(stringReader0, "th", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("th");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("C`wWq[DHX\"ebe@l;kz");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(28);
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.initialiseParse(stringReader0, "C`wWq[DHX\"ebe@l;kz", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("C`wWq[DHX\"ebe@l;kz");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(28);
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.initialiseParse(stringReader0, "C`wWq[DHX\"ebe@l;kz", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parseFragment("width must be > 0", (Element) null, "width must be > 0", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("th");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(41);
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.initialiseParse(stringReader0, "th", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("th");
      Document document0 = element0.ownerDocument();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("Y-");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.initialiseParse(stringReader0, "Y-", parseErrorList0, parseSettings0);
      Document document0 = htmlTreeBuilder0.doc;
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(0, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("-");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.initialiseParse(stringReader0, "-", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("-");
      Document document0 = element0.ownerDocument();
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("th");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(41);
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.initialiseParse(stringReader0, "th", parseErrorList0, parseSettings0);
      Document document0 = new Document("th");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("th");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(41);
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.initialiseParse(stringReader0, "th", parseErrorList0, parseSettings0);
      Document document0 = new Document("th");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("param");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1719483650));
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.initialiseParse(stringReader0, "thead", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("area");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(element0);
      assertEquals("thead", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("C`wWq[DHX\"ebe@l;kz");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-28));
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      htmlTreeBuilder0.initialiseParse(stringReader0, "C`wWq[DHX\"ebe@l;kz", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("C`wWq[DHX\"ebe@l;kz");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("C`wWq[DHX\"ebe@l;kz");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-28));
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      htmlTreeBuilder0.initialiseParse(stringReader0, "C`wWq[DHX\"ebe@l;kz", parseErrorList0, parseSettings0);
      Element element0 = htmlTreeBuilder0.insertStartTag("C`wWq[DHX\"ebe@l;kz");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("--");
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("C`wWq[DHX\"ebe@l;k)z");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      htmlTreeBuilder0.initialiseParse(stringReader0, "C`wWq[DHX\"ebe@l;k)z", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("script");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("frame");
      htmlTreeBuilder0.initialiseParse(stringReader0, "frame", (ParseErrorList) null, (ParseSettings) null);
      Element element0 = htmlTreeBuilder0.insertStartTag("frame");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("frame");
      assertEquals("frame", element1.baseUri());
  }
}
