/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:10:50 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("UdopQJVIl+*A~r7M");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("abs:");
      document0.setBaseUri("abs:");
      assertEquals("abs:", document0.location());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Noe$OuterHtmlViito");
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("abs:value");
      // Undeclared exception!
      try { 
        document0.after("abs:value");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("~MX>H>L.D");
      Element element0 = document0.body();
      Node node0 = element0.unwrap();
      assertNull(node0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("l/ps?", "l/ps?", true);
      boolean boolean0 = xmlDeclaration0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = new TextNode("abs:value", "abs:value");
      textNode0.toString();
      assertEquals(0, textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("abs:value");
      document0.val("abs:value");
      String string0 = document0.absUrl("abs:value");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("zb!", "zb!");
      Node node0 = textNode0.removeAttr("zb!");
      assertSame(textNode0, node0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comment comment0 = new Comment("1xa1", "1xa1");
      String string0 = comment0.toString();
      assertEquals("\n<!--1xa1-->", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("zb!", "zb!");
      // Undeclared exception!
      try { 
        textNode0.wrap("zb!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextNode textNode0 = new TextNode("$bW!", "$bW!");
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("abs:value");
      document0.removeClass("abs:value");
      Document document1 = Document.createShell("abs:value");
      boolean boolean0 = document0.equals(document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("abs:val");
      String string0 = document0.attr("abs:val");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("abs:val");
      String string0 = document0.absUrl("abs:val");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("abs:valu*e");
      List<Node> list0 = document0.childNodesCopy();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("W TO>:HuCK");
      document0.prependChild(document0);
      document0.wrap("<SY0o$.>0$^4pbq");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("\"lnt");
      Element element0 = document0.head();
      Node node0 = element0.wrap("\"lnt");
      assertEquals(0, node0.childNodeSize());
      assertEquals(0, node0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("K~%:#92K4RZPYWz*{");
      document0.prependChild(document0);
      Node node0 = document0.wrap("K~%:#92K4RZPYWz*{");
      assertNull(node0);
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("l?W T>%O:HuCK");
      document0.prependChild(document0);
      Node node0 = document0.unwrap();
      assertEquals("l?W T>%O:HuCK", node0.baseUri());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("bs");
      Element element0 = document0.head();
      element0.setParentNode(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("\"lnt");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("Key val must not be null");
      Element element0 = document0.head();
      element0.replaceWith(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("abs:value");
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("~MX>H>L.D");
      Element element0 = document0.head();
      List<Node> list0 = element0.siblingNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("\"lnt");
      List<Node> list0 = document0.siblingNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("%,7l");
      Element element0 = document0.prependChild(document0);
      Node node0 = element0.previousSibling();
      assertNull(node0);
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Noe$OuterHtmlViito");
      Node node0 = document0.previousSibling();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("%,7l");
      Document document1 = (Document)document0.prependChild(document0);
      Document document2 = (Document)document1.before("%,7l");
      document2.previousSibling();
      assertEquals(3, document1.childNodeSize());
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("mp");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(".a>|e{WZUv", ".a>|e{WZUv", true);
      boolean boolean0 = xmlDeclaration0.equals(xmlDeclaration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("~c.#NKolu", "~c.#NKolu", true);
      boolean boolean0 = xmlDeclaration0.equals("~c.#NKolu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell(">H%J_g}:{/vX");
      Document document1 = document0.clone();
      assertTrue(document1.equals((Object)document0));
      
      document1.childNodes = null;
      boolean boolean0 = document1.equals(document0);
      assertFalse(boolean0);
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("abs:value");
      Document document1 = Document.createShell("abs:value");
      boolean boolean0 = document0.equals(document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell(">H%J_g}:{/vX");
      Document document1 = document0.clone();
      document0.childNodes = null;
      document1.childNodes = null;
      boolean boolean0 = document1.equals(document0);
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("absvalue");
      document0.append("absvalue");
      Document document1 = document0.clone();
      boolean boolean0 = document0.equals(document1);
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("i%");
      Document document1 = document0.clone();
      assertTrue(document1.equals((Object)document0));
      
      document1.attributes = null;
      boolean boolean0 = document1.equals(document0);
      assertFalse(boolean0);
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document(">H%Jj_g}:{/vX");
      Document document1 = document0.clone();
      document1.childNodes = null;
      document1.hashCode();
      assertNotSame(document1, document0);
      assertEquals(0, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("abs:zN)");
      document0.appendText("abs:zN)");
      document0.hashCode();
  }
}
