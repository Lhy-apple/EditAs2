/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:02:42 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<html>\n<head>\n</head>\n<body>\n Kqx8}Cv; <bbsa>\n </bbsa>\n</body>\n</html>", "<html>\n<head>\n</head>\n<body>\n Kqx8}Cv; <bbsa>\n </bbsa>\n</body>\n</html>");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{<!(-", "{<!(-");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Parser.parse("<![CDATA[", "<![CDATA[");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Parser.parse("<!--%s-->", "<!--%s-->");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<?", "<?");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!--", "<!--");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Parser.parse("%N<oHA\"=9WH<<", "%N<oHA\"=9WH<<");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Parser.parse("C @tO<o4erV.or</t:", "C @tO<o4erV.or</t:");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment(" <I75Ii8=\"mt", " <I75Ii8=\"mt");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("V<o\"=9] <q", "V<o\"=9] <q");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Parser.parse("VN<o\"i=9W\"Hxq", "VN<o\"i=9W\"Hxq");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Parser.parse("8>\"FoM<Br", "8>\"FoM<Br");
      assertEquals("8>\"FoM<Br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8>\"FoM<Br", "8>\"FoM<Br");
      assertEquals("8>\"FoM<Br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ,@tE9qT4r.o</t:%", " ,@tE9qT4r.o</t:%");
      assertEquals("#root", document0.tagName());
  }
}
