/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:13:03 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("1;\"Bx8&.WA");
      assertFalse(document0.hasParent());
      
      Element element0 = document0.getElementById("1;\"Bx8&.WA");
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("1;\"Bx8&.WA", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("multiple");
      // Undeclared exception!
      try { 
        document0.wrap("multiple");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("3!");
      document0.appendText("3!");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      element0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("h#gtml");
      // Undeclared exception!
      try { 
        document0.child((-4766));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("+c7mC%{h6_OU(kb$Wz");
      document0.prependText("+c7mC%{h6_OU(kb$Wz");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("tS*gb");
      Element element0 = document0.tagName("tS*gb");
      assertFalse(element0.hasParent());
      assertEquals("tS*gb", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("`?.4jR&:");
      assertFalse(document0.hasParent());
      
      document0.title("`?.4jR&:");
      Elements elements0 = document0.getElementsContainingOwnText("`?.4jR&:");
      assertEquals(1, elements0.size());
      assertEquals("`?.4jR&:", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("t<");
      document0.dataset();
      assertEquals("t<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("9t:p");
      Element element0 = document0.addClass("9t:p");
      assertEquals("9t:p", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Element element0 = new Element("OXFu=d");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("multiple");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      Element element0 = document0.attr(" ", false);
      assertEquals(" ", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("tS*gb");
      assertFalse(document0.hasParent());
      
      document0.getElementsByAttributeValue("tS*gb", "tS*gb");
      assertEquals(1, document0.childNodeSize());
      assertEquals("tS*gb", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("2CAil;Orq$d5)E$");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals(0, element0.siblingIndex());
      assertEquals("html > head", string0);
      assertEquals("2CAil;Orq$d5)E$", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      Elements elements0 = document0.getElementsMatchingOwnText(" > ");
      assertEquals(1, document0.childNodeSize());
      assertEquals(" > ", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("|DBk$r?dbMV:Q48N");
      Elements elements0 = document0.getElementsByIndexLessThan((-1934));
      assertEquals(0, elements0.size());
      assertEquals("|DBk$r?dbMV:Q48N", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("St(h>99");
      document0.getElementsByAttributeStarting("textarea");
      assertEquals(1, document0.childNodeSize());
      assertEquals("St(h>99", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("`?.jR&:");
      Elements elements0 = document0.getElementsByIndexEquals(20);
      assertEquals("`?.jR&:", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("in");
      Element element0 = document0.val("in");
      assertEquals("in", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("g>hAF8ka~cBk");
      document0.getElementsByAttributeValueMatching("g>hAF8ka~cBk", "g>hAF8ka~cBk");
      assertEquals("g>hAF8ka~cBk", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("multiple");
      document0.is("multiple");
      assertEquals("multiple", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("*x inh");
      document0.getElementsByAttributeValueEnding("*x inh", "*x inh");
      assertEquals("*x inh", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("`?.4jR&:");
      Elements elements0 = document0.getElementsByClass("`?.4jR&:");
      assertEquals("`?.4jR&:", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("`?.5k&:");
      Elements elements0 = document0.getElementsContainingText("`?.5k&:");
      assertEquals(1, document0.childNodeSize());
      assertEquals("`?.5k&:", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("9t:p");
      document0.getElementsByAttributeValueContaining("9t:p", "9t:p");
      assertEquals(1, document0.childNodeSize());
      assertEquals("9t:p", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("CharacterReferenceInRcdata");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("Mg~p&9=Ul0>e");
      document0.setBaseUri("Mg~p&9=Ul0>e");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Mg~p&9=Ul0>e", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("StCh>99");
      Document document1 = document0.clone();
      assertNotSame(document1, document0);
      assertEquals("StCh>99", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("zlA{^S&(aS|(=]VX");
      Elements elements0 = document0.getElementsByAttributeValueNot("zlA{^S&(aS|(=]VX", "zlA{^S&(aS|(=]VX");
      assertEquals("zlA{^S&(aS|(=]VX", document0.baseUri());
      assertEquals(4, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("1;\"Bx8&.WA");
      String string0 = document0.toString();
      assertEquals("1;\"Bx8&.WA", document0.baseUri());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("tS*gb");
      document0.getElementsByAttribute("java.lang.string@0000000034 unexpected character '%s' c) input state [%s]");
      String string0 = document0.html();
      assertEquals("tS*gb", document0.baseUri());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("in");
      // Undeclared exception!
      try { 
        document0.before("in");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("wR");
      Element element0 = document0.removeClass("wR");
      assertEquals("wR", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      document0.getAllElements();
      assertEquals(":nth-child(%d)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("in");
      document0.selectFirst("in");
      assertEquals(1, document0.childNodeSize());
      assertEquals("in", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("wR");
      Elements elements0 = document0.getElementsByIndexGreaterThan(3169);
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
      assertEquals("wR", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("2CAil;Orq$d5)E$");
      Element element0 = document0.head();
      element0.after("");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(1)", string0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2CAil;Orq$d5)E$", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Element element0 = document0.head();
      element0.html("#");
      assertEquals(1, element0.childNodeSize());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("br");
      document0.append("br");
      Element element0 = document0.prependElement("br");
      element0.lastElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("St(h>99");
      document0.prepend("St(h>99");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("br");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document(":S*x inh");
      LinkedHashSet<TextNode> linkedHashSet0 = new LinkedHashSet<TextNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(2147483645, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("{");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-120), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("*x Nihz");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("*x Nihz", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("texta,*rea");
      Node[] nodeArray0 = new Node[6];
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("n");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1968756894), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("9t:p");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(124, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("t<");
      document0.toggleClass("t<");
      document0.cssSelector();
      assertEquals("t<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document(":S*x inh");
      document0.siblingElements();
      assertEquals(":S*x inh", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell("St(h>99");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals("St(h>99", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.nextElementSibling();
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      Element element1 = element0.prependElement("br");
      element1.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      Element element1 = element0.previousElementSibling();
      assertEquals("br", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("multiple");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertNotNull(element1);
      assertEquals(0, element1.siblingIndex());
      assertEquals("multiple", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("multiple");
      Element element0 = document0.body();
      document0.appendTo(element0);
      assertEquals(1, element0.childNodeSize());
      
      document0.firstElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell("CharacterReferenceInRcdata");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      assertEquals("head", element1.nodeName());
      assertEquals("CharacterReferenceInRcdata", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell(")p<T&$gIvw^m");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      assertEquals(")p<T&$gIvw^m", element1.baseUri());
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("St(h>99");
      document0.reparentChild(document0);
      Elements elements0 = document0.getElementsByIndexGreaterThan(63);
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
      assertEquals("St(h>99", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("~");
      DataNode dataNode0 = DataNode.createFromEncoded("~", "~");
      document0.prependChild(dataNode0);
      document0.getElementsMatchingText("~");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.prependElement("br");
      document0.prepend("$fR");
      document0.getElementsMatchingText("java.lang.string@0000000006 io");
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("wR");
      document0.prepend("wR");
      document0.appendTo(document0);
      document0.getElementsMatchingText("wR");
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.prependElement("br");
      document0.prependElement("br");
      document0.getElementsContainingOwnText("br");
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      boolean boolean0 = Element.preserveWhitespace(comment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("tSgb");
      Element element0 = document0.text("                    ");
      boolean boolean0 = element0.hasText();
      assertEquals(1, element0.childNodeSize());
      assertFalse(boolean0);
      assertEquals("tSgb", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell(">");
      Comment comment0 = new Comment(">", ">");
      document0.appendChild(comment0);
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Document.createShell("");
      Comment comment0 = new Comment("", "");
      document0.appendChild(comment0);
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Document.createShell("*x inh");
      Element element0 = document0.prepend("*x inh");
      element0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.toggleClass("org.jsoup.select.CombiningEvaluator$Or");
      boolean boolean0 = element0.hasClass("org.jsoup.select.CombiningEvaluator$Or");
      assertFalse(boolean0);
      assertEquals("org.jsoup.select.CombiningEvaluator$Or", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("`?.jR&:");
      document0.toggleClass("Tag name must not be empty.");
      boolean boolean0 = document0.hasClass("Tag name must not be empty.");
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
      assertEquals("`?.jR&:", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("B{");
      document0.toggleClass("B{");
      document0.toggleClass("B{");
      boolean boolean0 = document0.hasClass("B{");
      assertTrue(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("multiple");
      document0.toggleClass("multiple");
      document0.toggleClass(" ");
      document0.hasClass(" ");
      assertEquals("multiple", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("n");
      document0.toggleClass("n");
      document0.toggleClass("Unexpected character '%s' in input state [%s]");
      boolean boolean0 = document0.hasClass("n");
      assertEquals("n", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.toggleClass("");
      document0.toggleClass("leQQ;V");
      Element element1 = element0.toggleClass("leQQ;V");
      assertEquals(1, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "wR", (Attributes) null);
      element0.val();
      assertEquals("wR", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "textarea", (Attributes) null);
      formElement0.val("textarea");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = Document.createShell(":`/A5.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      String string0 = document1.html();
      assertEquals(":`/A5.", document1.baseUri());
      assertEquals("<html><head></head><body></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      element0.prependElement("br");
      document0.html();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = Document.createShell("mltiple");
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
      assertEquals("\n<html>\n <head></head>\n <body></body>\n</html>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("<(~ +7M8;-3U");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.prependElement("br");
      String string0 = document1.html();
      assertEquals("<(~ +7M8;-3U", document1.baseUri());
      assertEquals("<br />\n<br />", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = Document.createShell("`?.4jR&:");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.title("`?.4jR&:");
      String string0 = document0.html();
      assertEquals("<html>\n <head>\n  <title>`?.4jR&amp;:</title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals("`?.4jR&:", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("StCh>99");
      Element element0 = document0.toggleClass("StCh>99");
      Document document1 = document0.clone();
      assertEquals("StCh>99", document1.baseUri());
      assertNotSame(document1, element0);
  }
}
