/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:08:56 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("base");
      Element element0 = document0.createElement("base");
      Tag tag0 = Tag.valueOf("base");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "base", attributes0);
      formElement0.prependChild(element0);
      String string0 = formElement0.toString();
      assertEquals("<base><base></base>", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("radio");
      document0.appendText((String) null);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.append("br");
      document0.appendChild(element0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("]&&E");
      // Undeclared exception!
      try { 
        document0.child(22);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 22, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("=lel?");
      Document document1 = (Document)document0.prependText("=lel?");
      assertEquals("=lel?", document1.location());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("selected");
      Element element0 = document0.tagName("selected");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("]p B");
      Element element0 = document0.addClass("]p B");
      assertEquals("]p B", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("pleted");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("Data value must not be null");
      // Undeclared exception!
      try { 
        document0.html("Data value must not be null");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValue("br", "br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("gsru^(");
      Elements elements0 = document0.getElementsByAttributeValueStarting("gsru^(", "gsru^(");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("selected");
      Element element0 = document0.prepend("selected");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("XmtBu`");
      Elements elements0 = document0.getElementsMatchingOwnText("XmtBu`");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("selected");
      // Undeclared exception!
      try { 
        document0.after("x:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("slected");
      Elements elements0 = document0.getElementsByIndexLessThan(8526);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("+zG#-'\"m:E,WWm");
      Element element0 = document0.prependElement("+zG#-'\"m:E,WWm");
      // Undeclared exception!
      try { 
        element0.append("+zG#-'\"m:E,WWm");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeStarting("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document(" sw");
      Elements elements0 = document0.getElementsByIndexEquals(2577);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.wrap("br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("pleted");
      document0.appendElement("pleted");
      String string0 = document0.toString();
      assertEquals("<pleted></pleted>", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document(">?4b6`l(=o");
      Element element0 = document0.val(">?4b6`l(=o");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("s+");
      Elements elements0 = document0.getElementsByAttributeValueMatching("s+", "s+");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValueEnding("br", "br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document(" sw");
      Elements elements0 = document0.getElementsByClass(" sw");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("base");
      Elements elements0 = document0.getElementsContainingText("base");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("=lel?");
      Elements elements0 = document0.getElementsByAttributeValueContaining("=lel?", "=lel?");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("textarea");
      Document document1 = document0.clone();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("$2\"PSDbJ?MEdS{<6");
      Elements elements0 = document0.getElementsByAttributeValueNot("$2\"PSDbJ?MEdS{<6", "$2\"PSDbJ?MEdS{<6");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("yYDi)");
      Elements elements0 = document0.getElementsByAttribute("yYDi)");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("_Ye^Xum\":");
      // Undeclared exception!
      try { 
        document0.before("_Ye^Xum\":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.removeClass("br");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("selected");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("</");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("gsru^(");
      Elements elements0 = document0.getElementsByIndexGreaterThan(9240);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("slected");
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("slected");
      FormElement formElement0 = new FormElement(tag0, "slected", attributes0);
      formElement0.prependChild(document0);
      Document document1 = (Document)document0.append("slected");
      assertEquals("slected", document1.location());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("=lel?");
      Element element0 = document0.append("=lel?");
      document0.reparentChild(element0);
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("sleted");
      Element element0 = document0.append("sleted");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Tag tag0 = Tag.valueOf("selected");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "_V Ft$,D-:Z\tZ", attributes0);
      DataNode dataNode0 = DataNode.createFromEncoded("_V Ft$,D-:Z\tZ", "zcTD43`!Jtxz");
      formElement0.prependChild(dataNode0);
      List<DataNode> list0 = formElement0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element", attributes0);
      formElement0.prependChild(document0);
      List<DataNode> list0 = formElement0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("br");
      LinkedHashSet<TextNode> linkedHashSet0 = new LinkedHashSet<TextNode>();
      Element element0 = document0.insertChildren(0, linkedHashSet0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("selected");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1636), linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("ysleted");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(31, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("Set-Cookie");
      document0.toggleClass("Set-Cookie");
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      String string0 = element0.cssSelector();
      assertEquals("br", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("sleted");
      Tag tag0 = Tag.valueOf("sleted");
      TextNode textNode0 = TextNode.createFromEncoded("\n * ", "\n * ");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "\n * ", attributes0);
      formElement0.prependChild(document0);
      String string0 = document0.cssSelector();
      assertEquals("sleted > #root", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("Set-ooUi");
      FormElement formElement0 = new FormElement(tag0, "Set-ooUi", attributes0);
      FormElement formElement1 = new FormElement(tag0, "Set-ooUi", attributes0);
      Element element0 = formElement1.prependChild(formElement0);
      FormElement formElement2 = new FormElement(tag0, "Set-ooUi", attributes0);
      formElement1.prependChild(formElement2);
      String string0 = formElement2.cssSelector();
      assertEquals("set-ooui > set-ooui:nth-child(1)", string0);
      assertFalse(formElement2.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("sleted");
      Tag tag0 = Tag.valueOf("sleted");
      TextNode textNode0 = TextNode.createFromEncoded("\n * ", "\n * ");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "\n * ", attributes0);
      formElement0.prependChild(formElement0);
      formElement0.prependChild(document0);
      Elements elements0 = document0.siblingElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("s+");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("!\"io/armw%3r");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.appendElement("QEwzpW(");
      Element element0 = document0.nextElementSibling();
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      assertEquals("qewzpw(", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("</");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("sleted");
      Tag tag0 = Tag.valueOf("sleted");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "sleted", attributes0);
      Element element0 = formElement0.prependChild(document0);
      Element element1 = document0.createElement("sleted");
      element0.prependChild(element1);
      Element element2 = document0.previousElementSibling();
      assertEquals("sleted", element2.baseUri());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("'");
      Node[] nodeArray0 = new Node[3];
      Tag tag0 = Tag.valueOf("~R{Tm{W");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "href", attributes0);
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element0 = document0.firstElementSibling();
      assertEquals("href", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("be");
      Element element0 = document0.appendElement("be");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element", attributes0);
      Element element0 = formElement0.prependChild(document0);
      element0.prependChild(formElement0);
      Element element1 = document0.lastElementSibling();
      assertEquals("#document", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("aNtriutenamelhrsKted");
      Element element0 = document0.getElementById("aNtriutenamelhrsKted");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("br");
      DataNode dataNode0 = DataNode.createFromEncoded("br", "br");
      document0.appendChild(dataNode0);
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("br");
      document0.append("br");
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
      document0.appendChild(element0);
      String string0 = document0.text();
      assertEquals("br", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("aKIf-l7$ajAyWv&Q@;");
      Element element0 = document0.append("aKIf-l7$ajAyWv&Q@;");
      Elements elements0 = element0.getElementsContainingOwnText("aKIf-l7$ajAyWv&Q@;");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("XmtBu`");
      Comment comment0 = new Comment("XmtBu`", "textarea");
      document0.appendChild(comment0);
      Elements elements0 = document0.getElementsContainingOwnText("XmtBu`");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document(">ip]7o-ca@pj");
      document0.append("textarea");
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "nobr");
      element0.appendChild(document0);
      String string0 = document0.text();
      assertEquals("textarea", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("}!e");
      document0.appendElement("}!e");
      Elements elements0 = document0.getElementsContainingOwnText("}!e");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("t`Q]fQ", "t`Q]fQ");
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      TextNode textNode0 = new TextNode("textarea", "t9v1w*{a7e");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      Element element0 = formElement0.prependChild(textNode0);
      String string0 = element0.toString();
      assertEquals("<textarea>textarea</textarea>", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("/y8k9");
      Comment comment0 = new Comment("/y8k9", "/y8k9");
      document0.prependChild(comment0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("base");
      document0.appendElement("base");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("sleted");
      Tag tag0 = Tag.valueOf("sleted");
      Element element0 = document0.append("sleted");
      TextNode textNode0 = TextNode.createFromEncoded("aadUW4#fT-t", "aadUW4#fT-t");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "sleted", attributes0);
      formElement0.prependChild(element0);
      boolean boolean0 = formElement0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document(">H");
      DataNode dataNode0 = DataNode.createFromEncoded("aBMPVI)#0]", "$sX{WW_:O$@y");
      document0.appendChild(dataNode0);
      String string0 = document0.data();
      assertEquals("aBMPVI)#0]", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("+zG#-'\"m:E,WWm");
      document0.prependElement("+zG#-'\"m:E,WWm");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("sleted");
      Element element0 = document0.append("sleted");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("slected");
      FormElement formElement0 = new FormElement(tag0, "slected", attributes0);
      formElement0.toggleClass("java.lang.string@0000000017");
      boolean boolean0 = formElement0.hasClass("java.lang.string@0000000017");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("slected");
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("slected");
      FormElement formElement0 = new FormElement(tag0, "slected", attributes0);
      formElement0.getElementsMatchingText("slected");
      Tag.valueOf("leed");
      Tag.valueOf("~d.^^=>");
      formElement0.toggleClass("java.lang.string@0000000017");
      boolean boolean0 = formElement0.hasClass("java.lang.string@0000000017");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document(";TB^ 9JG_A 5<l");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      String string0 = formElement0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TextNode textNode0 = new TextNode("IlecN", "textarea");
      Attributes attributes0 = textNode0.attributes();
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "IlecN", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document(";TB^ 9JG_A 5<l");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Y");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, 31, document_OutputSettings1);
      assertEquals("Y<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      element0.appendChild(document0);
      // Undeclared exception!
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = new Document("AfterAttributeValue_quoted");
      StringBuilder stringBuilder0 = new StringBuilder(9232);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, 9232, document_OutputSettings1);
      assertEquals("</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = new Document("sleted");
      Tag tag0 = Tag.valueOf("sleted");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "sleted", attributes0);
      Element element0 = formElement0.prependChild(document0);
      String string0 = element0.toString();
      assertEquals("<sleted>\n <#root></#root>\n</sleted>", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = new Document("select5d");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("yYDi)");
      boolean boolean0 = document0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = new Document("TB^ 9JG_A 5<1l");
      Document document1 = new Document("TB^ 9JG_A 5<1l");
      boolean boolean0 = document1.equals(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      Document document1 = new Document("br");
      boolean boolean0 = document1.equals(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = new Document("AfterAttributeValue_quoted");
      document0.hashCode();
  }
}
