/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:13:26 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LeafNode_ESTest extends LeafNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("<#vvc5<&I", true);
      String string0 = xmlDeclaration0.toString();
      assertEquals("<!<#vvc5<&I!>", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "lwk||w[1z9>C6c4.EN");
      Node node0 = documentType0.removeAttr("DEa&,{}db m");
      assertSame(documentType0, node0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Comment comment0 = new Comment("(aVH/U&G0u~g");
      // Undeclared exception!
      try { 
        comment0.ensureChildNodes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TextNode textNode0 = new TextNode("$");
      boolean boolean0 = textNode0.hasAttr("$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      comment0.coreValue((String) null);
      assertFalse(comment0.hasParent());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("Skuo'J)$gN{h", "org.jsoup.nodes.XmlDeclaration", "hgroup", "]");
      // Undeclared exception!
      try { 
        documentType0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      comment0.setBaseUri("name");
      assertFalse(comment0.hasParent());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Comment comment0 = new Comment("M/f8*DPfx9a1i)X\"9*");
      String string0 = comment0.attr("M/f8*DPfx9a1i)X\"9*");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Comment comment0 = new Comment("radio", "radio");
      String string0 = comment0.baseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Comment comment0 = new Comment("", "G2j<");
      comment0.reparentChild(comment0);
      // Undeclared exception!
      try { 
        comment0.baseUri();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }
}
