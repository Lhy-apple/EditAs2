/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:11:06 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Token;
import org.jsoup.parser.XmlTreeBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlTreeBuilder_ESTest extends XmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("?V x*?ksOgN%", "(3pI@^(sm[<6g<:zVk-");
      Token.StartTag token_StartTag0 = new Token.StartTag();
      TextNode textNode0 = TextNode.createFromEncoded("AsKz+DHkkY7l:-yW%", "AsKz+DHkkY7l:-yW%");
      Attributes attributes0 = textNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("AsKz+DHkkY7l:-yW%", attributes0);
      token_StartTag1.selfClosing = true;
      xmlTreeBuilder0.insert(token_StartTag1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("/<?bwoY\"3=*Bg}", "/<?bwoY\"3=*Bg}");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.parseFragment((String) null, (String) null, parseErrorList0, parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String input must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.Doctype token_Doctype0 = new Token.Doctype();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.process(token_Doctype0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.XmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("?V x*?ksOgN%", "(3pI@^(sm[<6g<:zVk-");
      Token.StartTag token_StartTag0 = new Token.StartTag();
      TextNode textNode0 = TextNode.createFromEncoded("AsKz+DHkkY7l:-yW%", "AsKz+DHkkY7l:-yW%");
      Attributes attributes0 = textNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("AsKz+DHkkY7l:-yW%", attributes0);
      token_StartTag1.selfClosing = true;
      Token.StartTag token_StartTag2 = token_StartTag0.nameAttr("var", attributes0);
      Element element0 = xmlTreeBuilder0.insert(token_StartTag2);
      assertEquals("(3pI@^(sm[<6g<:zVk-", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("z:(e/9?VhZh3", "z:(e/9?VhZh3");
      Token.Comment token_Comment0 = new Token.Comment();
      xmlTreeBuilder0.insert(token_Comment0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("<!", "DoctypePublicIdentifier_singleQuoted");
      assertEquals("DoctypePublicIdentifier_singleQuoted", document0.location());
      
      boolean boolean0 = xmlTreeBuilder0.processEndTag("1frY`V`Wg2_-,z9A");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("Q<!wV !x*?ksOgCN%", "Q<!wV !x*?ksOgCN%");
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("z:(e/9?VhZh3", "z:(e/9?VhZh3");
      xmlTreeBuilder0.processStartTag("z:(e/9?VhZh3");
      boolean boolean0 = xmlTreeBuilder0.processEndTag("#document");
      assertTrue(boolean0);
  }
}
