/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:10:36 GMT 2023
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Cleaner_ESTest extends Cleaner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = new Document("A<");
      Document document1 = cleaner0.clean(document0);
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      Whitelist whitelist1 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "body";
      stringArray0[1] = "body";
      stringArray0[2] = "body";
      stringArray0[3] = "body";
      stringArray0[4] = "body";
      stringArray0[5] = "body";
      stringArray0[6] = "body";
      stringArray0[7] = "body";
      stringArray0[8] = "P3O=o9CkNy\"(I";
      whitelist1.addTags(stringArray0);
      Cleaner cleaner0 = new Cleaner(whitelist1);
      Document document0 = Document.createShell("prompt");
      Document document1 = cleaner0.clean(document0);
      Cleaner cleaner1 = new Cleaner(whitelist0);
      boolean boolean0 = cleaner1.isValid(document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = Document.createShell("prompt");
      Element element0 = document0.text("body");
      Document document1 = cleaner0.clean(document0);
      assertNotSame(document1, element0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      whitelist0.addEnforcedAttribute("body", "body", "body");
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = Document.createShell("prompt");
      Document document1 = cleaner0.clean(document0);
      boolean boolean0 = cleaner0.isValid(document1);
      assertNotSame(document1, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "body";
      stringArray0[1] = "body";
      stringArray0[2] = "body";
      stringArray0[3] = "body";
      stringArray0[4] = "body";
      stringArray0[5] = "body";
      stringArray0[6] = "body";
      stringArray0[7] = "body";
      stringArray0[8] = "P3O=o9CkNy\"(I";
      whitelist0.addEnforcedAttribute("body", "body", "body");
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Whitelist whitelist1 = Whitelist.simpleText();
      Document document0 = Document.createShell("prompt");
      Document document1 = cleaner0.clean(document0);
      Cleaner cleaner1 = new Cleaner(whitelist1);
      whitelist1.addTags(stringArray0);
      boolean boolean0 = cleaner1.isValid(document1);
      assertFalse(boolean0);
  }
}
