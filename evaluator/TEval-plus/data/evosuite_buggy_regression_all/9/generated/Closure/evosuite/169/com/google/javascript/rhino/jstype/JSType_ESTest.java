/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:15:22 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "{", "{", (-3393), (-1923));
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, namedType0, "Unknown class name");
      JSType[] jSTypeArray0 = new JSType[7];
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      jSTypeArray0[0] = (JSType) voidType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) enumElementType0, jSTypeArray0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, voidType0);
      indexedType0.getTypesUnderEquality(jSTypeArray0[0]);
      assertTrue(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Not declared as a constructor", 0, 1050);
      JSType jSType0 = namedType0.getReferencedType();
      voidType0.getTypesUnderShallowEquality(jSType0);
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "{", "{", (-2282), (-2282));
      assertFalse(namedType0.isResolved());
      
      namedType0.forceResolve(simpleErrorReporter0, namedType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "CharMatcher.NONE");
      ObjectType objectType0 = enumElementType0.dereference();
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.getJSDocInfo();
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "~DWVYMt7/");
      String string0 = errorFunctionType0.toDebugHashCodeString();
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals("function (this:{596139251}, {13}, {13}, {13}): {596139251}", string0);
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "Not declared as a constructor");
      boolean boolean0 = enumElementType0.isRegexpType();
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType jSType0 = noType0.collapseUnion();
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      boolean boolean0 = numberType0.isString();
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "{", "{", (-3393), (-1923));
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, namedType0, "Unknown class name");
      boolean boolean0 = enumElementType0.isDateType();
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(boolean0);
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      instanceObjectType0.getTypesUnderShallowInequality(noType0);
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      unionType0.toAnnotationString();
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType jSType0 = noType0.unboxesTo();
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isAllType());
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType((JSTypeRegistry) null, unionType0);
      Node node0 = Node.newNumber(0.0);
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression((JSTypeRegistry) null, node0, "Unknown class name");
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, proxyObjectType0, unresolvedTypeExpression0);
      // Undeclared exception!
      try { 
        indexedType0.canTestForEqualityWith(unresolvedTypeExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "{", "{", (-3393), (-1923));
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, namedType0, "Unknown class name");
      boolean boolean0 = enumElementType0.isNominalConstructor();
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(boolean0);
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.isArrayType();
      assertFalse(boolean0);
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "z&V~J+L,!l#]3]S");
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      errorFunctionType0.setValidator(predicate0);
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.canBeCalled();
      assertFalse(voidType0.isAllType());
      assertFalse(boolean0);
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      unionType0.getDisplayName();
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "Unknown class name");
      boolean boolean0 = enumElementType0.isNumber();
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      NoType noType0 = new NoType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      boolean boolean0 = instanceObjectType0.isOrdinaryFunction();
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(boolean0);
      assertFalse(instanceObjectType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noType0);
      assertFalse(noType0.hasCachedValues());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      allType0.matchConstraint(recordType0);
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(allType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      unknownType0.matchesInt32Context();
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "{", "{", (-2282), (-2282));
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, namedType0, "_ruE`!s");
      boolean boolean0 = enumElementType0.isInstanceType();
      assertFalse(boolean0);
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isTheObjectType();
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isResolved());
      assertFalse(boolean0);
      assertFalse(stringType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isRecordType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isResolved());
      assertNotNull(allType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "Unknown class name");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isRecordType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isResolved());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isInterface());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertNotNull(enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = enumElementType0.matchesNumberContext();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isRecordType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isResolved());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isInterface());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertFalse(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertNotNull(templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = templateType0.isEnumType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertFalse(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "{", "{", (-2282), (-2282));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertTrue(namedType0.hasReferenceName());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertEquals("{", namedType0.getReferenceName());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isParameterizedType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isTemplateType());
      assertNotNull(namedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertEquals("", templateType0.getReferenceName());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNominalConstructor());
      assertNotNull(templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = templateType0.isInvariant(namedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertTrue(namedType0.hasReferenceName());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertEquals("{", namedType0.getReferenceName());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isParameterizedType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isTemplateType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertEquals("", templateType0.getReferenceName());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.isAllType());
      assertNotNull(allType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      allType0.clearResolved();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertNotNull(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = noType0.hasDisplayName();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "{", "{", (-3393), (-1923));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertTrue(namedType0.isNominalType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNativeObjectType());
      assertTrue(namedType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isEnumType());
      assertEquals("{", namedType0.getReferenceName());
      assertNotNull(namedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, namedType0, "{");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertTrue(namedType0.isNominalType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNativeObjectType());
      assertTrue(namedType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isEnumType());
      assertEquals("{", namedType0.getReferenceName());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertEquals("{", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isInterface());
      assertTrue(enumElementType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isParameterizedType());
      assertNotNull(enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = enumElementType0.hasDisplayName();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertTrue(namedType0.isNominalType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNativeObjectType());
      assertTrue(namedType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isEnumType());
      assertEquals("{", namedType0.getReferenceName());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertEquals("{", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isInterface());
      assertTrue(enumElementType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertNotNull(voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = voidType0.isStruct();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isInterface());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.hasInstanceType());
      assertNotNull(noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = noType0.isStruct();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isInterface());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertNotNull(voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = voidType0.isDict();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertNotNull(noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertNotNull(instanceObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = instanceObjectType0.isDict();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertNotNull(noResolvedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = noResolvedType0.isDict();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isFunctionType());
      assertNotNull(noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = noType0.isGlobalThisType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isFunctionType());
      assertFalse(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Error");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isNominalConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isVoidType());
      assertNotNull(functionType0);
      assertSame(errorFunctionType0, functionType0);
      assertSame(functionType0, errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isAllType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isRecordType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isParameterizedType());
      assertNotNull(numberType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNumberValueType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isRecordType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertNotNull(stringType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Named type with empty name component");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isAllType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isRecordType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isNominalType());
      assertNotNull(enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumElementType0, stringType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isAllType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isRecordType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNumberValueType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isRecordType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertTrue(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isNominalConstructor());
      assertTrue(indexedType0.isNominalType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNullType());
      assertNotNull(indexedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = indexedType0.getTypesUnderEquality(enumElementType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isAllType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isRecordType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNumberValueType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isRecordType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertTrue(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isNominalConstructor());
      assertTrue(indexedType0.isNominalType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNullType());
      assertNotNull(jSType_TypePair0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNominalType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isEnumType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isTemplateType());
      assertNotNull(recordType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) recordType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNominalType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isEnumType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isTemplateType());
      assertNull(parameterizedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNoType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isAllType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNullType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertNotNull(booleanType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) booleanType0);
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNoType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isAllType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNullType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertNull(templateType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertNotNull(voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesStringContext());
      assertNotNull(unknownType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, unknownType0, voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isVoidType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isEnumType());
      assertNotNull(parameterizedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = parameterizedType0.hasAnyTemplateInternal();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isVoidType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNoType());
      assertNotNull(noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = noType0.isNominalConstructor();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNoType());
      assertFalse(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "{", "{", (-3393), (-1923));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isConstructor());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isTemplateType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isResolved());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isVoidType());
      assertEquals("{", namedType0.getReferenceName());
      assertNotNull(namedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, namedType0, "Unknown class name");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isConstructor());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isTemplateType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isResolved());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isVoidType());
      assertEquals("{", namedType0.getReferenceName());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      assertNotNull(enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType1 = (EnumElementType)enumElementType0.meet(enumElementType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isConstructor());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isTemplateType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isResolved());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isVoidType());
      assertEquals("{", namedType0.getReferenceName());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertTrue(enumElementType0.hasCachedValues());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isUnionType());
      assertFalse(enumElementType1.isStringValueType());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertFalse(enumElementType1.isNoResolvedType());
      assertFalse(enumElementType1.isParameterizedType());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.isFunctionType());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertFalse(enumElementType1.isNativeObjectType());
      assertFalse(enumElementType1.isTemplateType());
      assertFalse(enumElementType1.isResolved());
      assertTrue(enumElementType1.hasCachedValues());
      assertTrue(enumElementType1.isNominalType());
      assertTrue(enumElementType1.hasReferenceName());
      assertFalse(enumElementType1.isBooleanValueType());
      assertFalse(enumElementType1.isRecordType());
      assertFalse(enumElementType1.isConstructor());
      assertEquals("Unknown class name", enumElementType1.getReferenceName());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isNoType());
      assertFalse(enumElementType1.isNullType());
      assertFalse(enumElementType1.isAllType());
      assertFalse(enumElementType1.isNoObjectType());
      assertFalse(enumElementType1.isNominalConstructor());
      assertNotNull(enumElementType1);
      assertTrue(enumElementType1.equals((Object)enumElementType0));
      assertNotSame(enumElementType0, enumElementType1);
      assertNotSame(enumElementType1, enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertNotNull(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isUnionType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertNotNull(instanceObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "E{0rSz{[W");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals("E{0rSz{[W", templateType0.getReferenceName());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNominalConstructor());
      assertNotNull(templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = templateType0.isInvariant(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasCachedValues());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isUnionType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals("E{0rSz{[W", templateType0.getReferenceName());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertNotNull(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isUnionType());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertNotNull(allType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) allType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, false, jSTypeArray0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertEquals(1, jSTypeArray0.length);
      assertNotNull(functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, functionType0, "com.google.common.base.CharMatcher$4");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isUnionType());
      assertEquals("com.google.common.base.CharMatcher$4", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isVoidType());
      assertEquals(1, jSTypeArray0.length);
      assertNotNull(enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType1 = (EnumElementType)enumElementType0.meet(jSTypeArray0[0]);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isUnionType());
      assertEquals("com.google.common.base.CharMatcher$4", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertFalse(enumElementType1.isStringValueType());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isNumberValueType());
      assertEquals("com.google.common.base.CharMatcher$4", enumElementType1.getReferenceName());
      assertFalse(enumElementType1.isParameterizedType());
      assertFalse(enumElementType1.isNoObjectType());
      assertFalse(enumElementType1.isNoType());
      assertFalse(enumElementType1.isNominalConstructor());
      assertFalse(enumElementType1.isAllType());
      assertTrue(enumElementType1.hasReferenceName());
      assertFalse(enumElementType1.isTemplateType());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertFalse(enumElementType1.isNativeObjectType());
      assertFalse(enumElementType1.isFunctionType());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.isNullType());
      assertFalse(enumElementType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.isConstructor());
      assertFalse(enumElementType1.isEnumType());
      assertTrue(enumElementType1.isNominalType());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.isBooleanValueType());
      assertFalse(enumElementType1.isRecordType());
      assertFalse(enumElementType1.isUnionType());
      assertTrue(enumElementType1.hasCachedValues());
      assertFalse(enumElementType1.isNoResolvedType());
      assertEquals(1, jSTypeArray0.length);
      assertNotNull(enumElementType1);
      assertTrue(enumElementType1.equals((Object)enumElementType0));
      assertNotSame(enumElementType0, enumElementType1);
      assertNotSame(enumElementType1, enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertNotNull(functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, errorFunctionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isNumberValueType());
      assertTrue(indexedType0.isConstructor());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isInterface());
      assertTrue(indexedType0.isObject());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNullType());
      assertTrue(indexedType0.isFunctionType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNoResolvedType());
      assertNotNull(indexedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = indexedType0.canAssignTo(errorFunctionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isNumberValueType());
      assertTrue(indexedType0.isConstructor());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isInterface());
      assertTrue(indexedType0.isObject());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNullType());
      assertTrue(indexedType0.isFunctionType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNoResolvedType());
      assertTrue(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isConstructor());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isRecordType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isEnumElementType());
      assertNotNull(numberType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRecordType());
      assertNotNull(templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = numberType0.isEquivalentTo(templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isConstructor());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isRecordType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSType[] jSTypeArray0 = new JSType[8];
      boolean boolean0 = JSType.isEquivalent(jSTypeArray0[7], jSTypeArray0[3]);
      assertTrue(boolean0);
      assertEquals(8, jSTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isInterface());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertNotNull(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isRecordType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isInterface());
      assertNotNull(unknownType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = JSType.isEquivalent(unknownType0, noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isInterface());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isRecordType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isInterface());
      assertFalse(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isInterface());
      assertNotNull(allType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = JSType.isEquivalent(allType0, (JSType) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isInterface());
      assertFalse(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isCheckedUnknownType());
      assertNotNull(voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType0 = voidType0.findPropertyType(":8uw^.N:ckX>u'w[H");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isCheckedUnknownType());
      assertNull(jSType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isOrdinaryFunction());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertNotNull(noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isFunctionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isBooleanValueType());
      assertNotNull(allType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isFunctionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      assertNotNull(enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, enumElementType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isOrdinaryFunction());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isFunctionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isNominalType());
      assertTrue(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isEnumElementType());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isUnionType());
      assertTrue(indexedType0.isObject());
      assertTrue(indexedType0.isConstructor());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.hasCachedValues());
      assertNotNull(indexedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = indexedType0.getTypesUnderEquality(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isOrdinaryFunction());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isFunctionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isNominalType());
      assertTrue(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isEnumElementType());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isUnionType());
      assertTrue(indexedType0.isObject());
      assertTrue(indexedType0.isConstructor());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.hasCachedValues());
      assertNotNull(jSType_TypePair0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isBooleanValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertNotNull(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isBooleanValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertNotNull(instanceObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertNotNull(allType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isVoidType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isNumberValueType());
      assertNotNull(booleanType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      booleanType0.testForEqualityHelper(allType0, instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.hasCachedValues());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isBooleanValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isVoidType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNoResolvedType());
      assertNotNull(noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isVoidType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertNotNull(allType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesStringContext());
      assertNotNull(booleanType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      booleanType0.testForEqualityHelper(allType0, noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isVoidType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesStringContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isFunctionType());
      assertNotNull(noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.hasCachedValues());
      assertTrue(unknownType0.isObject());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNullType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertNotNull(unknownType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noType0, "Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isFunctionType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.hasReferenceName());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertNotNull(enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNoType());
      assertTrue(booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNoObjectType());
      assertNotNull(booleanType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      booleanType0.testForEqualityHelper(unknownType0, enumElementType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isFunctionType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.hasCachedValues());
      assertTrue(unknownType0.isObject());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNullType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.hasReferenceName());
      assertTrue(enumElementType0.hasCachedValues());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(booleanType0.isNoType());
      assertTrue(booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNoObjectType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isVoidType());
      assertNotNull(noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noType0, "Unknown class name");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isVoidType());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertNotNull(enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumElementType0, enumElementType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isVoidType());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isFunctionType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNoResolvedType());
      assertTrue(indexedType0.isNominalType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNominalConstructor());
      assertTrue(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNativeObjectType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isVoidType());
      assertNotNull(indexedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = indexedType0.getTypesUnderEquality(noType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isVoidType());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isFunctionType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNoResolvedType());
      assertTrue(indexedType0.isNominalType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNominalConstructor());
      assertTrue(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNativeObjectType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isVoidType());
      assertNotNull(jSType_TypePair0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertNotNull(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noType0, "Unknown class name");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNativeObjectType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isConstructor());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertNotNull(enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(noType0, enumElementType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNativeObjectType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isConstructor());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertNotNull(functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumElementType0, enumElementType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNativeObjectType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isConstructor());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertTrue(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.hasCachedValues());
      assertTrue(indexedType0.isNominalType());
      assertTrue(indexedType0.isObject());
      assertTrue(indexedType0.hasReferenceName());
      assertNotNull(indexedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = indexedType0.getTypesUnderEquality(functionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isBooleanValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNativeObjectType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isConstructor());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertTrue(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.hasCachedValues());
      assertTrue(indexedType0.isNominalType());
      assertTrue(indexedType0.isObject());
      assertTrue(indexedType0.hasReferenceName());
      assertNotNull(jSType_TypePair0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "}", "}.CW&;a\"|[", (-3393), (-3393));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(namedType0.hasReferenceName());
      assertEquals("}", namedType0.getReferenceName());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isEnumElementType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isVoidType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isResolved());
      assertNotNull(namedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, namedType0, "Not declared as a constructor");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(namedType0.hasReferenceName());
      assertEquals("}", namedType0.getReferenceName());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isEnumElementType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isVoidType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isResolved());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isInterface());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertNotNull(enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType[] jSTypeArray0 = new JSType[3];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) enumElementType0, jSTypeArray0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(namedType0.hasReferenceName());
      assertEquals("}", namedType0.getReferenceName());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isEnumElementType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isVoidType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isResolved());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isInterface());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertEquals(3, jSTypeArray0.length);
      assertNotNull(functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, jSTypeArray0[1]);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(namedType0.hasReferenceName());
      assertEquals("}", namedType0.getReferenceName());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isEnumElementType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isVoidType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isResolved());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isInterface());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isNullType());
      assertTrue(indexedType0.isFunctionType());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isUnionType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isStringValueType());
      assertTrue(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isParameterizedType());
      assertEquals(3, jSTypeArray0.length);
      assertNotNull(indexedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType.TypePair jSType_TypePair0 = indexedType0.getTypesUnderEquality(enumElementType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(namedType0.hasReferenceName());
      assertEquals("}", namedType0.getReferenceName());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isEnumElementType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isVoidType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isResolved());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isInterface());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasCachedValues());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isNullType());
      assertTrue(indexedType0.isFunctionType());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isUnionType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isStringValueType());
      assertTrue(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isParameterizedType());
      assertEquals(3, jSTypeArray0.length);
      assertNotNull(jSType_TypePair0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isResolved());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumType());
      assertNotNull(allType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "CharMatcher.NONE");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isResolved());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNativeObjectType());
      assertEquals("CharMatcher.NONE", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertNotNull(enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(enumElementType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isResolved());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNativeObjectType());
      assertEquals("CharMatcher.NONE", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertTrue(boolean0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "{", "{", (-2282), (-2282));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.hasCachedValues());
      assertEquals("{", namedType0.getReferenceName());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isEnumElementType());
      assertTrue(namedType0.isNominalType());
      assertTrue(namedType0.hasReferenceName());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertNotNull(namedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NamedType namedType1 = (NamedType)namedType0.getLeastSupertype(namedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.hasCachedValues());
      assertEquals("{", namedType0.getReferenceName());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isEnumElementType());
      assertTrue(namedType0.isNominalType());
      assertTrue(namedType0.hasReferenceName());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertTrue(namedType1.hasReferenceName());
      assertFalse(namedType1.isFunctionType());
      assertFalse(namedType1.isResolved());
      assertFalse(namedType1.isCheckedUnknownType());
      assertEquals("{", namedType1.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertFalse(namedType1.isAllType());
      assertFalse(namedType1.isTemplateType());
      assertFalse(namedType1.isParameterizedType());
      assertFalse(namedType1.isNoResolvedType());
      assertFalse(namedType1.isStringValueType());
      assertTrue(namedType1.isNominalType());
      assertFalse(namedType1.isUnionType());
      assertFalse(namedType1.isOrdinaryFunction());
      assertTrue(namedType1.isObject());
      assertFalse(namedType1.isVoidType());
      assertFalse(namedType1.isEnumElementType());
      assertFalse(namedType1.isNoType());
      assertFalse(namedType1.isNominalConstructor());
      assertFalse(namedType1.isInterface());
      assertFalse(namedType1.isNoObjectType());
      assertFalse(namedType1.isNullType());
      assertFalse(namedType1.isEnumType());
      assertFalse(namedType1.isConstructor());
      assertFalse(namedType1.isRecordType());
      assertFalse(namedType1.isBooleanValueType());
      assertFalse(namedType1.isFunctionPrototypeType());
      assertFalse(namedType1.isNumberValueType());
      assertFalse(namedType1.isNativeObjectType());
      assertFalse(namedType1.hasCachedValues());
      assertNotNull(namedType1);
      assertSame(namedType0, namedType1);
      assertSame(namedType1, namedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertNotNull(voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNativeObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isResolved());
      assertNotNull(unknownType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnknownType unknownType1 = (UnknownType)JSType.getLeastSupertype((JSType) voidType0, (JSType) unknownType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNativeObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType1.isNoType());
      assertFalse(unknownType1.isNoObjectType());
      assertTrue(unknownType1.isNullable());
      assertTrue(unknownType1.isUnknownType());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertTrue(unknownType1.isObject());
      assertFalse(unknownType1.isParameterizedType());
      assertTrue(unknownType1.matchesStringContext());
      assertFalse(unknownType1.isConstructor());
      assertEquals(Integer.MAX_VALUE, unknownType1.getPropertiesCount());
      assertTrue(unknownType1.matchesObjectContext());
      assertEquals("?", unknownType1.getReferenceName());
      assertFalse(unknownType1.isResolved());
      assertFalse(unknownType1.hasCachedValues());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isCheckedUnknownType());
      assertFalse(unknownType1.isRecordType());
      assertFalse(unknownType1.isUnionType());
      assertFalse(unknownType1.isStringValueType());
      assertFalse(unknownType1.isInterface());
      assertFalse(unknownType1.isEnumType());
      assertTrue(unknownType1.hasDisplayName());
      assertFalse(unknownType1.isNoResolvedType());
      assertFalse(unknownType1.isVoidType());
      assertTrue(unknownType1.canBeCalled());
      assertFalse(unknownType1.isBooleanValueType());
      assertFalse(unknownType1.isNullType());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertFalse(unknownType1.isNominalType());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertFalse(unknownType1.isNativeObjectType());
      assertFalse(unknownType1.hasReferenceName());
      assertFalse(unknownType1.isTemplateType());
      assertFalse(unknownType1.isEnumElementType());
      assertTrue(unknownType1.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertFalse(unknownType1.isNominalConstructor());
      assertFalse(unknownType1.isAllType());
      assertFalse(unknownType1.isFunctionType());
      assertNotNull(unknownType1);
      assertFalse(unknownType1.equals((Object)unknownType0));
      assertNotSame(unknownType0, unknownType1);
      assertNotSame(unknownType1, unknownType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "z&V~J+L,!l#]3]S");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)JSType.getGreatestSubtype((JSType) errorFunctionType0, (JSType) errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType1.isRecordType());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isInterface());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertTrue(errorFunctionType1.isObject());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertFalse(errorFunctionType1.isVoidType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isUnionType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isTemplateType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertFalse(errorFunctionType1.hasCachedValues());
      assertNotNull(errorFunctionType1);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertNotNull(allType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "Not declared as a constructor");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isStringValueType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertNotNull(enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType1 = (EnumElementType)enumElementType0.meet(enumElementType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(enumElementType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isStringValueType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType1.isNominalConstructor());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.isBooleanValueType());
      assertTrue(enumElementType1.hasReferenceName());
      assertFalse(enumElementType1.isAllType());
      assertFalse(enumElementType1.isEnumType());
      assertTrue(enumElementType1.isNominalType());
      assertFalse(enumElementType1.isStringValueType());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertFalse(enumElementType1.isTemplateType());
      assertEquals("Not declared as a constructor", enumElementType1.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType1.isParameterizedType());
      assertFalse(enumElementType1.isResolved());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.isConstructor());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.isNoObjectType());
      assertFalse(enumElementType1.isNoType());
      assertFalse(enumElementType1.isRecordType());
      assertFalse(enumElementType1.isNoResolvedType());
      assertFalse(enumElementType1.isFunctionType());
      assertFalse(enumElementType1.isUnionType());
      assertTrue(enumElementType1.hasCachedValues());
      assertFalse(enumElementType1.isNativeObjectType());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isNullType());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertNotNull(enumElementType1);
      assertTrue(enumElementType1.equals((Object)enumElementType0));
      assertNotSame(enumElementType0, enumElementType1);
      assertNotSame(enumElementType1, enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertNotNull(noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)JSType.filterNoResolvedType(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isNoType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isResolved());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isFunctionType());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType1.hasCachedValues());
      assertTrue(noResolvedType1.canBeCalled());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isNoObjectType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isVoidType());
      assertFalse(noResolvedType1.isEnumType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertNotNull(noResolvedType1);
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertNotSame(noResolvedType0, noResolvedType1);
      assertNotSame(noResolvedType1, noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "{", "{", (-2282), (-2282));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNumberValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isVoidType());
      assertEquals("{", namedType0.getReferenceName());
      assertNotNull(namedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NamedType namedType1 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Named type with empty name component", 2, 0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType1.isNoResolvedType());
      assertTrue(namedType1.isNominalType());
      assertFalse(namedType1.isOrdinaryFunction());
      assertFalse(namedType1.isVoidType());
      assertFalse(namedType1.isNoObjectType());
      assertFalse(namedType1.isNoType());
      assertTrue(namedType1.isObject());
      assertFalse(namedType1.isNominalConstructor());
      assertFalse(namedType1.isStringValueType());
      assertFalse(namedType1.isInterface());
      assertFalse(namedType1.isNativeObjectType());
      assertFalse(namedType1.isRecordType());
      assertFalse(namedType1.isBooleanValueType());
      assertFalse(namedType1.isConstructor());
      assertFalse(namedType1.isEnumType());
      assertFalse(namedType1.hasCachedValues());
      assertFalse(namedType1.isUnionType());
      assertFalse(namedType1.isFunctionPrototypeType());
      assertFalse(namedType1.isNumberValueType());
      assertFalse(namedType1.isFunctionType());
      assertTrue(namedType1.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertFalse(namedType1.isCheckedUnknownType());
      assertFalse(namedType1.isNullType());
      assertFalse(namedType1.isResolved());
      assertFalse(namedType1.isAllType());
      assertFalse(namedType1.isEnumElementType());
      assertFalse(namedType1.isParameterizedType());
      assertFalse(namedType1.isTemplateType());
      assertEquals("Not declared as a constructor", namedType1.getReferenceName());
      assertNotNull(namedType1);
      assertFalse(namedType1.equals((Object)namedType0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = namedType1.getLeastSupertype(namedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNumberValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isVoidType());
      assertEquals("{", namedType0.getReferenceName());
      assertFalse(namedType1.isNoResolvedType());
      assertTrue(namedType1.isNominalType());
      assertFalse(namedType1.isOrdinaryFunction());
      assertFalse(namedType1.isVoidType());
      assertFalse(namedType1.isNoObjectType());
      assertFalse(namedType1.isNoType());
      assertTrue(namedType1.isObject());
      assertFalse(namedType1.isNominalConstructor());
      assertFalse(namedType1.isStringValueType());
      assertFalse(namedType1.isInterface());
      assertFalse(namedType1.isNativeObjectType());
      assertFalse(namedType1.isRecordType());
      assertFalse(namedType1.isBooleanValueType());
      assertFalse(namedType1.isConstructor());
      assertFalse(namedType1.isEnumType());
      assertFalse(namedType1.hasCachedValues());
      assertFalse(namedType1.isUnionType());
      assertFalse(namedType1.isFunctionPrototypeType());
      assertFalse(namedType1.isNumberValueType());
      assertFalse(namedType1.isFunctionType());
      assertTrue(namedType1.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertFalse(namedType1.isCheckedUnknownType());
      assertFalse(namedType1.isNullType());
      assertFalse(namedType1.isResolved());
      assertFalse(namedType1.isAllType());
      assertFalse(namedType1.isEnumElementType());
      assertFalse(namedType1.isParameterizedType());
      assertFalse(namedType1.isTemplateType());
      assertEquals("Not declared as a constructor", namedType1.getReferenceName());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertNotNull(jSType0);
      assertFalse(namedType0.equals((Object)namedType1));
      assertFalse(namedType1.equals((Object)namedType0));
      assertNotSame(namedType0, namedType1);
      assertNotSame(namedType1, namedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertNotNull(voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoType noType0 = (NoType)voidType0.restrictByNotNullOrUndefined();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isObject());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.canBeCalled());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertNotNull(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NoType noType1 = (NoType)noType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isObject());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.canBeCalled());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertFalse(noType1.isEnumElementType());
      assertFalse(noType1.isAllType());
      assertFalse(noType1.isTemplateType());
      assertTrue(noType1.matchesObjectContext());
      assertFalse(noType1.isEnumType());
      assertFalse(noType1.isBooleanValueType());
      assertTrue(noType1.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, noType1.getPropertiesCount());
      assertFalse(noType1.isReturnTypeInferred());
      assertFalse(noType1.isResolved());
      assertFalse(noType1.isNoResolvedType());
      assertFalse(noType1.isVoidType());
      assertFalse(noType1.isStringValueType());
      assertFalse(noType1.hasCachedValues());
      assertTrue(noType1.isConstructor());
      assertFalse(noType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertFalse(noType1.isRecordType());
      assertTrue(noType1.canBeCalled());
      assertFalse(noType1.isParameterizedType());
      assertFalse(noType1.isFunctionPrototypeType());
      assertFalse(noType1.isUnionType());
      assertFalse(noType1.isNumberValueType());
      assertTrue(noType1.hasInstanceType());
      assertTrue(noType1.isNoType());
      assertFalse(noType1.isCheckedUnknownType());
      assertTrue(noType1.matchesNumberContext());
      assertNull(noType1.getReferenceName());
      assertFalse(noType1.isFunctionType());
      assertTrue(noType1.isNullable());
      assertFalse(noType1.isInterface());
      assertFalse(noType1.isNominalConstructor());
      assertTrue(noType1.isObject());
      assertFalse(noType1.isNullType());
      assertFalse(noType1.isOrdinaryFunction());
      assertFalse(noType1.isNominalType());
      assertNotNull(noType1);
      assertSame(noType0, noType1);
      assertSame(noType1, noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "{", "{", (-2282), (-2282));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isUnionType());
      assertEquals("{", namedType0.getReferenceName());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoType());
      assertTrue(namedType0.isNominalType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNoResolvedType());
      assertNotNull(namedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, namedType0, "LEAST_FUNCTION_TYPE");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isUnionType());
      assertEquals("{", namedType0.getReferenceName());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoType());
      assertTrue(namedType0.isNominalType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.hasCachedValues());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isResolved());
      assertEquals("LEAST_FUNCTION_TYPE", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isStringValueType());
      assertNotNull(enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType1 = (EnumElementType)enumElementType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isUnionType());
      assertEquals("{", namedType0.getReferenceName());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoType());
      assertTrue(namedType0.isNominalType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.hasCachedValues());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isResolved());
      assertEquals("LEAST_FUNCTION_TYPE", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertFalse(enumElementType1.isAllType());
      assertFalse(enumElementType1.isFunctionType());
      assertFalse(enumElementType1.isResolved());
      assertFalse(enumElementType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType1.isNativeObjectType());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.isConstructor());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.hasCachedValues());
      assertTrue(enumElementType1.isNominalType());
      assertFalse(enumElementType1.isEnumType());
      assertFalse(enumElementType1.isBooleanValueType());
      assertFalse(enumElementType1.isRecordType());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isUnionType());
      assertFalse(enumElementType1.isNoResolvedType());
      assertFalse(enumElementType1.isParameterizedType());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isNoType());
      assertEquals("LEAST_FUNCTION_TYPE", enumElementType1.getReferenceName());
      assertFalse(enumElementType1.isStringValueType());
      assertFalse(enumElementType1.isNoObjectType());
      assertFalse(enumElementType1.isNominalConstructor());
      assertTrue(enumElementType1.hasReferenceName());
      assertFalse(enumElementType1.isTemplateType());
      assertNotNull(enumElementType1);
      assertSame(enumElementType0, enumElementType1);
      assertSame(enumElementType1, enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNominalType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertNotNull(allType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "Not declared as a constructor");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNominalType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isUnionType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertNotNull(enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType1 = new EnumElementType(jSTypeRegistry0, enumElementType0, "Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNominalType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isUnionType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.isRecordType());
      assertFalse(enumElementType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.isConstructor());
      assertTrue(enumElementType1.isNominalType());
      assertFalse(enumElementType1.isBooleanValueType());
      assertFalse(enumElementType1.isUnionType());
      assertFalse(enumElementType1.isNoResolvedType());
      assertTrue(enumElementType1.hasCachedValues());
      assertFalse(enumElementType1.isStringValueType());
      assertFalse(enumElementType1.isEnumType());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isParameterizedType());
      assertTrue(enumElementType1.hasReferenceName());
      assertFalse(enumElementType1.isTemplateType());
      assertFalse(enumElementType1.isNoType());
      assertFalse(enumElementType1.isAllType());
      assertFalse(enumElementType1.isNoObjectType());
      assertFalse(enumElementType1.isNullType());
      assertFalse(enumElementType1.isNativeObjectType());
      assertFalse(enumElementType1.isFunctionType());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isNominalConstructor());
      assertEquals("Not declared as a type name", enumElementType1.getReferenceName());
      assertNotNull(enumElementType1);
      assertFalse(enumElementType1.equals((Object)enumElementType0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType2 = (EnumElementType)enumElementType1.meet(enumElementType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNominalType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isUnionType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.isRecordType());
      assertFalse(enumElementType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.isConstructor());
      assertTrue(enumElementType1.isNominalType());
      assertFalse(enumElementType1.isBooleanValueType());
      assertFalse(enumElementType1.isUnionType());
      assertFalse(enumElementType1.isNoResolvedType());
      assertTrue(enumElementType1.hasCachedValues());
      assertFalse(enumElementType1.isStringValueType());
      assertFalse(enumElementType1.isEnumType());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isParameterizedType());
      assertTrue(enumElementType1.hasReferenceName());
      assertFalse(enumElementType1.isTemplateType());
      assertFalse(enumElementType1.isNoType());
      assertFalse(enumElementType1.isAllType());
      assertFalse(enumElementType1.isNoObjectType());
      assertFalse(enumElementType1.isNullType());
      assertFalse(enumElementType1.isNativeObjectType());
      assertFalse(enumElementType1.isFunctionType());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isNominalConstructor());
      assertEquals("Not declared as a type name", enumElementType1.getReferenceName());
      assertFalse(enumElementType2.isEnumType());
      assertFalse(enumElementType2.isVoidType());
      assertFalse(enumElementType2.isCheckedUnknownType());
      assertFalse(enumElementType2.isStringValueType());
      assertFalse(enumElementType2.isNominalConstructor());
      assertEquals("Not declared as a type name", enumElementType2.getReferenceName());
      assertTrue(enumElementType2.isEnumElementType());
      assertTrue(enumElementType2.isNominalType());
      assertFalse(enumElementType2.isBooleanValueType());
      assertFalse(enumElementType2.isNullType());
      assertFalse(enumElementType2.isNoResolvedType());
      assertTrue(enumElementType2.hasCachedValues());
      assertFalse(enumElementType2.isUnionType());
      assertFalse(enumElementType2.isFunctionPrototypeType());
      assertFalse(enumElementType2.isNumberValueType());
      assertFalse(enumElementType2.isConstructor());
      assertFalse(enumElementType2.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType2.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType2.isResolved());
      assertFalse(enumElementType2.isNativeObjectType());
      assertFalse(enumElementType2.isFunctionType());
      assertFalse(enumElementType2.isInterface());
      assertFalse(enumElementType2.isNoObjectType());
      assertFalse(enumElementType2.isNoType());
      assertFalse(enumElementType2.isAllType());
      assertFalse(enumElementType2.isParameterizedType());
      assertTrue(enumElementType2.hasReferenceName());
      assertFalse(enumElementType2.isTemplateType());
      assertFalse(enumElementType2.isOrdinaryFunction());
      assertNotNull(enumElementType2);
      assertFalse(enumElementType0.equals((Object)enumElementType1));
      assertFalse(enumElementType1.equals((Object)enumElementType0));
      assertTrue(enumElementType2.equals((Object)enumElementType1));
      assertFalse(enumElementType2.equals((Object)enumElementType0));
      assertNotSame(enumElementType0, enumElementType1);
      assertNotSame(enumElementType0, enumElementType2);
      assertNotSame(enumElementType1, enumElementType2);
      assertNotSame(enumElementType1, enumElementType0);
      assertNotSame(enumElementType2, enumElementType1);
      assertNotSame(enumElementType2, enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertNotNull(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.hasDisplayName());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertNotNull(allType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isInterface());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertNotNull(unknownType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, unknownType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.hasDisplayName());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isInterface());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isStringValueType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.canBeCalled());
      assertFalse(jSType0.isVoidType());
      assertNotNull(jSType0);
      assertSame(allType0, jSType0);
      assertSame(jSType0, allType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType1 = allType0.forceResolve(simpleErrorReporter0, noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.hasDisplayName());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isFunctionType());
      assertTrue(jSType1.isResolved());
      assertFalse(jSType1.isOrdinaryFunction());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, jSType1.getPossibleToBooleanOutcomes());
      assertTrue(jSType1.matchesObjectContext());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isNoResolvedType());
      assertTrue(jSType1.isAllType());
      assertTrue(jSType1.matchesStringContext());
      assertFalse(jSType1.isParameterizedType());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isNominalType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertTrue(jSType1.hasDisplayName());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.canBeCalled());
      assertEquals("<Any Type>", jSType1.getDisplayName());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isUnionType());
      assertFalse(jSType1.isEnumType());
      assertNotNull(jSType1);
      assertSame(allType0, jSType1);
      assertSame(allType0, jSType0);
      assertSame(jSType1, jSType0);
      assertSame(jSType1, allType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSType jSType0 = JSType.safeResolve((JSType) null, (ErrorReporter) null, (StaticScope<JSType>) null);
      assertNull(jSType0);
  }
}
