/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 04:44:44 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(26, "");
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(27, 183, 183);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newNumber(253.9275741984817, 32, 841);
      Node node1 = new Node(28, node0, node0, node0, 91, (-1033));
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(32, "*1v5Qlg|");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(96, "1v5Qlg|", 96, 96);
      Node node1 = Node.newString(47, "1v5Qlg|", 54, 12);
      Node node2 = new Node(16, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newNumber((-633.6311));
      Node node1 = Node.newString(50, "^!a", 54, 62);
      Node node2 = new Node(11, node0, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString(12, "");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node1 = Node.newString(49, "", 2, 54);
      Node node2 = new Node(12, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("");
      Node node1 = Node.newString(47, "function");
      Node node2 = new Node(13, node0, node1, node1, 44, 36);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertSame(node2, node3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString(39, "SYNTAX_ERROR_TYPE");
      Node node2 = new Node(14, node0, node0, node1, 53, 37);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString(1956, "li*su'm!aX", 41, 16);
      Node node2 = new Node(15, node0, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString(17, "");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node1 = new Node(17, 29, 41);
      Node node2 = new Node(17, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node node1 = Node.newString((-4277), "#uRQ](3ZT|d'u", (-38), 49);
      Node node2 = new Node(21, node0, node1, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(96, "*1v5Qlg|");
      Node node1 = Node.newString(50, "*1v5Qlg|");
      Node node2 = new Node(22, node0, node1, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(22, node3.getType());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newNumber((-981.528));
      Compiler compiler0 = new Compiler();
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node1 = compiler0.parseTestCode("com.google.javascript.rhino.head.ast.ContinueStatement");
      Node node2 = new Node(31, node1, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("-");
      Node node1 = Node.newString(67, "-");
      Node node2 = new Node(35, node0, node1, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(122, 122, 122);
      Node node1 = Node.newString(50, "t*1vQlg|");
      Node node2 = new Node(36, node1, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isObjectLit());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(1805, "*1v5Qlg|");
      Node node1 = Node.newString((-1292), "*1v5Qlg|", 8, (-1));
      Node node2 = new Node(37, node0, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isParamList());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(96, "*1v5Qlg|");
      Node node1 = Node.newString(50, "*1v5Qlg|");
      Node node2 = new Node(38, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(91);
      Node node1 = Node.newString(30, "*1v5Qlg|");
      Node node2 = new Node(39, node1, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(96, "");
      Node node1 = Node.newString(51, "");
      Node node2 = new Node(40, node1, node0, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(96, "*1v5Qlg|");
      Node node1 = Node.newString(50, "*1v5Qlg|");
      Node node2 = new Node(41, node0, node1, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(96, "*1v5Qlg|");
      Node node1 = new Node((-5166), 49, 2);
      Node node2 = new Node(42, node1, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isInc());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(30, 42, 54);
      Node node2 = new Node(43, node1, node0, node0, 43, 50);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isFunction());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newString(43, "");
      Node node2 = new Node(44, node1, node1, node0, (-1695), 16);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isFor());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newNumber((-5017.021776877));
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseTestCode("6aW=Wo>d");
      Node node2 = new Node(45, node0, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(43, 53, 49);
      Node node2 = new Node(46, node0, node1, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = Node.newString(4095, "OX");
      Node node2 = new Node(47, node0, node0, node1, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(96, 96, 96);
      Node node1 = Node.newString(50, "*1v5Qlg|");
      Node node2 = new Node(48, node0, node1, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotSame(node3, node0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString((int) (byte)4, "");
      Node node1 = Node.newString(42, "");
      Node node2 = new Node(49, node0, node1, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertSame(node2, node3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(96, "");
      Node node1 = Node.newString(51, "");
      Node node2 = new Node(50, node1, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(96, "zEi'KHG0v>[f,B", 86, 1376);
      Node node1 = Node.newString(2, "newCount");
      Node node2 = new Node(51, node1, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isDefaultCase());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(122, 122, 122);
      Node node1 = Node.newString(50, "t*1vQlg|");
      Node node2 = new Node(52, node1, node1, node1, node0, 45, 46);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(52, node3.getType());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("-");
      Node node1 = new Node(52);
      Node node2 = new Node(53, node1, node0, node0, 0, 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(96, "");
      Node node1 = Node.newString(51, "");
      Node node2 = new Node(54, node1, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isStringKey());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = Node.newString(35, "OX", 30, 100);
      Node node2 = new Node(55, node1, node1, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = Node.newString(35, " cOvX}*8fLxV/Sc%lot", 30, 133);
      Node node2 = new Node(56, node1, node1, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node node1 = new Node(15, 39, 48);
      Node node2 = new Node(57, node0, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isArrayLit());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(40, 58, 38);
      Node node2 = new Node(58, node0, node1, node1, 42, 16);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newNumber((-1102.8126487948));
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseTestCode("");
      Node node2 = new Node(59, node1, node0, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString(48, "java.lang.String", 0, 37);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node0);
      Node node3 = new Node(60, node2, node2, node1, node1);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertEquals((-1), node4.getSourceOffset());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString(96, "");
      Node node1 = Node.newString(98, "");
      Node node2 = new Node(61, node1, node1, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(30, 42, 54);
      Node node2 = new Node(62, node1, node0, node0, 39, 50);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isVoid());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = Node.newString(4095, "O");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node2 = new Node(63, node1, node1, node0, 4095, (-22));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isStringKey());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(96, ".QJ(");
      Node node1 = Node.newString(51, ".QJ(");
      Node node2 = new Node(64, node1, node1, node0, node0, 45, 41);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isName());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newNumber((-2.147483648E9));
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseTestCode("xDrHyXhsc*>@*}ku");
      Node node2 = new Node(65, node0, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, node3.getLength());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = Node.newString(4095, "OX");
      Node node2 = new Node(66, node0, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(41, Node.BRACELESS_TYPE);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString(122, "x9B+9~:?V&W1#zOUH");
      Node node1 = Node.newString(184, "JSC_BITWISE_OPERAND_OUT_OF_RANGE", (-2126), 4095);
      Node node2 = new Node(67, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(96, "O\"<[nKd?B-9");
      Node node1 = Node.newString(51, "O\"<[nKd?B-9");
      Node node2 = new Node(68, node1, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isAdd());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newNumber(0.10169553183203452);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseTestCode("6W=PWo>d[");
      Node node2 = new Node(69, node1, node0, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString((int) (byte)91, "-");
      Node node1 = Node.newString(42, "-");
      Node node2 = new Node(70, node1, node0, node0, 0, 38);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString(71, "");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node1 = Node.newString(49, "", 2, 54);
      Node node2 = new Node(71, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString(76, "");
      Compiler compiler0 = new Compiler();
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node1 = compiler0.parseTestCode("?og.>rquire");
      Node node2 = new Node(72, node1, node0, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(64, ".QJ(");
      Node node1 = Node.newString(51, ".QJ(");
      Node node2 = new Node(73, node1, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isBlock());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newString(96, "Shift amount out of bounds: {0}");
      Node node1 = Node.newString(797, "Shift amount out of bounds: {0}");
      Node node2 = new Node(74, node1, node1, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString(96, "*1v5Qlg|");
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseTestCode("We can only sort lexical scopes");
      Node node2 = new Node(75, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(96, "*1v5Qlg|");
      Node node1 = Node.newString(50, "*1v5Qlg|");
      Node node2 = new Node(76, node0, node1, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node((-24), (-2450), (-991));
      Node node1 = Node.newString(43, "26");
      Node node2 = new Node(77, node0, node1, node1, node1, (-1173), (-5131));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("-");
      Node node1 = Node.newString((-1016), "STRING -", 4772, (-1316));
      Node node2 = new Node(78, node1, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(41, Node.BRACELESS_TYPE);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newNumber(1518.9979);
      Node node1 = Node.newString(4095, "li*su'm!aX", 2, 46);
      Node node2 = new Node(79, node1, node0, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = Node.newString(35, "OX", 30, 100);
      Node node2 = new Node(80, node1, node1, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isCatch());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseTestCode("6W=PWo>d[");
      Node node2 = new Node(81, node1, node0, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(37, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newNumber((-274.73328371436));
      Node node1 = new Node(30, 42, 54);
      Node node2 = new Node(83, node1, node0, node0, 83, 50);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(96, "");
      Node node1 = new Node(32, 1417, 54);
      Node node2 = new Node(84, node0, node1, node1, 54, 54);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isCatch());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("-");
      Node node1 = new Node(50);
      Node node2 = new Node(85, node1, node0, node0, 53, 4095);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(52, Node.LENGTH);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseTestCode("#]L");
      Node node2 = new Node(86, node0, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(96, "*1v5Qlg|", (-675), (-675));
      Node node1 = Node.newString(961, "*1v5Qlg|");
      Node node2 = new Node(88, node1, node0, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(88, node3.getType());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(96, "");
      Node node1 = Node.newString(51, "");
      Node node2 = new Node(89, node1, node1, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString(73, "N3d3TlZ/>ru$");
      Node node1 = Node.newString(50, "");
      Node node2 = new Node(90, node1, node1, node0, 2, 42);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newNumber((-5017.021776877));
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseTestCode("?}o$fc:hg`ohbb{");
      Node node2 = new Node(91, node1, node0, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = Node.newString(4095, "OX");
      Node node2 = new Node(92, node1, node1, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("*1v5Qlg|", 96, 96);
      Node node1 = Node.newString(43, "*1v5Qlg|");
      Node node2 = new Node(93, node1, node1, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(96, "");
      Node node1 = new Node((-1257), 54, 95);
      Node node2 = new Node(94, node0, node0, node0, node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(96, "#{sJNbsK[;*TNc-wE'.");
      Node node1 = Node.newString((-559), "jIMn*Fc,O`iM");
      Node node2 = new Node(95, node1, node0, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(920, "");
      Node node1 = Node.newString(920, "fCEwjP", 13, 12);
      Node node2 = new Node(96, node0, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(0.0);
      Node node1 = compiler0.parseTestCode("SYNTAX_ERROR_TYPE");
      Node node2 = new Node(97, node1, node0, node0, 97, 50);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(96, "*1v5Qlg|");
      Node node1 = Node.newString(50, "*1v5Qlg|");
      Node node2 = new Node(98, node0, node1, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isNE());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(96, "");
      Node node1 = Node.newString(51, "");
      Node node2 = new Node(99, node1, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isOr());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(96, "*1vcQlg|", (-3187), (-3187));
      Node node1 = Node.newString(45, "*1vcQlg|");
      Node node2 = new Node(100, node1, node0, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseTestCode("");
      Node node2 = new Node(101, node0, node1, node1, 41, 35);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertTrue(node3.isAnd());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(96, "*1v5Qlg|");
      Node node1 = Node.newString(50, "*1v5Qlg|");
      Node node2 = new Node(4, node0, node1, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isString());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(122, node0, node0, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(122, node2.getType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newNumber(0.6448105556061947);
      Node node1 = new Node(122, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(49, ",Dx>.<HK`B!WXDj3", 1956, 1);
      Node node1 = new Node(122, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals((-1), node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(9, "=%U7;_vU#`P", 39, 4095);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("UnrecognizedCv1ri'ble vihibility: ");
      Node node1 = new Node(18, node0, node0, node0, 38, 82);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString((int) (byte)19, "-");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isVoid());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(20, node0, node0, node0, 44, 36);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(23, "com.google.common.collect.RegularImmutableMap$Values");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newString(24, "Y");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(0, node1.getLength());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(25, "Y");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isAdd());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString(33, "");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(34, 122, 34);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("");
      Node node1 = new Node(82, node0, node0, node0, (-1616), 2);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertEquals(82, node2.getType());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString(38, "undefined");
      Node node1 = new Node(21, node0, node0, node0, 2, (-641));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(85, "*1v5Qlg|");
      Node node1 = new Node(88, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString(96, "*1v5Qlg|");
      Node node1 = Node.newString(38, "m");
      Node node2 = new Node(29, node1, node1, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertFalse(node3.isName());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(90, "*1v5Qlg|");
      Node node1 = new Node(32, node0, node0, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertTrue(node2.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("UnrecognizedCv1i';le vihibility ");
      Node node1 = new Node(32, node0, node0, node0, 38, 44);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newNumber(62.32909044666762);
      Node node1 = new Node(32, node0, node0, node0, 53, 43);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(122, "*1v5Qlg|");
      Node node1 = Node.newString(44, "*1v5Qlg|", 35, 4095);
      Node node2 = new Node(32, node1, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newNumber((-4968.613175409929));
      Node node1 = new Node(29, node0, node0, node0, 2, 142);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseTestCode("SYNTAX_ERR-R_TYPE");
      Node node2 = new Node(86, node1, node0, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node2 = new Node(54, 15, 15);
      Node node3 = new Node(87, node0, node1, node2, node2);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertEquals(87, node4.getType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node node1 = Node.newString(63, "QlYd,r,z9");
      Node node2 = new Node(21, node0, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString(81, "SYNTAX_ERROR_TYPE");
      Node node2 = new Node(14, node1, node1, node0, 53, 37);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isComma());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node node1 = Node.newString(38, "undefined");
      Node node2 = new Node(16, node0, node0, node1, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isOr());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node node1 = Node.newString(38, "");
      Node node2 = new Node(16, node1, node1, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isDefaultCase());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("-");
      Node node1 = Node.newString("-");
      Node node2 = new Node(13, node0, node1, node1, 44, 36);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newNumber(70.65728757473063);
      Node node1 = Node.newString(54, "");
      Node node2 = new Node(16, node0, node1, node1, 39, 38);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString(38, "undefined");
      Node node1 = Node.newString(38, "");
      Node node2 = new Node(16, node1, node1, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(43, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(30, "");
      Node node1 = new Node(4095, node0, node0, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(50, Node.FREE_CALL);
  }
}
