/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:11:38 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.CombinedCompilerPass;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.FunctionNames;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.RecordFunctionInformation;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SemanticReverseAbstractInterpreter;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeCheck_ESTest extends TypeCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, (JSTypeRegistry) null, scope0, syntacticScopeCreator0, compilerOptions0.checkProvides, compilerOptions0.aggressiveVarCheck);
      Node node1 = new Node(35, node0, node0, node0, 15, 4);
      NodeTraversal.Callback[] nodeTraversal_CallbackArray0 = new NodeTraversal.Callback[5];
      CombinedCompilerPass combinedCompilerPass0 = new CombinedCompilerPass(compiler0, nodeTraversal_CallbackArray0);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, combinedCompilerPass0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "JSC_VAR_ARGUMENTS_SHADOWED_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, (JSTypeRegistry) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkMissingReturn, compilerOptions0.brokenClosureRequiresLevel);
      Node node1 = new Node(25, node0, node0, node0, (-561), 2);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node1);
      assertTrue(compiler0.hasErrors());
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode(" &&!Bb0`kt:.5u<", "left side of 'in'");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkGlobalThisLevel, compilerOptions0.brokenClosureRequiresLevel);
      Node node1 = new Node(26, node0, node0, node0, (-3148), 13);
      typeCheck0.check(node1, false);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CodingConvention codingConvention0 = compiler0.getCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, codingConvention0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null, scope0, typedScopeCreator0, compilerOptions0.reportMissingOverride, compilerOptions0.checkUnreachableCode);
      // Undeclared exception!
      try { 
        typeCheck0.process(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "JSC_VAR_ARGUMENTS_SHADOWED_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, (JSTypeRegistry) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkUnreachableCode, compilerOptions0.checkMethods);
      Node node1 = new Node(18, node0, node0, node0, 0, 30);
      // Undeclared exception!
      try { 
        typeCheck0.process(node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.brokenClosureRequiresLevel, compilerOptions0.reportUnknownTypes);
      Node node1 = new Node(19, node0, node0, node0, 105, 49);
      typeCheck0.process(node0, node0);
      assertFalse(node0.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_VAR_ARGUMENTS_SHADOWED_ERROR", "JSC_VAR_ARGUMENTS_SHADOWED_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkGlobalThisLevel, compilerOptions0.reportMissingOverride);
      // Undeclared exception!
      try { 
        typeCheck0.processForTesting(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("p^u", "p^u");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      // Undeclared exception!
      try { 
        typeCheck0.processForTesting(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH");
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkUnreachableCode, compilerOptions0.checkMethods);
      // Undeclared exception!
      try { 
        typeCheck0.processForTesting(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH");
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node1 = new Node(137, node0, node0, 26, 6);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkUnreachableCode, compilerOptions0.checkMethods);
      // Undeclared exception!
      try { 
        typeCheck0.processForTesting(node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("!(:qi()Eh", "YAz2m=gsK");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.checkUnreachableCode, compilerOptions0.checkRequires);
      typeCheck0.check(node0, false);
      assertEquals(42, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Node node0 = Node.newString(118, "EhjrzL0)?9d(wvzs^", (-307), 2);
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkProvides, compilerOptions0.checkFunctions);
      typeCheck0.check(node0, true);
      assertEquals(1, Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkProvides, compilerOptions0.checkFunctions);
      node0.addSuppression("");
      typeCheck0.check(node0, true);
      assertEquals(34, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("b5OIwu", "o.28!");
      Scope scope0 = new Scope(node0, compiler0);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, true, false);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, defaultCodingConvention0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0, typedScopeCreator0);
      CompilerOptions compilerOptions0 = compiler0.options;
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.checkMissingReturn, compilerOptions0.reportUnknownTypes);
      Node node1 = new Node(150, node0, node0, node0, 0, 148);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?d(wvzs^", "EhjrzL0)?d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.checkGlobalNamesLevel, compilerOptions0.checkProvides);
      Node node1 = new Node(4, node0, node0, node0, 45, 49);
      typeCheck0.check(node1, false);
      assertEquals(27, Node.SPECIALCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkFunctions);
      Node node1 = new Node(5, node0, node0, (-26), 1524);
      typeCheck0.check(node1, true);
      assertEquals(4, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_VAR_ARGUMENTS_SHADOWED_ERROR", "JSC_VAR_ARGUMENTS_SHADOWED_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkMissingGetCssNameLevel, compilerOptions0.checkGlobalNamesLevel);
      Node node1 = new Node(8, node0, node0, 16, 34);
      typeCheck0.check(node1, false);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, (JSTypeRegistry) null, scope0, syntacticScopeCreator0, compilerOptions0.checkMissingReturn, compilerOptions0.checkProvides);
      Node node1 = new Node(9, node0, node0, node0, 47, 2);
      // Undeclared exception!
      try { 
        typeCheck0.check(node1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("p^u", "p^u");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.aggressiveVarCheck, compilerOptions0.brokenClosureRequiresLevel);
      typeCheck0.check(node0, false);
      assertTrue(compiler0.hasErrors());
      assertEquals(3, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, (JSTypeRegistry) null);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator((ScopeCreator) null);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, (JSTypeRegistry) null, scope0, memoizedScopeCreator0, compilerOptions0.checkUnreachableCode, compilerOptions0.checkUndefinedProperties);
      Node node1 = new Node(11, node0, node0, node0, 159, 10);
      // Undeclared exception!
      try { 
        typeCheck0.check(node1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "JSC_VAR_ARGUMENTS_SHADOWED_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, (JSTypeRegistry) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkMissingReturn, compilerOptions0.checkMissingReturn);
      Node node1 = new Node(12, node0, node0, node0, 67, 116);
      typeCheck0.check(node1, false);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkMissingGetCssNameLevel, compilerOptions0.brokenClosureRequiresLevel);
      Node node1 = new Node(14, node0, node0, node0, 21, (-1594));
      typeCheck0.check(node1, false);
      assertEquals(3, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_VAR_ARGUMENTS_SHADOWED_ERROR", "JSC_VAR_ARGUMENTS_SHADOWED_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.reportMissingOverride, compilerOptions0.checkShadowVars);
      Node node1 = new Node(15, node0, node0, 29, 20);
      typeCheck0.check(node1, true);
      assertEquals(49, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_VAR_ARGUMENTS_SHADOWED_ERROR", "JSC_VAR_ARGUMENTS_SHADOWED_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkMissingGetCssNameLevel, compilerOptions0.checkGlobalNamesLevel);
      Node node1 = new Node(17, node0, 24, 0);
      typeCheck0.check(node1, false);
      assertEquals(47, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "JSC_VAR_ARGUMENTS_SHADOWED_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, (JSTypeRegistry) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkProvides, compilerOptions0.checkMethods);
      Node node1 = new Node(18, node0, node0, node0, 0, 30);
      typeCheck0.check(node1, false);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.brokenClosureRequiresLevel, compilerOptions0.checkMethods);
      Node node1 = new Node(19, node0, node0, node0, 105, 49);
      typeCheck0.check(node1, false);
      assertEquals(3, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_VAR_ARGUMENTS_SHADOWED_ERROR", "EhjrzL0)?9d(wvzs^");
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (ScopeCreator) null, compilerOptions0.checkUnreachableCode, compilerOptions0.checkUndefinedProperties);
      Node node1 = new Node(20, node0, node0, node0, (-694), 4);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(3, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.reportUnknownTypes, compilerOptions0.brokenClosureRequiresLevel);
      Node node1 = new Node(21, node0, node0, 23, 30);
      typeCheck0.check(node1, true);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, (JSTypeRegistry) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      Node node1 = new Node(23, node0, node0, node0, 0, 30);
      typeCheck0.check(node1, false);
      assertEquals(3, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, (JSTypeRegistry) null, scope0, syntacticScopeCreator0, compilerOptions0.checkUndefinedProperties, compilerOptions0.checkUndefinedProperties);
      Node node1 = new Node(24, node0, node0, node0, 4, 28);
      NodeTraversal.Callback[] nodeTraversal_CallbackArray0 = new NodeTraversal.Callback[6];
      CombinedCompilerPass combinedCompilerPass0 = new CombinedCompilerPass(compiler0, nodeTraversal_CallbackArray0);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, combinedCompilerPass0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "JSC_VAR_ARGUMENTS_SHADOWED_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.checkRequires, compilerOptions0.checkGlobalNamesLevel);
      Node node1 = new Node(27, node0, node0, 28, 192);
      typeCheck0.check(node1, false);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_VAR_ARGUMENTS_SHADOWED_ERROR", "JSC_VAR_ARGUMENTS_SHADOWED_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkMissingGetCssNameLevel, compilerOptions0.checkGlobalNamesLevel);
      Node node1 = new Node(28, node0, node0, node0, 32, 0);
      typeCheck0.check(node1, false);
      assertEquals(49, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("msg.no.colon.case", "JSC_VAR_ARGUMENTS_SHADOWED_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, (JSTypeRegistry) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkMissingGetCssNameLevel, compilerOptions0.checkMissingReturn);
      Node node1 = new Node(29, node0, node0, node0, 49, 1757);
      typeCheck0.check(node1, true);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?d(wvzs^", "EhjrzL0)?d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.checkGlobalNamesLevel, compilerOptions0.checkGlobalNamesLevel);
      Node node1 = new Node(30, node0, node0, 9, 79);
      typeCheck0.check(node1, false);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.brokenClosureRequiresLevel, compilerOptions0.checkMethods);
      Node node1 = new Node(31, node0, node0, 123, (-988));
      typeCheck0.check(node1, false);
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("b5OIwu", "o.28!");
      Scope scope0 = new Scope(node0, compiler0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, defaultCodingConvention0);
      CompilerOptions compilerOptions0 = compiler0.options;
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, typedScopeCreator0, compilerOptions0.reportMissingOverride, compilerOptions0.reportUnknownTypes);
      Node node1 = new Node(33, node0, node0, node0, 0, 148);
      // Undeclared exception!
      try { 
        typeCheck0.check(node1, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BLOCK [sourcename: java.lang.String@0000000732] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("can only implement interfaces", "can only implement interfaces");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkShadowVars, compilerOptions0.checkFunctions);
      Node node1 = new Node(34, node0, node0, 1, 34);
      typeCheck0.check(node1, false);
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("l9e", "78(");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Node node1 = new Node(37, node0, node0, node0, 31, 140);
      FunctionNames functionNames0 = new FunctionNames(compiler0);
      RecordFunctionInformation recordFunctionInformation0 = new RecordFunctionInformation(compiler0, functionNames0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, recordFunctionInformation0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_VAR_ARGUMENTS_SHADOWED_ERROR", "JSC_VAR_ARGUMENTS_SHADOWED_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.reportMissingOverride, compilerOptions0.checkProvides);
      Node node1 = new Node(42, node0, node0, node0, 1, 2);
      typeCheck0.check(node1, false);
      assertEquals(17, Node.TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_VAR_ARGUMENTS_SHADOWED_ERROR", "JSC_VAR_ARGUMENTS_SHADOWED_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkRequires, compilerOptions0.checkGlobalNamesLevel);
      Node node1 = new Node(43, node0, node0, 42, 31);
      typeCheck0.check(node1, false);
      assertFalse(node1.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.reportMissingOverride, compilerOptions0.aggressiveVarCheck);
      Node node1 = new Node(44, node0, node0, node0, 2, 34);
      typeCheck0.check(node1, false);
      assertEquals(31, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkRequires, compilerOptions0.checkGlobalThisLevel);
      Node node1 = new Node(45, node0, node0, (-4096), 60);
      typeCheck0.check(node1, false);
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.reportUnknownTypes, compilerOptions0.reportUnknownTypes);
      Node node1 = new Node(46, node0, node0, node0, 6, 30);
      typeCheck0.check(node1, false);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node1 = new Node(49, node0, node0, node0, 69, 2057);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
      typeCheck0.visit((NodeTraversal) null, node1, node1);
      assertEquals(22, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, (JSTypeRegistry) null, scope0, (ScopeCreator) null, compilerOptions0.reportMissingOverride, compilerOptions0.brokenClosureRequiresLevel);
      Node node1 = new Node(55, node0, node0, 1753, 1);
      // Undeclared exception!
      try { 
        typeCheck0.check(node1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_VA_ARGUMENTS_HADOWD_ERROR", "JSC_VA_ARGUMENTS_HADOWD_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkMissingGetCssNameLevel, compilerOptions0.checkGlobalNamesLevel);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?d(wvzs^", "EhjrzL0)?d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.checkMissingGetCssNameLevel, compilerOptions0.checkGlobalNamesLevel);
      Node node1 = new Node(91, node0, node0, 25, 1514);
      typeCheck0.check(node1, false);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(3, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("can only implement interfaces", "");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.brokenClosureRequiresLevel, compilerOptions0.reportUnknownTypes);
      Node node1 = new Node(115, node0, node0, 2005, 31);
      typeCheck0.check(node1, false);
      assertEquals(26, Node.DIRECTCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "6.[_");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkShadowVars);
      Node node1 = new Node(126, node0, node0, 25, 123);
      typeCheck0.check(node1, true);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "JSC_VAR_ARGUMENTS_SHADOWED_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, (JSTypeRegistry) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.reportUnknownTypes, compilerOptions0.checkProvides);
      Node node1 = new Node(128, node0, node0, node0, 49, 30);
      typeCheck0.check(node1, false);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, (JSTypeRegistry) null, scope0, syntacticScopeCreator0, compilerOptions0.brokenClosureRequiresLevel, compilerOptions0.checkFunctions);
      Node node1 = new Node(129, node0, node0, node0, 17, 285);
      // Undeclared exception!
      try { 
        typeCheck0.check(node1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, (JSTypeRegistry) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      Node node1 = new Node(135, node0, node0, node0, 0, 30);
      typeCheck0.check(node1, false);
      assertEquals(4, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.checkMethods, compilerOptions0.checkFunctions);
      Node node1 = new Node(137, node0, node0, 26, 6);
      typeCheck0.check(node1, false);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "6.[_");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, compilerOptions0.checkMissingGetCssNameLevel, compilerOptions0.checkUnreachableCode);
      Node node1 = new Node(140, node0, node0, node0, 126, 2);
      typeCheck0.check(node1, false);
      assertEquals(3, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, (JSTypeRegistry) null, scope0, (ScopeCreator) null, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkUndefinedProperties);
      Node node1 = new Node(144, node0, node0, node0, 1627, (-1046));
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "6.[_");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.aggressiveVarCheck, compilerOptions0.reportUnknownTypes);
      Node node1 = new Node(145, node0, node0, (-223), 20);
      typeCheck0.check(node1, false);
      assertEquals(3, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "JSC_VAR_ARGUMENTS_SHADOWED_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, (JSTypeRegistry) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      Node node1 = new Node(151, node0, node0, 0, 45);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.reportUnknownTypes, compilerOptions0.checkUnreachableCode);
      // Undeclared exception!
      try { 
        typeCheck0.check(node1, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 151
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.brokenClosureRequiresLevel, compilerOptions0.brokenClosureRequiresLevel);
      Node node1 = Node.newNumber(0.0);
      Node node2 = new Node(2, node0, node1, node1, 4, 123);
      typeCheck0.check(node1, false);
      assertEquals(3, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("could not resolve the name {0} to a type", "could not resolve the name {0} to a type");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      Scope scope0 = compiler0.getTopScope();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null, scope0, typedScopeCreator0, checkLevel0, checkLevel0);
      Node node1 = Node.newString("could not resolve the name {0} to a type", 12, 155);
      Node node2 = new Node(0, node0, node1, node1, 33, (-742));
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.checkRequires, compilerOptions0.checkRequires);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("EhjrzL0)?d(wvs^", "EhjrzL0)?d(wvs^");
      Node node0 = Node.newString(118, "EhjrzL0)?d(wvs^", (-315), 2);
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.brokenClosureRequiresLevel, compilerOptions0.checkFunctions);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "JSC_VAR_ARGUMENTS_SHADOWED_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, (JSTypeRegistry) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkMissingReturn, compilerOptions0.brokenClosureRequiresLevel);
      typeCheck0.check(node0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      scope0.declare("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", node0, functionType0, compilerInput0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.reportMissingOverride, compilerOptions0.checkUnreachableCode);
      typeCheck0.check(node0, false);
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      scope0.declare("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", node0, (JSType) null, compilerInput0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.reportMissingOverride, compilerOptions0.checkUnreachableCode);
      typeCheck0.check(node0, false);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Node node0 = Node.newString(0, "EhjrzL0)?9d(wvzs^", (-307), 2);
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.options;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkUnreachableCode, compilerOptions0.checkFunctions);
      node0.addSuppression("");
      typeCheck0.check(node0, true);
      assertEquals(4, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "JSC_VAR_ARGUMENTS_SHADOWED_ERROR");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, (JSTypeRegistry) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, syntacticScopeCreator0, compilerOptions0.checkMissingReturn, compilerOptions0.brokenClosureRequiresLevel);
      typeCheck0.check(node0, false);
      double double0 = typeCheck0.getTypedPercent();
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EhjrzL0)?9d(wvzs^", "EhjrzL0)?9d(wvzs^");
      Scope scope0 = new Scope(node0, compiler0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, (JSTypeRegistry) null, scope0, syntacticScopeCreator0, compilerOptions0.checkMethods, compilerOptions0.reportUnknownTypes);
      double double0 = typeCheck0.getTypedPercent();
      assertEquals(0.0, double0, 0.01);
  }
}
