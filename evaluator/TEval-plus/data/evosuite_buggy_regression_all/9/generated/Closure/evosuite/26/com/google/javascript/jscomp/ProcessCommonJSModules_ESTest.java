/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 04:49:24 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProcessCommonJSModules_ESTest extends ProcessCommonJSModules_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "NE");
      Node node0 = compiler0.parseTestCode("./");
      processCommonJSModules0.process(node0, node0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("com.google.javascript.jscomp.ProcessCommonJSModules$1", "com.google.javascript.jscomp.ProcessCommonJSModules$1");
      assertEquals("module$com.google.javascript.jscomp.ProcessCommonJSModules$1", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "aUgOhIzBY4Z-i";
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("aUgOhIzBY4Z-i");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, string0);
      processCommonJSModules0.process(node0, node0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "");
      String string0 = processCommonJSModules0.guessCJSModuleName("");
      assertEquals("module$", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "module$");
      JSModule jSModule0 = processCommonJSModules0.getModule();
      assertNull(jSModule0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("./module$L", "./module$L");
      assertEquals("module$module$L", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "NZ`6Y:h\"Y8rOZ/");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProcessCommonJSModules.toModuleName("../Myrh8HrgDO[p", "../Myrh8HrgDO[p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 13: ../Myrh8HrgDO[p
         //
         verifyException("com.google.javascript.jscomp.ProcessCommonJSModules", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "(function(t){})(y.prototype);";
      Node node0 = compiler0.parseTestCode("(function(t){})(y.prototype);");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, string0);
      processCommonJSModules0.process(node0, node0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "module$(function(t){})(y.prototype);";
      Node node0 = compiler0.parseTestCode("module$(function(t){})(y.prototype);");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, string0);
      Node node1 = new Node(node0.OPT_ARG_NAME, node0);
      processCommonJSModules0.process(node1, node1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "(function(t){})(y.prototype);//");
      SyntheticAst syntheticAst0 = new SyntheticAst("(function(t){})(y.prototype);//");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      // Undeclared exception!
      try { 
        processCommonJSModules0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "com.google.javascript.jscomp.RenameVars$ProcessVars";
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "com.google.javascript.jscomp.RenameVars$ProcessVars");
      Node node0 = compiler0.parseSyntheticCode("./", "com.google.javascript.jscomp.RenameVars$ProcessVars");
      processCommonJSModules0.process(node0, node0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "(function(t){})(y.prototype);";
      Node node0 = compiler0.parseTestCode(string0);
      boolean boolean0 = false;
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, string0, boolean0);
      processCommonJSModules0.process(node0, node0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "module.exports";
      Node node0 = compiler0.parseTestCode("module.exports");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, string0);
      processCommonJSModules0.process(node0, node0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "aUgOhIzBY4Z-i";
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("aUgOhIzBY4Z-i");
      Node node1 = compiler0.parseSyntheticCode(string0);
      node0.addChildrenToFront(node1);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, string0);
      processCommonJSModules0.process(node0, node0);
      long long0 = 1715L;
      System.setCurrentTimeMillis(long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "mEdule+exports";
      Node node0 = compiler0.parseTestCode("mEdule+exports");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, string0);
      processCommonJSModules0.process(node0, node0);
  }
}
