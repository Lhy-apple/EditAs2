/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:09:43 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.RemoveConstantExpressions;
import com.google.javascript.rhino.Node;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RemoveConstantExpressions_ESTest extends RemoveConstantExpressions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RemoveConstantExpressions removeConstantExpressions0 = new RemoveConstantExpressions((AbstractCompiler) null);
      Compiler compiler0 = new Compiler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromInputStream("", (InputStream) byteArrayInputStream0);
      Node node0 = compiler0.parse(jSSourceFile0);
      // Undeclared exception!
      try { 
        removeConstantExpressions0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ParallelCompilerPass$Result", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RemoveConstantExpressions removeConstantExpressions0 = new RemoveConstantExpressions((AbstractCompiler) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("_ ju", "c=P5h0bnh");
      removeConstantExpressions0.process(node0, node0);
      assertEquals(4, Node.DESCENDANTS_FLAG);
  }
}
