/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:01:15 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Normalize_ESTest extends Normalize_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize normalize0 = new Normalize(compiler0, false);
      Node node0 = new Node((-1661));
      Node node1 = new Node(26, node0);
      normalize0.process(node0, node0);
      assertEquals(0, Node.BOTH);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize normalize0 = new Normalize(compiler0, true);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("etP:raOrVarName", "etP:raOrVarName");
      Node node0 = compiler0.parse(jSSourceFile0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize0);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverse(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("c", "c");
      Node node0 = compiler0.parse(jSSourceFile0);
      Normalize.PropogateConstantAnnotations normalize_PropogateConstantAnnotations0 = new Normalize.PropogateConstantAnnotations(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_PropogateConstantAnnotations0);
      nodeTraversal0.traverse(node0);
      assertEquals(26, Node.DIRECTCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants((AbstractCompiler) null, true);
      Node node0 = new Node((-1661));
      // Undeclared exception!
      try { 
        normalize_VerifyConstants0.process(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
      Node node0 = new Node((-1661));
      Node node1 = new Node(26, node0);
      // Undeclared exception!
      try { 
        normalize_VerifyConstants0.process(node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(" Z,BKW", " Z,BKW");
      Node node0 = compiler0.parse(jSSourceFile0);
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
      nodeTraversal0.traverse(node0);
      assertFalse(node0.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("c", "c");
      Node node0 = compiler0.parse(jSSourceFile0);
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
      nodeTraversal0.traverse(node0);
      nodeTraversal0.traverse(node0);
      assertEquals(33, Node.NAME_PROP);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Normalize normalize0 = new Normalize((AbstractCompiler) null, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, normalize0);
      Node node0 = new Node(113);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverse(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize normalize0 = new Normalize(compiler0, false);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("etP:ramOrVarName", "etP:ramOrVarName");
      Node node0 = compiler0.parse(jSSourceFile0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize0);
      Node node1 = new Node(105, node0, node0, node0, node0);
      boolean boolean0 = normalize0.shouldTraverse(nodeTraversal0, node1, node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize normalize0 = new Normalize(compiler0, false);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("etP:ramr:arName", "etP:ramr:arName");
      Node node0 = compiler0.parse(jSSourceFile0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize0);
      nodeTraversal0.traverse(node0);
      nodeTraversal0.traverse(node0);
      assertTrue(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Normalize normalize0 = new Normalize((AbstractCompiler) null, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, normalize0);
      Node node0 = new Node(118, 118, 125);
      Node node1 = new Node(125, node0, node0, node0, node0);
      nodeTraversal0.traverse(node1);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize normalize0 = new Normalize(compiler0, false);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("bl3[G", "bl3[G");
      Node node0 = compiler0.parse(jSSourceFile0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize0);
      Node node1 = new Node(105, node0, node0, node0, node0);
      boolean boolean0 = normalize0.shouldTraverse(nodeTraversal0, node1, node1);
      assertTrue(boolean0);
  }
}
