/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 04:57:34 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      stringType0.getTypesUnderShallowEquality(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "Named type with empty name component", 0, (-27));
      assertFalse(namedType0.isResolved());
      
      namedType0.setValidator((Predicate<JSType>) null);
      assertFalse(namedType0.isEmptyType());
      assertFalse(namedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "83s");
      boolean boolean0 = errorFunctionType0.isStringValueType();
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isEmptyType());
      assertFalse(errorFunctionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      boolean boolean0 = errorFunctionType0.matchesUint32Context();
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.getJSDocInfo();
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      String string0 = stringType0.toDebugHashCodeString();
      assertEquals("{241}", string0);
      assertFalse(stringType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isRegexpType();
      assertFalse(boolean0);
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        booleanType0.isString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
      assertFalse(jSType0.isEnumElementType());
      
      stringType0.getTypesUnderInequality(jSType0);
      assertFalse(stringType0.isAllType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isVoidType());
      assertFalse(stringType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      Node node0 = Node.newNumber(1.0, (-1), (-713));
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, unknownType0, false);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, arrowType0);
      boolean boolean0 = proxyObjectType0.matchesObjectContext();
      assertFalse(proxyObjectType0.isEmptyType());
      assertFalse(boolean0);
      assertFalse(proxyObjectType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.unboxesTo();
      assertFalse(stringType0.isEmptyType());
      assertFalse(stringType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      boolean boolean0 = instanceObjectType0.canTestForEqualityWith(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = templateType0.isConstructor();
      assertFalse(boolean0);
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = errorFunctionType0.isArrayType();
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      AllType allType0 = new AllType(jSTypeRegistry0);
      // Undeclared exception!
      try { 
        allType0.setValidator((Predicate<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("com.google.common.base.CharMatcher$14", "", (-1), 16);
      boolean boolean0 = jSType0.isBooleanValueType();
      assertFalse(jSType0.isAllType());
      assertFalse(boolean0);
      assertFalse(jSType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.canBeCalled();
      assertFalse(stringType0.isEmptyType());
      assertFalse(boolean0);
      assertFalse(stringType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      boolean boolean0 = unionType0.hasDisplayName();
      assertFalse(unionType0.isEmptyType());
      assertFalse(boolean0);
      assertFalse(unionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      boolean boolean0 = errorFunctionType0.isNumber();
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a type name", stringType0);
      boolean boolean0 = enumType0.isTemplateType();
      assertFalse(enumType0.isEmptyType());
      assertFalse(boolean0);
      assertFalse(enumType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "g8-.]QvPrJqq/(", "d1~nj.Y", (-2991), (-18));
      boolean boolean0 = namedType0.isOrdinaryFunction();
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isEmptyType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isNamedType();
      assertFalse(boolean0);
      assertTrue(noResolvedType0.isEmptyType());
      assertFalse(noResolvedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.matchesInt32Context();
      assertFalse(allType0.isEmptyType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = stringType0.getTypesUnderInequality(stringType0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType_TypePair0.typeA);
      boolean boolean0 = proxyObjectType0.isInterface();
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(boolean0);
      assertFalse(stringType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isInstanceType();
      assertFalse(boolean0);
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, stringType0);
      boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(proxyObjectType0.isEmptyType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, errorFunctionType0);
      boolean boolean0 = parameterizedType0.isTheObjectType();
      assertFalse(parameterizedType0.isAllType());
      assertFalse(parameterizedType0.isEmptyType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zXRMXUr6tNc3*d");
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "", errorFunctionType0);
      boolean boolean0 = enumType0.canTestForShallowEqualityWith(errorFunctionType0);
      assertFalse(enumType0.isEmptyType());
      assertFalse(boolean0);
      assertFalse(enumType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
      boolean boolean0 = indexedType0.isEnumType();
      assertFalse(indexedType0.isAllType());
      assertFalse(boolean0);
      assertFalse(indexedType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      boolean boolean0 = errorFunctionType0.isNumberValueType();
      assertFalse(errorFunctionType0.isEmptyType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "fMQ6ps)c+ds2");
      errorFunctionType0.forceResolve((ErrorReporter) null, (StaticScope<JSType>) null);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.forgiveUnknownNames();
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      errorFunctionType0.clearResolved();
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
      boolean boolean0 = templateType0.isFunctionPrototypeType();
      assertFalse(templateType0.isEmptyType());
      assertFalse(boolean0);
      assertFalse(templateType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = errorFunctionType0.getLeastSupertype(stringType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "Not declared as a constructor");
      enumElementType0.toString();
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "t");
      boolean boolean0 = errorFunctionType0.hasDisplayName();
      assertFalse(errorFunctionType0.isEmptyType());
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      boolean boolean0 = errorFunctionType0.hasDisplayName();
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEmptyType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      noObjectType0.testForEquality(instanceObjectType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(noObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[4] = (JSType) noResolvedType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, jSTypeArray0);
      assertFalse(functionType0.isEmptyType());
      assertFalse(functionType0.isAllType());
      assertFalse(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = JSType.isEquivalent(stringType0, stringType0);
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEmptyType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$TypePair");
      JSType jSType0 = errorFunctionType0.getPropertyType("[+5=u7o");
      boolean boolean0 = JSType.isEquivalent(jSType0, (JSType) null);
      assertFalse(boolean0);
      assertFalse(jSType0.isEmptyType());
      assertFalse(jSType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.equals(jSTypeRegistry0);
      assertFalse(stringType0.isEmptyType());
      assertFalse(stringType0.isAllType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.equals(errorFunctionType0);
      assertFalse(allType0.isEmptyType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, arrowType0, "Not declared as a constructor");
      enumElementType0.findPropertyType("Not declared as a constructor");
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.findPropertyType("zP2P");
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = errorFunctionType0.canAssignTo(stringType0);
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEmptyType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, errorFunctionType0);
      boolean boolean0 = parameterizedType0.canAssignTo(allType0);
      assertFalse(parameterizedType0.isEmptyType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(parameterizedType0.isAllType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ObjectType objectType0 = stringType0.dereference();
      assertFalse(objectType0.isEmptyType());
      assertNotNull(objectType0);
      assertFalse(objectType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "fMQ6ps)c+ds2");
      ObjectType objectType0 = errorFunctionType0.dereference();
      assertNotNull(objectType0);
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.getTypesUnderInequality(allType0);
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      errorFunctionType0.getTypesUnderEquality(unknownType0);
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "54iD],yzIfj|a<");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(noResolvedType0);
      errorFunctionType0.getGreatestSubtype(jSType_TypePair0.typeB);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      allType0.testForEqualityHelper(allType0, noType0);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zXRMXUr6tNc3*d");
      StringType stringType0 = new StringType(jSTypeRegistry0);
      Node node0 = Node.newNumber((double) 1, 2, (-498));
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "v%8a,", false);
      errorFunctionType0.testForEqualityHelper(unresolvedTypeExpression0, stringType0);
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isEmptyType());
      assertFalse(unresolvedTypeExpression0.isAllType());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
      instanceObjectType0.testForEqualityHelper(noResolvedType0, instanceObjectType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      NoType noType0 = (NoType)unionType0.getRestrictedTypeGivenToBooleanOutcome(true);
      stringType0.getTypesUnderInequality(noType0);
      assertTrue(noType0.hasCachedValues());
      assertFalse(stringType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      NoType noType0 = (NoType)unionType0.meet(stringType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noType0, ".L2]o<z{S");
      enumElementType0.testForEquality(noType0);
      assertFalse(enumElementType0.isAllType());
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      NoType noType0 = new NoType(jSTypeRegistry0);
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, errorFunctionType0, noType0, true);
      errorFunctionType0.getTypesUnderEquality(functionPrototypeType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, stringType0, "}PRsDgmKCz u");
      stringType0.getTypesUnderInequality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedList0);
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        booleanType0.testForEquality(unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      boolean boolean0 = unknownType0.canTestForShallowEqualityWith(stringType0);
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEmptyType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", noObjectType0);
      boolean boolean0 = enumType0.canTestForShallowEqualityWith(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "g8-.]QvPrJqq/(", "d1~nj.Y", (-2961), (-18));
      JSType jSType0 = jSTypeRegistry0.createOptionalType(namedType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      namedType0.defineInferredProperty("lp", jSType0, true, node0);
      assertFalse(namedType0.isEmptyType());
      assertFalse(namedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = JSType.getLeastSupertype((JSType) stringType0, (JSType) stringType0);
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      JSType jSType0 = unknownType0.getGreatestSubtype(recordType0);
      assertFalse(jSType0.isEmptyType());
      assertFalse(jSType0.equals((Object)unknownType0));
      assertNotSame(jSType0, unknownType0);
      assertFalse(jSType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = JSType.getGreatestSubtype((JSType) stringType0, (JSType) stringType0);
      assertFalse(jSType0.isEmptyType());
      assertFalse(jSType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber((double) 1, 2, (-498));
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "v%8a,", false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      JSType jSType0 = unknownType0.getGreatestSubtype(unresolvedTypeExpression0);
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEmptyType());
      assertNotSame(jSType0, unknownType0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(errorFunctionType0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, errorFunctionType0);
      parameterizedType0.testForEquality(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a type name", stringType0);
      JSType jSType0 = JSType.getGreatestSubtype((JSType) enumType0, (JSType) stringType0);
      assertTrue(jSType0.isEmptyType());
      assertFalse(enumType0.isEmptyType());
      assertFalse(enumType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      JSType.getLeastSupertype((JSType) noResolvedType0, (JSType) functionPrototypeType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Named type with empty name component", stringType0);
      JSType jSType0 = enumType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertFalse(enumType0.isEmptyType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertFalse(jSType0.isEmptyType());
      assertFalse(jSType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = errorFunctionType0.getLeastSupertype(stringType0);
      stringType0.getTypesUnderEquality(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      nullType0.getTypesUnderShallowInequality(recordType0);
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isEmptyType());
      assertFalse(recordType0.isAllType());
      assertFalse(nullType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "(2J;");
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      errorFunctionType0.getTypesUnderShallowInequality(unionType0);
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isEmptyType());
      assertFalse(errorFunctionType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      voidType0.getTypesUnderShallowInequality(voidType0);
      assertFalse(voidType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      nullType0.getTypesUnderShallowInequality(nullType0);
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      voidType0.getTypesUnderShallowInequality(nullType0);
      assertFalse(nullType0.isVoidType());
      assertFalse(voidType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      boolean boolean0 = unknownType0.differsFrom(stringType0);
      assertFalse(unknownType0.isAllType());
      assertTrue(boolean0);
      assertFalse(unknownType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      boolean boolean0 = stringType0.differsFrom(objectType0);
      assertTrue(objectType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      JSType jSType0 = errorFunctionType0.getPropertyType("com.google.javascript.rhino.jstype.ArrowType");
      boolean boolean0 = stringType0.differsFrom(jSType0);
      assertFalse(jSType0.isEmptyType());
      assertFalse(jSType0.isAllType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.jscomp.TightenTypes$VariableAssignAction");
      boolean boolean0 = errorFunctionType0.differsFrom(errorFunctionType0);
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isEmptyType());
      assertFalse(errorFunctionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.jscomp.TightenTypes$VariableAssignAction");
      FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
      boolean boolean0 = errorFunctionType0.canAssignTo(functionType0);
      assertTrue(boolean0);
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a type name", stringType0);
      stringType0.getTypesUnderInequality(enumType0);
      assertFalse(enumType0.isEmptyType());
      assertFalse(enumType0.isAllType());
      assertFalse(stringType0.isEmptyType());
  }
}
