/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:00:14 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("vvW<(8 _ueaV%%");
      Node node1 = new Node(26, node0, 0, 35);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedSet$Builder");
      Node node1 = new Node(27, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("i2\"z");
      Node node1 = new Node(32, node0, 11, 2);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(33, 30, 4);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(35, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("#");
      Node node1 = new Node(36, node0, 14, 15);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("i2\"z");
      Node node1 = new Node(37, node0, 39, 4095);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertEquals(4095, node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("_uEkEQML[5`4=\"");
      Node node1 = Node.newString(11, "_uEkEQML[5`4=\"", 44, 22);
      Node node2 = new Node(9, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("WM");
      Node node1 = Node.newString("WM");
      Node node2 = new Node(10, node1, node0, node1, node0, 43, 1015);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("com.google.javascript.jscomp.mozilla.rhino.DefaultErrorReporter");
      Node node1 = new Node(20, 13, 51);
      Node node2 = new Node(11, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(51, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("87eP>e>he&<.ue(y^");
      Node node1 = Node.newString("87eP>e>he&<.ue(y^", 13, 16);
      Node node2 = new Node(12, node0, node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("[3`+.c$");
      Node node1 = new Node(20, 36, 30);
      Node node2 = new Node(13, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("[3`+.c$");
      Node node1 = new Node(20, 160, 30);
      Node node2 = new Node(14, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("87eP>e>e&<e(y^");
      Node node1 = Node.newString("87eP>e>e&<e(y^", 13, 16);
      Node node2 = new Node(15, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("; ^FC32Nid_81{z");
      Node node1 = Node.newString(2, "; ^FC32Nid_81{z");
      Node node2 = new Node(16, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("WM0");
      Node node1 = Node.newString("WM0", 13, 30);
      Node node2 = new Node(17, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("[3`+.c$");
      Node node1 = new Node(20, 1, 30);
      Node node2 = new Node(18, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("r@T?M0");
      Node node1 = Node.newString("r@T?M0", 13, 30);
      Node node2 = new Node(19, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("_uEkEQML[5`4=\"");
      Node node1 = new Node(20, 13, 51);
      Node node2 = new Node(20, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("[3`+.c$");
      Node node1 = new Node(20, 36, 30);
      Node node2 = new Node(21, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Can't negate non-numeric value: {0}");
      Node node1 = Node.newString("Y;2jlVS", 14, 42);
      Node node2 = new Node(22, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = new Node(46, 4, 32);
      Node node2 = new Node(23, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("WM0");
      Node node1 = Node.newString("WM0");
      Node node2 = new Node(24, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = new Node(42);
      Node node2 = new Node(25, node1, node0, node1, node0, 14, 4095);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4095, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("EM0");
      Node node1 = Node.newString("EM0", 1, 7);
      Node node2 = new Node(28, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedSet$Builder");
      Node node1 = new Node(41, 35, 0);
      Node node2 = new Node(30, node0, node1, node0, node1, 9, 49);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedSet$Builder");
      Node node1 = Node.newString("");
      Node node2 = new Node(31, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("WM0");
      Node node1 = new Node((-2), 19, 4095);
      Node node2 = new Node(33, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("WM0");
      Node node1 = Node.newString("WM0", 13, 30);
      Node node2 = new Node(34, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(34, node3.getType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = Node.newString("", 13, 30);
      Node node2 = new Node(35, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(">");
      Node node1 = new Node(42);
      Node node2 = new Node(36, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("com.google.common.olect.ImmutableSortedSet$Builder");
      Node node1 = new Node(20, 13, 51);
      Node node2 = new Node(38, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Q");
      Node node1 = Node.newString("Q", 0, 2);
      Node node2 = new Node(39, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(">");
      Node node1 = new Node(24);
      Node node2 = new Node(40, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = Node.newString("", 22, 19);
      Node node2 = new Node(41, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(">");
      Node node1 = Node.newString("", 20, 29);
      Node node2 = new Node(42, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(42, node3.getType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("87eP>e>he&<.ue(y^");
      Node node1 = Node.newString("le[ngth", 13, 16);
      Node node2 = new Node(43, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("or@T?M0");
      Node node1 = Node.newString("or@T?M0", 13, 30);
      Node node2 = new Node(44, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("EM0");
      Node node1 = Node.newString("EM0", 1, 7);
      Node node2 = new Node(45, node1, node0, node0, 33, 16);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("com.google.common.Sollect.ImmutableSortedSet$Builder");
      Node node1 = Node.newString("com.google.common.Sollect.ImmutableSortedSet$Builder", 7, 15);
      Node node2 = new Node(47, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = Node.newString("", 22, 19);
      Node node2 = new Node(48, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(48, node3.getType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(">");
      Node node1 = new Node(42);
      Node node2 = new Node(49, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = Node.newString("", 22, 19);
      Node node2 = new Node(50, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("%M(nEsk #XgC");
      Node node1 = Node.newString("%M(nEsk #XgC", 18, 12);
      Node node2 = new Node(51, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("#Gr$8;^`nZ`W3Wwt");
      Node node1 = Node.newString("#Gr$8;^`nZ`W3Wwt");
      Node node2 = new Node(52, node1, node0, node1, node0, 20, 15);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("=`PY?g31<<");
      Node node1 = new Node(3445, 46, 6);
      Node node2 = new Node(54, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Divide by 0");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[4];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node2 = new Node(55, node1, node0, node0, 0, 33);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(33, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(">");
      Node node1 = Node.newString("", 20, 29);
      Node node2 = new Node(57, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(57, node3.getType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(">");
      Node node1 = new Node(1, 51, 4095);
      Node node2 = new Node(58, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(58, node3.getType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("$M(nEsk M#XpgC");
      Node node1 = new Node(23, 28, 28);
      Node node2 = new Node(59, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("87eP>e>he&<.ue(y^");
      Node node1 = Node.newString("87eP>e>he&<.ue(y^", 13, 16);
      Node node2 = new Node(63, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedSet$Builder");
      Node node1 = Node.newString("com.google.common.collect.ImmutableSortedSet$Builder", 36, 19);
      Node node2 = new Node(64, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("<li>REFERENCED BY: ");
      Node node1 = Node.newString("<li>REFERENCED BY: ", 50, (-1660));
      Node node2 = new Node(66, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("87eP>e>he&<.ue(y^");
      Node node1 = Node.newString("87eP>e>he&<.ue(y^", 13, 16);
      Node node2 = new Node(68, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedSet$Builder");
      Node node1 = Node.newString("com.google.common.collect.ImmutableSortedSet$Builder", 18, 42);
      Node node2 = new Node(69, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = new Node(46, 4, 32);
      Node node2 = new Node(70, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(">");
      Node node1 = Node.newString("", (-3), 21);
      Node node2 = new Node(71, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(71, node3.getType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedSet$Builder");
      Node node1 = new Node(20, 13, 51);
      Node node2 = new Node(72, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(72, node3.getType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("WB0");
      Node node1 = Node.newString("WB0", 20, 25);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
      Node node3 = new Node(74, node1, node2);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertEquals(2, node4.getChildCount());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("WB0");
      Node node1 = Node.newString("WB0", 20, 25);
      Node node2 = new Node(75, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(75, node3.getType());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedSet$Builder");
      Node node1 = new Node((-2178), 41, (-5009));
      Node node2 = new Node(76, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(76, node3.getType());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("KhSI[QicT_");
      Node node1 = new Node(42, 12, 32);
      Node node2 = new Node(77, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("87eP>e>he&<.ue(y^");
      Node node1 = Node.newString("87eP>e>he&<.ue(y^", 13, 16);
      Node node2 = new Node(78, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("KhSI[QicT_");
      Node node1 = new Node(138, 93, 2);
      Node node2 = new Node(79, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(79, node3.getType());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("WM0");
      Node node1 = Node.newString("WM0", 21, 2);
      Node node2 = new Node(80, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("|");
      Node node1 = new Node(46, 4, 32);
      Node node2 = new Node(81, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(81, node3.getType());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Divide by 0");
      Node node1 = new Node(25, 142, 32);
      Node node2 = new Node(82, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node1.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("WM0");
      Node node1 = Node.newString("WM0", 21, 422);
      Node node2 = new Node(84, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("87eP>e>he&<.ue(y^");
      Node node1 = Node.newString("87eP>e>he&<.ue(y^", 13, 16);
      Node node2 = new Node(85, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("KhS{I[QicT_");
      Node node1 = new Node(1);
      Node node2 = new Node(86, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(86, node3.getType());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("WM0");
      Node node1 = Node.newString("WM0", 21, 422);
      Node node2 = new Node(87, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(">");
      Node node1 = Node.newString("", 20, 29);
      Node node2 = new Node(88, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("com.google.javascript.jscomp.MethodCompilerPass");
      Node node1 = new Node(31, 2, 4);
      Node node2 = new Node(89, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedSet$Builder");
      Node node1 = Node.newString("com.google.common.collect.ImmutableSortedSet$Builder", 1, 1);
      Node node2 = new Node(90, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("length");
      Node node1 = Node.newString("length", 21, 2);
      Node node2 = new Node(91, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("WM");
      Node node1 = Node.newString("WM");
      Node node2 = new Node(92, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Divide by 0");
      Node node1 = Node.newString("Array index out of bounds: {0}");
      Node node2 = new Node(93, node0, node1, node1, node1, 24, 2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("7r$");
      Node node1 = new Node(25, 142, 32);
      Node node2 = new Node(94, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("cm.google.ommo.collect.ImmutableSortedSet$Builder");
      Node node1 = Node.newString("cm.google.ommo.collect.ImmutableSortedSet$Builder", 33, 15);
      Node node2 = new Node(95, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("; ^Fu32:id9_81{z");
      Node node1 = new Node(1);
      Node node2 = new Node(96, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(":N~%O");
      Node node1 = Node.newString(51, ":N~%O", 49, 1);
      Node node2 = new Node(97, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("WM0");
      Node node1 = Node.newString("WM0", 4, 2);
      Node node2 = new Node(98, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("coH.google.com;on.collect.ImmutableSortedSet$B!ilder");
      Node node1 = new Node(20, 13, 51);
      Node node2 = new Node(99, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(99, node3.getType());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(">");
      Node node1 = Node.newString("", (-3), 21);
      Node node2 = new Node(100, node1, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("object");
      Node node1 = Node.newString("object", 33, 15);
      Node node2 = new Node(8, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("i2\"z");
      Node node1 = new Node(32, node0, 11, 2);
      node1.removeChild(node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertFalse(node2.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("i2\"z");
      Node node1 = new Node(32, node0, 11, 2);
      node0.setType(12);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = new Node(29, node0, 2, 18);
      Node node2 = new Node(2, node1, node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Divide by 0");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node2 = new Node(52, node1, node0, node0, 0, 33);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(52, node3.getType());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("7$rh|cbR1fX+");
      Node node1 = Node.newString("7$rh|cbR1fX+", 44, (-2));
      Node node2 = new Node(100, node1, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedSet$Builder");
      Node node1 = Node.newString(" JS4QG`J#", 1, 86);
      Node node2 = new Node(101, node0, node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("KhSI[QicT_");
      Node node1 = new Node(4, 28, 32);
      Node node2 = new Node(101, node1, node0);
      Node node3 = new Node(42, node2, 48, 14);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(101, node4.getType());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("_eL}=(9nmG9]");
      Node node1 = new Node(20, 0, 0);
      Node node2 = new Node(21, node0, node0, node0, node1, 0, 45);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("com.google.common.collect.ImmutableSortedSet$Builder");
      Node node1 = Node.newString("com.google.common.collect.ImmutableSortedSet$Builder", 1, 1);
      Node node2 = new Node(21, node0, node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("87eP>e>he&<.ue(y^");
      Node node1 = Node.newNumber((double) 0, 27, 43);
      Node node2 = new Node(21, node1, node0, node0, 39, 3);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = Node.newString("", 22, 19);
      Node node2 = new Node(13, node1, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("}U:2/:Vk!W?to]3gSSug");
      Node node1 = Node.newString("7$rh|cbR1fX+", 46, 45);
      Node node2 = new Node(46, node1, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("; FjR2Nid_81{z");
      Node node1 = new Node(37, node0, 39, 4095);
      node1.removeFirstChild();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("_uEkEQML[5`4=\"");
      Node node1 = Node.newString(11, "_uEkEQML[5`4=\"", 44, 22);
      Node node2 = new Node(37, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("WM0");
      Node node1 = Node.newString("WM0", 81, 81);
      Node node2 = new Node(33, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(33, node3.getType());
  }
}
