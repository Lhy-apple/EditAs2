/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 04:57:55 GMT 2023
 */

package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayComprehensionLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.Assignment;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.Block;
import com.google.javascript.jscomp.mozilla.rhino.ast.BreakStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.CatchClause;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ConditionalExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.ContinueStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.DoLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.ElementGet;
import com.google.javascript.jscomp.mozilla.rhino.ast.EmptyExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.ForLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.FunctionCall;
import com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.Label;
import com.google.javascript.jscomp.mozilla.rhino.ast.LabeledStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Name;
import com.google.javascript.jscomp.mozilla.rhino.ast.NewExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ObjectLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty;
import com.google.javascript.jscomp.mozilla.rhino.ast.ParenthesizedExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.PropertyGet;
import com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Scope;
import com.google.javascript.jscomp.mozilla.rhino.ast.StringLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.SwitchCase;
import com.google.javascript.jscomp.mozilla.rhino.ast.ThrowStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer;
import com.google.javascript.jscomp.mozilla.rhino.ast.WhileLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.WithStatement;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IRFactory_ESTest extends IRFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      EmptyExpression emptyExpression0 = new EmptyExpression(42, 1);
      astRoot0.addChildrenToBack(emptyExpression0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = IRFactory.transformTree(astRoot0, "yh^'TN7Vb.x}0sn", (Config) null, toolErrorReporter0);
      assertEquals(132, node0.getType());
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ObjectProperty objectProperty0 = new ObjectProperty();
      astRoot0.addChildrenToBack(objectProperty0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Config config0 = new Config(treeSet0, treeSet0, true, true);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "language version", config0, toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.IRFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      DoLoop doLoop0 = new DoLoop(2);
      astRoot0.addChildrenToBack(doLoop0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config config0 = new Config(treeSet0, treeSet0, true, true);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "", config0, toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.IRFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ElementGet elementGet0 = new ElementGet();
      astRoot0.addChildrenToBack(elementGet0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "error reporter", (Config) null, toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.IRFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      FunctionNode functionNode0 = new FunctionNode(110);
      astRoot0.addChildrenToBack(functionNode0);
      Config config0 = new Config(treeSet0, treeSet0, false, false);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "error reporter", config0, toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.IRFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      WhileLoop whileLoop0 = new WhileLoop();
      astRoot0.addChildrenToBack(whileLoop0);
      Config config0 = new Config(treeSet0, treeSet0, false, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "kHVvRSYMes?fqt", config0, toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.IRFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true);
      NumberLiteral numberLiteral0 = new NumberLiteral();
      astRoot0.addChildrenToBack(numberLiteral0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = IRFactory.transformTree(astRoot0, "Catch clauses are not supported", config0, toolErrorReporter0);
      assertTrue(node0.hasOneChild());
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Config config0 = new Config(treeSet0, treeSet0, false, false);
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(2, 8, astRoot0);
      astRoot0.addChildrenToBack(parenthesizedExpression0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "", config0, toolErrorReporter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true);
      ThrowStatement throwStatement0 = new ThrowStatement(astRoot0);
      astRoot0.addChildrenToBack(throwStatement0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "error reporter", config0, toolErrorReporter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      NewExpression newExpression0 = new NewExpression(8, 20);
      astRoot0.addChildrenToBack(newExpression0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Config config0 = new Config(treeSet0, treeSet0, false, false);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "language version", config0, toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.IRFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      StringLiteral stringLiteral0 = new StringLiteral(2865, 14);
      astRoot0.addChildrenToBack(stringLiteral0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "com.google.javascript.jscomp.parsing.IRFactory", config0, toolErrorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      Scope scope0 = new Scope(26, 128);
      astRoot0.addChildrenToBack(scope0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = IRFactory.transformTree(astRoot0, "error reporter", (Config) null, toolErrorReporter0);
      assertTrue(node0.hasOneChild());
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      Label label0 = new Label();
      astRoot0.addChildrenToBack(label0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config config0 = new Config(treeSet0, treeSet0, false, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "0ON", config0, toolErrorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      CatchClause catchClause0 = new CatchClause();
      ExpressionStatement expressionStatement0 = new ExpressionStatement(catchClause0, true);
      astRoot0.addChildrenToBack(expressionStatement0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "language version", config0, toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      PropertyGet propertyGet0 = new PropertyGet();
      astRoot0.addChildrenToBack(propertyGet0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "error reporter", config0, toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      WithStatement withStatement0 = new WithStatement();
      astRoot0.addChildrenToBack(withStatement0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "error reporter", config0, toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop(143);
      astRoot0.addChild(arrayComprehensionLoop0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config config0 = new Config(treeSet0, linkedHashSet0, false, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "", config0, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ForLoop forLoop0 = new ForLoop(1, 0);
      astRoot0.addChildrenToBack(forLoop0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getModifies();
      Config config0 = new Config(set0, set0, false, false);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "language version", config0, toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      Context.getCurrentContext();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(3, 2, token_CommentType0, "l]<dju1s?q]-|I/@");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false);
      astRoot0.addChildrenToBack(comment0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = IRFactory.transformTree(astRoot0, "l]<dju1s?q]-|I/@", config0, toolErrorReporter0);
      assertEquals(132, node0.getType());
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(3, 2, token_CommentType0, "l]<dju1s?q]-|I/@");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      astRoot0.addComment(comment0);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      IRFactory.transformTree(astRoot0, "l]<dju1s?q]-|I/@", config0, toolErrorReporter0);
      Node node0 = IRFactory.transformTree(astRoot0, "l]<dju1s?q]-|I/@", config0, toolErrorReporter0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK;
      Comment comment0 = new Comment(3, 2, token_CommentType0, "l]<dju1s?q]-|I/@");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      astRoot0.addComment(comment0);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = IRFactory.transformTree(astRoot0, "l]<dju1s?q]-|I/@", config0, toolErrorReporter0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(3, 2, token_CommentType0, "l]<dju1s?q]-|I/@");
      astRoot0.setJsDocNode(comment0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = IRFactory.transformTree(astRoot0, "l]<dju1s?q]-|I/@", config0, toolErrorReporter0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      AstRoot astRoot0 = new AstRoot(19);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, false);
      Node node0 = IRFactory.transformTree(astRoot0, "*/\n", config0, toolErrorReporter0);
      assertEquals((-1), node0.getCharno());
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      VariableInitializer variableInitializer0 = new VariableInitializer();
      Block block0 = new Block();
      block0.addChildToBack(variableInitializer0);
      astRoot0.addChildrenToBack(block0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Config config0 = new Config(treeSet0, treeSet0, false, false);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "l]<dju1s?q]-|I/@", config0, toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config config0 = new Config(treeSet0, treeSet0, false, false);
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(5);
      astRoot0.addChildrenToBack(arrayLiteral0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      Node node0 = IRFactory.transformTree(astRoot0, "language version", config0, errorCollector0);
      assertEquals(132, node0.getType());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      BreakStatement breakStatement0 = new BreakStatement(21, 9);
      astRoot0.addChildrenToBack(breakStatement0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config config0 = new Config(treeSet0, treeSet0, false, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = IRFactory.transformTree(astRoot0, "error reporter", config0, toolErrorReporter0);
      assertTrue(node0.hasOneChild());
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Context.getCurrentContext();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Context.getCurrentContext();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      LabeledStatement labeledStatement0 = new LabeledStatement(2, 12);
      astRoot0.addChildrenToBack(labeledStatement0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Config config0 = new Config(treeSet0, treeSet0, false, false);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "language version", config0, toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ObjectLiteral objectLiteral0 = new ObjectLiteral((-1865));
      astRoot0.addChildrenToBack(objectLiteral0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = IRFactory.transformTree(astRoot0, "error reporter", (Config) null, toolErrorReporter0);
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ReturnStatement returnStatement0 = new ReturnStatement(12);
      astRoot0.addChildrenToBack(returnStatement0);
      Config config0 = new Config(treeSet0, treeSet0, false, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = IRFactory.transformTree(astRoot0, "", config0, toolErrorReporter0);
      assertEquals(132, node0.getType());
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Block block0 = new Block();
      ReturnStatement returnStatement0 = new ReturnStatement(12);
      returnStatement0.setReturnValue(block0);
      astRoot0.addChildrenToBack(returnStatement0);
      Config config0 = new Config(treeSet0, treeSet0, false, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = IRFactory.transformTree(astRoot0, "", config0, toolErrorReporter0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SwitchCase switchCase0 = new SwitchCase();
      astRoot0.addChildrenToBack(switchCase0);
      Config config0 = new Config(treeSet0, treeSet0, false, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = IRFactory.transformTree(astRoot0, "error reporter", config0, toolErrorReporter0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      VariableDeclaration variableDeclaration0 = new VariableDeclaration();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false);
      astRoot0.addChildrenToBack(variableDeclaration0);
      Node node0 = IRFactory.transformTree(astRoot0, "error reporter", config0, toolErrorReporter0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      Assignment assignment0 = new Assignment(9, astRoot0, astRoot0, 30);
      astRoot0.addChildrenToBack(assignment0);
      Context.getCurrentContext();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      FunctionCall functionCall0 = new FunctionCall(14, 16);
      astRoot0.addChildrenToBack(functionCall0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "language version", (Config) null, toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ExpressionStatement expressionStatement0 = new ExpressionStatement(140, 2);
      astRoot0.addChildrenToBack(expressionStatement0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Config config0 = new Config(treeSet0, treeSet0, false, true);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "language version", config0, toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
