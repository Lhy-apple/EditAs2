/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:07:17 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.MethodCheck;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MethodCompilerPass_ESTest extends MethodCompilerPass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      MethodCheck methodCheck0 = new MethodCheck(compiler0, checkLevel0);
      // Undeclared exception!
      try { 
        methodCheck0.process((Node) null, (Node) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.JSError$1");
      CheckLevel checkLevel0 = CheckLevel.OFF;
      MethodCheck methodCheck0 = new MethodCheck(compiler0, checkLevel0);
      Node node1 = Node.newString(1, "com.google.javascript.jscomp.JSError$1", 1, 29);
      Node node2 = new Node(35, node0, node1);
      // Undeclared exception!
      try { 
        methodCheck0.process(node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      MethodCheck methodCheck0 = new MethodCheck(compiler0, checkLevel0);
      Node node0 = new Node((-1430));
      Node node1 = new Node(64, node0, node0);
      // Undeclared exception!
      try { 
        methodCheck0.process(node1, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      MethodCheck methodCheck0 = new MethodCheck(compiler0, checkLevel0);
      Node node0 = Node.newString("MethodompilerPas$1");
      Node node1 = Node.newString("MethodompilerPas$1");
      Node node2 = new Node(64, node0, node1);
      // Undeclared exception!
      try { 
        methodCheck0.process(node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.MethodComperPss$GetExternethods");
      Node node1 = new Node(29, node0, node0, node0, node0);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      MethodCheck methodCheck0 = new MethodCheck(compiler0, checkLevel0);
      // Undeclared exception!
      try { 
        methodCheck0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //   Node(SCRIPT):  [testcode] :1:0
         // [source unknown]
         //   Parent(NEG):  [testcode] :-1:-1
         // [source unknown]
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      MethodCheck methodCheck0 = new MethodCheck(compiler0, checkLevel0);
      Node node0 = new Node(64);
      Node node1 = new Node(2, node0, node0);
      methodCheck0.process(node0, node0);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      MethodCheck methodCheck0 = new MethodCheck(compiler0, checkLevel0);
      Node node0 = Node.newString(64, "+:jo=&qdz");
      Node node1 = new Node(64, node0, node0);
      Node node2 = compiler0.parseSyntheticCode("+:jo=&qdz", "+:jo=&qdz");
      Node node3 = new Node(34, node2, node1);
      // Undeclared exception!
      try { 
        methodCheck0.process(node2, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }
}
