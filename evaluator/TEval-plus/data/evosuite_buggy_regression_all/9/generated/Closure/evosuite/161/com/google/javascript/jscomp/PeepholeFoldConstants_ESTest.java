/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:13:14 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.rhino.Node;
import java.io.ByteArrayOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node(27);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node(28);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString(82, "WHILE node", 82, 82);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(29, node0, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString("UWyD%*7Q?(VYU", 80, 80);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(32, node0, node0, node0, (-2638), 16);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString("");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(122, node0, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(107, "!H/,v9`/}", 107, 107);
      Node node1 = Node.newString("!H/,v9`/}", 30, 35);
      Node node2 = new Node(16, node0, node0, node0, node1, 4, 3);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(10);
      node0.addChildrenToFront(node0);
      Node node1 = new Node(30);
      node0.addChildrenToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertNotNull(node2);
      assertTrue(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(895);
      Node node1 = new Node(44);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(12, node1, node0, node0, 87855567, 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(23);
      Node node1 = new Node(28);
      Node node2 = new Node(13, node0, node1, 0, 48);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(48, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node(98);
      Node node1 = new Node(44);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(14, node0, node1, node1, node1, 21, (-5882));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node((-1790));
      Node node1 = new Node(44);
      Node node2 = new Node(15, node0, node1, 7, 47);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = new Node(98);
      Node node1 = new Node(44);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(17);
      node2.addChildrenToFront(node0);
      node2.addChildAfter(node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(30, 30, 30);
      Node node1 = new Node(92);
      Node node2 = new Node(18, node1, node0, 78, 0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(Integer.MIN_VALUE, node3.getSourceOffset());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node((-1));
      Node node2 = new Node(19, node0, node1, node1, 32, 20);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node(2622);
      Node node1 = new Node(34);
      Node node2 = new Node(20, node0, node1, 4095, 9);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4095, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(91, 91, 91);
      Node node1 = new Node(31);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(21, node1, node1, node0, 36, 40);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-2147483608), node3.getSourceOffset());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-8), (-8), (-8));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(12);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Unknown shift operator: ", "Unknown shift operator: ");
      Node node1 = compiler0.parse(jSSourceFile0);
      Node node2 = new Node(22, node1, node0, 46, 30);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(46, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(23);
      node0.addChildrenToFront(node0);
      Node node1 = new Node(30);
      node0.addChildrenToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node2.hasMoreThanOneChild());
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(138);
      Node node1 = new Node(39);
      Node node2 = new Node(24, node1, node0, node0, 13, 78);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(118);
      Node node1 = new Node(44);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(31, node1, node1, node0, 36, 40);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(34, Node.NAME_PROP);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(2622, 2622, 2622);
      Node node1 = Node.newNumber((double) 13);
      Node node2 = new Node(33, node1, node0, node1, node0, 6, 21);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-2147483627), node3.getSourceOffset());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(2622);
      Node node1 = Node.newNumber((double) 16);
      Node node2 = new Node(34, node1, node1, node0, node0, (-1101), 60);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(22, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node((-2223), (-2223), (-2223));
      Node node1 = Node.newString(21, "JSCompiler_object_inline_", 16, 22);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(35, node1, node1, node0, node0, 34, 34);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node((-371));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(36, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertSame(node2, node3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = new Node(91, 91, 91);
      Node node1 = new Node(37, node0, node0, node0, 4095, 32);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      node1.addChildrenToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertFalse(node2.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node((-1790), (-1790), (-1790));
      Node node1 = new Node(1636);
      Node node2 = new Node(38, node0, node1, (-1501), 15);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(22, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node((-1790));
      Node node1 = new Node(44);
      Node node2 = new Node(39, node0, node1, 7, 47);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(98);
      Node node1 = new Node(44);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(40, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(6, Node.TEMP_PROP);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = new Node(98, 28, 28);
      Node node1 = new Node(78);
      Node node2 = new Node(41, node1, node1, node0, 49, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(15, Node.CASEARRAY_PROP);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(2622);
      Node node1 = Node.newNumber((double) 13);
      Node node2 = new Node(42, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(25, Node.ISNUMBER_PROP);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(2622, 2622, 2622);
      Node node1 = Node.newNumber((double) 13);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(43, node0, node1, node1, node1, (-1825), 91);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(98);
      Node node1 = new Node(22);
      Node node2 = new Node(44, node0, node0, node0, node1, (-977), 34);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(11, Node.USES_PROP);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newString("");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber(1.0, 124, 100);
      Node node2 = new Node(45, node1, node0, node0, 8192, 2756);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4095, Node.COLUMN_MASK);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node(30);
      Node node1 = Node.newString("NaN");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(46, node1, node0, node1, node0, 26, 7);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      Node node1 = new Node(1);
      Node node2 = new Node(47, node1, node1, node0, 49, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(15, Node.CASEARRAY_PROP);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(91, 91, 91);
      Node node1 = new Node(2);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(48, node0, node0, node1, 2, (-1278));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(48, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(51);
      Node node1 = new Node(97);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(49, node1, node0, node0, 30, 44);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(70, 70, 70);
      Node node1 = Node.newString("JSC_BITWISE_OPERAND_OUT_OF_RANGE");
      Node node2 = new Node(50, node1, node0, 103, 15);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, Node.DESCENDANTS_FLAG);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      Node node1 = new Node(5);
      Node node2 = new Node(51, node1, node0, node0, 24, (-4300));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(51);
      Node node1 = new Node(44);
      Node node2 = new Node(52, node1, node1, node0, 27, 40);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      Node node1 = new Node(60);
      Node node2 = new Node(53, node1, node1, node0, 49, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(15, Node.CASEARRAY_PROP);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node((-1790));
      Node node1 = new Node(44);
      Node node2 = new Node(54, node0, node1, 7, 47);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.PROPERTY_FLAG);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(23);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("ECMASCRIPT5_STRICT");
      Node node1 = compiler0.parse(jSSourceFile0);
      Node node2 = new Node(56, node0, node1, 0, 48);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(26, Node.DIRECTCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(96);
      Node node1 = new Node(4);
      Node node2 = new Node(57, node1, node0, node0, 77, 3);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(21, Node.LOCALCOUNT_PROP);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(122);
      Node node1 = new Node(44);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(58, node1, node1, node0, node0, 15, (-2417));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(39, Node.EMPTY_BLOCK);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(2622);
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("uECMASCRIPT5_STRICT", "uECMASCRIPT5_STRICT");
      Node node1 = compiler0.parse(jSSourceFile0);
      Node node2 = new Node(59, node1, node0, node0, node0, (-2), (-2008));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, node3.getLength());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = new Node((-2223), (-2223), (-2223));
      Node node1 = new Node(12, 0, 0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(60, node1, node1, node0, node0, 34, 34);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(13, Node.CASES_PROP);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      Node node1 = new Node(78);
      Node node2 = new Node(63, node1, node1, node0, 49, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotSame(node0, node3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(64);
      Node node1 = Node.newString((-2206), "4Mx7%|OW'", 48, 26);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      node0.addChildrenToFront(node0);
      node0.addChildrenToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node((-2235), (-2235), (-2235));
      Node node1 = new Node(1, 0, 0);
      Node node2 = new Node(65, node0, node1, node1, node1, 30, 35);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(86, "UWyD%*7Q?(VYU", 86, 86);
      Node node1 = new Node(50);
      Node node2 = new Node(66, node0, node0, node1, (-1), 2430);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-2300));
      Node node1 = new Node(23);
      Node node2 = new Node(67, node0, node0, node1, 30, 76);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(31, Node.SKIP_INDEXES_PROP);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node((-1790), (-1790), (-1758));
      Node node1 = new Node(44);
      Node node2 = new Node(68, node0, node1, 7, 47);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(27, Node.SPECIALCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(23);
      Node node1 = new Node(28);
      Node node2 = new Node(69, node0, node1, 0, 48);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node(2622, 2622, 2622);
      Node node1 = new Node(34);
      Node node2 = new Node(70, node0, node1, 4095, 9);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(13, Node.CASES_PROP);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(16);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = peepholeRemoveDeadCode0.tryOptimizeBlock(node1);
      Node node3 = new Node(73, node2, node2, node0, 23, 28);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertEquals(0, node4.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node(91, 91, 91);
      Node node1 = new Node(44);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(74, node1, node1, node0, 36, 40);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("UWyD%*7D?(ViU", 80, 80);
      Compiler compiler0 = new Compiler();
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "UWyD%*7D?(ViU", "UWyD%*7D?(ViU");
      Node node2 = new Node(75, node0, node0, node1, node1, 49, 52);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(52, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(16);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(76, node1, node1, node0, 23, 28);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, Node.BOTH);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node((-2235));
      Node node1 = new Node(1, 0, 0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(77, node1, node1, node0, node0, 34, 34);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node(91);
      Node node1 = new Node(44);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(78, node1, node1, node0, 36, 40);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(13, Node.CASES_PROP);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(98, 30, 30);
      Node node1 = new Node(78);
      Node node2 = new Node(79, node1, node1, node0, 49, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(91, 91, 91);
      Node node1 = new Node(31);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(80, node1, node1, node0, 36, 40);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(15, Node.CASEARRAY_PROP);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node(98);
      Node node1 = new Node(2346, 1, 1034);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(81, node1, node1, node1, node0, 13, 38);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(5, Node.FUNCTION_PROP);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-8), (-8), (-8));
      Node node1 = new Node(28, 88, 12);
      Node node2 = new Node(82, node1, node0, node0, node0, 0, 2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      Node node1 = new Node(44);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(83, node1, node1, node0, 36, 40);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(2645);
      Node node1 = new Node(34);
      Node node2 = new Node(84, node0, node1, 4095, 9);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isOnlyModifiesThisCall());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(86, "UWyD%*7Q?(VYU", 86, 86);
      Node node1 = Node.newString(2840, "[/y", (-2370), 45);
      Node node2 = new Node(85, node0, node1, 35, 2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(86, "<TC57@cG'Iq ", 35, 35);
      Node node1 = Node.newString(1936, "-Er(@<gGF xka'", 47, 48);
      node0.addChildrenToFront(node0);
      node0.addChildrenToFront(node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(45);
      Node node1 = new Node(52);
      Node node2 = new Node(87, node1, node1, node0, 6, 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(2622);
      Node node1 = new Node(34);
      Node node2 = new Node(88, node0, node1, 4095, 9);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(91, 91, 91);
      Node node1 = new Node(31);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(90, node1, node1, node0, 36, 40);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(91);
      Node node1 = Node.newString(4095, "JSC_BITWISE_OPERAND_OUT_OF_RANGE", 22, 26);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      node0.addChildrenToFront(node0);
      node0.addChildrenToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(37, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(84, 84, 84);
      Node node1 = new Node(44);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(92, node1, node1, node0, 36, 40);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(31, Node.SKIP_INDEXES_PROP);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(91);
      Node node1 = Node.newString(4095, "JSC_PITWISE_OPERANV_OUT_OF_RANGE", 22, 26);
      Node node2 = new Node(93, node1, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, node3.getLength());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(8506, 8506, (-754));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("ECMASCRIPT5_STRICT");
      Node node1 = compiler0.parse(jSSourceFile0);
      Node node2 = new Node(94, node0, node1, 26, 39);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(91, 91, 91);
      Node node1 = new Node(44);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(95, node1, node1, node0, 36, 40);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = new Node(96, 96, 96);
      Node node1 = Node.newString(4095, "JSC_BITWISE_OPERAND_OUT_OF_RANGE", 22, 26);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      node0.addChildrenToFront(node0);
      node0.addChildrenToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(0, Node.NON_SPECIALCALL);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(2622);
      Node node1 = Node.newNumber((double) 13);
      Node node2 = new Node(97, node0, node0, node1, node1, 13, 38);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, Node.BREAK_PROP);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node(2622);
      Node node1 = new Node(1134);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(98, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(2630);
      Node node1 = new Node(3024);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(99, node1, node0, node0, 122, 83);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newString(114, "JSC_FRACTIONAL_BITWISE_OPERAND", 114, (-3454));
      Node node1 = Node.newString("", 114, 114);
      Node node2 = new Node(100, node0, node0, node1, node1, 2, 17);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(45);
      Node node1 = new Node(5);
      Node node2 = new Node(101, node0, node1, 36, 124);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node((-2223), (-2223), (-2223));
      Node node1 = new Node(12, 0, 0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(0, node1, node1, node0, node0, 34, 34);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(86, "UWyD%*7Q?(VYU", 86, 86);
      Node node1 = new Node(9, node0, node0, node0, node0, 28, 3);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertEquals(1, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(25, (-915), 21);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = new Node(55, 55, 55);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(21);
      Node node1 = new Node(61, node0, node0, node0, node0, 3692, 1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(62, 90, 90);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(8, Node.CODEOFFSET_PROP);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString(71, "WHILE node", 71, 71);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(72, "`Tqn #s2([w._zcZY/s", 87, 77);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(34, Node.NAME_PROP);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(89, 89, 89);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("String");
      Node node1 = new Node(21, node0, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(85, 85, 85);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(90, node0, node0, node0, 36, 40);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(19, node0, node0, node0, 52, 12);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString("}?r-<h\"UEbU ");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(19, node0, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newString("");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(95, node0, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString(32, "com.google.javascript.jscomp.AmbiguateProperties", (-3), 2);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(28);
      Node node1 = new Node(32, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(1, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node(41);
      Node node1 = new Node(26, node0, node0, node0, node0, 22, 2042);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(64);
      Node node1 = new Node(26, node0, node0, node0, node0, 22, 2042);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(23);
      Node node1 = new Node(28);
      Node node2 = new Node(52, node0, node1, 0, 48);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node(51);
      Node node1 = new Node(44);
      Node node2 = new Node(52, node1, node1, node0, 27, 40);
      node2.setType(86);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(27, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(98, 651, 98);
      Node node1 = new Node(64, 47, 12);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(21, node1, node1, node0, node0, (-3364), 16);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(2622);
      Node node1 = Node.newNumber((double) 16);
      Node node2 = new Node(11, node1, node1, node0, node0, 4, 42);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(16426, node3.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node(47);
      Node node1 = Node.newString("NaN");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(46, node1, node0, node1, node0, 26, 7);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(52, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = new Node(30, 30, 30);
      Node node1 = new Node(3121, node0, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node2.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node(30, 30, 30);
      Node node1 = new Node(35, node0, node0, node0, node0, (-1), 42);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = new Node(30);
      Node node1 = Node.newString("NaN");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(35, node1, node1, node0, node1, 4095, 45);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(21, Node.LOCALCOUNT_PROP);
  }
}
