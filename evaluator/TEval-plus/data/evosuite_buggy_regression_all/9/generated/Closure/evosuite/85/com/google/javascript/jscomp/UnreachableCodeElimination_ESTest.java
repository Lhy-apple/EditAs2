/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 04:57:54 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.UnreachableCodeElimination;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UnreachableCodeElimination_ESTest extends UnreachableCodeElimination_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("", "");
      Node node1 = compiler0.parseSyntheticCode("", "");
      node1.addChildrenToFront(node0);
      node0.setType(4);
      unreachableCodeElimination0.process(node1, node1);
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("aF/]T,", "aF/]T,");
      node0.setType(105);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0, (ScopeCreator) null);
      unreachableCodeElimination0.visit(nodeTraversal0, node0, node0);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("o", "o");
      unreachableCodeElimination0.process(node0, node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = Node.newString(11, "o");
      Node node1 = compiler0.parseSyntheticCode("o", "o");
      node1.addChildrenToFront(node0);
      node0.setType(4);
      unreachableCodeElimination0.process(node1, node1);
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseTestCode("m-");
      Node node1 = new Node(37, node0, node0, 17, 16);
      node1.setType(114);
      unreachableCodeElimination0.process(node0, node1);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseTestCode("");
      Node node1 = compiler0.parseSyntheticCode("", "I<<3h");
      node1.addChildrenToFront(node0);
      Node node2 = new Node(37, node1, node1, 17, 16);
      node2.setType(114);
      unreachableCodeElimination0.process(node0, node2);
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("o", "o");
      Node node1 = compiler0.parseSyntheticCode("o", "o");
      node1.addChildrenToFront(node0);
      node0.setType(4);
      unreachableCodeElimination0.process(node1, node1);
      assertTrue(node1.hasOneChild());
      assertFalse(node1.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = Node.newString(124, ">]V5K");
      Node node1 = compiler0.parseSyntheticCode(">]V5K", "");
      node1.addChildrenToFront(node0);
      node1.setType(1);
      unreachableCodeElimination0.process(node1, node1);
      assertEquals(47, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseTestCode("m-");
      Node node1 = new Node(45, node0, node0, node0);
      Node node2 = compiler0.parseSyntheticCode("m-", "m-");
      node0.addChildrenToFront(node2);
      unreachableCodeElimination0.process(node1, node1);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseTestCode("m-");
      Node node1 = new Node(37, node0, node0, 17, 16);
      node1.setType(114);
      Node node2 = new Node(2860, node1, node1, 831, 111);
      unreachableCodeElimination0.process(node1, node2);
      assertFalse(node0.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseTestCode(")!j\"CQ~M@");
      Node node1 = new Node(6, node0, node0, node0, node0);
      node0.setType(120);
      // Undeclared exception!
      try { 
        unreachableCodeElimination0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }
}
