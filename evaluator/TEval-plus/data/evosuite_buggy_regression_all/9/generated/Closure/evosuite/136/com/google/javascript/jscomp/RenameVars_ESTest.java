/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:08:12 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.NameAnonymousFunctionsMapped;
import com.google.javascript.jscomp.RenameVars;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RenameVars_ESTest extends RenameVars_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, true, false, (VariableMap) null, (char[]) null, compilerOptions0.aliasableStrings);
      VariableMap variableMap0 = renameVars0.getVariableMap();
      assertNotNull(variableMap0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[0];
      CompilerOptions compilerOptions0 = new CompilerOptions();
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, true, true, true, (VariableMap) null, charArray0, compilerOptions0.stripTypePrefixes);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("com.google.javascript.rhino.jstype.FunctionType$Kind");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      RenameVars.Assignment renameVars_Assignment0 = renameVars0.new Assignment("5~ 7.ptawU,XJ4/?b8", compilerInput0);
      renameVars_Assignment0.newName = "?";
      // Undeclared exception!
      try { 
        renameVars_Assignment0.setNewName((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      RenameVars renameVars0 = new RenameVars(compiler0, "com.google.javascript.jscomp.SyntacticScopeCreator$1", false, false, true, (VariableMap) null, (char[]) null, (Set<String>) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
      Node node0 = Node.newString(38, "f&");
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, true, false, (VariableMap) null, (char[]) null, compilerOptions0.aliasableStrings);
      renameVars0.process(node0, node0);
      assertEquals(10, Node.VARS_PROP);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
      Node node0 = Node.newString(38, "");
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, true, false, (VariableMap) null, (char[]) null, compilerOptions0.aliasableStrings);
      renameVars0.process(node0, node0);
      assertEquals(4, Node.DESCENDANTS_FLAG);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
      Node node0 = Node.newString(38, "{");
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, true, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripNameSuffixes);
      renameVars0.process(node0, node0);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
      Node node0 = Node.newString(38, "f&");
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripTypePrefixes);
      renameVars0.process(node0, node0);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      VariableMap variableMap0 = compiler0.getVariableMap();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, "", true, true, true, variableMap0, (char[]) null, linkedHashSet0);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(true);
      Node node0 = Node.newNumber((double) 2, 2, 65377);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      renameVars_ProcessVars0.incCount("", compilerInput0);
      renameVars_ProcessVars0.incCount("f&Fmqj[x^7`+;$", compilerInput0);
      renameVars_ProcessVars0.incCount("", compilerInput0);
      renameVars0.process(node0, node0);
      assertEquals(8, Node.CODEOFFSET_PROP);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
      RenameVars renameVars0 = new RenameVars(compiler0, "", false, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripTypes);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      renameVars_ProcessVars0.incCount("", compilerInput0);
      Node node0 = new Node(28, 28, 28);
      renameVars0.process(node0, node0);
      renameVars0.process(node0, node0);
      assertEquals(21, Node.LOCALCOUNT_PROP);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, true, variableMap0, (char[]) null, compilerOptions0.stripNamePrefixes);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      renameVars_ProcessVars0.incCount("L Y.0(H", compilerInput0);
      Node node0 = new Node(0, 0, (-2088));
      renameVars0.process(node0, node0);
      assertEquals(33, Node.NAME_PROP);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      VariableMap variableMap0 = compiler0.getVariableMap();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, "k", true, true, true, variableMap0, (char[]) null, linkedHashSet0);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(true);
      Node node0 = Node.newNumber((double) (-1), (-1), (-3433));
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("k");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      renameVars_ProcessVars0.incCount("", compilerInput0);
      renameVars_ProcessVars0.incCount("f&Fmqj[x^7`+;$", compilerInput0);
      renameVars0.process(node0, node0);
      assertEquals((-1), node0.getCharno());
  }
}
