/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:15:55 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeMinimizeConditions;
import com.google.javascript.jscomp.PeepholeReplaceKnownMethods;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newString("B}._j!0)x.");
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 29);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.containsFunction(node0);
      assertFalse(boolean0);
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "8LloYiVBw9q_C");
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertTrue(boolean0);
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionObjectCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeepholeMinimizeConditions peepholeMinimizeConditions0 = new PeepholeMinimizeConditions(false);
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = peepholeMinimizeConditions0.isPure(node0);
      assertTrue(boolean0);
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString("msg.caught.nfe");
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.evaluatesToLocalValue(node0);
      assertFalse(node0.isTrue());
      assertTrue(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newString("d\"@+\"WOl;HaDEy");
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.mapMainToClone((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, " 21CGX.Sm,+p7t");
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, ")\n", node0, ": ");
      assertEquals(38, node1.getType());
      assertTrue(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newString(" 21CGX.Sm+p7t");
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 29);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newString(">vlf");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "infinity", node0, "k");
      assertFalse(node1.isString());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("infinity");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntheticAst syntheticAst0 = new SyntheticAst("b6<'%2Jx*E.f");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      boolean boolean0 = NodeUtil.isNameReferenced(node0, " 21CGX.Sm,+p7t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString("msg.caught.nfe");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 0, nodeUtil_BooleanResultPredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isStatement((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node((byte) (-128));
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString("\"<}!,D]");
      Node node1 = new Node(30, node0, node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node(110);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
      assertFalse(boolean0);
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newNumber((-1168.6359532157337));
      boolean boolean0 = NodeUtil.isImmutableResult(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionParameters((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.newExpr((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.IR", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.isConstantName(node0);
      assertTrue(node0.isTrue());
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node0 = Node.newString(39, "d\"@+\"WOl;HaDEy", 2, 29);
      boolean boolean0 = NodeUtil.anyResultsMatch(node0, nodeUtil_MayBeStringResultPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newString(1073741824, "Bad syntax. Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)");
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d\"@+\"WOl;HaDEy");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getImpureBooleanValue(node1);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d\"@+\"WOl;HaDEy");
      NodeUtil.getPureBooleanValue(node0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString(39, "H", 54, 980);
      // Undeclared exception!
      try { 
        NodeUtil.getPureBooleanValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString("infinity");
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.getPureBooleanValue(node0);
      assertEquals(43, node0.getType());
      assertTrue(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.getPureBooleanValue(node0);
      assertEquals(44, node0.getType());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d\"@+\"WOl;HaDEy");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      String string0 = NodeUtil.arrayToString(node1);
      assertEquals("0", string0);
      assertNotNull(string0);
      assertFalse(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "infinity");
      String string0 = NodeUtil.getStringValue(node0);
      assertNull(string0);
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newString((-22), "ZF3");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      String string0 = NodeUtil.getStringValue(node1);
      assertNotNull(string0);
      assertEquals("undefined", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newString(1073741824, "Bad syntax. Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)");
      String string0 = NodeUtil.getStringValue(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = NodeUtil.getStringValue(1.5);
      assertEquals("1.5", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "UFb?YxS0!K6DY");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      String string0 = NodeUtil.getArrayElementStringValue(node1);
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = Node.newString("\"}!,D]", 4, 57);
      Node node2 = new Node((-39), node0, node1);
      String string0 = NodeUtil.arrayToString(node2);
      assertEquals("false,\"}!,D]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "&");
      Double double0 = NodeUtil.getNumberValue(node0);
      assertFalse(node0.isGetProp());
      assertNull(double0);
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString(" 21CGX.Sm,+p7t");
      Node node1 = NodeUtil.numberNode(54, node0);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertEquals(54.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, " 21CGX.Sm,+p7t");
      NodeUtil.getNumberValue(node0);
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isName());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("k");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("+infinity");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString("infinity", 1609, 57);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(12);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(32);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(8232);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(8233);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString(193, "Internal compiler error. Cannot parse generated code: {0}");
      String string0 = NodeUtil.getNearestFunctionName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "infinity");
      boolean boolean0 = NodeUtil.isImmutableResult(node0);
      assertFalse(boolean0);
      assertFalse(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString(".prototype", 32, 49);
      Node node1 = new Node(15, node0, node0);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node2 = reorderConstantExpression0.optimizeSubtree(node1);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.isImmutableResult(node0);
      assertTrue(node0.isTrue());
      assertFalse(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newString(0, "==");
      boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d\"@+\"WOl;HaDEy");
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      assertFalse(node1.isGetProp());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = NodeUtil.getInverseOperator(872);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(110);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString(15, "this", 0, 2470);
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newNumber(176.7757499743916);
      Node node1 = new Node(32, node0, 40, 1);
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, " 21CGX.Sm,+p7t");
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertEquals(2, node0.getChildCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = new Node(36, node0, node0);
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
      assertFalse(boolean0);
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newString(38, "n]K?n:!j", 51, 955);
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newNumber(64.0532);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString("infinity");
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNamePrefixes);
      assertTrue(boolean0);
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertTrue(boolean0);
      assertFalse(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(110);
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newNumber((-1168.6359532157337));
      Node node1 = new Node(15, node0, node0);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      boolean boolean0 = reorderConstantExpression0.mayEffectMutableState(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString(1073741824, "Bad syntax. Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)");
      Node node1 = new Node(16, node0, node0, node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, " 21CGX.Sm,+p7t");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(2, node0.getChildCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(34);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = new Node(36, node0, node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(node0.isFalse());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString("beforeModuleMotion", (int) (byte)13, (int) (byte)13);
      Node node1 = new Node(57, node0, 47, 41);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(72);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d\"@+\"WOl;HaDEy");
      Node node1 = NodeUtil.newVarNode("d", node0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_NumbericResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeVAR
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d\"@+\"WOl;HaDEy");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(boolean0);
      assertFalse(node0.hasChildren());
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      reorderConstantExpression0.mayEffectMutableState(node0);
      assertEquals(44, node0.getType());
      assertFalse(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = new Node(101, node0, node0);
      NodeUtil.mayHaveSideEffects(node1);
      assertTrue(node0.isTrue());
      assertFalse(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(110);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntheticAst syntheticAst0 = new SyntheticAst(",aRxy):1ab");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      Node node1 = NodeUtil.newVarNode("gIDv", node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
      assertFalse(node0.hasOneChild());
      assertEquals(118, node1.getType());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst(";  ");
      Compiler compiler0 = new Compiler();
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newString("infinity", (-2306), (-2306));
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.newName(jqueryCodingConvention0, "Bad syntax. Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)", node0);
      boolean boolean0 = peepholeReplaceKnownMethods0.nodeTypeMayHaveSideEffects(node1);
      assertFalse(boolean0);
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newString(0, "==");
      Node node1 = new Node(15, node0, node0, node0);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      // Undeclared exception!
      try { 
        reorderConstantExpression0.optimizeSubtree(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = NodeUtil.precedence((byte)9);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = NodeUtil.precedence(16);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(52);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(53);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 53
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(76);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 76
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = NodeUtil.precedenceWithDefault(83);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString(155, "a(VrOY[dT3\"}g");
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "UFb?YxS0!K6DY");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node1);
      assertFalse(boolean0);
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newNumber((-1168.6359532157337));
      Node node1 = new Node(15, node0, node0);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString(1073741824, "Bad syntax. Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)");
      Node node1 = new Node(16, node0, node0, node0);
      boolean boolean0 = NodeUtil.mayBeString(node1, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, " 21CGX.Sm,+p7t");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertEquals(2, node0.getChildCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = new Node(36, node0, node0);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
      assertTrue(boolean0);
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, " 21CGX.Sm,+p7t");
      Node node1 = NodeUtil.numberNode(57, node0);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean0);
      assertTrue(node1.isNumber());
      assertTrue(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean0);
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newNumber((-1168.6359532157337));
      Node node1 = new Node(46, node0, node0);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node0 = Node.newString(52, "d\"@+\"WOl;HaDEy", (-4523), 29);
      boolean boolean0 = NodeUtil.anyResultsMatch(node0, nodeUtil_MayBeStringResultPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(29);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(100);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(101);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(30);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, " 21CGX.Sm,+p7t");
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:GETPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(110);
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(110);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      boolean boolean0 = NodeUtil.has(node0, compilerOptions0.sourceMapDetailLevel, compilerOptions0.sourceMapDetailLevel);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d\"@+\"WOl;HaDEy");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "length");
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(110);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newString("B}._j!0)x.");
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.getLoopCodeBlock(node0);
      assertEquals(43, node0.getType());
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = new Node(576);
      Node node1 = new Node(576, node0, node0, node0);
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "infinity");
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = new Node(110);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(114);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = new Node(110);
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node(120);
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TRUE does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = new Node(110);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SWITCH does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node[] nodeArray0 = new Node[7];
      // Undeclared exception!
      try { 
        NodeUtil.isStatementParent(nodeArray0[2]);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString(1073741824, "Bad syntax. Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)");
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntheticAst syntheticAst0 = new SyntheticAst("b6<'%2Jx*E.f");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "3ale");
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.DisambiguatePrivateProperties");
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(boolean0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "infinity");
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
      assertFalse(boolean0);
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean0);
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString(1073741824, "Bad syntax. Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)");
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newString(1073741824, "Bad syntax. Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)");
      boolean boolean0 = NodeUtil.isBleedingFunctionName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "g&&");
      // Undeclared exception!
      try { 
        NodeUtil.isBleedingFunctionName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newString(" 21CGX.Sm,+p7t");
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "UFb?YxS0!K6DY");
      boolean boolean0 = NodeUtil.isLValue(node0);
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, " 21CGX.Sm,+p7t");
      boolean boolean0 = NodeUtil.isLValue(node0);
      assertFalse(boolean0);
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, " 21CGX.Sm,+p7t");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = NodeUtil.newQualifiedNameNodeDeclaration(closureCodingConvention0, "Cannot do {0} access on a {1}", node0, jSDocInfo0);
      assertTrue(node1.isVar());
      
      boolean boolean0 = NodeUtil.isLValue(node0);
      assertFalse(boolean0);
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: FALSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d\"@+\"WOl;HaDEy");
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      assertFalse(boolean0);
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(52);
      assertEquals("instanceof", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(30);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 30: NEW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 37: CALL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = NodeUtil.opToStr(54);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(124);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 124: EMPTY
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      Node node1 = NodeUtil.newQualifiedNameNodeDeclaration(googleCodingConvention0, "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$TypeRestriction", node0, jSDocInfo0);
      assertTrue(node1.isExprResult());
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "&");
      NodeUtil.getRootOfQualifiedName(node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newNumber((-1168.6359532157337));
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidSimpleName("void");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("H,#W%+#d>noe@x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName(".C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("com.google.common.io.CharStreams$2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, " 21CGX.Sm,+p7t");
      NodeUtil.getVarsDeclaredInBranch(node0);
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Cw3ONS/8=`IG");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node1);
      assertFalse(boolean0);
      assertTrue(node1.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "8LloYiVBw9q_C");
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "3ale");
      NodeUtil.getPrototypeClassName(node0);
      assertTrue(node0.isName());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("8LloYiVBw9q_C", (Node) null);
      assertNotNull(node0);
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, " 21CGX.Sm,+p7t");
      Node node1 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, " 21CGX.Sm,+p7t");
      Node node2 = new Node(1, node1, node0);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node1);
      // Undeclared exception!
      try { 
        NodeUtil.newVarNode("(8RJcV&MUG,V\"t", node3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, " 21CGX.Sm,+p7t");
      int int0 = NodeUtil.getNameReferenceCount(node0, "com.google.javascript.jscomp.DisambiguateProperties$ConcreteTypeSystem");
      assertEquals(0, int0);
      assertEquals(33, node0.getType());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "8LloYiVBw9q_C");
      int int0 = NodeUtil.getNameReferenceCount(node0, "8LloYiVBw9q_C");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(51);
      Node node0 = Node.newString(51, "\"<}!,D]", 51, 51);
      boolean boolean0 = nodeUtil_MatchNodeType0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, " 21CGX.Sm,+p7t");
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node0);
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d\"@+\"WOl;HaDEy");
      Node node1 = new Node(941, node0, node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertEquals(38, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d\"@+\"WOl;HaDEy");
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
      assertFalse(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "UFb?YxS0!K6DY");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.containsType(node1, 4);
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d\"@+\"WOl;HaDEy");
      Node node1 = new Node(941, node0, node0);
      boolean boolean0 = NodeUtil.isConstantByConvention(closureCodingConvention0, node1, node0);
      assertFalse(boolean0);
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntheticAst syntheticAst0 = new SyntheticAst("Cannot do {0} access on a {1}");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      String string0 = NodeUtil.getSourceName(node0);
      assertEquals("Cannot do {0} access on a {1}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d\"@+\"WOl;HaDEy");
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isName());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d\"@+\"WOl;HaDEy");
      NodeUtil.getSourceFile(node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.getInputId(node0);
      assertEquals(44, node0.getType());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((byte)0, nodeArray0, (byte)0, 525);
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertTrue(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d\"@+\"WOl;HaDEy");
      boolean boolean0 = NodeUtil.isCallOrNewTarget(node0);
      assertFalse(boolean0);
      assertFalse(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = new Node(101, node0, node0);
      boolean boolean0 = NodeUtil.isCallOrNewTarget(node0);
      assertFalse(boolean0);
      assertFalse(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = new Node(110);
      JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = new Node(2392);
      Node node1 = new Node(109, node0, (-1151), 109);
      JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newString("replace", (int) (byte) (-60), (int) (byte) (-60));
      // Undeclared exception!
      try { 
        NodeUtil.getBestLValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d\"@+\"WOl;HaDEy");
      Node node1 = new Node(941, node0, node0);
      NodeUtil.getRValueOfLValue(node0);
      assertTrue(node0.isName());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = NodeUtil.getBestLValueOwner((Node) null);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newString("d\"@+\"WOl;HaDEy");
      Node node1 = NodeUtil.getBestLValueOwner(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = new Node(0, node0, node0);
      NodeUtil.getBestLValueOwner(node0);
      assertEquals(43, node0.getType());
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "g&&");
      String string0 = NodeUtil.getBestLValueName(node0);
      assertNull(string0);
      assertFalse(node0.hasChildren());
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "g&&");
      Node node1 = new Node(4095, node0, 182, 8);
      String string0 = NodeUtil.getBestLValueName(node0);
      assertNotNull(string0);
      assertEquals("g&&", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.numberNode(Double.NaN, node0);
      assertTrue(node1.isName());
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = NodeUtil.numberNode(Double.NEGATIVE_INFINITY, (Node) null);
      assertNotNull(node0);
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isNaN(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "d\"@+\"WOl;HaDEy");
      boolean boolean0 = NodeUtil.isNaN(node0);
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
  }
}
