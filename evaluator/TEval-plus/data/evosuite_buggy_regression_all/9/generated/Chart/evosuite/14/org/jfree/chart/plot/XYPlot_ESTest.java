/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 04:34:16 GMT 2023
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.color.ICC_Profile;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.Stack;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.xy.HighLowRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.WindItemRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.renderer.xy.YIntervalRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYPlot_ESTest extends XYPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'order' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      double double0 = combinedRangeXYPlot0.getDomainCrosshairValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeDomainMarker((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1484, 1449, (double) 1.0F, (-314.00108647), chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(10, 10, 15, 10);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle2D_Float0, 6992.217627792, logarithmicAxis0.DEFAULT_TICK_MARK_STROKE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(3423.39F, 15, 10, 2.0F);
      combinedDomainXYPlot0.drawZeroDomainBaseline((Graphics2D) null, rectangle2D_Float0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setRangeAxisLocation(41, (AxisLocation) null);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 10 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Color color0 = (Color)xYPlot0.getDomainZeroBaselinePaint();
      assertEquals(0, color0.getRed());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeZeroBaselineVisible(false);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeZeroBaselineStroke();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairValue(10.0);
      assertEquals(10.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      boolean boolean0 = xYPlot0.isRangeCrosshairLockedOnData();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(boolean0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      combinedDomainXYPlot0.setDomainAxisLocation(1111, axisLocation0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxisLocation((AxisLocation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxisCount();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeMarkers((Layer) null);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(Double.NaN, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeRangeMarker((Marker) valueMarker0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getAnnotations();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainGridlineStroke();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainZeroBaselineVisible(true);
      assertTrue(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Color color0 = (Color)xYPlot0.getRangeZeroBaselinePaint();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDataset((XYDataset) null);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 10);
      assertEquals(10.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearAnnotations();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, "Null 'order' argument.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      Color color0 = (Color)combinedDomainXYPlot0.getRangeCrosshairPaint();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0, color0.getRed());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis("Null 'location' for index 0 not permitted.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedDomainXYPlot0.add((XYPlot) combinedRangeXYPlot0, 10);
      assertEquals(10, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer(standardXYToolTipGenerator0, (XYURLGenerator) null);
      xYPlot0.getIndexOf(xYStepRenderer0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(combinedDomainXYPlot0);
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryMarker categoryMarker0 = new CategoryMarker(numberAxis3D0.DEFAULT_TICK_UNIT, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE);
      xYPlot0.addDomainMarker((Marker) categoryMarker0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SymbolAxis symbolAxis0 = new SymbolAxis("}h/WkHSg}ek\"", stringArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) stackedXYAreaRenderer0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeGridlineStroke();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedLegendItems((LegendItemCollection) null);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(color0);
      assertEquals(255, color0.getRed());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.getDomainAxisCount();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Color color0 = (Color)xYPlot0.getDomainGridlinePaint();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals((-1), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      double double0 = xYPlot0.getRangeCrosshairValue();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Color color0 = (Color)xYPlot0.getDomainCrosshairPaint();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals((-16776961), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SymbolAxis symbolAxis0 = new SymbolAxis("<wu`YH2|Vk", stringArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      boolean boolean0 = combinedDomainXYPlot0.isDomainGridlinesVisible();
      assertTrue(boolean0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point point0 = new Point(1008, 2436);
      combinedDomainXYPlot0.zoomDomainAxes((-2042.606), plotRenderingInfo0, (Point2D) point0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Point2D.Double point2D_Double0 = (Point2D.Double)combinedRangeXYPlot0.getQuadrantOrigin();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = combinedDomainXYPlot0.getSeriesCount();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getPlotType();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 4018, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[0];
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(iCC_ProfileArray0, renderingHints0);
      Rectangle2D rectangle2D0 = colorConvertOp0.getBounds2D(bufferedImage0);
      combinedDomainXYPlot0.drawZeroRangeBaseline(graphics2D0, rectangle2D0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = combinedDomainXYPlot0.getWeight();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      boolean boolean0 = xYPlot0.isRangeGridlinesVisible();
      assertTrue(boolean0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeTickBandPaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      boolean boolean0 = combinedRangeXYPlot0.isDomainCrosshairLockedOnData();
      assertTrue(boolean0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      combinedRangeXYPlot0.zoomRangeAxes((-1454.90944858), plotRenderingInfo0, (Point2D) point0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      ArrayList<WindItemRenderer> arrayList0 = new ArrayList<WindItemRenderer>();
      combinedDomainXYPlot0.drawRangeTickBands((Graphics2D) null, rectangle2D_Double0, arrayList0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainCrosshairStroke();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      xYPlot0.setOrientation(plotOrientation0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setAxisOffset(xYPlot0.DEFAULT_INSETS);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setAxisOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      NumberAxis numberAxis0 = new NumberAxis("8eh8?bh-G;#u_lV");
      combinedDomainXYPlot0.setDomainAxis(500, (ValueAxis) numberAxis0);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(501, combinedDomainXYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearDomainAxes();
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearDomainAxes();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxisEdge(10);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("m'cfMPhku|IM/ZC", multiplePiePlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(904, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(904);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, false);
      Rectangle2D rectangle2D0 = jFreeChart0.DEFAULT_TITLE_FONT.getStringBounds("m'cfMPhku|IM/ZC", fontRenderContext0);
      PeriodAxis periodAxis0 = new PeriodAxis("m'cfMPhku|IM/ZC");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      AxisSpace axisSpace0 = combinedDomainXYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle2D0, (AxisSpace) null);
      assertEquals(55.96875, axisSpace0.getBottom(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxisLocation((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0, false);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) null);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.setRangeAxis(0, (ValueAxis) numberAxis0, false);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.clearRangeAxes();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) symbolAxis0);
      assertEquals(0.500000005, symbolAxis0.getUpperBound(), 0.01);
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.getRangeAxisEdge(719);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot0.setRangeAxisLocation(821, axisLocation0, false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart(") should be in the range 0 to 3.", piePlot0.DEFAULT_LABEL_FONT, piePlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3, 10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CrosshairState crosshairState0 = new CrosshairState(false);
      boolean boolean0 = xYPlot0.render(graphics2D0, (Rectangle2D) null, 1, plotRenderingInfo0, crosshairState0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[21];
      SymbolAxis symbolAxis0 = new SymbolAxis("`mqVFPj[702%i1]_", stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(symbolAxis0);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      int int0 = combinedRangeXYPlot0.indexOf(timeTableXYDataset0);
      assertEquals((-1), int0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      int int0 = combinedRangeXYPlot0.indexOf((XYDataset) null);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) null);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SymbolAxis symbolAxis0 = new SymbolAxis("}h/WkHSg}ek\"", stringArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[8];
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("jk4S.h#?T");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SeriesRenderingOrder seriesRenderingOrder0 = combinedDomainXYPlot0.getSeriesRenderingOrder();
      combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setSeriesRenderingOrder((SeriesRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      combinedDomainXYPlot0.getRendererForDataset(defaultTableXYDataset0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.setDomainGridlinesVisible(true);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.setDomainGridlinesVisible(false);
      assertFalse(combinedRangeXYPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainGridlineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      xYPlot0.setDomainGridlinePaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      NumberAxis numberAxis0 = new NumberAxis("7Ht_");
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(timeTableXYDataset0, numberAxis0, numberAxis0, xYLineAndShapeRenderer0);
      xYPlot0.setRangeGridlinesVisible(true);
      assertTrue(xYPlot0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      assertFalse(combinedDomainXYPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      xYPlot0.setRangeGridlineStroke(stackedXYBarRenderer0.DEFAULT_STROKE);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      combinedDomainXYPlot0.setRangeGridlinePaint(meterPlot0.DEFAULT_OUTLINE_PAINT);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'order' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      combinedRangeXYPlot0.setDomainZeroBaselineStroke(logarithmicAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      Paint paint0 = areaRenderer0.getItemFillPaint((-2335), (-2335));
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(paint0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)XYPlot.DEFAULT_CROSSHAIR_STROKE;
      combinedDomainXYPlot0.setRangeZeroBaselineStroke(basicStroke0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point point0 = new Point(10, (-2238));
      combinedDomainXYPlot0.setQuadrantOrigin(point0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-1) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint(4755);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (4755) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getQuadrantPaint(0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantPaint((-121), combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-121) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      xYPlot0.setQuadrantPaint(1, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.BLUE;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantPaint(10, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (10) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.clearDomainMarkers();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker((-884.26136943407), combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedRangeXYPlot0.addDomainMarker(10, (Marker) valueMarker0, layer0, true);
      combinedRangeXYPlot0.clearDomainMarkers(10);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker((Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10.0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker(713, (Marker) valueMarker0, layer0, false);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeDomainMarker(0, (Marker) categoryMarker0, (Layer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'order' argument.");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0E-8, logarithmicAxis0.DEFAULT_TICK_MARK_PAINT, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.clearRangeMarkers();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(4.0);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addRangeMarker(3765, (Marker) valueMarker0, layer0);
      combinedDomainXYPlot0.clearRangeMarkers();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0);
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedDomainXYPlot0.addRangeMarker((-1), (Marker) categoryMarker0, (Layer) null, false);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'order' argument.");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10.0);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0E-8, logarithmicAxis0.DEFAULT_TICK_MARK_PAINT, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0, layer0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0, layer0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeRangeMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(0);
      ValueMarker valueMarker0 = new ValueMarker(1.0E-8, valueAxis0.DEFAULT_TICK_MARK_PAINT, valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeRangeMarker(500, (Marker) valueMarker0, (Layer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1.0F, 2448.0869, 1.0F, 2448.0869);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0, false);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeAnnotation((XYAnnotation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 4018, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[0];
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(iCC_ProfileArray0, renderingHints0);
      Rectangle2D rectangle2D0 = colorConvertOp0.getBounds2D(bufferedImage0);
      AxisSpace axisSpace0 = combinedDomainXYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D0, (AxisSpace) null);
      assertEquals(0.0, axisSpace0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle rectangle0 = new Rectangle();
      AxisSpace axisSpace0 = new AxisSpace();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.calculateRangeAxisSpace((Graphics2D) null, rectangle0, axisSpace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JFreeChart jFreeChart0 = new JFreeChart("K:w2$PjKFd", xYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(1839, (int) (short)55, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(10, 10);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, (ValueAxis) null, (ValueAxis) null, yIntervalRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(1375, 10, chartRenderingInfo0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      ArrayList<XYErrorRenderer> arrayList0 = new ArrayList<XYErrorRenderer>();
      combinedDomainXYPlot0.drawDomainTickBands(graphics2D0, rectangle2D_Float0, arrayList0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Map map0 = combinedDomainXYPlot0.drawAxes(graphics2D0, rectangle2D_Double0, rectangle2D_Double0, plotRenderingInfo0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Map map0 = combinedRangeXYPlot0.drawAxes(graphics2D0, rectangle2D_Double0, rectangle2D_Double0, plotRenderingInfo0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset((-27));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -27 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 2 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      combinedDomainXYPlot0.setDataset(72, (XYDataset) defaultIntervalXYDataset0);
      combinedDomainXYPlot0.getDomainAxisForDataset(2);
      assertEquals(73, combinedDomainXYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxisForDataset(0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset((-1952257861));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -1952257861 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'order' argument.");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)defaultPolarItemRenderer0.getBaseShape();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      Stack<WindItemRenderer> stack0 = new Stack<WindItemRenderer>();
      combinedDomainXYPlot0.drawDomainGridlines((Graphics2D) null, rectangle2D_Double0, stack0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      LinkedList<XYBarRenderer> linkedList0 = new LinkedList<XYBarRenderer>();
      combinedDomainXYPlot0.drawRangeGridlines(graphics2D0, rectangle2D_Float0, linkedList0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.drawAnnotations((Graphics2D) null, defaultCaret0, plotRenderingInfo0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Area area0 = new Area(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      Rectangle2D rectangle2D0 = area0.getBounds2D();
      combinedDomainXYPlot0.drawDomainMarkers(graphics2D0, rectangle2D0, 10, layer0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.drawRangeMarkers((Graphics2D) null, rectangle2D0, 10, layer0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.getDomainMarkers((Layer) null);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      combinedRangeXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      Collection collection0 = combinedRangeXYPlot0.getDomainMarkers(layer0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      ValueMarker valueMarker0 = new ValueMarker(10, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT, basicStroke0, 1.0F);
      combinedRangeXYPlot0.addRangeMarker((Marker) valueMarker0, layer0);
      assertEquals(0, basicStroke0.getEndCap());
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNotNull(collection0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 10, (double) 1.0F, 2000000.0, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 10, 0, 0.6F);
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle2D_Float0, 0.0, windItemRenderer0.DEFAULT_OUTLINE_STROKE, windItemRenderer0.DEFAULT_PAINT);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LegendTitle legendTitle0 = new LegendTitle(combinedDomainXYPlot0);
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      NumberAxis numberAxis0 = new NumberAxis();
      combinedDomainXYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle2D0, plotOrientation0, 2609.0, numberAxis0, categoryPlot0.DEFAULT_OUTLINE_STROKE, categoryPlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LegendTitle legendTitle0 = new LegendTitle(combinedDomainXYPlot0);
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      NumberAxis numberAxis0 = new NumberAxis();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle2D0, plotOrientation0, 0.0F, numberAxis0, numberAxis0.DEFAULT_AXIS_LINE_STROKE, categoryPlot0.DEFAULT_GRIDLINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LegendTitle legendTitle0 = new LegendTitle(combinedDomainXYPlot0);
      Rectangle2D rectangle2D0 = legendTitle0.getBounds();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      PlotOrientation plotOrientation0 = categoryPlot0.getOrientation();
      NumberAxis numberAxis0 = new NumberAxis();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle2D0, plotOrientation0, 0.0, numberAxis0, categoryPlot0.DEFAULT_GRIDLINE_STROKE, numberAxis0.DEFAULT_AXIS_LINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(10, 1331.0F, 0.0F, 1.0F);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, rectangle2D_Float0, 1.0F, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 1.0F, 10, 10);
      combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, rectangle2D_Float0, (-0.05994692797042622), combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Area area0 = new Area();
      Rectangle2D rectangle2D0 = area0.getBounds2D();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      DateAxis dateAxis0 = new DateAxis("Null 'stroke' argument.");
      SystemColor systemColor0 = SystemColor.controlHighlight;
      combinedDomainXYPlot0.drawRangeCrosshair((Graphics2D) null, rectangle2D0, plotOrientation0, (-2710.0), dateAxis0, dateAxis0.DEFAULT_TICK_MARK_STROKE, systemColor0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("G");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis("|");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawRangeCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, 0.0F, numberAxis0, dateAxis0.DEFAULT_TICK_MARK_STROKE, defaultPolarItemRenderer0.DEFAULT_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("G");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis("|");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawRangeCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, 0.0F, numberAxis0, dateAxis0.DEFAULT_TICK_MARK_STROKE, defaultPolarItemRenderer0.DEFAULT_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      XYPlot xYPlot0 = new XYPlot();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      xYPlot0.handleClick(10, (-12), plotRenderingInfo0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      XYPlot xYPlot0 = new XYPlot(defaultIntervalXYDataset0, periodAxis0, periodAxis0, xYAreaRenderer2_0);
      xYPlot0.setDataset(10, (XYDataset) defaultIntervalXYDataset0);
      assertEquals(11, xYPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[3];
      DateAxis dateAxis0 = new DateAxis();
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      xYPlot0.setDomainAxes(valueAxisArray0);
      assertEquals(3, xYPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LogAxis logAxis0 = new LogAxis();
      xYPlot0.setRangeAxis(10, (ValueAxis) logAxis0);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(11, xYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.setDomainCrosshairVisible(false);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairVisible(true);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(true);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairStroke(piePlot3D0.DEFAULT_OUTLINE_STROKE);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'order' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      xYPlot0.setDomainCrosshairPaint(stackedXYBarRenderer0.DEFAULT_OUTLINE_PAINT);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairVisible(false);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setRangeCrosshairVisible(true);
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 1.0F, true);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(true);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(false);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setRangeCrosshairVisible(true);
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 1.0F, false);
      assertEquals(1.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'order' argument.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      combinedDomainXYPlot0.setRangeCrosshairStroke(logarithmicAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals("Null 'order' argument.", logarithmicAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairPaint(piePlot3D0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("m'cfMPhku|IM/ZC");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      xYPlot0.zoomDomainAxes(Double.POSITIVE_INFINITY, plotRenderingInfo0, (Point2D) null, false);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      combinedDomainXYPlot0.zoomDomainAxes((double) 1.0F, plotRenderingInfo0, (Point2D) point2D_Float0, true);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Point point0 = new Point();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.zoomDomainAxes((double) 1.0F, (-1374.71463105468), (PlotRenderingInfo) null, (Point2D) point0);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, false);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'paint' argument.", xYDifferenceRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedDomainXYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point();
      combinedDomainXYPlot0.zoomDomainAxes((double) 420, (double) 680, plotRenderingInfo0, (Point2D) point0);
      assertTrue(chartPanel0.getRefreshBuffer());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      xYPlot0.zoomRangeAxes(2929.8441713239, plotRenderingInfo0, (Point2D) null, true);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location(10, (-1));
      combinedRangeXYPlot0.zoomRangeAxes((double) 0.0F, plotRenderingInfo0, (Point2D) point0, true);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, (ValueAxis) null, (ValueAxis) null, yIntervalRenderer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      xYPlot0.zoomRangeAxes((double) 15, 67.71875, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Index ", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomRangeAxes(26.909, (double) 0.5F, plotRenderingInfo0, (Point2D) point2D_Double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (28.25445) <= upper (0.525).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, periodAxis0, periodAxis0, highLowRenderer0);
      int int0 = xYPlot0.getSeriesCount();
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0, int0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      boolean boolean0 = combinedDomainXYPlot1.equals(combinedDomainXYPlot0);
      assertTrue(boolean0);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = new String[21];
      SymbolAxis symbolAxis0 = new SymbolAxis("`mqVFPj[702%i1]_", stringArray0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      XYPlot xYPlot0 = new XYPlot(defaultXYZDataset0, logarithmicAxis0, logarithmicAxis0, (XYItemRenderer) null);
      boolean boolean0 = xYPlot0.equals(symbolAxis0);
      assertFalse(boolean0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      LogAxis logAxis0 = new LogAxis();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(true, oHLCDataItemArray0);
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultOHLCDataset0, logAxis0, logAxis0, xYBarRenderer0);
      xYPlot0.equals(combinedRangeXYPlot0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYPlot xYPlot0 = new XYPlot();
      boolean boolean0 = xYPlot0.equals(combinedRangeXYPlot0);
      assertFalse(boolean0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      
      combinedDomainXYPlot1.setDomainTickBandPaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot1.equals(combinedDomainXYPlot0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(10);
      xYPlot0.setRenderer(6, (XYItemRenderer) xYAreaRenderer0, false);
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
  }
}
