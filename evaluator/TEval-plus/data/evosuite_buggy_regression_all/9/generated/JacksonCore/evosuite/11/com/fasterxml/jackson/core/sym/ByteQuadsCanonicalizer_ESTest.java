/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:35:23 GMT 2023
 */

package com.fasterxml.jackson.core.sym;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ByteQuadsCanonicalizer_ESTest extends ByteQuadsCanonicalizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1);
      int int0 = byteQuadsCanonicalizer0.hashSeed();
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.bucketCount();
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName(" ?.^ud3U", 9, 9);
      byteQuadsCanonicalizer1.release();
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      byteQuadsCanonicalizer0.release();
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(9, byteQuadsCanonicalizer0.hashSeed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1290));
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      
      byteQuadsCanonicalizer1.release();
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-2353));
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-729));
      int int0 = byteQuadsCanonicalizer1.size();
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals((-2353), byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-2353));
      int int0 = byteQuadsCanonicalizer0.size();
      assertEquals((-2353), byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.toString();
      assertEquals(3, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.findName(384);
      assertEquals(9, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("JSON", 9);
      byteQuadsCanonicalizer1.findName(9);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1._hashSize = 9;
      byteQuadsCanonicalizer1.addName(" ?.^ud3U", 9, 9, 9);
      byteQuadsCanonicalizer1.findName(9);
      assertEquals(96, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("ms6", (-1937));
      byteQuadsCanonicalizer1.addName("ms6", 9);
      byteQuadsCanonicalizer1.findName(9);
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(32);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(32);
      byteQuadsCanonicalizer1.addName(" slots is now full (all ", 32);
      byteQuadsCanonicalizer1.addName(" slots is now full (all ", 32, 32, 32);
      byteQuadsCanonicalizer1._hashSize = 32;
      byteQuadsCanonicalizer1.findName(0);
      assertEquals(56, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1.findName(intArray0, 2);
      assertEquals(9, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4060);
      byteQuadsCanonicalizer1.addName("4>?bANU-4OV", 4060, 4060);
      byteQuadsCanonicalizer1.findName(4060, 4060);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("39", 9, 9);
      byteQuadsCanonicalizer1.findName(555, 400);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(13);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(13);
      byteQuadsCanonicalizer1.addName("", 13, 13);
      byteQuadsCanonicalizer1._hashSize = 13;
      byteQuadsCanonicalizer1.findName(13, 1269);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("d~2@", 9);
      byteQuadsCanonicalizer1._hashSize = 9;
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1.findName(intArray0, 2);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("39", 9);
      byteQuadsCanonicalizer1.addName("39", 9);
      byteQuadsCanonicalizer1.addName("39", 9);
      byteQuadsCanonicalizer1.addName("39", 9, 9);
      byteQuadsCanonicalizer1._hashSize = 9;
      byteQuadsCanonicalizer1.addName("39", 9);
      byteQuadsCanonicalizer1.addName("39", 9);
      byteQuadsCanonicalizer1.findName(9, 9);
      assertEquals(18, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.addName("", 9, 9);
      byteQuadsCanonicalizer1._hashSize = 9;
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.findName(884, 884);
      assertEquals(6, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.addName(" ?.^ud3U", 9, 9);
      byteQuadsCanonicalizer1._hashSize = 9;
      byteQuadsCanonicalizer1.addName(" ?.^ud3U", 1490, 1490, 9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.findName(9, 1490);
      assertEquals(2, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("d~2@", 9);
      byteQuadsCanonicalizer1.addName("d~2@", 9);
      byteQuadsCanonicalizer1._hashSize = 9;
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1.findName(intArray0, 2);
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(43);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(43);
      int[] intArray0 = new int[10];
      byteQuadsCanonicalizer1.findName(intArray0, 3);
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(43, byteQuadsCanonicalizer1.hashSeed());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("com.fasterxml.jackson.core.sym.ByteQuadsCanonicaizer", 9, 9, 9);
      byteQuadsCanonicalizer1.findName(9, 9, 9);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(5);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(5);
      byteQuadsCanonicalizer1._hashSize = 5;
      byteQuadsCanonicalizer1.addName("", 1490, 1490, 5);
      byteQuadsCanonicalizer1.findName(2145704178, 2145704178, 5);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(13);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(13);
      byteQuadsCanonicalizer1.addName("lDQ>bW^ASL9P/(l", (-540), 13, (-1229));
      byteQuadsCanonicalizer1.findName((-540), (-540), (-1229));
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1._hashSize = 9;
      byteQuadsCanonicalizer1.addName(" ?.^ud3U", 9, 9, 9);
      byteQuadsCanonicalizer1.findName(9, 9, 400);
      assertEquals(1, byteQuadsCanonicalizer1.totalCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(43);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(43);
      byteQuadsCanonicalizer1.addName("d4<", 43);
      byteQuadsCanonicalizer1._hashSize = 43;
      int[] intArray0 = new int[10];
      byteQuadsCanonicalizer1.findName(intArray0, 3);
      assertEquals(1, byteQuadsCanonicalizer1.totalCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("C/k9nVqE$U%$~", 9);
      byteQuadsCanonicalizer1._hashSize = 9;
      byteQuadsCanonicalizer1.addName("C/k9nVqE$U%$~", 9, 9, 9);
      byteQuadsCanonicalizer1.findName(9, 9, 9);
      assertEquals(96, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("JSON", 9);
      byteQuadsCanonicalizer1._hashSize = 9;
      byteQuadsCanonicalizer1.addName("2", 9, 9, 9);
      byteQuadsCanonicalizer1.findName(356, 9, 9);
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("JSON", 9);
      byteQuadsCanonicalizer1._hashSize = 9;
      byteQuadsCanonicalizer1.addName("2", 9, 9, 9);
      byteQuadsCanonicalizer1.findName(9, 723, (-478));
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("C/k9nVqE$U%$~", 9);
      byteQuadsCanonicalizer1._hashSize = 9;
      byteQuadsCanonicalizer1.addName("C/k9nVqE$U%$~", 9, 9, 9);
      byteQuadsCanonicalizer1.findName(9, 9, 6);
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(43);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(43);
      byteQuadsCanonicalizer1.addName("d4<", 43);
      byteQuadsCanonicalizer1.addName("d4<", 43);
      byteQuadsCanonicalizer1._hashSize = 43;
      int[] intArray0 = new int[10];
      byteQuadsCanonicalizer1.findName(intArray0, 3);
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(8);
      int[] intArray0 = new int[22];
      byteQuadsCanonicalizer1.addName("", intArray0, 8);
      byteQuadsCanonicalizer1.findName(intArray0, 8);
      assertEquals(1, byteQuadsCanonicalizer1.totalCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(5);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(5);
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1.addName("4yhxPs=RwBF;2b", intArray0, 5);
      byteQuadsCanonicalizer1.findName(intArray0, 4);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(16);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(16);
      int[] intArray0 = new int[16];
      intArray0[0] = 16;
      byteQuadsCanonicalizer1._longNameOffset = 2;
      byteQuadsCanonicalizer1.addName(" entries, hash area of ", intArray0, 7);
      byteQuadsCanonicalizer1.findName(intArray0, 7);
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(16);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(16);
      int[] intArray0 = new int[16];
      byteQuadsCanonicalizer1.findName(intArray0, 16);
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(16, byteQuadsCanonicalizer1.hashSeed());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(5);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(5);
      int[] intArray0 = new int[9];
      intArray0[0] = 5;
      byteQuadsCanonicalizer1.addName("", 5);
      byteQuadsCanonicalizer1.addName("", intArray0, 5);
      byteQuadsCanonicalizer1.findName(intArray0, 5);
      assertEquals(2, byteQuadsCanonicalizer1.totalCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1._tertiaryShift = (-673);
      byteQuadsCanonicalizer1.addName("d~2@", 9);
      byteQuadsCanonicalizer1.addName("d~2@", 9);
      byteQuadsCanonicalizer1._hashSize = 9;
      int[] intArray0 = new int[7];
      byteQuadsCanonicalizer1.findName(intArray0, (-673));
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byteQuadsCanonicalizer1.addName("GL2R", 1);
      byteQuadsCanonicalizer1.addName("GL2R", 1);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("GL2R", 1, 1, 1);
      byteQuadsCanonicalizer1.findName((-12));
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("qDZM:`o>", 9);
      byteQuadsCanonicalizer1.addName("qDZM:`o>", 9);
      byteQuadsCanonicalizer1._hashSize = 9;
      byteQuadsCanonicalizer1.addName("", 32, 9);
      byteQuadsCanonicalizer1.findName(32, 9);
      assertEquals(96, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1._tertiaryShift = (-673);
      byteQuadsCanonicalizer1.addName("d~2@", 9);
      byteQuadsCanonicalizer1.addName("d~2@", 9);
      byteQuadsCanonicalizer1._hashSize = 9;
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1.findName(intArray0, 2);
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1._tertiaryShift = (-673);
      byteQuadsCanonicalizer1.addName("d~2@", 9);
      byteQuadsCanonicalizer1.addName("d~2@", 9);
      byteQuadsCanonicalizer1._hashSize = 9;
      int[] intArray0 = new int[7];
      byteQuadsCanonicalizer1.findName(intArray0, 3);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byteQuadsCanonicalizer1.addName("GLMR", 1);
      byteQuadsCanonicalizer1.addName("GLMR", 1);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("GLMR", 1, 1, 1);
      byteQuadsCanonicalizer1.findName(1, 65599, 65599);
      assertEquals(1, byteQuadsCanonicalizer1.totalCount());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("d~2@", 9);
      byteQuadsCanonicalizer1.addName("d~2@", 9);
      byteQuadsCanonicalizer1._hashSize = 9;
      byteQuadsCanonicalizer1.addName("d~2@", 9, 9, 448);
      byteQuadsCanonicalizer1.findName(9, 9, 9);
      assertEquals(3, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1._hashSize = 9;
      byteQuadsCanonicalizer1.addName("", 9, 9, 9);
      byteQuadsCanonicalizer1.findName(9, 9, 9);
      assertEquals(3, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(26);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(26);
      byteQuadsCanonicalizer1._tertiaryShift = (-673);
      byteQuadsCanonicalizer1.addName("d~2@", 26);
      byteQuadsCanonicalizer1.addName("d~2@", 26);
      byteQuadsCanonicalizer1._hashSize = 26;
      int[] intArray0 = new int[7];
      byteQuadsCanonicalizer1.findName(intArray0, 3);
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(16);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(16);
      int[] intArray0 = new int[16];
      byteQuadsCanonicalizer1.addName("}", 16);
      intArray0[0] = 16;
      byteQuadsCanonicalizer1.addName("}", 16);
      byteQuadsCanonicalizer1.addName("}", intArray0, 16);
      byteQuadsCanonicalizer1.findName(intArray0, 16);
      assertEquals(3, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(16);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(16);
      int[] intArray0 = new int[16];
      byteQuadsCanonicalizer1.addName("}", 16);
      intArray0[0] = 16;
      byteQuadsCanonicalizer1.addName("}", 16);
      byteQuadsCanonicalizer1.addName("}", 16);
      byteQuadsCanonicalizer1.findName(intArray0, 16);
      assertEquals(1, byteQuadsCanonicalizer1.tertiaryCount());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(16);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(16);
      byteQuadsCanonicalizer1._tertiaryShift = 383;
      int[] intArray0 = new int[16];
      byteQuadsCanonicalizer1.addName("}", 16);
      intArray0[0] = 16;
      byteQuadsCanonicalizer1.addName("}", 16);
      byteQuadsCanonicalizer1.addName("}", intArray0, 16);
      byteQuadsCanonicalizer1.findName(intArray0, 16);
      assertEquals(1, byteQuadsCanonicalizer1.secondaryCount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1._tertiaryShift = (-673);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1._hashSize = 9;
      int[] intArray0 = new int[9];
      intArray0[2] = 9;
      byteQuadsCanonicalizer1.findName(intArray0, 9);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(16);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(16);
      byteQuadsCanonicalizer1._tertiaryShift = 383;
      int[] intArray0 = new int[16];
      byteQuadsCanonicalizer1.addName("}", 16);
      intArray0[0] = 16;
      byteQuadsCanonicalizer1._hashSize = 2;
      byteQuadsCanonicalizer1.findName(intArray0, 16);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(4);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4);
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1.addName("4yhxPs=R,BF;2b", intArray0, 4);
      byteQuadsCanonicalizer1.findName(intArray0, 4);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(6);
      int[] intArray0 = new int[26];
      byteQuadsCanonicalizer1.addName("4yhxPs=R,BF;2b", intArray0, 6);
      byteQuadsCanonicalizer1.findName(intArray0, 6);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1);
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.addName("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]", 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4060);
      byteQuadsCanonicalizer1._count = 4060;
      byteQuadsCanonicalizer1.addName("4>?bANU-4OV", 4060, 4060);
      assertEquals(4061, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byteQuadsCanonicalizer1.addName("GLMR", 1);
      byteQuadsCanonicalizer1.addName("GLMR", 1);
      byteQuadsCanonicalizer1._hashSize = 1;
      byteQuadsCanonicalizer1.addName("GLMR", 1, 1, 1);
      byteQuadsCanonicalizer1.addName("GLMR", 1);
      assertEquals(4, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(16);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(16);
      byteQuadsCanonicalizer1._tertiaryShift = 383;
      int[] intArray0 = new int[16];
      byteQuadsCanonicalizer1.addName("}", 16);
      intArray0[0] = 16;
      byteQuadsCanonicalizer1.addName("}", 16);
      byteQuadsCanonicalizer1._hashSize = 2;
      byteQuadsCanonicalizer1.addName("}", intArray0, 16);
      assertEquals(109, byteQuadsCanonicalizer1.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(1);
      int[] intArray0 = new int[8];
      intArray0[3] = 1;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.addName("JSON", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.addName("4yhxPs=R,BF;2b", intArray0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1._tertiaryStart = 7;
      byteQuadsCanonicalizer1._hashSize = 9;
      byteQuadsCanonicalizer1.addName("", 1490, 1490, 9);
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1.addName("", 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(9);
      byteQuadsCanonicalizer1._tertiaryStart = 9;
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1.addName("", 9);
      byteQuadsCanonicalizer1._hashSize = 9;
      byteQuadsCanonicalizer1.addName("", 9, 9, 9);
      byteQuadsCanonicalizer1.addName("", 9);
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1.addName("", 9, 9);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Failed rehash(): old count=5, copyCount=3
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(9);
      byteQuadsCanonicalizer0._hashSize = 1090;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0._reportTooManyCollisions();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spill-over slots in symbol table with 0 entries, hash area of 1090 slots is now full (all 136 slots -- suspect a DoS attack based on hash collisions. You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(2994);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(421);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(6000);
      assertEquals(7, int0);
  }
}
