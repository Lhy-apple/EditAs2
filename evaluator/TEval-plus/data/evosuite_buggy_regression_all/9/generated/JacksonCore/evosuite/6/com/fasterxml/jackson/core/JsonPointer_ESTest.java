/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:33:47 GMT 2023
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonPointer_ESTest extends JsonPointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      jsonPointer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      String string0 = jsonPointer0.getMatchingProperty();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      JsonPointer jsonPointer1 = jsonPointer0.tail();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("Rz`?&/1349750326");
      boolean boolean0 = jsonPointer0.mayMatchProperty();
      assertTrue(boolean0);
      assertEquals("z`?&", jsonPointer0.getMatchingProperty());
      assertEquals("Rz`?&/1349750326", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.toString();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf("/j,3fDgQX X>)d?");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("j,3fDgQX X>)d?", jsonPointer0.getMatchingProperty());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals("/j,3fDgQX X>)d?", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      int int0 = jsonPointer0.getMatchingIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      assertTrue(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf("");
      assertEquals("", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      try { 
        JsonPointer.compile("XrFDhutf/eKA>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"XrFDhutf/eKA>\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("Invalid input: JSON Pointer epression must start with '/': \"");
      boolean boolean0 = jsonPointer0.matches();
      assertEquals("nvalid input: JSON Pointer epression must start with '", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("Invalid input: JSON Pointer epression must start with '/': \"", jsonPointer0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.matches();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("Rz`?&/1349750326");
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("z`?&", jsonPointer0.getMatchingProperty());
      assertFalse(boolean0);
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("@2");
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertTrue(boolean0);
      assertFalse(jsonPointer0.matches());
      assertEquals("@2", jsonPointer0.toString());
      assertEquals("2", jsonPointer0.getMatchingProperty());
      assertTrue(jsonPointer0.mayMatchProperty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.matchProperty("");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("42-c6i?#:O}wuig~|Fi");
      assertTrue(jsonPointer0.mayMatchProperty());
      
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty("");
      assertNull(jsonPointer1);
      assertFalse(jsonPointer0.mayMatchElement());
      assertEquals("2-c6i?#:O}wuig~|Fi", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("42-c6i?#:O}wuig~|Fi");
      JsonPointer jsonPointer1 = new JsonPointer("", "", jsonPointer0);
      JsonPointer jsonPointer2 = jsonPointer1.matchProperty("");
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertNotNull(jsonPointer2);
      assertEquals("2-c6i?#:O}wuig~|Fi", jsonPointer2.getMatchingProperty());
      assertEquals("42-c6i?#:O}wuig~|Fi", jsonPointer2.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = jsonPointer0.matchElement(15);
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("Rz`?&/1349750326");
      JsonPointer jsonPointer1 = jsonPointer0.matchElement((-1));
      assertNull(jsonPointer1);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("Rz`?&/1349750326", jsonPointer0.toString());
      assertEquals("z`?&", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail(")#([kNO\"0%8eF~.X'cT}");
      jsonPointer0.equals((Object) null);
      assertEquals(")#([kNO\"0%8eF~.X'cT}", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("#([kNO\"0%8eF~.X'cT}", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      boolean boolean0 = jsonPointer0.equals(jsonPointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("2pg");
      boolean boolean0 = jsonPointer0.equals("2pg");
      assertEquals("pg", jsonPointer0.getMatchingProperty());
      assertFalse(boolean0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
      assertEquals("2pg", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      JsonPointer jsonPointer1 = new JsonPointer("Gg#_bWO[3+/", "Gg#_bWO[3+/", jsonPointer0);
      boolean boolean0 = jsonPointer0.equals(jsonPointer1);
      assertFalse(boolean0);
      assertFalse(jsonPointer1.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals((-1), jsonPointer1.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail(")z`?&/7349750326");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("z`?&", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("u48~");
      assertEquals("48~", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("u48~", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("O~;F`DmM2p,(r");
      assertFalse(jsonPointer0.matches());
      assertEquals("~;F`DmM2p,(r", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("./lVG`~/nxZ22d/{V%E");
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("./lVG`~/nxZ22d/{V%E", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("3LZ<|fs(^FaU~(7~D\"");
      assertFalse(jsonPointer0.matches());
      assertEquals("LZ<|fs(^FaU~(7~D\"", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail(";Zx5*ArR*>S~", 4);
      assertEquals(";Zx5*ArR*>S~", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("Zx~*ArR*>S~", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("2_GMBM6fW~0^5");
      assertEquals("_GMBM6fW~^5", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("2_GMBM6fW~0^5", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("2.a25073858/072012e-308", 16);
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals(".a25073858/072/2e-308", jsonPointer0.getMatchingProperty());
  }
}
