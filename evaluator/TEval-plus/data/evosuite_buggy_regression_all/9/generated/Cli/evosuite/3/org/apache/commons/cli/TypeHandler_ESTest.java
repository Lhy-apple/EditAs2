/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 04:34:07 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.URL;
import org.apache.commons.cli.PatternOptionBuilder;
import org.apache.commons.cli.TypeHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeHandler_ESTest extends TypeHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = TypeHandler.createValue((String) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = TypeHandler.createValue("...", class0);
      Object object1 = TypeHandler.createValue("...", ((PatternOptionBuilder) object0).CLASS_VALUE);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = TypeHandler.createValue("i", class0);
      Object object1 = TypeHandler.createValue("i", ((PatternOptionBuilder) object0).FILES_VALUE);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TypeHandler typeHandler0 = new TypeHandler();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      URL uRL0 = TypeHandler.createURL("...");
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<String> class0 = String.class;
      Object object0 = TypeHandler.createValue("`nxe_ h5:", class0);
      assertEquals("`nxe_ h5:", object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = TypeHandler.createValue("", class0);
      Object object1 = TypeHandler.createValue("", ((PatternOptionBuilder) object0).NUMBER_VALUE);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = TypeHandler.createValue("3", class0);
      Object object1 = TypeHandler.createValue("3", ((PatternOptionBuilder) object0).DATE_VALUE);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = TypeHandler.createValue("w", class0);
      MockFile mockFile0 = (MockFile)TypeHandler.createValue("w", ((PatternOptionBuilder) object0).FILE_VALUE);
      assertFalse(mockFile0.canExecute());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = TypeHandler.createValue("", class0);
      Object object1 = TypeHandler.createValue("", ((PatternOptionBuilder) object0).EXISTING_FILE_VALUE);
      assertEquals("", object1.toString());
  }
}
