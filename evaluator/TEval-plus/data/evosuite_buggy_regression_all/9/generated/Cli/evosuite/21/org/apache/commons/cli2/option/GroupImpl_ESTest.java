/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 04:36:28 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli2.Argument;
import org.apache.commons.cli2.DisplaySetting;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.NumberValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GroupImpl_ESTest extends GroupImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 270, 270, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      groupImpl0.appendUsage(stringBuffer0, set0, comparator0);
      assertEquals(270, groupImpl0.getMinimum());
      assertEquals("", stringBuffer0.toString());
      assertEquals(270, groupImpl0.getMaximum());
      assertTrue(groupImpl0.isRequired());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-391), Integer.MAX_VALUE, false);
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Switch.enabled.startsWith.disabled");
      assertEquals((-391), groupImpl0.getMinimum());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "%|pBaz1BR\"mC6GGQ", "true", 0, 0, false);
      groupImpl0.getAnonymous();
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals(0, groupImpl0.getMaximum());
      assertEquals("%|pBaz1BR\"mC6GGQ", groupImpl0.getPreferredName());
      assertEquals("true", groupImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "%|pBaz1BR\"mC6GGQ", "true", 0, 0, false);
      int int0 = groupImpl0.getMaximum();
      assertEquals("true", groupImpl0.getDescription());
      assertEquals(0, int0);
      assertEquals("%|pBaz1BR\"mC6GGQ", groupImpl0.getPreferredName());
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "", 0, 32, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
      linkedList1.offer(groupImpl0);
      writeableCommandLineImpl0.addOption(groupImpl0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList1, "", (String) null, (-1), 0, true);
      try { 
        groupImpl1.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected {0} while processing 
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      NumberValidator numberValidator0 = NumberValidator.getNumberInstance();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("]q(DBuYEqdj(2$fHI", "]q(DBuYEqdj(2$fHI", 3169, 3169, 'W', 'W', numberValidator0, "", linkedList1, 0);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      linkedList0.push(sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-1526), (-1526), false);
      assertEquals(0, linkedList0.size());
      assertEquals((-1526), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      LinkedHashSet<GroupImpl> linkedHashSet0 = new LinkedHashSet<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "(J>u4,", "`b7", 32, 32, false);
      Command command0 = new Command("EgDg", "`b7", linkedHashSet0, true, (Argument) null, groupImpl0, 32);
      linkedList0.addLast(command0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList0, "`b7", "EgDg", 4562, 1102, true);
      assertTrue(linkedList0.contains(command0));
      assertEquals(4562, groupImpl1.getMinimum());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.ommons.cli2.option.GroupImpl", (String) null, 37, 37, false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
      assertFalse(boolean0);
      assertEquals(37, groupImpl0.getMinimum());
      assertEquals(37, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-391), Integer.MAX_VALUE, false);
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
      assertEquals(Integer.MAX_VALUE, groupImpl0.getMaximum());
      assertFalse(boolean0);
      assertEquals((-391), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.ommons.cli2.option.GroupImpl", "org.apache.ommons.cli2.option.GroupImpl", (-361), (-361), false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals((-361), groupImpl0.getMinimum());
      assertEquals((-361), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "EgDg", "EgDg", (-212), 0, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<GroupImpl> listIterator0 = (ListIterator<GroupImpl>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn((Object) null).when(listIterator0).next();
      doReturn((Object) null).when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals((-212), groupImpl0.getMinimum());
      assertEquals(0, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.ommons.cli2.option.GroupImpl", "org.apache.ommons.cli2.option.GroupImpl", (-361), (-361), false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      groupImpl0.validate(writeableCommandLineImpl0);
      assertEquals((-361), groupImpl0.getMaximum());
      assertEquals((-361), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.option.DefaultOption", "org.apache.commons.cli2.option.DefaultOption", 32, 32, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.addOption(groupImpl0);
      linkedList0.offer(groupImpl0);
      // Undeclared exception!
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.option.DefaultOption", "org.apache.commons.cli2.option.SourceDestArgument", Integer.MAX_VALUE, Integer.MAX_VALUE, false);
      linkedList0.offer(groupImpl0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList0, "org.apache.commons.cli2.option.DefaultOption", "org.apache.commons.cli2.option.SourceDestArgument", Integer.MAX_VALUE, Integer.MAX_VALUE, false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl1, linkedList0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option org.apache.commons.cli2.option.DefaultOption
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-216), 0, true);
      LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
      linkedList1.offer(groupImpl0);
      linkedList1.offer(groupImpl0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList1, "", "", (-216), (-216), true);
      String string0 = groupImpl1.toString();
      assertTrue(linkedList1.contains(groupImpl0));
      assertEquals("[ ([ ()]|[ ()])]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 270, 270, false);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Comparator<DisplaySetting> comparator0 = (Comparator<DisplaySetting>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List list0 = groupImpl0.helpLines((-13), set0, comparator0);
      assertEquals(270, groupImpl0.getMaximum());
      assertEquals(270, groupImpl0.getMinimum());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "EgDg", "EgDg", (-212), 0, true);
      LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
      linkedList1.offer(groupImpl0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList1, "EgDg", "EgDg", (-212), (-212), true);
      groupImpl1.findOption("[EgDg ([EgDg ()])]");
      assertEquals(1, linkedList1.size());
      assertEquals((-212), groupImpl1.getMaximum());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "", 0, 32, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertEquals(32, groupImpl0.getMaximum());
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.option.DefaultOption", "org.apache.commons.cli2.option.DefaultOption", 1070, 1070, true);
      linkedList0.offer(groupImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      // Undeclared exception!
      try { 
        groupImpl0.defaults(writeableCommandLineImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
