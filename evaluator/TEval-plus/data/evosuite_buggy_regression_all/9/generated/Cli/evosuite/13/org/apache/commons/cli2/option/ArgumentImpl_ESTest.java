/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 04:35:03 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.ClassValidator;
import org.apache.commons.cli2.validation.FileValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.validation.UrlValidator;
import org.apache.commons.cli2.validation.Validator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArgumentImpl_ESTest extends ArgumentImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, 'g', '3', numberValidator0, "o1N%WnK]w(`C", linkedList0, 0);
      char char0 = argumentImpl0.getInitialSeparator();
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals('g', char0);
      assertEquals(0, argumentImpl0.getMinimum());
      assertEquals('3', argumentImpl0.getSubsequentSeparator());
      assertEquals(0, argumentImpl0.getMaximum());
      assertEquals("o1N%WnK]w(`C", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, 'a', 'a', fileValidator0, "", linkedList0, 37);
      assertEquals(0, argumentImpl0.getMaximum());
      assertEquals(0, argumentImpl0.getMinimum());
      
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      sourceDestArgument0.getDefaultValues();
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
      assertEquals('a', argumentImpl0.getSubsequentSeparator());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals('a', argumentImpl0.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, 'g', '3', numberValidator0, "o1N%WnK]w(`C", linkedList0, 0);
      PropertyOption propertyOption0 = new PropertyOption("--", "A0", 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = argumentImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "o1N%WnK]w(`C");
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals('3', argumentImpl0.getSubsequentSeparator());
      assertEquals('g', argumentImpl0.getInitialSeparator());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("o1N%WnK]w(`C", argumentImpl0.getConsumeRemaining());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, 'a', 'a', fileValidator0, "", linkedList0, 37);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      char char0 = sourceDestArgument0.getSubsequentSeparator();
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals('a', argumentImpl0.getInitialSeparator());
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UrlValidator urlValidator0 = new UrlValidator("r]BaW");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("r]BaW", "r]BaW", 0, 0, 'u', 'u', urlValidator0, "r]BaW", linkedList0, 5104);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      argumentImpl0.defaults(writeableCommandLineImpl0);
      assertEquals('u', argumentImpl0.getInitialSeparator());
      assertEquals('u', argumentImpl0.getSubsequentSeparator());
      assertEquals("r]BaW", argumentImpl0.getPreferredName());
      assertEquals("r]BaW", argumentImpl0.getDescription());
      assertEquals("r]BaW", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArgumentImpl argumentImpl0 = new ArgumentImpl("CHOt`W4K", "CHOt`W4K", 61, 61, '@', '@', (Validator) null, "=x5tQ<r0U+%", (List) null, 61);
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      argumentImpl0.helpLines(0, set0, (Comparator) null);
      assertEquals('@', argumentImpl0.getInitialSeparator());
      assertEquals("CHOt`W4K", argumentImpl0.getDescription());
      assertEquals(61, argumentImpl0.getMaximum());
      assertEquals('@', argumentImpl0.getSubsequentSeparator());
      assertEquals(61, argumentImpl0.getMinimum());
      assertEquals("CHOt`W4K", argumentImpl0.getPreferredName());
      assertEquals("=x5tQ<r0U+%", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassValidator classValidator0 = new ClassValidator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.too.few.defaults", "Argument.too.few.defaults", 3, 3, 'h', 'h', classValidator0, "Argument.too.few.defaults", linkedList0, 3);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
      try { 
        sourceDestArgument0.validate((WriteableCommandLine) writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s) Argument.too.few.defaults Argument.too.few.defaults Argument.too.few.defaults
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, 'a', 'a', fileValidator0, "", linkedList0, 37);
      String string0 = argumentImpl0.getConsumeRemaining();
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("", string0);
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals('a', argumentImpl0.getInitialSeparator());
      assertEquals('a', argumentImpl0.getSubsequentSeparator());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("T)Q^Ik4Ni", "T)Q^Ik4Ni", 0, 0, 'S', 'S', fileValidator0, "T)Q^Ik4Ni", linkedList0, 37);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals("T)Q^Ik4Ni", argumentImpl0.getDescription());
      assertEquals("T)Q^Ik4Ni", argumentImpl0.getConsumeRemaining());
      assertEquals('S', argumentImpl0.getSubsequentSeparator());
      assertEquals("T)Q^Ik4Ni", argumentImpl0.getPreferredName());
      assertEquals('S', argumentImpl0.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 62, 62, 'W', '8', numberValidator0, "", linkedList0, 62);
      argumentImpl0.getValidator();
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals('8', argumentImpl0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals(62, argumentImpl0.getMaximum());
      assertEquals('W', argumentImpl0.getInitialSeparator());
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals(62, argumentImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, "", 60, 1507, 'H', 'u', fileValidator0, "xL j[XX,2/ZAG", linkedList0, 1);
      assertEquals('u', argumentImpl0.getSubsequentSeparator());
      assertEquals(60, argumentImpl0.getMinimum());
      assertEquals('H', argumentImpl0.getInitialSeparator());
      assertEquals("arg", argumentImpl0.getPreferredName());
      assertEquals("xL j[XX,2/ZAG", argumentImpl0.getConsumeRemaining());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals(1507, argumentImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("Argument.missing.values", "Argument.missing.values", 0, (-1231), 'F', 'F', numberValidator0, "fkM\f|", linkedList0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum number of values must not exceed maximum number
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassValidator classValidator0 = new ClassValidator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2198);
      linkedList0.add(integer0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("--", "--", (-1454), 48, 'v', '\'', classValidator0, "org.apache.commons.cli2.commandline.CommandLineImpl", linkedList0, (-515));
      assertEquals("--", argumentImpl0.getPreferredName());
      assertEquals("org.apache.commons.cli2.commandline.CommandLineImpl", argumentImpl0.getConsumeRemaining());
      assertEquals('v', argumentImpl0.getInitialSeparator());
      assertEquals("--", argumentImpl0.getDescription());
      assertEquals('\'', argumentImpl0.getSubsequentSeparator());
      assertEquals(48, argumentImpl0.getMaximum());
      assertEquals((-1454), argumentImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "Df'xfDA7Ip");
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("w", "Df'xfDA7Ip", 2, 2, 'j', ']', numberValidator0, "w", linkedList0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not enough default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-4601));
      linkedList0.add(integer0);
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("", "", 0, 0, 'a', 'a', fileValidator0, "", linkedList0, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too many default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassValidator classValidator0 = new ClassValidator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.commandline.CommandLineImpl", "org.apache.commons.cli2.commandline.CommandLineImpl", 3, 3, 'i', 'i', classValidator0, "org.apache.commons.cli2.commandline.CommandLineImpl", linkedList0, (-545));
      assertEquals(3, argumentImpl0.getMaximum());
      assertTrue(argumentImpl0.isRequired());
      
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.addLast("org.apache.commons.cli2.commandline.CommandLineImpl");
      linkedList1.add("<org.apache.commons.cli2.commandline.CommandLineImpl1> <org.apache.commons.cli2.commandline.CommandLineImpl2> <org.apache.commons.cli2.commandline.CommandLineImpl3> <org.apache.commons.cli2.commandline.CommandLineImpl1> <org.apache.commons.cli2.commandline.CommandLineImpl2> <org.apache.commons.cli2.commandline.CommandLineImpl3>");
      linkedList1.add("--");
      linkedList1.add("--");
      linkedList1.add("Argument.unexpected.value");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      argumentImpl0.processValues(writeableCommandLineImpl0, listIterator0, sourceDestArgument0);
      assertTrue(listIterator0.hasPrevious());
      assertEquals("org.apache.commons.cli2.commandline.CommandLineImpl", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassValidator classValidator0 = new ClassValidator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.too.few.defaults", "Argument.too.few.defaults", 3, 3, 'h', 'h', classValidator0, "Argument.too.few.defaults", linkedList0, (-545));
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("--");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      sourceDestArgument0.processValues(writeableCommandLineImpl0, listIterator0, propertyOption0);
      assertFalse(listIterator0.hasNext());
      assertEquals('h', argumentImpl0.getSubsequentSeparator());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassValidator classValidator0 = new ClassValidator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.too.few.defaults", "Argument.too.few.defaults", 3, 3, 'h', 'h', classValidator0, "Argument.too.few.defaults", linkedList0, (-545));
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.addLast("-D");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      argumentImpl0.processValues(writeableCommandLineImpl0, listIterator0, sourceDestArgument0);
      assertEquals('h', argumentImpl0.getInitialSeparator());
      assertEquals('h', argumentImpl0.getSubsequentSeparator());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("Argument.too.few.defaults", argumentImpl0.getDescription());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassValidator classValidator0 = new ClassValidator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.too.few.efaults", "Argument.too.few.efaults", 3, 3, 'h', 'h', classValidator0, "Argument.too.few.efaults", linkedList0, (-545));
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList1);
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.addLast("--");
      linkedList2.add("W3Y)!");
      linkedList2.add("Passes properties and values to the application");
      ListIterator<String> listIterator0 = linkedList2.listIterator();
      try { 
        argumentImpl0.processValues(writeableCommandLineImpl0, listIterator0, propertyOption0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected value \"e application\" found while processing  
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("<Yj'Ms0g8hXhFx", "\"xY.`KJ", (-4619), (-4619), 'a', '\'', fileValidator0, "<Yj'Ms0g8hXhFx", linkedList0, (-4619));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      PropertyOption propertyOption0 = new PropertyOption("|", "\"xY.`KJ", (-4619));
      // Undeclared exception!
      try { 
        argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0, (Option) propertyOption0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4619
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("?mtGVP[v1TP", "?mtGVP[v1TP", (-200), 2838, '', '&', (Validator) null, "oP|7+fq[#hIm\"@Q", linkedList0, (-1));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      assertEquals(2838, argumentImpl0.getMaximum());
      assertFalse(argumentImpl0.isRequired());
      
      argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0, (Option) null);
      assertEquals('', argumentImpl0.getInitialSeparator());
      assertEquals('&', argumentImpl0.getSubsequentSeparator());
      assertEquals("?mtGVP[v1TP", argumentImpl0.getDescription());
      assertEquals("?mtGVP[v1TP", argumentImpl0.getPreferredName());
      assertEquals("oP|7+fq[#hIm\"@Q", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, 'a', 'a', fileValidator0, "", linkedList0, 37);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      StringBuffer stringBuffer0 = new StringBuffer(2778);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      sourceDestArgument0.appendUsage(stringBuffer0, linkedHashSet0, (Comparator) null);
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals('a', argumentImpl0.getInitialSeparator());
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
      assertEquals('a', argumentImpl0.getSubsequentSeparator());
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ClassValidator classValidator0 = new ClassValidator();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("\"", "agp78", 1, Integer.MAX_VALUE, 'v', 'v', classValidator0, "zLqXYpTrE]X=", linkedList0, (-1454));
      String string0 = argumentImpl0.toString();
      assertEquals('v', argumentImpl0.getSubsequentSeparator());
      assertEquals('v', argumentImpl0.getInitialSeparator());
      assertEquals("zLqXYpTrE]X=", argumentImpl0.getConsumeRemaining());
      assertEquals("agp78", argumentImpl0.getDescription());
      assertEquals("<\"1> [<\"2> ...]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassValidator classValidator0 = new ClassValidator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.commandline.CommandLineImpl", "org.apache.commons.cli2.commandline.CommandLineImpl", 3, 3, 'i', 'i', classValidator0, "org.apache.commons.cli2.commandline.CommandLineImpl", linkedList0, (-545));
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      ArgumentImpl argumentImpl1 = new ArgumentImpl("--", "--", (-1454), 48, 'v', '\'', classValidator0, "org.apache.commons.cli2.commandline.CommandLineImpl", linkedList0, (-515));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("<org.apache.commons.cli2.commandline.CommandLineImpl1> <org.apache.commons.cli2.commandline.CommandLineImpl2> <org.apache.commons.cli2.commandline.CommandLineImpl3> <org.apache.commons.cli2.commandline.CommandLineImpl1> <org.apache.commons.cli2.commandline.CommandLineImpl2> <org.apache.commons.cli2.commandline.CommandLineImpl3>");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      sourceDestArgument0.processValues(writeableCommandLineImpl0, listIterator0, argumentImpl1);
      try { 
        argumentImpl1.validate((WriteableCommandLine) writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected value \"The class name \"<org.apache.commons.cli2.commandline.CommandLineImpl1> <org.apache.commons.cli2.commandline.CommandLineImpl2> <org.apache.commons.cli2.commandline.CommandLineImpl3> <org.apache.commons.cli2.commandline.CommandLineImpl1> <org.apache.commons.cli2.commandline.CommandLineImpl2> <org.apache.commons.cli2.commandline.CommandLineImpl3>\" is invalid.\" found while processing  -- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [-- [--]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("DISPLAY_GROUP_EXPANDED", "DISPLAY_GROUP_EXPANDED", 68, 68, ')', ')', fileValidator0, (String) null, linkedList0, 68);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("\"v%\"+\"{jpEutW\"");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      argumentImpl0.processValues(writeableCommandLineImpl0, listIterator0, propertyOption0);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains("\"v%\"+\"{jpEutW\""));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, 'a', 'a', fileValidator0, "", linkedList0, 37);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      String string0 = sourceDestArgument0.stripBoundaryQuotes("\" ...");
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals('a', argumentImpl0.getSubsequentSeparator());
      assertEquals('a', argumentImpl0.getInitialSeparator());
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("\" ...", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, 'g', '3', numberValidator0, "o1N%WnK]w(`C", linkedList0, 0);
      boolean boolean0 = argumentImpl0.isRequired();
      assertEquals('3', argumentImpl0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getPreferredName());
      assertFalse(boolean0);
      assertEquals('g', argumentImpl0.getInitialSeparator());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("o1N%WnK]w(`C", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 62, 62, '$', '$', numberValidator0, "", linkedList0, 62);
      boolean boolean0 = argumentImpl0.isRequired();
      assertTrue(boolean0);
      assertEquals("", argumentImpl0.getDescription());
      assertEquals('$', argumentImpl0.getInitialSeparator());
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals('$', argumentImpl0.getSubsequentSeparator());
  }
}
