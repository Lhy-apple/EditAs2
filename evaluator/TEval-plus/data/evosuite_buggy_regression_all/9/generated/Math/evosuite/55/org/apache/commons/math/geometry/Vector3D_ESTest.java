/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:41:55 GMT 2023
 */

package org.apache.commons.math.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      vector3D0.NaN.orthogonal();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = vector3D0.NaN.add((-2442.4), vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = Vector3D.distanceInf(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D((-0.340933078661247), vector3D0, (-0.340933078661247), vector3D0, (-0.340933078661247), vector3D0);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
      assertEquals(-0.0, vector3D1.getX(), 0.01);
      assertEquals(1.0461182771289244, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = Vector3D.distance1(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = vector3D0.getAlpha();
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = Vector3D.distance(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      String string0 = vector3D0.ZERO.toString();
      assertEquals("{0; 0; 0}", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getZ(), 0.01);
      assertFalse(vector3D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      double double0 = vector3D0.MINUS_K.getDelta();
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.subtract((-1629.9314308339722), vector3D0);
      assertEquals(2659937.3320821477, vector3D1.getNormSq(), 0.01);
      assertEquals((-1630.9314308339722), vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = vector3D0.MINUS_I.getNorm1();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      double double0 = vector3D0.getNormSq();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = Vector3D.distanceSq(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Vector3D vector3D1 = vector3D0.subtract(vector3D0);
      assertTrue(vector3D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      double double0 = vector3D0.NEGATIVE_INFINITY.getNormInf();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(902.8, vector3D0, 902.8, vector3D0);
      assertEquals(3260191.36, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(1.625, vector3D0, 0.0, vector3D0, (-3090.227768672), vector3D0, 1.625, vector3D0);
      double double0 = Vector3D.angle(vector3D0, vector3D1);
      assertEquals(3086.977768672, vector3D1.getY(), 0.01);
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.MINUS_I.normalize();
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals((-1.0), vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      // Undeclared exception!
      try { 
        vector3D0.ZERO.normalize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals(-0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1680.2123646116972), 2195.9524, (-1.0));
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals(0.6076679446310878, vector3D1.getY(), 0.01);
      assertEquals((-1.0), vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      // Undeclared exception!
      try { 
        Vector3D.angle(vector3D0, vector3D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Vector3D vector3D1 = Vector3D.ZERO;
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertTrue(vector3D0.isNaN());
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();
      boolean boolean0 = vector3D1.isInfinite();
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertFalse(boolean0);
      assertTrue(vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.003, 2491.604, Double.NaN);
      boolean boolean0 = vector3D0.isInfinite();
      assertEquals(2491.604, vector3D0.getY(), 0.01);
      assertTrue(vector3D0.isNaN());
      assertFalse(boolean0);
      assertEquals(0.003, vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      boolean boolean0 = vector3D0.isInfinite();
      assertFalse(boolean0);
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      boolean boolean0 = vector3D0.isInfinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3981.403633, Double.NEGATIVE_INFINITY, (-2904.1614714953603));
      boolean boolean0 = vector3D0.isInfinite();
      assertEquals(3981.403633, vector3D0.getX(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01);
      assertEquals((-2904.1614714953603), vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(766.92191331409, (-300.7), Double.NEGATIVE_INFINITY);
      boolean boolean0 = vector3D0.isInfinite();
      assertTrue(boolean0);
      assertEquals(766.92191331409, vector3D0.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01);
      assertEquals((-300.7), vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      boolean boolean0 = vector3D0.equals(vector3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      boolean boolean0 = vector3D0.equals("org.apache.commons.math.geometry.Vector3D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D((-419864.7584723363), vector3D0);
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertEquals(419864.7584723363, vector3D1.getZ(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.762864154070333E11, vector3D1.getNormSq(), 0.01);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals(-0.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = vector3D0.negate();
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals(-0.0, vector3D1.getX(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      vector3D0.hashCode();
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = new Vector3D((-537.59), vector3D0, 2314.89, vector3D0, (-537.59), vector3D0, 2314.89, vector3D0);
      vector3D1.hashCode();
      assertFalse(vector3D0.isNaN());
      assertFalse(vector3D0.equals((Object)vector3D1));
  }
}
