/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:42:03 GMT 2023
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asin;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      regulaFalsiSolver0.solve(1089, (UnivariateRealFunction) cos0, 9.75024907553473E-8, (double) 1089, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.6666666269302368, 0.6666666269302368);
      Log log0 = new Log();
      illinoisSolver0.setup(607, log0, 0.6666666269302368, 607, 0.6666666269302368);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(1.1024405466746179, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1296.57667597));
      Atan atan0 = new Atan();
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(3, (UnivariateRealFunction) atan0, (-1296.57667597), 1526.279657);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (3) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Asin asin0 = new Asin();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(15);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(15, (UnivariateRealFunction) asin0, 0.0, 0.0, allowedSolution0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Asin asin0 = new Asin();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(23, 23, 23);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(23, (UnivariateRealFunction) asin0, (double) 23, 0.0, allowedSolution0);
      assertEquals(23.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Asin asin0 = new Asin();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-0.6));
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2039, (UnivariateRealFunction) asin0, (-0.6), 1.0E-6, allowedSolution0);
      assertEquals((-0.6), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      Cos cos0 = new Cos();
      double double0 = regulaFalsiSolver0.solve(1059, (UnivariateRealFunction) cos0, 1.570316160184725, (double) 1059, allowedSolution0);
      assertEquals(1.570316160184725, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Asin asin0 = new Asin();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0E-6, (-0.151410622), 41);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(41, (UnivariateRealFunction) asin0, (-0.151410622), 1.0E-6, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (41) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      Cos cos0 = new Cos();
      double double0 = regulaFalsiSolver0.solve(1089, (UnivariateRealFunction) cos0, 1.57031616, (double) 1089, allowedSolution0);
      assertEquals(1.57031616, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(46, (UnivariateRealFunction) cos0, 1.3799010504757054E-15, (double) 46, allowedSolution0);
      assertEquals(1.3799010504757054E-15, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(32.98672286269283, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(1089, (UnivariateRealFunction) cos0, 9.75024907553473E-8, (double) 1089, allowedSolution0);
      assertEquals(544.5000000487513, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(26.703537555513243, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      Cos cos0 = new Cos();
      double double0 = regulaFalsiSolver0.solve(1089, (UnivariateRealFunction) cos0, 1.57031616, (double) 1089, allowedSolution0);
      assertEquals(545.28515808, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1089, (UnivariateRealFunction) cos0, 9.75024907553473E-8, (double) 1089, allowedSolution0);
      assertEquals(544.5000000487513, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(26.703537555482697, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Asin asin0 = new Asin();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-0.09088450866185192), 51, 51);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(51, (UnivariateRealFunction) asin0, (-0.09088450866185192), 0.6000132448557, allowedSolution0);
      assertEquals(0.254564368096924, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.6000132448557, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Asin asin0 = new Asin();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-0.09088450866185192), 4);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(4, (UnivariateRealFunction) asin0, (-0.09088450866185192), 1.0E-6, allowedSolution0);
      assertEquals((-0.04544175433092596), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-0.09088450866185192), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(35, 35, 1.0E-6);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      Cos cos0 = new Cos();
      double double0 = regulaFalsiSolver0.solve(35, (UnivariateRealFunction) cos0, 1.0E-6, (double) 35, allowedSolution0);
      assertEquals(1.0E-6, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(18.38532553218156, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      Cos cos0 = new Cos();
      double double0 = regulaFalsiSolver0.solve(35, (UnivariateRealFunction) cos0, 0.0, (double) 35, allowedSolution0);
      assertEquals(17.5, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(26.703537555513492, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Asin asin0 = new Asin();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(46);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(46, (UnivariateRealFunction) asin0, (-0.6), 0.6000132448557061, allowedSolution0);
      assertEquals(6.6224278530979674E-6, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1.0960400502746381E-6), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(35, 35, 1.0E-6);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(35, (UnivariateRealFunction) cos0, 1.0E-6, (double) 35, allowedSolution0);
      assertEquals(17.500000500000002, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(18.38532553218156, double0, 0.01);
  }
}
