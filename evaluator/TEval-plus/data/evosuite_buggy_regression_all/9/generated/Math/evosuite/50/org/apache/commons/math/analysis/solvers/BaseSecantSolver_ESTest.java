/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:42:56 GMT 2023
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Exp;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      illinoisSolver0.solve(3, (UnivariateRealFunction) asinh0, 0.0, 0.0, 0.0, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-620.8579808117), (-620.8579808117));
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Sigmoid sigmoid0 = new Sigmoid((-1823.0), 2147475699);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(2147475699, (UnivariateRealFunction) sigmoid0, (-1823.0), 7.279987247392873E12);
      assertEquals(7.279987247392873E12, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-13.979320121131218), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-473.28854022918), (-473.28854022918), (-473.28854022918));
      Exp exp0 = new Exp();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(832, (UnivariateRealFunction) exp0, (-473.28854022918), (-473.28854022918), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [-473.289, -473.289]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(1305382802, (UnivariateRealFunction) asinh0, (double) 1305382802, 0.0, (double) 1305382802, allowedSolution0);
      assertEquals(1.305382802E9, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(1305382761, (UnivariateRealFunction) asinh0, (-5.868461290237171E-19), (double) 1305382761, (double) 1305382761, allowedSolution0);
      assertEquals(1.305382761E9, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(646, (UnivariateRealFunction) asinh0, (-39.49516116974), (double) 646, (-39.49516116974), allowedSolution0);
      assertEquals((-39.49516116974), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-3.1631511447681795E-9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Asinh asinh0 = new Asinh();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1305382736, 1305382736, 1305382736);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(1305382736, (UnivariateRealFunction) asinh0, (-56.71942639615969), (double) 1305382736, (double) 1305382736, allowedSolution0);
      assertEquals(1.305382736E9, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2.3382114793630505E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(1305382762, (UnivariateRealFunction) asinh0, (-39.49516116974186), (double) 1305382762, (double) 1305382762, allowedSolution0);
      assertEquals(1.305382762E9, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.1728227235414425E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(1305382762, (UnivariateRealFunction) asinh0, (-23.433223136697748), (double) 1305382762, (double) 1305382762, allowedSolution0);
      assertEquals(1.305382762E9, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-6.013933925586852E-20), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(1305382762, (UnivariateRealFunction) asinh0, (-39.495161169742), (double) 1305382762, (double) 1305382762, allowedSolution0);
      assertEquals(1.305382762E9, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.1728227235414425E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(1305382762, (UnivariateRealFunction) asinh0, (-39.495161169742), (double) 1305382762, (double) 1305382762, allowedSolution0);
      assertEquals(1.305382762E9, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-9.57740247810726E-26), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(1305382762, (UnivariateRealFunction) asinh0, (-23.433223136697748), (double) 1305382762, (double) 1305382762, allowedSolution0);
      assertEquals(1.305382762E9, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(6.013933925505532E-20, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(1824, (UnivariateRealFunction) asinh0, (-683.84078682), (double) 1824, (-683.84078682), allowedSolution0);
      assertEquals((-683.84078682), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(7.862416345801884E-23, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(188, (UnivariateRealFunction) asinh0, (-0.15497291615793055), (double) 188, (-0.15497291615793055), allowedSolution0);
      assertEquals((-0.15497291615793055), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-6.510622949269795E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(1305382762, (UnivariateRealFunction) asinh0, (-1.0), (double) 1305382762, (double) 1305382762, allowedSolution0);
      assertEquals(1.305382762E9, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-8.075092675384477E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(1305382717, (UnivariateRealFunction) asinh0, (-493.64957285513), (double) 1305382717, (-493.64957285513), allowedSolution0);
      assertEquals(1.9482655112377405E-15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(1305382762, (UnivariateRealFunction) asinh0, (-1.0), (double) 1305382762, (double) 1305382762, allowedSolution0);
      assertEquals(1.305382762E9, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-8.075092675384477E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(1394, (UnivariateRealFunction) asinh0, (-45.86614692094561), (double) 1394, (double) 1394, allowedSolution0);
      assertEquals(1394.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(3.697996821503159E-12, double0, 0.01);
  }
}
