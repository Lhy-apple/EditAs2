/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:41:26 GMT 2023
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpenMapRealMatrix_ESTest extends OpenMapRealMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1541, 1541);
      openMapRealMatrix0.addToEntry(1494, 1494, 0.11111095942313305);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract(openMapRealMatrix0);
      assertEquals(1541, openMapRealMatrix1.getRowDimension());
      assertEquals(1541, openMapRealMatrix0.getRowDimension());
      assertEquals(1541, openMapRealMatrix0.getColumnDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1541, 1541);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.copy();
      assertEquals(1541, openMapRealMatrix1.getRowDimension());
      assertEquals(1541, openMapRealMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(144, 144);
      // Undeclared exception!
      try { 
        openMapRealMatrix0.createMatrix(144, (-892));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -892 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(48, 48);
      // Undeclared exception!
      try { 
        openMapRealMatrix0.subtract((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1541, 1541);
      openMapRealMatrix0.addToEntry(1500, 1500, 1541);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.add(openMapRealMatrix0);
      assertEquals(1541, openMapRealMatrix1.getColumnDimension());
      assertEquals(1541, openMapRealMatrix1.getRowDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1541, 1541);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(1541, 1530);
      openMapRealMatrix0.addToEntry(1530, 1530, 1530);
      assertEquals(1541, openMapRealMatrix0.getColumnDimension());
      
      RealMatrix realMatrix0 = openMapRealMatrix0.multiply((RealMatrix) array2DRowRealMatrix0);
      assertEquals(1541, openMapRealMatrix0.getRowDimension());
      assertEquals(1541, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1541, 1541);
      assertEquals(1541, openMapRealMatrix0.getColumnDimension());
      
      openMapRealMatrix0.addToEntry(1494, 1494, 0.11111095942313305);
      assertEquals(1541, openMapRealMatrix0.getRowDimension());
      
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.multiply(openMapRealMatrix0);
      assertEquals(1541, openMapRealMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1541, 1541);
      openMapRealMatrix0.addToEntry(1534, 1534, 0.0);
      assertEquals(1541, openMapRealMatrix0.getRowDimension());
      assertEquals(1541, openMapRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1541, 1541);
      openMapRealMatrix0.addToEntry(1494, 1494, 0.11111095942313305);
      openMapRealMatrix0.multiplyEntry(1494, 1494, 0.11111095942313305);
      assertEquals(1541, openMapRealMatrix0.getColumnDimension());
      assertEquals(1541, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1541, 1541);
      openMapRealMatrix0.multiplyEntry(1516, 1516, 1541);
      assertEquals(1541, openMapRealMatrix0.getColumnDimension());
      assertEquals(1541, openMapRealMatrix0.getRowDimension());
  }
}
