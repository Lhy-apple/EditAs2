/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:37:52 GMT 2023
 */

package org.apache.commons.math3.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Acos;
import org.apache.commons.math3.analysis.function.Cos;
import org.apache.commons.math3.analysis.function.Logit;
import org.apache.commons.math3.analysis.function.Sigmoid;
import org.apache.commons.math3.analysis.function.Sinh;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer((-1613.2963494221), 5.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,613.296 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(0.40682359960545844, (-8.671691870430433));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -8.672 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Acos acos0 = new Acos();
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(2123703095, 2.6786368134431636E-33);
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2123703095, (UnivariateFunction) acos0, goalType0, 2.6786368134431636E-33, (double) 2123703095, 2.6786368134431636E-33);
      assertEquals(6.770202977639219E-17, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GoalType goalType0 = GoalType.MAXIMIZE;
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.24787376149236184, 0.5);
      Sigmoid sigmoid0 = new Sigmoid(1.1898510456085205, 0.5);
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2555, (UnivariateFunction) sigmoid0, goalType0, (double) 2555, (double) 2555, (-3931.168002243339));
      assertEquals((-2692.4201421858634), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.5, 0.5, (ConvergenceChecker<UnivariatePointValuePair>) null);
      GoalType goalType0 = GoalType.MAXIMIZE;
      Sinh sinh0 = new Sinh();
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2555, (UnivariateFunction) sinh0, goalType0, 0.5, 2.5115456581115723, (-173.26999303165215));
      assertEquals(1.4323411469803866, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.2654955476687896, 0.2654955476687896);
      Logit logit0 = new Logit((-1613.2963494221), 4.7782149589194885E246);
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(3437, (UnivariateFunction) logit0, goalType0, (-2761.7), 5.0, (-448.5));
      assertEquals((-560.6119088186774), univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(7.167968411014122, 7.167968411014122);
      GoalType goalType0 = GoalType.MAXIMIZE;
      Sinh sinh0 = new Sinh();
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1653, (UnivariateFunction) sinh0, goalType0, (-4.351843341274115E227), (-0.3614843205597824), 7.167968411014122);
      assertEquals((-1.0301989252114707E22), univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.42926812171936035, 0.42926812171936035);
      Cos cos0 = new Cos();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1530, (UnivariateFunction) cos0, goalType0, (double) 2555, 0.42926812171936035, (-4328.927733317));
      assertEquals((-0.34193576706641327), univariatePointValuePair0.getValue(), 0.01);
  }
}
