/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:34:22 GMT 2023
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitsStreamGenerator_ESTest extends BitsStreamGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      long long0 = well512a0.nextLong();
      assertEquals((-8343629910827964027L), long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      int int0 = well512a0.nextInt();
      assertEquals((-1942652723), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      float float0 = well512a0.nextFloat();
      assertEquals(0.54769087F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      boolean boolean0 = mersenneTwister0.nextBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(2662);
      well19937c0.next(2662);
      boolean boolean0 = well19937c0.nextBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((int[]) null);
      byte[] byteArray0 = new byte[9];
      well19937a0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-65), (byte)92, (byte) (-40), (byte) (-122), (byte)22, (byte) (-60), (byte)40, (byte)110}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[5];
      Well512a well512a0 = new Well512a(intArray0);
      double double0 = well512a0.nextGaussian();
      assertEquals(0.026894747449481678, double0, 0.01);
      
      double double1 = well512a0.nextGaussian();
      assertEquals(0.09172618785555599, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(2662);
      try { 
        well19937c0.nextInt(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[7];
      Well44497a well44497a0 = new Well44497a(intArray0);
      int int0 = well44497a0.nextInt(32);
      assertEquals(27, int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      int int0 = well44497a0.nextInt(763724555);
      assertEquals(600444875, int0);
  }
}
