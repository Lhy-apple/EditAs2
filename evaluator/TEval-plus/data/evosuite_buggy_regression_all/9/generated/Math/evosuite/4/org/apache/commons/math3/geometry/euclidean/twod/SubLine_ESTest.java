/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:33:41 GMT 2023
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.Segment;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;
import org.apache.commons.math3.geometry.partitioning.Side;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubLine_ESTest extends SubLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      AbstractSubHyperplane<Euclidean2D, Euclidean1D> abstractSubHyperplane0 = subLine0.copySelf();
      assertFalse(abstractSubHyperplane0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      List<Segment> list0 = subLine0.getSegments();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D(0.25, 0.25);
      Line line0 = new Line(vector2D0, vector2D1);
      SubLine subLine0 = line0.wholeHyperplane();
      Line line1 = new Line(vector2D0, vector2D0);
      SubLine subLine1 = line1.wholeHyperplane();
      Vector2D vector2D2 = subLine1.intersection(subLine0, false);
      assertFalse(vector2D2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(521.1, 0.0);
      Line line0 = new Line(vector2D0, 521.1);
      SubLine subLine0 = line0.wholeHyperplane();
      SubLine subLine1 = new SubLine(vector2D0, vector2D0);
      Vector2D vector2D1 = subLine0.intersection(subLine1, true);
      assertEquals(0.0, vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Vector2D vector2D1 = subLine0.intersection(subLine0, true);
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(521.1, 0.0);
      Line line0 = new Line(vector2D0, 521.1);
      Vector2D vector2D1 = Vector2D.NaN;
      SubLine subLine0 = line0.wholeHyperplane();
      SubLine subLine1 = new SubLine(vector2D0, vector2D1);
      Vector2D vector2D2 = subLine0.intersection(subLine1, true);
      assertNull(vector2D2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Vector2D vector2D1 = subLine0.intersection(subLine0, false);
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, (-38.86072396932334));
      SubLine subLine1 = line0.wholeHyperplane();
      Vector2D vector2D1 = subLine1.intersection(subLine0, false);
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, vector2D0);
      Side side0 = subLine0.side(line0);
      assertEquals(Side.MINUS, side0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, vector2D0);
      Side side0 = subLine0.side(line0);
      assertEquals(Side.HYPER, side0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = new Vector2D((-2.957007209750105E-8), 0.19834179204939426);
      SubLine subLine0 = new SubLine(vector2D1, vector2D1);
      Side side0 = subLine0.side(line0);
      assertEquals(Side.MINUS, side0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D2 = vector2D0.subtract((Vector<Euclidean2D>) vector2D1);
      Line line0 = new Line(vector2D0, (-1449.322617));
      Line line1 = new Line(line0);
      line1.reset(vector2D2, (-1449.322617));
      SubLine subLine0 = line0.wholeHyperplane();
      Side side0 = subLine0.side(line1);
      assertEquals(Side.PLUS, side0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = new Vector2D((-1002.47918576579), (-1002.47918576579));
      Line line1 = new Line(vector2D0, vector2D1);
      SubLine subLine0 = line1.wholeHyperplane();
      Side side0 = subLine0.side(line0);
      assertEquals(Side.BOTH, side0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, vector2D0);
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D2 = vector2D0.subtract((Vector<Euclidean2D>) vector2D1);
      Line line0 = new Line(vector2D0, (-1449.322617));
      Line line1 = new Line(line0);
      line1.reset(vector2D2, (-1449.322617));
      Segment segment0 = new Segment(vector2D2, vector2D1, line1);
      SubLine subLine0 = new SubLine(segment0);
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, (-1449.322617));
      Line line1 = new Line(vector2D1, vector2D0);
      SubLine subLine0 = line0.wholeHyperplane();
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line1);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D2 = vector2D0.subtract((Vector<Euclidean2D>) vector2D1);
      Line line0 = new Line(vector2D0, (-1449.322617));
      SubLine subLine0 = new SubLine(vector2D0, vector2D2);
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Vector2D vector2D1 = new Vector2D(1593.081743, 0.7071067811865475);
      Line line0 = new Line(vector2D1, (-1093.335551383));
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }
}
