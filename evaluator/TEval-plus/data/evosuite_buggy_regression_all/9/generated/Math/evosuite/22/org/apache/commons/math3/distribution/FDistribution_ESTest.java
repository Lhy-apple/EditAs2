/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:36:03 GMT 2023
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FDistribution_ESTest extends FDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2132L, 2132L);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      
      double double0 = fDistribution0.sample();
      assertEquals(1.0577836581557891, double0, 0.01);
      assertEquals(1.0009389671361502, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(2132.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2132L, 2132L);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(2132.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0009389671361502, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      FDistribution fDistribution0 = new FDistribution(well1024a0, 0.5, 0.5, 0.5);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.5, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2132L, 2132L);
      double double0 = fDistribution0.density(1.0129789049460145);
      assertEquals(8.697130790976225, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution((-2971.093486216318), (-2971.093486216318), (-2971.093486216318));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-2,971.093)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1L);
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(well19937a0, 1346.587308, 0.0, 2056.347);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      FDistribution fDistribution0 = new FDistribution(well1024a0, 0.5, 0.5, 0.5);
      double double0 = fDistribution0.inverseCumulativeProbability(0.5);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01);
      
      double double1 = fDistribution0.sample();
      assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(0.5, double1, 0.01);
  }
}
