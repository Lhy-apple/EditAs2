/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 06:37:29 GMT 2023
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastMath_ESTest extends FastMath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = FastMath.round(2463.5093960387685);
      assertEquals(2464L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = FastMath.expm1((-709.4618855466565));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = FastMath.hypot(1.0E-323, 1.0E-323);
      assertEquals(1.5E-323, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = FastMath.acosh(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float float0 = FastMath.nextUp((float) 5);
      assertEquals(5.0000005F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = FastMath.atan(Double.NEGATIVE_INFINITY);
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = FastMath.IEEEremainder(0.0, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = FastMath.nextUp(-0.0);
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[6];
      FastMath.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = FastMath.getExponent(741.9689F);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double double0 = FastMath.log(1036.8, 1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = FastMath.sin(4.811185107109758E289);
      assertEquals(0.8782694950419722, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = FastMath.atan2(1.0E-323, (-4.0353723442917463E83));
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = FastMath.cosh(9.563454814394247E171);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = FastMath.cosh(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = FastMath.cosh((-2.1581119071750435E-10));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = FastMath.cosh((-3937.3117));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = FastMath.cosh(0.031);
      assertEquals(1.0004805384812743, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = FastMath.sinh(6.39485115791896E288);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = FastMath.sinh(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = FastMath.sinh((-2.6157563728873715E-8));
      assertEquals((-2.615756372887372E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = FastMath.sinh((-3025.8950039));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = FastMath.sinh(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = FastMath.sinh(1.0E-323);
      assertEquals(1.0E-323, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = FastMath.sinh(2.718281828459045);
      assertEquals(7.544137102816975, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = FastMath.tanh(0.5463024377822876);
      assertEquals(0.4977438384477725, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = FastMath.tanh(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = FastMath.tanh(6.39485115791896E288);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = FastMath.tanh((-2175.130805874615));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = FastMath.tanh(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = FastMath.tanh((-1.9841269659586505E-4));
      assertEquals((-1.98412693992188E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = FastMath.asinh(0.07692307692307693);
      assertEquals(0.07684741718867191, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = FastMath.asinh((-823.4835));
      assertEquals((-7.406691062210386), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = FastMath.asinh(0.12936474974924558);
      assertEquals(0.12900661531722102, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = FastMath.asinh(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = FastMath.asinh(0.008336750013465571);
      assertEquals(0.008336653447185054, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = FastMath.atanh(0.05809608407126195);
      assertEquals(0.05816157784941084, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = FastMath.atanh((-447.0));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = FastMath.atanh((-0.12830568841229661));
      assertEquals((-0.1290167966834862), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = FastMath.atanh(-0.0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = FastMath.atanh(0.012649625804442299);
      assertEquals(0.012650300570890068, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = FastMath.signum(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = FastMath.signum((-721.91104));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = FastMath.signum(6.39485115791896E288);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float float0 = FastMath.signum((float) 276);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float float0 = FastMath.signum((-0.7372292F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = FastMath.signum(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = FastMath.pow((-8.0E298), (-8.0E298));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = FastMath.expm1(Double.NEGATIVE_INFINITY);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = FastMath.pow(1.5, (-1834.8384114097482));
      assertEquals(1.0E-323, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = FastMath.expm1((-737.39321));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = FastMath.exp((-709.46));
      assertEquals(7.681337880361803E-309, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = FastMath.expm1(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = FastMath.expm1(-0.0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = FastMath.expm1((-4.674900007989718E-9));
      assertEquals((-4.674899997062372E-9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = FastMath.log10(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = FastMath.log1p(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = FastMath.log10(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = FastMath.log(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = FastMath.log(1.0E-323, 1.0E-323);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = FastMath.pow(0.9305076599121094, 0.9305076599121094);
      assertEquals(0.9351766966976951, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = FastMath.pow((-1.0), (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = FastMath.log1p((-1.0));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = FastMath.log1p(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = FastMath.log1p(0.9285714285714286);
      assertEquals(0.6567795363890705, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = FastMath.log1p(2.0217439756338078E-10);
      assertEquals(2.0217439754294353E-10, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = FastMath.log10((-0.08087337401854144));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = FastMath.pow((double) -0.0F, (double) -0.0F);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = FastMath.pow(Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = FastMath.pow(-0.0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = FastMath.pow(0.0, (-1040.913));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = FastMath.pow((double) -0.0F, (double) (-2147482995));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = FastMath.pow(-0.0, (-1682.266313806));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = FastMath.pow(-0.0, (-4.503599627370496E15));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = FastMath.pow(-0.0, 1.633123935319537E16);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = FastMath.pow(-0.0, 116.66126989212);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = FastMath.pow(-0.0, 735.0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = FastMath.pow(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = FastMath.pow(Double.POSITIVE_INFINITY, (-3249.39));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = FastMath.pow((-1.0), Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = FastMath.pow((-2.2250738585072014E-308), Double.POSITIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, 1171.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, (-1930.0));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, (-961.0));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, 2.2250738585072014E-308);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, 1.633123935319537E16);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = FastMath.pow(1.0, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = FastMath.pow(0.19999954104423523, Double.NEGATIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = FastMath.pow(1423.9261, Double.NEGATIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = FastMath.pow((-4.5035996273704955E15), 3.5451314095271004E52);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = FastMath.pow((-953.175873993692), 5.948317459455295E-16);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = FastMath.pow((-960.0), (-960.0));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = FastMath.pow(8.0E298, 8.0E298);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = FastMath.pow((double) (-1105), (-1105));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = FastMath.pow(0.5000000000042687, 0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = FastMath.pow(1.7911398904871E84, 2098);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = FastMath.sin(6.1035156E-5F);
      assertEquals(6.103515621210439E-5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = FastMath.tan(0.62715753003033);
      assertEquals(0.7247701710143225, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = FastMath.tan(9.223372036854776E18);
      assertEquals(84.73931296875567, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = FastMath.tan((-28.40194237334007));
      assertEquals((-0.12830568841229661), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = FastMath.sin((-6.111904355319807E15));
      assertEquals((-0.74079463546903), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = FastMath.cos(7.75933511025868E163);
      assertEquals((-0.6626354432642793), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = FastMath.cos(3.4028235E38F);
      assertEquals(0.8530210398303042, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = FastMath.cos(8.0E298);
      assertEquals((-0.9991033281235678), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = FastMath.tan(4.503599627370496E15);
      assertEquals((-1.8005242480088435), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = FastMath.cos((-4.503599627370498E15));
      assertEquals((-0.5928697445178994), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = FastMath.sin(-0.0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = FastMath.sin(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = FastMath.sin(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = FastMath.sin(Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = FastMath.sin(2191.6032370383355);
      assertEquals((-0.9419646220970971), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = FastMath.cos(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = FastMath.cos(Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = FastMath.cos(748.21);
      assertEquals(0.8722811056008208, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = FastMath.cos(0.8722811056008208);
      assertEquals(0.6430813560746417, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = FastMath.tan(-0.0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = FastMath.tan(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = FastMath.tan(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = FastMath.tan(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = FastMath.atan2(1.0E-323, 1213.782879);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = FastMath.acos(2.2250738585072014E-308);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = FastMath.atan2(0.9999982074677064, 0.8213214964304114);
      assertEquals(0.8831881300437572, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = FastMath.atan2((-759.10951390849), (-759.10951390849));
      assertEquals((-2.356194490192345), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = FastMath.atan2(Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = FastMath.atan2(Double.NaN, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = FastMath.atan2(0.0, Double.NEGATIVE_INFINITY);
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = FastMath.atan2(-0.0, -0.0);
      assertEquals((-3.141592653589793), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = FastMath.atan2(-0.0, Double.POSITIVE_INFINITY);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = FastMath.atan2(0.0, (-1040.913));
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = FastMath.atan2(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = FastMath.atan2(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertEquals(2.356194490192345, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = FastMath.atan2(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(0.7853981633974483, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = FastMath.atan2(Double.POSITIVE_INFINITY, 0.9285714285714286);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = FastMath.atan2(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals((-0.7853981633974483), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = FastMath.atan2(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertEquals((-2.356194490192345), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double double0 = FastMath.atan2(Double.NEGATIVE_INFINITY, (-4.503599627370496E15));
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double double0 = FastMath.atan2((-4.5035996273705E15), Double.POSITIVE_INFINITY);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = FastMath.atan2(997.704962866805, Double.POSITIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = FastMath.atan2((-4.503599627370497E15), Double.NEGATIVE_INFINITY);
      assertEquals((-3.141592653589793), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = FastMath.atan2(1.073741824E9, Double.NEGATIVE_INFINITY);
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = FastMath.atan2(1.0, -0.0F);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double double0 = FastMath.atan2((-1041.4671643712384), 0.0);
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = FastMath.atan2(6.39485115791896E288, (-4.1291070428848755E-76));
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = FastMath.atan2((-1250.9), 2.2250738585072014E-308);
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = FastMath.asin(3964.6098);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = FastMath.asin(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = FastMath.asin((-6.663542893624021E-14));
      assertEquals((-6.663542893624021E-14), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = FastMath.asin(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double double0 = FastMath.asin(1.0);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double double0 = FastMath.asin((-1.0F));
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double double0 = FastMath.asin(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double double0 = FastMath.acos(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double double0 = FastMath.acos(71.13438707452896);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = FastMath.acos((-1.5707963267948966));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double double0 = FastMath.acos((-1.0));
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double double0 = FastMath.acos(1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = FastMath.acos(-0.0);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double double0 = FastMath.acos(1.0E-323);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = FastMath.acos((-3.5997360512765566E-9));
      assertEquals(1.5707963303946326, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double double0 = FastMath.cbrt(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double double0 = FastMath.cbrt(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double double0 = FastMath.cbrt(3.8834864931005E-310);
      assertEquals(7.295817015018361E-104, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double double0 = FastMath.cbrt(2.2250738585072014E-308);
      assertEquals(2.812644285236262E-103, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double double0 = FastMath.toRadians(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double double0 = FastMath.toRadians(1.0E-323);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = FastMath.toRadians(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double double0 = FastMath.toRadians(48.311912809);
      assertEquals(0.8432019464534724, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double double0 = FastMath.toDegrees(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double double0 = FastMath.toDegrees(-0.0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double double0 = FastMath.toDegrees((-6.663542893624021E-14));
      assertEquals((-3.8179288440904846E-12), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = FastMath.abs(51194);
      assertEquals(51194, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = FastMath.abs((-365));
      assertEquals(365, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      long long0 = FastMath.abs(4577762542105553359L);
      assertEquals(4577762542105553359L, long0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long long0 = FastMath.abs((-936L));
      assertEquals(936L, long0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      float float0 = FastMath.ulp((float) (-942));
      assertEquals(6.1035156E-5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      float float0 = FastMath.abs((float) (-2885));
      assertEquals(2885.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      float float0 = FastMath.abs(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double double0 = FastMath.abs(-0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double double0 = FastMath.ulp(2.2250738585072014E-308);
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double double0 = FastMath.ulp(Double.NEGATIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      float float0 = FastMath.ulp(Float.POSITIVE_INFINITY);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double double0 = FastMath.scalb(Double.NaN, 2093);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double double0 = FastMath.scalb(Double.POSITIVE_INFINITY, (-2962));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double double0 = FastMath.hypot(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double double0 = FastMath.scalb((-1817.4514595), (-2147482996));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double double0 = FastMath.scalb(0.9921976327896118, (-2121742620));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double double0 = FastMath.scalb((double) 2098, 2098);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double double0 = FastMath.scalb((-401.2457635911818), 1073741824);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double double0 = FastMath.scalb(1.0E-323, 1704);
      assertEquals(8.91101683129335E189, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double double0 = FastMath.scalb((double) 2092, (-1023));
      assertEquals(2.3274272559985326E-305, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double double0 = FastMath.scalb(8.348365775109437, (-1473));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double double0 = FastMath.scalb((-4.503599627370496E15), (-1090));
      assertEquals((-3.39519326554E-313), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double double0 = FastMath.scalb((double) (-1179), (-1179));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double double0 = FastMath.scalb(1.401298464324817E-45, 1171);
      assertEquals(4.49423283715579E307, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double double0 = FastMath.scalb((double) 2045, 2045);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double double0 = FastMath.scalb((-1286.5846), 1635);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      float float0 = FastMath.scalb(45.0F, (-354));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      float float0 = FastMath.scalb(789.73645F, 93);
      assertEquals(7.821171E30F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      float float0 = FastMath.scalb((-1364.0F), 2431);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      float float0 = FastMath.scalb(Float.NaN, (-803));
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      float float0 = FastMath.scalb(Float.POSITIVE_INFINITY, 1306);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      float float0 = FastMath.scalb(-0.0F, 134217729);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      float float0 = FastMath.scalb((-3488.0F), (-2147482995));
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      float float0 = FastMath.scalb(2349.0F, (-155));
      assertEquals(5.2E-44F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      float float0 = FastMath.scalb(1052.948F, 322);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      float float0 = FastMath.scalb((-1.4E-45F), 226);
      assertEquals((-1.5111573E23F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      float float0 = FastMath.scalb(3.4028235E38F, (-127));
      assertEquals(1.9999999F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      float float0 = FastMath.scalb((-1.4E-45F), (-127));
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      float float0 = FastMath.scalb((float) (-155), (-155));
      assertEquals((-2.8E-45F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      float float0 = FastMath.scalb(1.0F, (-155));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      float float0 = FastMath.scalb((-1260.6F), 253);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      float float0 = FastMath.scalb(0.5F, 128);
      assertEquals(1.7014118E38F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      float float0 = FastMath.scalb((float) 128, 128);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double double0 = FastMath.nextAfter(Double.NaN, 1796.62);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double double0 = FastMath.nextAfter(0.0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double double0 = FastMath.nextAfter(1.0368579417304741E-7, 1.0368579417304741E-7);
      assertEquals(1.0368579417304741E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double double0 = FastMath.nextAfter(Double.NEGATIVE_INFINITY, (-2.220446049250313E-16));
      assertEquals((-1.7976931348623157E308), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double double0 = FastMath.nextAfter(Double.POSITIVE_INFINITY, 0.0);
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double double0 = FastMath.nextAfter((-2098.8398522568727), 748.21);
      assertEquals((-2098.8398522568723), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double double0 = FastMath.nextAfter(0.0, (-4.503599627370498E15));
      assertEquals((-4.9E-324), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double double0 = FastMath.nextAfter(1.125, (-1825.0));
      assertEquals(1.1249999999999998, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double double0 = FastMath.nextUp(263.90406);
      assertEquals(263.9040600000001, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      float float0 = FastMath.nextUp(Float.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      float float0 = FastMath.nextAfter(330.2974F, Double.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      float float0 = FastMath.nextAfter(65.0F, (double) 65.0F);
      assertEquals(65.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      float float0 = FastMath.nextAfter(Float.NEGATIVE_INFINITY, 8.013164089994031E46);
      assertEquals((-3.4028235E38F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      float float0 = FastMath.nextAfter(Float.POSITIVE_INFINITY, (-8.0E298));
      assertEquals(3.4028235E38F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      float float0 = FastMath.nextAfter(-0.0F, (-1.0));
      assertEquals((-1.4E-45F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      float float0 = FastMath.nextAfter(-0.0F, 3.8834864931005E-310);
      assertEquals(1.4E-45F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      float float0 = FastMath.nextAfter((float) 1749, 0.8831881300437572);
      assertEquals(1748.9999F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      float float0 = FastMath.nextUp((float) (-76));
      assertEquals((-75.99999F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      double double0 = FastMath.rint(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = FastMath.round((float) 6722166367014452318L);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double double0 = FastMath.rint(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double double0 = FastMath.rint((-3286.0));
      assertEquals((-3286.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      double double0 = FastMath.rint(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      double double0 = FastMath.ceil((-1795.62));
      assertEquals((-1795.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      double double0 = FastMath.ceil(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      double double0 = FastMath.ceil(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      double double0 = FastMath.ceil((-0.32913824361102834));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      double double0 = FastMath.rint(0.8414709568023682);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      double double0 = FastMath.rint((-6.663542893624021E-14));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      double double0 = FastMath.rint((-4.5035996273704945E15));
      assertEquals((-4.503599627370494E15), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      int int0 = FastMath.min(1585, 127);
      assertEquals(127, int0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int int0 = FastMath.min(459, 459);
      assertEquals(459, int0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      long long0 = FastMath.min(3112L, (-3512299194304650054L));
      assertEquals((-3512299194304650054L), long0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      long long0 = FastMath.min(840L, 840L);
      assertEquals(840L, long0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      float float0 = FastMath.min((-732.34375F), (float) 1749);
      assertEquals((-732.34375F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      float float0 = FastMath.min(3.4028235E38F, 1052.948F);
      assertEquals(1052.948F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      float float0 = FastMath.min(0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      float float0 = FastMath.min(Float.NaN, 1790.2F);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      float float0 = FastMath.min(-0.0F, -0.0F);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      double double0 = FastMath.min(Double.NaN, 561.63099614);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      double double0 = FastMath.min(1254.0, (-1991.213));
      assertEquals((-1991.213), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      double double0 = FastMath.min((-336.9978648), 1.2145042419433594);
      assertEquals((-336.9978648), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      double double0 = FastMath.min((-840.0), (-840.0));
      assertEquals((-840.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      double double0 = FastMath.min(-0.0, -0.0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      int int0 = FastMath.max(2144772271, 0);
      assertEquals(2144772271, int0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      int int0 = FastMath.max((-375), (-375));
      assertEquals((-375), int0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      long long0 = FastMath.max(367L, (-13L));
      assertEquals(367L, long0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      long long0 = FastMath.max(4866L, 4989988387126509568L);
      assertEquals(4989988387126509568L, long0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      float float0 = FastMath.max((-1.4E-45F), 789.73645F);
      assertEquals(789.73645F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      float float0 = FastMath.max(7.821171E30F, (-2301.0F));
      assertEquals(7.821171E30F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      float float0 = FastMath.max(1665.1594F, Float.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      float float0 = FastMath.max((float) 1, (float) 1);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      float float0 = FastMath.max(-0.0F, -0.0F);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      double double0 = FastMath.max(-0.0, -0.0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      double double0 = FastMath.max(0.8722811056008208, (-2098.8398522568727));
      assertEquals(0.8722811056008208, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      double double0 = FastMath.max(2.2250738585072014E-308, 1231.6368);
      assertEquals(1231.6368, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      double double0 = FastMath.max(Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      double double0 = FastMath.max(0.8414709568023682, 0.8414709568023682);
      assertEquals(0.8414709568023682, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      double double0 = FastMath.hypot(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      double double0 = FastMath.hypot((-1893.1209093537186), Double.NEGATIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      double double0 = FastMath.hypot(Double.NaN, 6.28805835150457E-8);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      double double0 = FastMath.hypot(2398.342345267472, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      double double0 = FastMath.hypot(0.99, -0.0);
      assertEquals(0.99, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      double double0 = FastMath.hypot(0.8938527644828921, (-4.503599627370496E15));
      assertEquals(4.503599627370496E15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      double double0 = FastMath.copySign((-1.6167825196198978E160), 0.11778303980827332);
      assertEquals(1.6167825196198978E160, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      double double0 = FastMath.atan2(-0.0, Double.NEGATIVE_INFINITY);
      assertEquals((-3.141592653589793), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      double double0 = FastMath.copySign((-0.16624882440418567), (-0.16624882440418567));
      assertEquals((-0.16624882440418567), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      float float0 = FastMath.copySign((-252.56682F), (float) 1032);
      assertEquals(252.56682F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      float float0 = FastMath.copySign((float) 276, (-1.4E-45F));
      assertEquals((-276.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      float float0 = FastMath.copySign((float) 2053, (float) 2053);
      assertEquals(2053.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      float float0 = FastMath.copySign((-622.0F), (-622.0F));
      assertEquals((-622.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      double double0 = FastMath.sin(3.141592653589793);
      assertEquals(1.2246467991473532E-16, double0, 0.01);
  }
}
