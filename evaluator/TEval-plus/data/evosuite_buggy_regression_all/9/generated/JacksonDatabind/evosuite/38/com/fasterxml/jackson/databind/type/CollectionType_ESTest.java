/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:44:38 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.Collection;
import java.util.HashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionType_ESTest extends CollectionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashSet> class0 = HashSet.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) referenceType0);
      String string0 = collectionType0.toString();
      assertEquals("[collection type; class java.util.HashSet, contains [reference type, class java.lang.Comparable<java.lang.Comparable<[simple type, class java.lang.Comparable]>]]", string0);
      assertFalse(collectionType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashSet> class0 = HashSet.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (JavaType) referenceType0);
      assertFalse(collectionType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashSet> class0 = HashSet.class;
      Class<Integer> class1 = Integer.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      JavaType javaType0 = collectionType0._narrow(class0);
      assertTrue(javaType0.equals((Object)collectionType0));
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashSet> class0 = HashSet.class;
      Class<Integer> class1 = Integer.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      CollectionType collectionType1 = collectionType0.withValueHandler(class1);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(collectionType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashSet> class0 = HashSet.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      Object object0 = new Object();
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) referenceType0);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(object0);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(collectionType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = new SimpleType(class0);
      CollectionType collectionType0 = new CollectionType(simpleType0, simpleType0);
      assertTrue(collectionType0.isCollectionLikeType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashSet> class0 = HashSet.class;
      Class<Integer> class1 = Integer.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      CollectionType collectionType1 = collectionType0.withTypeHandler(collectionType0);
      assertFalse(collectionType1.useStaticType());
      assertTrue(collectionType1.equals((Object)collectionType0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashSet> class0 = HashSet.class;
      Class<Integer> class1 = Integer.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      Integer integer0 = new Integer((-1));
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(integer0);
      assertFalse(collectionType1.useStaticType());
      assertTrue(collectionType1.equals((Object)collectionType0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashSet> class0 = HashSet.class;
      Class<Integer> class1 = Integer.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      JavaType javaType0 = collectionType0.withContentType(collectionType0);
      assertNotSame(javaType0, collectionType0);
      assertFalse(javaType0.equals((Object)collectionType0));
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashSet> class0 = HashSet.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) resolvedRecursiveType0);
      JavaType javaType0 = collectionType0.withContentType(resolvedRecursiveType0);
      assertFalse(javaType0.useStaticType());
      assertSame(javaType0, collectionType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashSet> class0 = HashSet.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) referenceType0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      CollectionType collectionType2 = collectionType1.withStaticTyping();
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.useStaticType());
  }
}
