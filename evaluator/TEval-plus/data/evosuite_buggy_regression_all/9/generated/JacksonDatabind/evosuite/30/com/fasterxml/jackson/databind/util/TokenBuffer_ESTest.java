/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:47:22 GMT 2023
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.JsonWriteContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializable;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.RawValue;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLTransactionRollbackException;
import java.util.ArrayDeque;
import java.util.HashMap;
import java.util.Locale;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenBuffer_ESTest extends TokenBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeNumber(bigInteger0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      tokenBuffer1.append(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer_Segment0.append(7, jsonToken0, (Object) tokenBuffer0, (Object) serializedString0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      tokenBuffer_Parser0.getTokenLocation();
      tokenBuffer_Segment0.append(16, jsonToken0, (Object) tokenBuffer0);
      assertTrue(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer_Parser0.version();
      tokenBuffer1.version();
      assertEquals(31, tokenBuffer1.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0.setFeatureMask(1048);
      assertEquals(1048, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "JSON");
      ObjectMapper objectMapper3 = objectMapper0.findAndRegisterModules();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper4 = objectMapper2.setSubtypeResolver(stdSubtypeResolver0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper4);
      MissingNode missingNode0 = MissingNode.getInstance();
      tokenBuffer0.writeObjectId(missingNode0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      int int0 = (-911);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      boolean boolean0 = false;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, false, true);
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0._currentObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer_Parser0.getTextCharacters();
      tokenBuffer0.writeNumber((double) 16);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      try { 
        tokenBuffer_Parser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000654; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      boolean boolean0 = false;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      tokenBuffer_Parser0.getTokenLocation();
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.append((-984), jsonToken0, (Object) objectMapper0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer0._first = tokenBuffer_Segment0;
      Float float0 = new Float((double) 16);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 8000, (Object) tokenBuffer0, (Object) float0, (Object) "");
      assertNotNull(tokenBuffer_Segment1);
      
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(1685, jsonToken0, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, (ObjectCodec) null, false, false);
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      
      char[] charArray0 = new char[9];
      charArray0[3] = 't';
      charArray0[7] = 'M';
      charArray0[2] = '&';
      tokenBuffer0.writeString(charArray0, 0, 0);
      assertEquals(9, charArray0.length);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '&', 't', '\u0000', '\u0000', '\u0000', 'M', '\u0000'}, charArray0);
      
      tokenBuffer0.writeRawValue("SLzt&oY", 0, 0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeString((char[]) null, 7, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeNumber(2343L);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      boolean boolean0 = true;
      int int0 = 3254;
      Float float0 = new Float(0.0);
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.appendRaw((-356), 3254, (Object) jsonFactory0, (Object) float0, (Object) float0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -356
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.isClosed();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      Long long0 = new Long(16);
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.writeNumber(bigInteger0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertNull(charArray0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      tokenBuffer_Parser1.overrideCurrentName((String) null);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNumber(1034.4F);
      // Undeclared exception!
      try { 
        tokenBuffer0._reportUnsupportedOperation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      String string0 = null;
      tokenBuffer0.writeArrayFieldStart((String) null);
      JsonGenerator jsonGenerator0 = tokenBuffer0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertNotNull(tokenBuffer0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      tokenBuffer0.writeEndObject();
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(2714, jsonToken0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonFactory jsonFactory1 = new JsonFactory();
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotSame(jsonFactory0, jsonFactory1);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-919));
      assertNotNull(integer0);
      assertEquals((-919), (int)integer0);
      
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      tokenBuffer0.writeObject(bigDecimal0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotSame(jsonFactory0, jsonFactory1);
      
      tokenBuffer0.writeNumber("JSON");
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotSame(jsonFactory0, jsonFactory1);
      
      tokenBuffer0.writeNumber("S\"#]F':+x4NN6`9k");
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotSame(jsonFactory0, jsonFactory1);
      
      boolean boolean1 = tokenBuffer_Segment1.hasIds();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(boolean1 == boolean0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(boolean1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      String string0 = tokenBuffer0.toString();
      assertNotNull(string0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotSame(jsonFactory0, jsonFactory1);
      assertEquals("[TokenBuffer: VALUE_NUMBER_FLOAT, VALUE_NUMBER_FLOAT, VALUE_NUMBER_FLOAT]", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer0.configure(jsonGenerator_Feature0, false);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(23, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(23, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer3);
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertNull(tokenBuffer3.firstToken());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertEquals(31, tokenBuffer3.getFeatureMask());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer3.getOutputBuffered());
      assertTrue(tokenBuffer3.canOmitFields());
      assertEquals(0, tokenBuffer3.getFormatFeatures());
      assertFalse(tokenBuffer3.isClosed());
      assertFalse(tokenBuffer3.canWriteTypeId());
      
      tokenBuffer3.serialize(tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(23, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertNull(tokenBuffer3.firstToken());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertEquals(31, tokenBuffer3.getFeatureMask());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer3.getOutputBuffered());
      assertTrue(tokenBuffer3.canOmitFields());
      assertEquals(0, tokenBuffer3.getFormatFeatures());
      assertFalse(tokenBuffer3.isClosed());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      SimpleModule simpleModule0 = new SimpleModule();
      assertNotNull(simpleModule0);
      assertEquals("SimpleModule-27", simpleModule0.getModuleName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer1.configure(jsonGenerator_Feature0, true);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      assertNull(tokenBuffer2.firstToken());
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      
      tokenBuffer0.serialize(tokenBuffer2);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer2.firstToken());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.setFeatureMask((-1435));
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals((-1435), tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals((-1435), tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals((-1435), tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals((-1435), tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      tokenBuffer0._appendRaw(40, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals((-1435), tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals((-1435), tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      
      tokenBuffer0.writeString((SerializableString) serializedString0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(1234, 0, (Object) long0, (Object) null, (Object) long0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertNull(charArray0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, true);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      MissingNode missingNode0 = tokenBuffer_Parser0.readValueAsTree();
      assertNull(missingNode0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertNull(charArray0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      SerializedString serializedString0 = new SerializedString("JSON");
      assertNotNull(serializedString0);
      assertEquals("JSON", serializedString0.toString());
      assertEquals("JSON", serializedString0.getValue());
      assertEquals(4, serializedString0.charLength());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(7, jsonToken0, (Object) jsonToken0, (Object) tokenBuffer_Parser0, (Object) serializedString0);
      assertNull(tokenBuffer_Segment1);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals("JSON", serializedString0.toString());
      assertEquals("JSON", serializedString0.getValue());
      assertEquals(4, serializedString0.charLength());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.appendRaw(7, (-367), (Object) jsonParser_Feature0);
      assertNull(tokenBuffer_Segment2);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      String string0 = tokenBuffer0.toString();
      assertNotNull(string0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals("[TokenBuffer: ]", string0);
      
      tokenBuffer0.writeRawValue("[TokenBuffer: ]");
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) null);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.useDefaultPrettyPrinter();
      assertNotNull(tokenBuffer1);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotNull(iOContext1);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)120;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-106), true);
      assertEquals(6, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((-106), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertArrayEquals(new byte[] {(byte)113, (byte)18, (byte) (-124), (byte) (-106), (byte)0, (byte)120}, byteArray0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      CharacterEscapes characterEscapes0 = uTF8JsonGenerator0.getCharacterEscapes();
      assertEquals(6, byteArray0.length);
      assertNull(characterEscapes0);
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((-106), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertArrayEquals(new byte[] {(byte)113, (byte)18, (byte) (-124), (byte) (-106), (byte)0, (byte)120}, byteArray0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer0.setCharacterEscapes((CharacterEscapes) null);
      assertNotNull(tokenBuffer2);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer2.firstToken());
      assertSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      
      Short short0 = new Short((short) (-1050));
      assertNotNull(short0);
      assertEquals((short) (-1050), (short)short0);
      
      tokenBuffer0._append(jsonToken0, short0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer1);
      
      tokenBuffer0.writeNumber((float) (short) (-1050));
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer1);
      
      TokenBuffer tokenBuffer3 = (TokenBuffer)tokenBuffer0.enable(jsonGenerator_Feature0);
      assertNotNull(tokenBuffer3);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer3.getOutputBuffered());
      assertTrue(tokenBuffer3.canOmitFields());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer3.firstToken());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertEquals(31, tokenBuffer3.getFeatureMask());
      assertFalse(tokenBuffer3.isClosed());
      assertEquals(0, tokenBuffer3.getFormatFeatures());
      assertSame(tokenBuffer0, tokenBuffer3);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer3, tokenBuffer2);
      assertSame(tokenBuffer3, tokenBuffer1);
      assertSame(tokenBuffer3, tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer0.asParser((ObjectCodec) null);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertSame(tokenBuffer0, tokenBuffer3);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertNull(charArray0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      tokenBuffer0.writeNumber("JSON");
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      String string0 = tokenBuffer0.toString();
      assertNotNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals("[TokenBuffer: VALUE_NUMBER_FLOAT]", string0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, long0, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      BufferRecycler bufferRecycler1 = jsonFactory0._getBufferRecycler();
      assertNotNull(bufferRecycler1);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotSame(bufferRecycler1, bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = 'f';
      charArray0[2] = 'O';
      charArray0[3] = 'M';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, objectMapper0, charsToNameCanonicalizer0, charArray0, 0, 0, true);
      assertEquals(4, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertArrayEquals(new char[] {'D', 'f', 'O', 'M'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertEquals(4, charArray0.length);
      assertNotNull(readerBasedJsonParser1);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(65, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(65, readerBasedJsonParser1.getFeatureMask());
      assertNotSame(bufferRecycler0, bufferRecycler1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertArrayEquals(new char[] {'D', 'f', 'O', 'M'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("JSON");
      assertNotNull(tokenFilter1);
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertSame(tokenFilter1, tokenFilter0);
      assertSame(tokenFilter0, tokenFilter1);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser1, tokenFilter1, true, true);
      assertEquals(4, charArray0.length);
      assertNotNull(filteringParserDelegate0);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeRawValue());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(65, filteringParserDelegate0.getFeatureMask());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(65, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(65, readerBasedJsonParser1.getFeatureMask());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertArrayEquals(new char[] {'D', 'f', 'O', 'M'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory1);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(filteringParserDelegate0, defaultDeserializationContext_Impl0);
      assertEquals(4, charArray0.length);
      assertNotNull(tokenBuffer0);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(65, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(65, readerBasedJsonParser1.getFeatureMask());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeRawValue());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(65, filteringParserDelegate0.getFeatureMask());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertArrayEquals(new char[] {'D', 'f', 'O', 'M'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      Iterable<Deserializers> iterable0 = deserializerFactoryConfig0.deserializers();
      assertNotNull(iterable0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.useDefaultPrettyPrinter();
      assertEquals(4, charArray0.length);
      assertNotNull(tokenBuffer1);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(65, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(65, readerBasedJsonParser1.getFeatureMask());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeRawValue());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(65, filteringParserDelegate0.getFeatureMask());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNotSame(bufferRecycler0, bufferRecycler1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(tokenFilter1, tokenFilter0);
      assertSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertArrayEquals(new char[] {'D', 'f', 'O', 'M'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertEquals(4, charArray0.length);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(65, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(65, readerBasedJsonParser1.getFeatureMask());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeRawValue());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(65, filteringParserDelegate0.getFeatureMask());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNotSame(bufferRecycler0, bufferRecycler1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(tokenFilter1, tokenFilter0);
      assertSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertArrayEquals(new char[] {'D', 'f', 'O', 'M'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      tokenBuffer0._appendRaw(0, readerBasedJsonParser1);
      assertEquals(4, charArray0.length);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(65, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(65, readerBasedJsonParser1.getFeatureMask());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeRawValue());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(65, filteringParserDelegate0.getFeatureMask());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotSame(bufferRecycler0, bufferRecycler1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(tokenFilter1, tokenFilter0);
      assertSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertArrayEquals(new char[] {'D', 'f', 'O', 'M'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertEquals(4, charArray0.length);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(65, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(65, readerBasedJsonParser1.getFeatureMask());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeRawValue());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(65, filteringParserDelegate0.getFeatureMask());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotSame(bufferRecycler0, bufferRecycler1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(tokenFilter1, tokenFilter0);
      assertSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertArrayEquals(new char[] {'D', 'f', 'O', 'M'}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      tokenBuffer0.writeObject(jsonParser_Feature0);
      assertEquals(4, charArray0.length);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(65, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(65, readerBasedJsonParser1.getFeatureMask());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeRawValue());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(65, filteringParserDelegate0.getFeatureMask());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotSame(bufferRecycler0, bufferRecycler1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(tokenFilter1, tokenFilter0);
      assertSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertArrayEquals(new char[] {'D', 'f', 'O', 'M'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      tokenBuffer0.writeEndArray();
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      boolean boolean1 = tokenBuffer_Parser0.getValueAsBoolean(true);
      assertFalse(boolean1 == boolean0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(boolean1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(jsonToken0.isScalarValue());
      assertEquals(4, jsonToken0.id());
      assertFalse(jsonToken0.isNumeric());
      assertFalse(jsonToken0.isBoolean());
      assertEquals("]", jsonToken0.asString());
      assertFalse(jsonToken0.isStructStart());
      assertTrue(jsonToken0.isStructEnd());
      assertEquals(JsonToken.END_ARRAY, jsonToken0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer tokenBuffer3 = tokenBuffer2.append(tokenBuffer1);
      assertNotNull(tokenBuffer3);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer3.getOutputBuffered());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertNull(tokenBuffer3.firstToken());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertEquals(0, tokenBuffer3.getFormatFeatures());
      assertTrue(tokenBuffer3.canOmitFields());
      assertEquals(31, tokenBuffer3.getFeatureMask());
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer3);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      assertSame(tokenBuffer3, tokenBuffer2);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<SerializedString> class0 = SerializedString.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      assertNotNull(objectReader1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectReader objectReader2 = objectReader0.withFeatures(jsonParser_FeatureArray0);
      assertEquals(2, jsonParser_FeatureArray0.length);
      assertNotNull(objectReader2);
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      Class<BigInteger> class1 = BigInteger.class;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      assertNotNull(jsonLocationInstantiator0);
      assertFalse(jsonLocationInstantiator0.canCreateUsingDefault());
      assertFalse(jsonLocationInstantiator0.canCreateFromLong());
      assertTrue(jsonLocationInstantiator0.canInstantiate());
      assertFalse(jsonLocationInstantiator0.canCreateFromBoolean());
      assertFalse(jsonLocationInstantiator0.canCreateFromDouble());
      assertFalse(jsonLocationInstantiator0.canCreateFromString());
      assertFalse(jsonLocationInstantiator0.canCreateUsingDelegate());
      assertFalse(jsonLocationInstantiator0.canCreateFromInt());
      assertTrue(jsonLocationInstantiator0.canCreateFromObjectWith());
      
      SimpleValueInstantiators simpleValueInstantiators1 = simpleValueInstantiators0.addValueInstantiator(class1, jsonLocationInstantiator0);
      assertNotNull(simpleValueInstantiators1);
      assertFalse(jsonLocationInstantiator0.canCreateUsingDefault());
      assertFalse(jsonLocationInstantiator0.canCreateFromLong());
      assertTrue(jsonLocationInstantiator0.canInstantiate());
      assertFalse(jsonLocationInstantiator0.canCreateFromBoolean());
      assertFalse(jsonLocationInstantiator0.canCreateFromDouble());
      assertFalse(jsonLocationInstantiator0.canCreateFromString());
      assertFalse(jsonLocationInstantiator0.canCreateUsingDelegate());
      assertFalse(jsonLocationInstantiator0.canCreateFromInt());
      assertTrue(jsonLocationInstantiator0.canCreateFromObjectWith());
      assertSame(simpleValueInstantiators0, simpleValueInstantiators1);
      assertSame(simpleValueInstantiators1, simpleValueInstantiators0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators1);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(jsonLocationInstantiator0.canCreateUsingDefault());
      assertFalse(jsonLocationInstantiator0.canCreateFromLong());
      assertTrue(jsonLocationInstantiator0.canInstantiate());
      assertFalse(jsonLocationInstantiator0.canCreateFromBoolean());
      assertFalse(jsonLocationInstantiator0.canCreateFromDouble());
      assertFalse(jsonLocationInstantiator0.canCreateFromString());
      assertFalse(jsonLocationInstantiator0.canCreateUsingDelegate());
      assertFalse(jsonLocationInstantiator0.canCreateFromInt());
      assertTrue(jsonLocationInstantiator0.canCreateFromObjectWith());
      assertSame(simpleValueInstantiators0, simpleValueInstantiators1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(simpleValueInstantiators1, simpleValueInstantiators0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectReader objectReader3 = objectReader1.with(deserializationFeature0);
      assertNotNull(objectReader3);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader3);
      assertNotNull(tokenBuffer0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer0.writeNumber(0.0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      
      boolean boolean0 = tokenBuffer0.canWriteBinaryNatively();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertTrue(boolean0);
      
      try { 
        MockURL.URL("7JieBpJ ", "JSON", ") not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 7jiebpj 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      tokenBuffer0._appendRaw(0, (Object) null);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      ObjectCodec objectCodec0 = tokenBuffer0.getCodec();
      assertNull(objectCodec0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = null;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0.getObjectId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-52);
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte) (-99);
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(readerBasedJsonParser0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0, (byte)45, (byte) (-89), (byte)31, (byte)0, (byte) (-52), (byte)114, (byte) (-99)}, byteArray0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(readerBasedJsonParser0);
      assertEquals(9, byteArray0.length);
      assertNotNull(tokenBuffer0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0, (byte)45, (byte) (-89), (byte)31, (byte)0, (byte) (-52), (byte)114, (byte) (-99)}, byteArray0);
      
      tokenBuffer0.close();
      assertEquals(9, byteArray0.length);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertArrayEquals(new byte[] {(byte) (-95), (byte)0, (byte)45, (byte) (-89), (byte)31, (byte)0, (byte) (-52), (byte)114, (byte) (-99)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      MissingNode missingNode0 = tokenBuffer_Parser0.readValueAsTree();
      assertNull(missingNode0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      Class<Float> class0 = Float.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      
      tokenBuffer_Parser1.nextToken();
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      Object object0 = tokenBuffer_Parser1.getEmbeddedObject();
      assertNull(object0);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      try { 
        tokenBuffer_Parser1.getBinaryValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary
         //  at [Source: java.lang.String@0000000654; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      tokenBuffer_Parser0.overrideCurrentName((String) null);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      assertNotNull(objectMapper1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0);
      assertNotNull(objectMapper2);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
      assertNotNull(objectMapper3);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[0];
      ObjectMapper objectMapper4 = objectMapper3.disable(mapperFeatureArray0);
      assertEquals(0, mapperFeatureArray0.length);
      assertNotNull(objectMapper4);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, true);
      assertNotNull(tokenBuffer0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      JsonWriteContext jsonWriteContext0 = tokenBuffer0.getOutputContext();
      assertNotNull(jsonWriteContext0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(jsonWriteContext0.getCurrentName());
      assertFalse(jsonWriteContext0.inObject());
      assertFalse(jsonWriteContext0.inArray());
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals(0, jsonWriteContext0.getCurrentIndex());
      assertTrue(jsonWriteContext0.inRoot());
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertEquals(1, JsonWriteContext.STATUS_OK_AFTER_COMMA);
      assertEquals(4, JsonWriteContext.STATUS_EXPECT_VALUE);
      assertEquals(3, JsonWriteContext.STATUS_OK_AFTER_SPACE);
      assertEquals(0, JsonWriteContext.STATUS_OK_AS_IS);
      assertEquals(2, JsonWriteContext.STATUS_OK_AFTER_COLON);
      assertEquals(5, JsonWriteContext.STATUS_EXPECT_NAME);
      
      tokenBuffer0.firstToken();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue((String) null, 0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("short", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      assertNotNull(objectReader1);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      assertNotNull(objectNode0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      
      JsonParser jsonParser0 = objectReader1.treeAsTokens(objectNode0);
      assertNotNull(jsonParser0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
      assertNotNull(tokenBuffer0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer0.writeNumber((BigInteger) null);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      assertNotNull(objectMapper1);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      MissingNode missingNode0 = MissingNode.getInstance();
      assertNotNull(missingNode0);
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isInt());
      assertEquals("", missingNode0.asText());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isIntegralNumber());
      assertEquals(0, missingNode0.size());
      assertEquals("", missingNode0.toString());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isShort());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) objectMapper1, (Object) serializationFeature0, (Object) missingNode0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isInt());
      assertEquals("", missingNode0.asText());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isIntegralNumber());
      assertEquals(0, missingNode0.size());
      assertEquals("", missingNode0.toString());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isShort());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isInt());
      assertEquals("", missingNode0.asText());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isIntegralNumber());
      assertEquals(0, missingNode0.size());
      assertEquals("", missingNode0.toString());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isShort());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.disable(jsonParser_Feature0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isInt());
      assertEquals("", missingNode0.asText());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isIntegralNumber());
      assertEquals(0, missingNode0.size());
      assertEquals("", missingNode0.toString());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isShort());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isInt());
      assertEquals("", missingNode0.asText());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isIntegralNumber());
      assertEquals(0, missingNode0.size());
      assertEquals("", missingNode0.toString());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isShort());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger1, bigInteger0);
      
      tokenBuffer0.writeNumber(bigInteger1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isInt());
      assertEquals("", missingNode0.asText());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isIntegralNumber());
      assertEquals(0, missingNode0.size());
      assertEquals("", missingNode0.toString());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isShort());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      assertNotNull(objectMapper1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, false);
      assertNotNull(objectMapper2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      ObjectReader objectReader0 = objectMapper2.reader();
      assertNotNull(objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      assertNotNull(tokenBuffer0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeBoolean(false);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withPerCallAttribute(objectMapper0, objectMapper0);
      assertNotNull(contextAttributes1);
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      
      ObjectWriter objectWriter0 = objectMapper0.writer(contextAttributes1);
      assertNotNull(objectWriter0);
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(objectWriter0.hasPrefetchedSerializer());
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      boolean boolean0 = true;
      int int0 = 4042;
      int int1 = 7;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw(":e)Xqn;", 4042, 16);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.disable(jsonParser_Feature0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      try { 
        tokenBuffer_Parser1.getShortValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000654; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.disable(jsonParser_Feature0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertNotNull(tokenBuffer0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      tokenBuffer0.writeBoolean(true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Object object0 = tokenBuffer0._objectId;
      assertNull(object0);
      
      tokenBuffer0._appendRaw(16, (Object) null);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      int int0 = tokenBuffer_Parser1.getTextOffset();
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotSame(objectMapper0, objectMapper1);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1, false);
      assertNotNull(tokenBuffer1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertNotNull(tokenBuffer2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      
      tokenBuffer2._appendRaw((-2828), bigInteger0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      assertNotNull(objectMapper1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      Class<Float> class0 = Float.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectMapper objectMapper2 = objectMapper0.configure(jsonParser_Feature0, true);
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      ObjectReader objectReader1 = objectMapper1.reader();
      assertNotNull(objectReader1);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader1);
      assertNotNull(tokenBuffer0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeBoolean(true);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      tokenBuffer0.writeEndArray();
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = tokenBuffer_Parser0.isClosed();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(boolean2);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      try { 
        tokenBuffer_Parser1.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000654; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      boolean boolean0 = tokenBuffer0.isClosed();
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(boolean0);
      
      boolean boolean1 = tokenBuffer0.isClosed();
      assertTrue(boolean1 == boolean0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(boolean1);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      Long long0 = new Long(16);
      assertNotNull(long0);
      assertEquals(16L, (long)long0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0.readValueAs(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for parser, needed for deserialization
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      Byte byte0 = new Byte((byte)71);
      assertNotNull(byte0);
      assertEquals((byte)71, (byte)byte0);
      
      tokenBuffer0.writeObject(integer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      tokenBuffer0.writeNumber(">(Mfa4=tKFk/J+f8F ");
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      tokenBuffer0.writeNumber(">(Mfa4=tKFk/J+f8F ");
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      tokenBuffer1.serialize(tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      String string0 = tokenBuffer0.toString();
      assertNotNull(string0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertEquals("[TokenBuffer: VALUE_NUMBER_INT, VALUE_NUMBER_FLOAT, VALUE_NUMBER_FLOAT]", string0);
      
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000654; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      boolean boolean0 = tokenBuffer0.isClosed();
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(boolean0);
      
      boolean boolean1 = tokenBuffer0.isClosed();
      assertTrue(boolean1 == boolean0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(boolean1);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      Long long0 = new Long(16);
      assertNotNull(long0);
      assertEquals(16L, (long)long0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      boolean boolean2 = tokenBuffer0.isEnabled(jsonGenerator_Feature1);
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertFalse(boolean2);
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      tokenBuffer0.writeObject(jsonGenerator_Feature0);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      
      tokenBuffer0.writeNumber("Internal error: should never end up through this code path");
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      tokenBuffer0.writeNumber("JSON");
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      boolean boolean3 = tokenBuffer_Segment0.hasIds();
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(boolean3);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      String string0 = tokenBuffer0.toString();
      assertNotNull(string0);
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals("[TokenBuffer: VALUE_EMBEDDED_OBJECT, VALUE_NUMBER_FLOAT, VALUE_NUMBER_FLOAT]", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      assertNotNull(objectMapper1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      MissingNode missingNode0 = tokenBuffer_Parser0.readValueAsTree();
      assertNull(missingNode0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      tokenBuffer_Parser0.close();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      SimpleModule simpleModule0 = new SimpleModule();
      assertNotNull(simpleModule0);
      assertEquals("SimpleModule-28", simpleModule0.getModuleName());
      
      tokenBuffer0._append(jsonToken0, (Object) null);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      char[] charArray0 = tokenBuffer_Parser1.getTextCharacters();
      assertNull(charArray0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      tokenBuffer_Parser2.close();
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertTrue(tokenBuffer_Parser2.isClosed());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      String string0 = tokenBuffer0.toString();
      assertNotNull(string0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertEquals("[TokenBuffer: ]", string0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(7, jsonToken0, (Object) tokenBuffer0, (Object) serializedString0);
      assertNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonToken jsonToken1 = JsonToken.END_OBJECT;
      MissingNode missingNode0 = MissingNode.getInstance();
      assertNotNull(missingNode0);
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isDouble());
      assertEquals("", missingNode0.toString());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertEquals(0, missingNode0.size());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isInt());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isBigDecimal());
      
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment0.append(3, jsonToken1, (Object) jsonToken1, (Object) jsonToken0, (Object) serializedString0);
      assertNull(tokenBuffer_Segment3);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(jsonToken0.equals((Object)jsonToken1));
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(jsonToken0, jsonToken1);
      assertNotSame(jsonToken1, jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.disable(jsonParser_Feature0);
      assertNotNull(tokenBuffer_Parser1);
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger1, bigInteger0);
      
      LongNode longNode0 = new LongNode((-1L));
      assertNotNull(longNode0);
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertFalse(longNode0.isBigDecimal());
      assertEquals((short) (-1), longNode0.shortValue());
      assertNull(longNode0.textValue());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertEquals((-1.0), longNode0.doubleValue(), 0.01);
      assertTrue(longNode0.isLong());
      assertTrue(longNode0.isIntegralNumber());
      assertEquals((-1), longNode0.intValue());
      assertEquals((-1L), longNode0.longValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertTrue(longNode0.canConvertToLong());
      assertEquals(0, longNode0.size());
      assertEquals((-1.0F), longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      
      BigInteger bigInteger2 = longNode0.bigIntegerValue();
      assertNotNull(bigInteger2);
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertFalse(longNode0.isBigDecimal());
      assertEquals((short) (-1), longNode0.shortValue());
      assertNull(longNode0.textValue());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertEquals((-1.0), longNode0.doubleValue(), 0.01);
      assertTrue(longNode0.isLong());
      assertTrue(longNode0.isIntegralNumber());
      assertEquals((-1), longNode0.intValue());
      assertEquals((-1L), longNode0.longValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertTrue(longNode0.canConvertToLong());
      assertEquals(0, longNode0.size());
      assertEquals((-1.0F), longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals((byte) (-1), bigInteger2.byteValue());
      assertEquals((short) (-1), bigInteger2.shortValue());
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      tokenBuffer0.writeNumber(bigInteger2);
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertFalse(longNode0.isBigDecimal());
      assertEquals((short) (-1), longNode0.shortValue());
      assertNull(longNode0.textValue());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertEquals((-1.0), longNode0.doubleValue(), 0.01);
      assertTrue(longNode0.isLong());
      assertTrue(longNode0.isIntegralNumber());
      assertEquals((-1), longNode0.intValue());
      assertEquals((-1L), longNode0.longValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertTrue(longNode0.canConvertToLong());
      assertEquals(0, longNode0.size());
      assertEquals((-1.0F), longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals((byte) (-1), bigInteger2.byteValue());
      assertEquals((short) (-1), bigInteger2.shortValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      assertFalse(boolean0);
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNotSame(objectMapper0, objectMapper1);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1, false);
      assertNotNull(tokenBuffer1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertNotNull(tokenBuffer2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      Double double0 = new Double(809);
      assertNotNull(double0);
      assertEquals(809.0, (double)double0, 0.01);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(809, jsonToken0, (Object) tokenBuffer2, (Object) double0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      BigDecimal bigDecimal0 = new BigDecimal((double) 809);
      assertNotNull(bigDecimal0);
      assertEquals((byte)41, bigDecimal0.byteValue());
      assertEquals((short)809, bigDecimal0.shortValue());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(809, jsonToken0, (Object) bigInteger0, (Object) null, (Object) bigDecimal0);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals((byte)41, bigDecimal0.byteValue());
      assertEquals((short)809, bigDecimal0.shortValue());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment2._next;
      assertNull(tokenBuffer_Segment3);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      JsonLocation jsonLocation0 = tokenBuffer_Parser0.getCurrentLocation();
      assertNotNull(jsonLocation0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertNotSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      ObjectMapper objectMapper2 = objectMapper0.disable(serializationFeature0);
      assertNotNull(objectMapper2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2, true);
      assertNotNull(tokenBuffer0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("JSON", 16, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      int int0 = tokenBuffer_Parser0.nextIntValue(16);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(16, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      String string0 = tokenBuffer0.toString();
      assertNotNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals("[TokenBuffer: ]", string0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      Object object0 = tokenBuffer_Parser0._currentObject();
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      try { 
        tokenBuffer_Parser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000654; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.disable(jsonParser_Feature0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertNotNull(tokenBuffer0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[7];
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      jsonParser_FeatureArray0[1] = jsonParser_Feature0;
      jsonParser_FeatureArray0[2] = jsonParser_Feature0;
      jsonParser_FeatureArray0[3] = jsonParser_Feature0;
      jsonParser_FeatureArray0[4] = jsonParser_Feature0;
      jsonParser_FeatureArray0[5] = jsonParser_Feature0;
      jsonParser_FeatureArray0[6] = jsonParser_Feature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonParser_FeatureArray0);
      assertEquals(7, jsonParser_FeatureArray0.length);
      assertNotNull(objectMapper2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setCodec(objectMapper2);
      assertEquals(7, jsonParser_FeatureArray0.length);
      assertNotNull(tokenBuffer1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      tokenBuffer_Parser0.close();
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      SimpleModule simpleModule0 = new SimpleModule();
      assertNotNull(simpleModule0);
      assertEquals("SimpleModule-30", simpleModule0.getModuleName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      Object object0 = tokenBuffer_Parser0.getCurrentValue();
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      tokenBuffer0._append(jsonToken0, (Object) null);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      tokenBuffer_Parser0.getEmbeddedObject();
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = tokenBuffer1.configure(jsonGenerator_Feature0, true);
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.disable(jsonParser_Feature0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertNotNull(tokenBuffer0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      String string0 = tokenBuffer_Parser1.nextFieldName();
      assertNull(string0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1, false);
      assertNotNull(tokenBuffer1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertNotNull(tokenBuffer2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(7, jsonToken0, (Object) tokenBuffer0, (Object) serializedString0);
      assertNull(tokenBuffer_Segment1);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      JsonLocation jsonLocation0 = tokenBuffer_Parser0.getTokenLocation();
      assertNotNull(jsonLocation0);
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      
      char[] charArray0 = new char[9];
      charArray0[3] = 't';
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertNotNull(bigInteger1);
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertSame(bigInteger1, bigInteger0);
      
      tokenBuffer0.writeNumber(bigInteger1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(bigInteger1, bigInteger0);
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertNull(string0);
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      JsonToken jsonToken1 = JsonToken.START_OBJECT;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      assertEquals(1, jsonParser_Feature0.collectDefaults());
      assertFalse(jsonParser_Feature0.enabledByDefault());
      assertEquals(64, jsonParser_Feature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER, jsonParser_Feature0);
      
      tokenBuffer1._append(jsonToken1, jsonParser_Feature0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertEquals(1, jsonParser_Feature0.collectDefaults());
      assertFalse(jsonParser_Feature0.enabledByDefault());
      assertEquals(64, jsonParser_Feature0.getMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(jsonToken1, jsonToken0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertNotNull(missingNode0);
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isShort());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals("", missingNode0.toString());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isIntegralNumber());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      try { 
        tokenBuffer_Parser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000654; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      tokenBuffer_Parser0._codec = null;
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      tokenBuffer_Parser0.setCodec((ObjectCodec) null);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      try { 
        tokenBuffer_Parser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000654; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[9];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      serializationFeatureArray0[7] = serializationFeature0;
      serializationFeatureArray0[8] = serializationFeature0;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = objectMapper0.canSerialize(class0);
      assertSame(objectMapper0, objectMapper1);
      assertTrue(boolean0);
      
      ObjectMapper objectMapper2 = objectMapper0.configure(serializationFeature0, true);
      assertNotNull(objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);
      assertEquals(0, jsonGenerator_FeatureArray0.length);
      assertNotNull(objectMapper3);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      assertEquals(0, jsonGenerator_FeatureArray0.length);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      
      tokenBuffer0.writeStartObject();
      assertEquals(0, jsonGenerator_FeatureArray0.length);
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      
      boolean boolean1 = tokenBuffer0.canWriteObjectId();
      assertEquals(0, jsonGenerator_FeatureArray0.length);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.disable(jsonParser_Feature0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      tokenBuffer_Segment0._nativeIds = treeMap0;
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(0, treeMap0.size());
      assertEquals(0, tokenBuffer_Segment0._nativeIds.size());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertNotNull(tokenBuffer0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      tokenBuffer0.writeEndArray();
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = tokenBuffer_Parser0.isClosed();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(boolean2);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Locale locale0 = new Locale("JSON", "JSON", "");
      assertNotNull(locale0);
      assertEquals("JSON", locale0.getCountry());
      assertEquals("json_JSON", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("json", locale0.getLanguage());
      
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      assertNotNull(objectMapper1);
      assertEquals("JSON", locale0.getCountry());
      assertEquals("json_JSON", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("json", locale0.getLanguage());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals("JSON", locale0.getCountry());
      assertEquals("json_JSON", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("json", locale0.getLanguage());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = 'x';
      charArray0[2] = 'y';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue(charArray0, 16, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.disable(jsonParser_Feature0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      String string0 = tokenBuffer_Parser1.getCurrentName();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(beanDeserializerFactory0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(7, jsonToken0, (Object) tokenBuffer0, (Object) null);
      assertNull(tokenBuffer_Segment1);
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      JsonLocation jsonLocation0 = tokenBuffer_Parser0.getTokenLocation();
      assertNotNull(jsonLocation0);
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) tokenBuffer0);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      
      Version version0 = tokenBuffer_Parser0.version();
      assertNotNull(version0);
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(2, version0.getMajorVersion());
      assertTrue(version0.isSnapshot());
      assertEquals(6, version0.getMinorVersion());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertEquals(3, version0.getPatchLevel());
      assertFalse(version0.isUknownVersion());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000654; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      boolean boolean0 = true;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotSame(objectMapper0, objectMapper1);
      
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      assertNotNull(defaultPrettyPrinter0);
      
      tokenBuffer0.writeArrayFieldStart((String) null);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotSame(objectMapper0, objectMapper1);
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setPrettyPrinter(defaultPrettyPrinter0);
      assertNotNull(tokenBuffer1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      // Undeclared exception!
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper2, true, false);
      tokenBuffer_Parser0.getCurrentName();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      tokenBuffer0.writeEndObject();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3699);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) outputStreamWriter0);
      try { 
        tokenBuffer0.serialize(jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      tokenBuffer_Parser0.disable(jsonParser_Feature0);
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber(bigInteger0);
      tokenBuffer0.version();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer0._first = tokenBuffer_Segment0;
      Float float0 = new Float((double) 16);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(1629, 8000, (Object) tokenBuffer0, (Object) float0, (Object) "");
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(1685, jsonToken0, (Object) tokenBuffer0);
      RawValue rawValue0 = new RawValue("Mq");
      tokenBuffer_Segment2.appendRaw(1685, 262144, (Object) rawValue0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, (ObjectCodec) null, false, false);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.readValueAsTree();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer_Parser0.close();
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      SimpleModule simpleModule0 = new SimpleModule();
      tokenBuffer0._append(jsonToken0, simpleModule0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper3, true, false);
      tokenBuffer_Parser0.getCurrentName();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      tokenBuffer0.writeEndObject();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3699);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      objectMapper3.setSubtypeResolver(stdSubtypeResolver0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      tokenBuffer_Parser0.hasTextCharacters();
      tokenBuffer_Parser0.hasTextCharacters();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) outputStreamWriter0);
      try { 
        tokenBuffer0.serialize(jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not an object but ROOT
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SerializedString serializedString0 = new SerializedString("cbB?A 1jm;J2|$<\",");
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      charsToNameCanonicalizer0.release();
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeObject((Object) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.writeNumber(bigInteger0);
      jsonParser0.nextFieldName();
      tokenBuffer0.asParser((JsonParser) tokenBuffer_Parser0);
      tokenBuffer_Segment0.hasIds();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNumber(1034.4F);
      tokenBuffer0.isClosed();
      tokenBuffer0.isClosed();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      int int0 = (-705);
      int int1 = (-2084);
      Long long0 = new Long(0L);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getTextLength();
      Class<Integer> class0 = Integer.class;
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      tokenBuffer_Segment0.append(0, jsonToken0, (Object) tokenBuffer0);
      tokenBuffer0.overrideStdFeatures(1588, 1588);
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0.readValueAs(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for parser, needed for deserialization
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      BigInteger bigInteger1 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("oRfv`B8x?BX*I;\"lrm\"");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      tokenBuffer_Parser0.getTokenLocation();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, tokenBuffer0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, (OutputStream) null);
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      tokenBuffer0.writeTree(booleanNode0);
      uTF8JsonGenerator0.getCharacterEscapes();
      objectMapper0.writer((CharacterEscapes) null);
      tokenBuffer0.firstToken();
      Integer integer0 = new Integer(56320);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      tokenBuffer0.writeObject(jsonParser_Feature0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      jsonParser0.getTextCharacters();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      Integer integer0 = new Integer(16);
      jsonParser0.getEmbeddedObject();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, false);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationFeature0, false);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ContextAttributes contextAttributes1 = contextAttributes0.withPerCallAttribute(tokenBuffer_Segment0, jsonGenerator_Feature0);
      ObjectReader objectReader0 = objectMapper3.reader(contextAttributes1);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectReader0, false, false);
      try { 
        tokenBuffer_Parser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000654; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      tokenBuffer0.writeEndArray();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      tokenBuffer_Parser0.isClosed();
      JsonFactory jsonFactory0 = new JsonFactory();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Locale locale0 = new Locale("JSON", "JSON", "");
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      Class<RawValue> class0 = RawValue.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) null, (Object) simpleType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(tokenBuffer_Parser0);
      locale0.getDisplayScript((Locale) null);
      Class<?> class1 = referenceType1.getParameterSource();
      TypeReference<BigDecimal> typeReference0 = (TypeReference<BigDecimal>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(typeReference0).getType();
      objectMapper0.readValues((JsonParser) tokenBuffer_Parser0, (TypeReference<?>) typeReference0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0, deserializationContext0);
      tokenBuffer0.append(tokenBuffer1);
      TypeFactory.defaultInstance();
      PipedInputStream pipedInputStream0 = new PipedInputStream(16);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      // Undeclared exception!
      try { 
        tokenBuffer1.writeBinary((Base64Variant) null, (InputStream) sequenceInputStream0, 950);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.writeNumber(bigInteger0);
      jsonParser0.nextFieldName();
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw('q');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1024);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      jsonFactory1.createGenerator((Writer) outputStreamWriter0);
      JsonParser jsonParser0 = jsonFactory0.createParser((char[]) null, 3699, 3699);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.writeNumber((short)2629);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      tokenBuffer0.writeEndArray();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte)6;
      tokenBuffer0.writeBinary(byteArray0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      RawValue rawValue0 = new RawValue(arrayNode0);
      tokenBuffer0._appendRaw(16, rawValue0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      tokenBuffer1.isEnabled(jsonGenerator_Feature0);
      Integer integer0 = new Integer(874);
      tokenBuffer1.writeObject(integer0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser jsonParser0 = tokenBuffer_Parser0.setFeatureMask(16);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
      tokenBuffer0.writeEndObject();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = new SerializedString(":$v.");
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.readValueAsTree();
      BigInteger bigInteger0 = BigInteger.TEN;
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      objectMapper1.createArrayNode();
      RawValue rawValue0 = new RawValue((JsonSerializable) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      Integer integer0 = new Integer(3662);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      SimpleModule simpleModule0 = new SimpleModule("}*qr4[sKX8YdMzGqh/");
      tokenBuffer1.writeObject(simpleModule0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<Short> class0 = Short.TYPE;
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.with("JSON");
      JsonParser jsonParser0 = objectReader1.treeAsTokens(objectNode1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      // Undeclared exception!
      try { 
        tokenBuffer0.deserialize(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      mapperFeatureArray0[0] = mapperFeature0;
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      MapperFeature mapperFeature1 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[1] = mapperFeature1;
      ObjectMapper objectMapper2 = objectMapper1.disable(mapperFeatureArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2, false);
      tokenBuffer0.writeNull();
      tokenBuffer0.firstToken();
      MockFile mockFile0 = new MockFile("[-_./;:]", "JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((Writer) outputStreamWriter0);
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw((char[]) null, 15, (-916));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      Class<Short> class0 = Short.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      objectReader1.with(jsonFactory0);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createParser(" has mismatch: ");
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.writeNumber(bigInteger0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.appendRaw(6, 46, (Object) null, (Object) null, (Object) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectReader0, true, true);
      tokenBuffer_Parser0.nextFieldName();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectReader0, true);
      tokenBuffer0.append(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      tokenBuffer0.writeEndArray();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer1.writeNumber("");
      tokenBuffer_Segment0.hasIds();
      tokenBuffer0.serialize(tokenBuffer1);
      tokenBuffer0.toString();
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000654; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[9];
      charArray0[3] = 't';
      charArray0[7] = 'M';
      charArray0[2] = '&';
      tokenBuffer0.writeString(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawUTF8String((byte[]) null, (-43), (-251));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[9];
      charArray0[3] = 't';
      charArray0[7] = 'M';
      charArray0[2] = '&';
      tokenBuffer0.writeString(charArray0, 0, 0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.nextToken();
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_STRING) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000654; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      charArray0[1] = '?';
      charArray0[2] = '<';
      charArray0[3] = ')';
      charArray0[4] = 'L';
      charArray0[5] = '8';
      charArray0[6] = '%';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0, (-444), (-444));
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.writeTypeId(jsonFactory1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      ObjectReader objectReader0 = objectMapper2.readerFor((JavaType) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      tokenBuffer0.writeTree((TreeNode) null);
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      Float float0 = new Float(0.0);
      tokenBuffer0._append(jsonToken0, float0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeNumber(bigInteger0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      tokenBuffer_Segment0.append((-1997), jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, false, true);
      tokenBuffer_Parser0.getTextLength();
      Class<Integer> class0 = Integer.class;
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      try { 
        tokenBuffer_Parser1.readValueAs(class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not deserialize instance of java.lang.Integer out of START_OBJECT token
         //  at [Source: java.lang.String@0000000654; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      tokenBuffer0.writeEndArray();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      tokenBuffer_Parser0.isClosed();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      tokenBuffer1.writeNull();
      tokenBuffer0.firstToken();
      MockFile mockFile0 = new MockFile("#BQ5/#\"krNe4wEk,", "#BQ5/#\"krNe4wEk,");
      MockFile mockFile1 = new MockFile("ZI5");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      jsonFactory0.createGenerator((Writer) outputStreamWriter0);
      tokenBuffer0.serialize(tokenBuffer1);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.overrideStdFeatures(16, (-1693));
      tokenBuffer_Parser0.getEmbeddedObject();
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      tokenBuffer2.writeNumber((BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      mapperFeatureArray0[0] = mapperFeature0;
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory0.enable(jsonFactory_Feature0);
      MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_CREATORS;
      mapperFeatureArray0[1] = mapperFeature1;
      ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
      jsonFactory0._getBufferRecycler();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, false);
      tokenBuffer0.writeNull();
      tokenBuffer0.firstToken();
      objectMapper0.findAndRegisterModules();
      MockFile mockFile0 = new MockFile("[-_./;:]", "JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.getEmbeddedObject();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)96;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeUTF8String(byteArray0, (-4036), (byte) (-19));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, false);
      tokenBuffer_Parser0.getCurrentName();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, (DeserializationContext) null);
      tokenBuffer0.writeEndObject();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(16);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(outputStreamWriter0).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      byte[] byteArray0 = new byte[0];
      byteArrayOutputStream0.write(byteArray0);
      JsonFactory jsonFactory4 = jsonFactory3.setOutputDecorator(outputDecorator0);
      jsonFactory4.createGenerator((Writer) outputStreamWriter0);
      JsonGenerator jsonGenerator0 = tokenBuffer0.useDefaultPrettyPrinter();
      jsonGenerator0.writeNumber((short)4000);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      tokenBuffer_Parser0.getTokenLocation();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, tokenBuffer0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, (OutputStream) null);
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      tokenBuffer0.writeTree(booleanNode0);
      uTF8JsonGenerator0.getCharacterEscapes();
      objectMapper0.writer((CharacterEscapes) null);
      tokenBuffer0.firstToken();
      tokenBuffer_Parser0.nextIntValue(2);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer2.writeObjectFieldStart("");
      // Undeclared exception!
      try { 
        tokenBuffer1.append(tokenBuffer2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      jsonParser0.getTextCharacters();
      Integer integer0 = new Integer(16);
      tokenBuffer_Segment0.rawType(545);
      tokenBuffer_Segment0.hasIds();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[9];
      charArray0[3] = 't';
      charArray0[7] = 'M';
      charArray0[2] = '/';
      tokenBuffer0.writeString(charArray0, 0, 0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      tokenBuffer_Parser0.overrideCurrentName((String) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.serialize(tokenBuffer1);
      tokenBuffer1.writeString((String) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      tokenBuffer0.writeEndArray();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      tokenBuffer_Parser0.isClosed();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      RawValue rawValue0 = new RawValue(arrayNode0);
      tokenBuffer0._appendRaw(16, rawValue0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      tokenBuffer1.isEnabled(jsonGenerator_Feature0);
      Integer integer0 = new Integer(874);
      tokenBuffer1.writeObject(integer0);
      tokenBuffer1.writeObjectFieldStart("0+{W?.zak,x");
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      // Undeclared exception!
      try { 
        tokenBuffer2.append(tokenBuffer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      tokenBuffer0.writeEndArray();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      Byte byte0 = new Byte((byte)71);
      tokenBuffer0.writeObject(byte0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer1.writeArrayFieldStart("CW^orPD ");
      tokenBuffer_Segment0.hasIds();
      tokenBuffer0.serialize(tokenBuffer1);
      tokenBuffer0.toString();
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000654; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = true;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeNumberField("}`]bJ", (-590.2161F));
      tokenBuffer0.writeNumber(bigInteger0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      tokenBuffer0.writeArrayFieldStart((String) null);
      JsonGenerator jsonGenerator0 = tokenBuffer0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0.writeString((SerializableString) serializedString0);
      Long long0 = new Long(0);
      tokenBuffer_Segment0.appendRaw(1234, 0, (Object) long0, (Object) null, (Object) long0);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      tokenBuffer_Segment0.append(16, jsonToken0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      tokenBuffer0.firstToken();
      MockFile mockFile0 = new MockFile("Internal error: entry should be a Number, but is of type ", "JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) outputStreamWriter0);
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UF64[ua ");
      tokenBuffer_Segment0.rawType((-91));
      Random.setNextRandom(741);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0, deserializationFeatureArray0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectReader objectReader0 = objectMapper2.reader(jsonNodeFactory0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      objectReader0.withHandler(deserializationProblemHandler0);
      Class<Float> class0 = Float.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ObjectMapper.findModules(classLoader0);
      ObjectReader objectReader1 = objectReader0.forType(class0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectReader1, true, true);
      tokenBuffer_Parser0.getCurrentLocation();
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000654; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[9];
      charArray0[3] = 't';
      charArray0[7] = 'M';
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.peekNextToken();
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.util.TokenBuffer", "com.fasterxml.jackson.databind.util.TokenBuffer");
      MockFile mockFile1 = new MockFile(mockFile0, "com.fasterxml.jackson.databind.util.TokenBuffer");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1);
      tokenBuffer_Parser0.releaseBuffered((Writer) mockFileWriter0);
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000654; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      tokenBuffer0.writeEndArray();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      Integer integer0 = new Integer(683);
      Byte byte0 = new Byte((byte)71);
      tokenBuffer0.writeObject(byte0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0);
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.writeNumber(bigInteger0);
      tokenBuffer_Parser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.isClosed();
      JsonFactory jsonFactory1 = new JsonFactory();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      RawValue rawValue0 = new RawValue(arrayNode0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      tokenBuffer0._appendRaw(16, bigDecimal0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      Integer integer0 = new Integer(32768);
      tokenBuffer0.writeObject(rawValue0);
      tokenBuffer0.writeObjectFieldStart("");
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer0.append(tokenBuffer1);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      try { 
        tokenBuffer_Parser1.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000654; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, deserializationContext0);
      tokenBuffer0.writeNumber("JSON");
      tokenBuffer0.writeNumber("e*yoE2");
      tokenBuffer_Segment0.hasIds();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonGenerator jsonGenerator0 = tokenBuffer0.enable(jsonGenerator_Feature0);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      tokenBuffer_Parser0.isClosed();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      tokenBuffer0.writeNullField("h");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "JSON");
      ArrayDeque<Module> arrayDeque0 = new ArrayDeque<Module>();
      ArrayDeque<Module> arrayDeque1 = arrayDeque0.clone();
      ObjectMapper objectMapper3 = objectMapper2.registerModules((Iterable<Module>) arrayDeque1);
      ArrayNode arrayNode0 = objectMapper3.createArrayNode();
      RawValue rawValue0 = new RawValue(arrayNode0);
      tokenBuffer1._appendRaw((-406), deserializerFactory0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      Integer integer0 = new Integer(16);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper1, true);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      tokenBuffer2.writeObject(objectIdGenerators_IntSequenceGenerator0);
      tokenBuffer0.writeObjectFieldStart("");
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper1);
      // Undeclared exception!
      try { 
        tokenBuffer2.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      boolean boolean0 = false;
      char[] charArray0 = new char[9];
      charArray0[3] = 't';
      charArray0[7] = 'M';
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.peekNextToken();
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.util.TokenBuffer", "com.fasterxml.jackson.databind.util.TokenBuffer");
      MockFile mockFile1 = new MockFile(mockFile0, "com.fasterxml.jackson.databind.util.TokenBuffer");
      String string0 = "";
      tokenBuffer0.writeObjectFieldStart("com.fasterxml.jackson.databind.util.TokenBuffer");
      // Undeclared exception!
      try { 
        tokenBuffer0.append(tokenBuffer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, false);
      tokenBuffer_Parser0.getCurrentName();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, (DeserializationContext) null);
      tokenBuffer0.writeEndObject();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(16);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      jsonFactory0.enable(jsonFactory_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      byteArrayOutputStream0.write(byteArray0);
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.useDefaultPrettyPrinter();
      tokenBuffer0.writeNumber((short) (-2137));
      // Undeclared exception!
      tokenBuffer1.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<Short> class0 = Short.TYPE;
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      objectReader1.with(contextAttributes0);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.with("JSON");
      objectReader1.treeAsTokens(objectNode1);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Byte byte0 = new Byte((byte) (-76));
      tokenBuffer0._append(jsonToken0, byte0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectReader0, false, false);
      tokenBuffer_Parser0.getEmbeddedObject();
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectReader0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonGenerator jsonGenerator0 = tokenBuffer0.configure(jsonGenerator_Feature0, false);
      tokenBuffer1.serialize(jsonGenerator0);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.disable(jsonParser_Feature0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      jsonParser_FeatureArray0[1] = jsonParser_Feature0;
      jsonParser_FeatureArray0[2] = jsonParser_Feature0;
      jsonParser_FeatureArray0[3] = jsonParser_Feature0;
      jsonParser_FeatureArray0[4] = jsonParser_Feature0;
      jsonParser_FeatureArray0[5] = jsonParser_Feature0;
      jsonParser_FeatureArray0[6] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[7] = jsonParser_Feature1;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, deserializationContext0);
      tokenBuffer0.writeNumber("");
      tokenBuffer0.writeNumber("73L<`P");
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(262144, jsonToken0, (Object) jsonParser_Feature0, (Object) serializedString0);
      tokenBuffer_Segment1.hasIds();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = tokenBuffer0.enable(jsonGenerator_Feature0);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }
}
