/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:42:06 GMT 2023
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleSerializers;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.ContainerSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.Serializers;
import com.fasterxml.jackson.databind.ser.std.SqlDateSerializer;
import com.fasterxml.jackson.databind.ser.std.TokenBufferSerializer;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.net.InetAddress;
import java.nio.charset.Charset;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLDataException;
import java.util.EnumSet;
import java.util.PriorityQueue;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BasicSerializerFactory_ESTest extends BasicSerializerFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MapLikeType> class0 = MapLikeType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      // Undeclared exception!
      try { 
        beanSerializerFactory0.buildIteratorSerializer((SerializationConfig) null, simpleType0, (BeanDescription) null, true, collectionLikeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      // Undeclared exception!
      try { 
        beanSerializerFactory0.withSerializerModifier((BeanSerializerModifier) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not pass null modifier
         //
         verifyException("com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Date> class0 = Date.class;
      Class<SqlDateSerializer> class1 = SqlDateSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class1);
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      Class<SQLDataException> class2 = SQLDataException.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class2, collectionType0);
      objectMapper0.acceptJsonFormatVisitor((JavaType) collectionLikeType0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      assertTrue(collectionLikeType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        beanSerializerFactory0.buildMapEntrySerializer((SerializationConfig) null, mapLikeType0, basicBeanDescription0, true, simpleType0, simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SimpleSerializers simpleSerializers0 = new SimpleSerializers();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(simpleSerializers0);
      assertNotSame(beanSerializerFactory0, serializerFactory0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Iterable<Serializers> iterable0 = beanSerializerFactory0.customSerializers();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<DoubleNode> class0 = DoubleNode.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) iterable0, (Object) class0);
      // Undeclared exception!
      try { 
        beanSerializerFactory0.buildIterableSerializer((SerializationConfig) null, referenceType0, basicBeanDescription0, true, simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory((SerializerFactoryConfig) null);
      Class<ObjectNode> class0 = ObjectNode.class;
      boolean boolean0 = beanSerializerFactory0.isIndexedList(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SerializerFactoryConfig serializerFactoryConfig0 = beanSerializerFactory0.getFactoryConfig();
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<SqlDateSerializer> class0 = SqlDateSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      Class<Integer> class1 = Integer.class;
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (JavaType) simpleType0, (Object) simpleType0, (Object) inetAddress0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, beanPropertyWriter0, "=b");
      ContainerSerializer<?> containerSerializer0 = beanSerializerFactory0.buildCollectionSerializer(referenceType0, true, asExistingPropertyTypeSerializer0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertFalse(containerSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SimpleSerializers simpleSerializers0 = new SimpleSerializers();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalKeySerializers(simpleSerializers0);
      assertNotSame(serializerFactory0, beanSerializerFactory0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<TokenBufferSerializer> class0 = TokenBufferSerializer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      DataTruncation dataTruncation0 = new DataTruncation((-230), true, true, (-230), (-230));
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) dataTruncation0, (Object) beanSerializerFactory0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        beanSerializerFactory0._createSerializer2(defaultSerializerProvider_Impl0, referenceType0, basicBeanDescription0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Date> class0 = Date.class;
      Class<SqlDateSerializer> class1 = SqlDateSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class1);
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      objectMapper0.acceptJsonFormatVisitor((JavaType) collectionType0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      assertFalse(collectionType0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SqlDateSerializer> class0 = SqlDateSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      Class<MapType> class1 = MapType.class;
      CollectionType collectionType0 = CollectionType.construct(class1, simpleType0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      objectMapper0.acceptJsonFormatVisitor((JavaType) collectionType0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      assertTrue(collectionType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MockCalendar> class0 = MockCalendar.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      objectMapper0.acceptJsonFormatVisitor((JavaType) simpleType0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      assertEquals(0, simpleType0.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      Class<Date> class0 = Date.class;
      Class<SqlDateSerializer> class1 = SqlDateSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class1);
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      JsonSerializer<?> jsonSerializer0 = beanSerializerFactory0.findSerializerByPrimaryType(serializerProvider0, collectionType0, (BeanDescription) null, false);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<SqlDateSerializer> class0 = SqlDateSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      Class<TimeZone> class1 = TimeZone.class;
      CollectionType collectionType0 = CollectionType.construct(class1, simpleType0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<?> jsonSerializer0 = beanSerializerFactory0.findSerializerByPrimaryType(defaultSerializerProvider_Impl0, collectionType0, basicBeanDescription0, false);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<SqlDateSerializer> class0 = SqlDateSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      Class<Integer> class1 = Integer.class;
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (JavaType) simpleType0, (Object) simpleType0, (Object) inetAddress0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<?> jsonSerializer0 = beanSerializerFactory0.findSerializerByPrimaryType(defaultSerializerProvider_Impl0, referenceType0, basicBeanDescription0, false);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      Class<Date> class0 = Date.class;
      Class<SqlDateSerializer> class1 = SqlDateSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class1);
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      Class<PriorityQueue> class2 = PriorityQueue.class;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class2, annotationIntrospector1, (ClassIntrospector.MixInResolver) null);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, collectionType0, annotatedClass0);
      JsonSerializer<?> jsonSerializer0 = beanSerializerFactory0.findSerializerByAddonType((SerializationConfig) null, collectionType0, basicBeanDescription0, false);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      Class<ArrayNode> class0 = ArrayNode.class;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("E\"&", 1);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) mockInetSocketAddress0, (Object) class0);
      // Undeclared exception!
      try { 
        beanSerializerFactory0.findSerializerByAddonType((SerializationConfig) null, referenceType0, (BeanDescription) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      Class<Date> class0 = Date.class;
      Class<SqlDateSerializer> class1 = SqlDateSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class1);
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      // Undeclared exception!
      try { 
        beanSerializerFactory0.buildContainerSerializer(serializerProvider0, collectionType0, (BeanDescription) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      Class<Date> class0 = Date.class;
      Class<SqlDateSerializer> class1 = SqlDateSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class1);
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(serializerProvider0);
      objectMapper0.acceptJsonFormatVisitor((JavaType) collectionType1, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      assertTrue(collectionType1.equals((Object)collectionType0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<EnumSet> class0 = EnumSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(serializerProvider0);
      objectMapper0.acceptJsonFormatVisitor((JavaType) collectionType1, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      assertTrue(collectionType0.equals((Object)collectionType1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      Class<Date> class0 = Date.class;
      Class<SqlDateSerializer> class1 = SqlDateSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class1);
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      Class<PriorityQueue> class2 = PriorityQueue.class;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class2, annotationIntrospector1, (ClassIntrospector.MixInResolver) null);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, collectionType0, annotatedClass0);
      Object object0 = beanSerializerFactory0.findSuppressableContentValue((SerializationConfig) null, collectionType0, basicBeanDescription0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Iterable<Serializers> iterable0 = beanSerializerFactory0.customSerializers();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<DoubleNode> class0 = DoubleNode.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) iterable0, (Object) class0);
      // Undeclared exception!
      try { 
        beanSerializerFactory0.buildEnumSerializer((SerializationConfig) null, referenceType0, basicBeanDescription0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not determine enum constants for Class com.fasterxml.jackson.databind.node.DoubleNode
         //
         verifyException("com.fasterxml.jackson.databind.util.EnumValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory((SerializerFactoryConfig) null);
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      // Undeclared exception!
      try { 
        beanSerializerFactory0._verifyAsClass(collectionType0, "", class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector.() returned value of type com.fasterxml.jackson.databind.type.CollectionType: expected type JsonSerializer or Class<JsonSerializer> instead
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<String> class0 = String.class;
      Class<?> class1 = beanSerializerFactory0._verifyAsClass((Object) null, (String) null, class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<Charset> class0 = Charset.class;
      Class<?> class1 = beanSerializerFactory0._verifyAsClass(class0, "Internal error: constructor for ", class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<Charset> class0 = Charset.class;
      Class<BinaryNode> class1 = BinaryNode.class;
      Class<?> class2 = beanSerializerFactory0._verifyAsClass(class0, "Internal error: constructor for ", class1);
      assertNotNull(class2);
      assertEquals("class java.nio.charset.Charset", class2.toString());
  }
}
