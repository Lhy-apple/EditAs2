/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:48:18 GMT 2023
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.CalendarSerializer;
import com.fasterxml.jackson.databind.ser.std.DateSerializer;
import com.fasterxml.jackson.databind.ser.std.SqlDateSerializer;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeSerializerBase_ESTest extends DateTimeSerializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<?> jsonSerializer0 = dateSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateSerializer dateSerializer0 = DateSerializer.instance;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base((SerializerProvider) null);
      // Undeclared exception!
      try { 
        dateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null SerializerProvider passed for java.util.Date
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, annotationMap0, (AnnotatedMember) null, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      JsonSerializer<?> jsonSerializer0 = dateSerializer0.createContextual(serializerProvider0, beanProperty_Std0);
      assertSame(dateSerializer0, jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      boolean boolean0 = dateSerializer0.isEmpty((Date) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      MockDate mockDate0 = new MockDate(0L);
      boolean boolean0 = dateSerializer0.isEmpty((Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = dateSerializer0.isEmpty((Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      boolean boolean0 = dateSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Date) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      MockDate mockDate0 = new MockDate((-1288), 1, 814, 814, 2308, 1);
      boolean boolean0 = dateSerializer0.isEmpty((SerializerProvider) null, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      MockDate mockDate0 = new MockDate((-1288), 1, 814, 814, 2308, 1);
      mockDate0.setTime(0L);
      boolean boolean0 = dateSerializer0.isEmpty((SerializerProvider) null, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateSerializer dateSerializer0 = DateSerializer.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Boolean boolean0 = new Boolean(false);
      DateSerializer dateSerializer1 = dateSerializer0.withFormat(boolean0, (DateFormat) null);
      Class<String> class0 = String.class;
      JsonNode jsonNode0 = dateSerializer1.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);
      assertEquals(1, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateSerializer dateSerializer0 = DateSerializer.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Boolean boolean0 = new Boolean(true);
      DateSerializer dateSerializer1 = dateSerializer0.withFormat(boolean0, (DateFormat) null);
      Class<String> class0 = String.class;
      JsonNode jsonNode0 = dateSerializer1.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);
      assertEquals(1, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      CalendarSerializer calendarSerializer0 = new CalendarSerializer((Boolean) null, dateFormat0);
      Locale locale0 = Locale.FRANCE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      // Undeclared exception!
      try { 
        calendarSerializer0.serialize(calendar0, (JsonGenerator) null, serializerProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.CalendarSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        dateSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
      assertFalse(sqlDateSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      dateSerializer0._acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null, true);
      assertFalse(dateSerializer0.isUnwrappingSerializer());
  }
}
