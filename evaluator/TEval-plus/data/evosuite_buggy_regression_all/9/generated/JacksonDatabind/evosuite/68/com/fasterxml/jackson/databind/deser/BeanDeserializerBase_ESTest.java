/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:52:57 GMT 2023
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.math.BigInteger;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanDeserializerBase_ESTest extends BeanDeserializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      Class<CreatorProperty> class1 = CreatorProperty.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) collectionType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      try { 
        objectMapper0.treeToValue((TreeNode) arrayNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not deserialize instance of com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator out of START_ARRAY token
         //  at [Source: java.lang.String@0000000117; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      Class<JsonProcessingException> class1 = JsonProcessingException.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) collectionType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.putNull(": can nt find property with name '");
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      try { 
        objectMapper0.treeToValue((TreeNode) objectNode1, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \": can nt find property with name '\" (class com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator), not marked as ignorable (0 known properties: ])
         //  at [Source: java.lang.String@0000000117; line: -1, column: -1] (through reference chain: com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator[\": can nt find property with name '\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      try { 
        objectMapper1.treeToValue((TreeNode) booleanNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (VALUE_TRUE), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY type information for class com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator
         //  at [Source: java.lang.String@0000000117; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      try { 
        objectMapper0.treeToValue((TreeNode) bigIntegerNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not construct instance of com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator: no suitable creator method found to deserialize from Number value (10)
         //  at [Source: java.lang.String@0000000117; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((short) (-32768));
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      try { 
        objectMapper0.treeToValue((TreeNode) numericNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not construct instance of com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator: no int/Int-argument constructor/factory method to deserialize from Number value (-32768)
         //  at [Source: java.lang.String@0000000117; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TextNode textNode0 = TextNode.valueOf("Invalid Object Id definition for ");
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      try { 
        objectMapper0.treeToValue((TreeNode) textNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not construct instance of com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator: no String-argument constructor/factory method to deserialize from String value ('Invalid Object Id definition for ')
         //  at [Source: java.lang.String@0000000117; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      Double double0 = new Double(2123.6153);
      ValueNode valueNode0 = arrayNode0.numberNode(double0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      try { 
        objectMapper0.treeToValue((TreeNode) valueNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not construct instance of com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator: no double/Double-argument constructor/factory method to deserialize from Number value (2123.6153)
         //  at [Source: java.lang.String@0000000117; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(1371.9847F);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      try { 
        objectMapper0.treeToValue((TreeNode) numericNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not construct instance of com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator: no double/Double-argument constructor/factory method to deserialize from Number value (1371.9847412109375)
         //  at [Source: java.lang.String@0000000117; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      try { 
        objectMapper0.treeToValue((TreeNode) booleanNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not construct instance of com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator: no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (true)
         //  at [Source: java.lang.String@0000000117; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      try { 
        objectMapper0.treeToValue((TreeNode) booleanNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not construct instance of com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator: no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (false)
         //  at [Source: java.lang.String@0000000117; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BinaryNode binaryNode0 = new BinaryNode((byte[]) null);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = objectMapper0.treeToValue((TreeNode) binaryNode0, class0);
      assertNull(objectIdGenerators_IntSequenceGenerator0);
  }
}
