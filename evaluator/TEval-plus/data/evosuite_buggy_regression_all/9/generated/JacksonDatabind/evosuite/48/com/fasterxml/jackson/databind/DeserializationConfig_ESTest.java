/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:48:25 GMT 2023
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LinkedNode;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Stack;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeserializationConfig_ESTest extends DeserializationConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Stack> class0 = Stack.class;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with((HandlerInstantiator) null);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      JsonNodeFactory jsonNodeFactory0 = deserializationConfig0.getNodeFactory();
      assertNotNull(jsonNodeFactory0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      Locale locale0 = Locale.TAIWAN;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(locale0);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertNotSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        deserializationConfig0.introspectDirectClassAnnotations(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      JsonInclude.Value jsonInclude_Value0 = deserializationConfig0.getDefaultPropertyInclusion();
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      // Undeclared exception!
      try { 
        deserializationConfig0.introspectForBuilder((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      Class<Object> class0 = Object.class;
      JsonInclude.Value jsonInclude_Value0 = deserializationConfig0.getDefaultPropertyInclusion(class0);
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector)ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withAppendedAnnotationIntrospector(jacksonAnnotationIntrospector0);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withInsertedAnnotationIntrospector(annotationIntrospector0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertNotSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with((TypeResolverBuilder<?>) objectMapper_DefaultTypeResolverBuilder0);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with((ClassIntrospector) basicClassIntrospector0);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      LinkedNode<DeserializationProblemHandler> linkedNode0 = deserializationConfig0.getProblemHandlers();
      assertNull(linkedNode0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with((PropertyNamingStrategy) propertyNamingStrategy_SnakeCaseStrategy0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertNotSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      VisibilityChecker<?> visibilityChecker0 = deserializationConfig0.getDefaultVisibilityChecker();
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(visibilityChecker0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, simpleMixInResolver0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, (SimpleMixInResolver) null, rootNameLookup0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with((Base64Variant) null);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertNotSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(dateFormat0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertNotSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(typeFactory0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      BaseSettings baseSettings1 = deserializationConfig0.getBaseSettings();
      assertFalse(baseSettings1.hasExplicitTimeZone());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with((AnnotationIntrospector) null);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(timeZone0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertNotSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      mapperFeatureArray0[0] = mapperFeature0;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeatureArray0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig1.shouldSortPropertiesAlphabetically());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeatureArray0[0];
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeatureArray0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[0];
      DeserializationConfig deserializationConfig1 = deserializationConfig0.without(mapperFeatureArray0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.without(mapperFeatureArray0);
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertNotSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, false);
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertNotSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, true);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      StdSubtypeResolver stdSubtypeResolver1 = new StdSubtypeResolver();
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with((SubtypeResolver) stdSubtypeResolver1);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertNotSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with((SubtypeResolver) stdSubtypeResolver0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
      DeserializationConfig deserializationConfig2 = deserializationConfig1.withRootName(propertyName0);
      assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
      assertNotSame(deserializationConfig2, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName((PropertyName) null);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withView(class0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertNotSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withView((Class<?>) null);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      HashMap<ClassNameIdResolver, ObjectIdResolver> hashMap0 = new HashMap<ClassNameIdResolver, ObjectIdResolver>();
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withAttributes(hashMap0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertNotSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutAttribute(stdSubtypeResolver0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0);
      assertEquals(15215392, deserializationConfig1.getDeserializationFeatures());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0, deserializationFeatureArray0);
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(15215392, deserializationConfig1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      // Undeclared exception!
      try { 
        deserializationConfig0.with(deserializationFeature0, deserializationFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0, deserializationFeatureArray0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(deserializationFeatureArray0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(deserializationFeatureArray0);
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertEquals(16263456, deserializationConfig1.getDeserializationFeatures());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0);
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(15214848, deserializationConfig1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeatureArray0[4];
      DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0, deserializationFeatureArray0);
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertEquals(15212832, deserializationConfig1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0, deserializationFeatureArray0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(deserializationFeatureArray0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      deserializationFeatureArray0[1] = deserializationFeature1;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature1;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(deserializationFeatureArray0);
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(13117728, deserializationConfig1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
      DeserializationConfig deserializationConfig2 = deserializationConfig1.with(jsonParser_Feature0);
      assertSame(deserializationConfig2, deserializationConfig1);
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(jsonParser_FeatureArray0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
      DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
      assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertNotSame(deserializationConfig2, deserializationConfig1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.without(jsonParser_Feature0);
      DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
      assertSame(deserializationConfig2, deserializationConfig1);
      assertNotSame(deserializationConfig2, deserializationConfig0);
      assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      DeserializationConfig deserializationConfig2 = deserializationConfig1.withoutFeatures(jsonParser_FeatureArray0);
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertNotSame(deserializationConfig2, deserializationConfig1);
      assertFalse(deserializationConfig1.useRootWrapping());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(jsonParser_FeatureArray0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(4, 4).when(formatFeature0).getMask();
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-1618)).when(formatFeature0).getMask();
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
      // Undeclared exception!
      try { 
        deserializationConfig1.initialize((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(1515, 1515, 1515, (-1531), 1515).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      formatFeatureArray0[3] = formatFeature0;
      formatFeatureArray0[4] = formatFeature0;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
      DeserializationConfig deserializationConfig2 = deserializationConfig1.without(formatFeature0);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertNotSame(deserializationConfig2, deserializationConfig1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(180, (-2341)).when(formatFeature0).getMask();
      DeserializationConfig deserializationConfig1 = deserializationConfig0.without(formatFeature0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNotSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      DeserializationConfig deserializationConfig1 = deserializationConfig0.without(formatFeature0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn((-1038)).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(formatFeatureArray0);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn((-1038), 16777215).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
      DeserializationConfig deserializationConfig2 = deserializationConfig1.withoutFeatures(formatFeatureArray0);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertNotSame(deserializationConfig2, deserializationConfig1);
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(formatFeatureArray0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with((JsonNodeFactory) null);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertNotSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonNodeFactory0);
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler((DeserializationProblemHandler) null);
      DeserializationConfig deserializationConfig2 = deserializationConfig1.withHandler((DeserializationProblemHandler) null);
      assertSame(deserializationConfig2, deserializationConfig1);
      assertNotSame(deserializationConfig2, deserializationConfig0);
      assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler(deserializationProblemHandler0);
      DeserializationConfig deserializationConfig2 = deserializationConfig1.withNoProblemHandlers();
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertNotSame(deserializationConfig2, deserializationConfig1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withNoProblemHandlers();
      assertSame(deserializationConfig1, deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      deserializationConfig0.initialize((JsonParser) null);
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
      deserializationConfig1.initialize(jsonParser0);
      assertEquals(1025, jsonParser0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
      PropertyName propertyName0 = new PropertyName("*1*QI3*");
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      objectMapper0._newReader(deserializationConfig1);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertTrue(deserializationConfig1.useRootWrapping());
      assertNotSame(deserializationConfig0, deserializationConfig1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      PropertyName propertyName0 = new PropertyName("");
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      objectMapper0._newReader(deserializationConfig1);
      assertFalse(deserializationConfig1.useRootWrapping());
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertNotSame(deserializationConfig0, deserializationConfig1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory0 = new JsonFactory();
      boolean boolean0 = deserializationConfig0.isEnabled(jsonParser_Feature0, jsonFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      jsonParser_FeatureArray0[1] = jsonParser_FeatureArray0[0];
      jsonParser_FeatureArray0[2] = jsonParser_FeatureArray0[0];
      jsonParser_FeatureArray0[3] = jsonParser_Feature0;
      jsonParser_FeatureArray0[4] = jsonParser_FeatureArray0[0];
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(jsonParser_FeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
      assertFalse(boolean0);
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      jsonParser_FeatureArray0[1] = jsonParser_FeatureArray0[0];
      jsonParser_FeatureArray0[2] = jsonParser_Feature0;
      jsonParser_FeatureArray0[3] = jsonParser_Feature0;
      jsonParser_FeatureArray0[4] = jsonParser_FeatureArray0[0];
      JsonFactory jsonFactory0 = new JsonFactory();
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(jsonParser_FeatureArray0);
      boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
      assertTrue(boolean0);
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      boolean boolean0 = deserializationConfig0.hasDeserializationFeatures(142);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      boolean boolean0 = deserializationConfig0.hasDeserializationFeatures(15214880);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      boolean boolean0 = deserializationConfig0.hasSomeOfFeatures(9);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      boolean boolean0 = deserializationConfig0.hasSomeOfFeatures(969);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BaseSettings baseSettings1 = baseSettings0.withClassIntrospector(basicClassIntrospector0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings1, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      TypeDeserializer typeDeserializer0 = deserializationConfig0.findTypeDeserializer(collectionType0);
      assertNull(typeDeserializer0);
  }
}
