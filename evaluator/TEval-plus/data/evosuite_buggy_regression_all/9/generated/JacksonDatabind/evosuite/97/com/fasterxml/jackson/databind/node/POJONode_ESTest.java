/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:58:16 GMT 2023
 */

package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.util.RawValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class POJONode_ESTest extends POJONode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      RawValue rawValue0 = new RawValue(serializedString0);
      POJONode pOJONode0 = new POJONode(rawValue0);
      String string0 = pOJONode0.toString();
      assertEquals("(raw value '[RawValue of type `com.fasterxml.jackson.core.io.SerializedString`]')", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      POJONode pOJONode0 = new POJONode(object0);
      JsonToken jsonToken0 = pOJONode0.asToken();
      assertFalse(jsonToken0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      POJONode pOJONode0 = new POJONode(object0);
      Object object1 = pOJONode0.getPojo();
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntNode intNode0 = IntNode.valueOf(2077);
      POJONode pOJONode0 = new POJONode(intNode0);
      pOJONode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      POJONode pOJONode0 = new POJONode(" <om}!1A\"");
      boolean boolean0 = pOJONode0.isContainerNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      POJONode pOJONode0 = new POJONode(object0);
      byte[] byteArray0 = pOJONode0.binaryValue();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      POJONode pOJONode0 = new POJONode(" <om}!1A\"");
      String string0 = pOJONode0.asText();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      String string0 = pOJONode0.asText();
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      POJONode pOJONode0 = new POJONode("Kual");
      String string0 = pOJONode0.asText("Kual");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      String string0 = pOJONode0.asText((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      boolean boolean0 = pOJONode0.asBoolean(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      POJONode pOJONode0 = new POJONode(boolean0);
      boolean boolean1 = pOJONode0.asBoolean(true);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      POJONode pOJONode0 = new POJONode(" <om}!1A\"");
      boolean boolean0 = pOJONode0.asBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      int int0 = pOJONode0.asInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Short short0 = new Short((short) (-1937));
      POJONode pOJONode0 = new POJONode(short0);
      int int0 = pOJONode0.asInt();
      assertEquals((-1937), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      POJONode pOJONode0 = new POJONode(nullNode0);
      long long0 = pOJONode0.asLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-43));
      POJONode pOJONode0 = new POJONode(byte0);
      long long0 = pOJONode0.asLong();
      assertEquals((-43L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      POJONode pOJONode0 = new POJONode(" <om}!1A\"");
      double double0 = pOJONode0.asDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Short short0 = new Short((short)0);
      POJONode pOJONode0 = new POJONode(short0);
      double double0 = pOJONode0.asDouble((double) (short)0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      POJONode pOJONode0 = new POJONode(nullNode0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        pOJONode0.serialize((JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        pOJONode0.serialize((JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      POJONode pOJONode0 = new POJONode(object0);
      // Undeclared exception!
      try { 
        pOJONode0.serialize((JsonGenerator) null, (SerializerProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.POJONode", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      POJONode pOJONode0 = new POJONode(" <om}!1A\"");
      boolean boolean0 = pOJONode0.equals((Object) " <om}!1A\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      boolean boolean0 = pOJONode0.equals((Object) pOJONode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      boolean boolean0 = pOJONode0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      POJONode pOJONode0 = new POJONode(decimalNode0);
      POJONode pOJONode1 = new POJONode(decimalNode0);
      boolean boolean0 = pOJONode0.equals((Object) pOJONode1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      Object object0 = new Object();
      POJONode pOJONode1 = new POJONode(object0);
      boolean boolean0 = pOJONode0.equals((Object) pOJONode1);
      assertFalse(boolean0);
      assertFalse(pOJONode1.equals((Object)pOJONode0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      boolean boolean0 = pOJONode0._pojoEquals(pOJONode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      String string0 = pOJONode0.toString();
      assertEquals("null", string0);
  }
}
