/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:51:22 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.util.Collection;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionDeserializer_ESTest extends CollectionDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
      // Undeclared exception!
      try { 
        collectionDeserializer0.deserializeWithType(jsonParser0, (DeserializationContext) null, (TypeDeserializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.CollectionDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      Boolean boolean0 = Boolean.TRUE;
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
      CollectionDeserializer collectionDeserializer1 = new CollectionDeserializer(collectionDeserializer0);
      assertFalse(collectionDeserializer1.equals((Object)collectionDeserializer0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType[] javaTypeArray0 = new JavaType[0];
      JavaType javaType0 = typeFactory0.constructParametricType(class0, javaTypeArray0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "I", true, class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      Boolean boolean0 = Boolean.TRUE;
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      try { 
        objectMapper0.convertValue((Object) collectionDeserializer0, javaType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not construct instance of com.fasterxml.jackson.annotation.ObjectIdResolver, problem: abstract types either need to be mapped to concrete types, have custom deserializer, or be instantiated with additional type information
         //  at [Source: java.lang.String@0000001431; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType[] javaTypeArray0 = new JavaType[0];
      JavaType javaType0 = typeFactory0.constructParametricType(class0, javaTypeArray0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      Boolean boolean0 = Boolean.FALSE;
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
      CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, (JsonDeserializer<?>) null, (TypeDeserializer) null);
      assertSame(collectionDeserializer1, collectionDeserializer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType[] javaTypeArray0 = new JavaType[0];
      JavaType javaType0 = typeFactory0.constructParametricType(class0, javaTypeArray0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "h)c&g#b5M]m#", false, class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      Boolean boolean0 = Boolean.TRUE;
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
      CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved(collectionDeserializer0, (JsonDeserializer<?>) null, asExternalTypeDeserializer0);
      assertFalse(collectionDeserializer0.isCachable());
      assertNotSame(collectionDeserializer1, collectionDeserializer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleType> class0 = SimpleType.class;
      try { 
        objectMapper0.convertValue((Object) class0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not instantiate value of type [simple type, class com.fasterxml.jackson.databind.type.SimpleType] from String value ('com.fasterxml.jackson.databind.type.SimpleType'); no single-String constructor/factory method
         //  at [Source: java.lang.String@0000001598; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType[] javaTypeArray0 = new JavaType[0];
      JavaType javaType0 = typeFactory0.constructParametricType(class0, javaTypeArray0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "h)c&g#b5M]A#", true, class0);
      AsExternalTypeDeserializer asExternalTypeDeserializer1 = new AsExternalTypeDeserializer(asExternalTypeDeserializer0, (BeanProperty) null);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      Boolean boolean0 = Boolean.TRUE;
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
      CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, (JsonDeserializer<?>) null, asExternalTypeDeserializer1);
      assertNotSame(collectionDeserializer1, collectionDeserializer0);
      assertFalse(collectionDeserializer1.isCachable());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType[] javaTypeArray0 = new JavaType[0];
      JavaType javaType0 = typeFactory0.constructParametricType(class0, javaTypeArray0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, (Boolean) null);
      Boolean boolean0 = Boolean.TRUE;
      CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, (JsonDeserializer<?>) null, (TypeDeserializer) null, boolean0);
      assertNotSame(collectionDeserializer1, collectionDeserializer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType[] javaTypeArray0 = new JavaType[0];
      JavaType javaType0 = typeFactory0.constructParametricType(class0, javaTypeArray0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, (Boolean) null);
      CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, collectionDeserializer0, (TypeDeserializer) null);
      boolean boolean0 = collectionDeserializer1.isCachable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      Class<NamedType> class0 = NamedType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1));
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0, coreXMLDeserializers_Std0, (Boolean) null);
      boolean boolean0 = collectionDeserializer0.isCachable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<RuntimeException> class0 = RuntimeException.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(collectionLikeType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, (ValueInstantiator) null);
      // Undeclared exception!
      try { 
        collectionDeserializer0.createContextual(defaultDeserializationContext_Impl0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleType> class0 = SimpleType.class;
      objectMapper0.enableDefaultTyping();
      try { 
        objectMapper0.convertValue((Object) class0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not instantiate value of type [simple type, class com.fasterxml.jackson.databind.type.SimpleType] from String value ('com.fasterxml.jackson.databind.type.SimpleType'); no single-String constructor/factory method
         //  at [Source: java.lang.String@0000001612; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
      // Undeclared exception!
      try { 
        collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "q?*qm", false, class1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      Class<JsonToken> class2 = JsonToken.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, 0);
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, coreXMLDeserializers_Std0, asArrayTypeDeserializer0, jsonLocationInstantiator0, coreXMLDeserializers_Std0, (Boolean) null);
      // Undeclared exception!
      try { 
        collectionDeserializer0.deserialize((JsonParser) filteringParserDelegate0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "q?*qm", false, class1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.nextBooleanValue();
      Class<JsonToken> class2 = JsonToken.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, 0);
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, coreXMLDeserializers_Std0, asArrayTypeDeserializer0, jsonLocationInstantiator0, coreXMLDeserializers_Std0, (Boolean) null);
      Collection<Object> collection0 = collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (Collection<Object>) treeSet0);
      // Undeclared exception!
      try { 
        collectionDeserializer0.deserialize((JsonParser) filteringParserDelegate0, (DeserializationContext) defaultDeserializationContext_Impl0, collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "G)X)H),O|GFJn.j", true, class1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.nextBooleanValue();
      Class<Module> class2 = Module.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, 2832);
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, coreXMLDeserializers_Std0, asArrayTypeDeserializer0, jsonLocationInstantiator0, coreXMLDeserializers_Std0, (Boolean) null);
      collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (Collection<Object>) treeSet0);
      try { 
        collectionDeserializer0.deserialize((JsonParser) filteringParserDelegate0, (DeserializationContext) null, (Collection<Object>) treeSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.lang.NullPointerException) (through reference chain: java.util.TreeSet[0])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      Boolean boolean0 = Boolean.TRUE;
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser jsonParser0 = arrayNode0.traverse();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        collectionDeserializer0.deserialize(jsonParser0, deserializationContext0, (Collection<Object>) priorityQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.lang.NullPointerException) (through reference chain: java.lang.Object[0])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      Boolean boolean0 = Boolean.FALSE;
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      // Undeclared exception!
      try { 
        collectionDeserializer0.handleNonArray((JsonParser) null, defaultDeserializationContext_Impl0, priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
      // Undeclared exception!
      try { 
        collectionDeserializer0.handleNonArray((JsonParser) null, defaultDeserializationContext_Impl0, priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType[] javaTypeArray0 = new JavaType[0];
      JavaType javaType0 = typeFactory0.constructParametricType(class0, javaTypeArray0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "V", false, class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      Boolean boolean0 = Boolean.TRUE;
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        collectionDeserializer0.deserialize(jsonParser0, deserializationContext0, (Collection<Object>) priorityQueue0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.lang.NullPointerException) (through reference chain: java.lang.Object[0])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, priorityQueue0);
      JsonLocation jsonLocation0 = new JsonLocation(class0, 67L, 0L, 0, 0);
      Class<JsonDeserializer> class1 = JsonDeserializer.class;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class1, class0, mockRuntimeException0);
      ReadableObjectId readableObjectId0 = new ReadableObjectId(objectIdGenerator_IdKey0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference((JsonParser) null, "<gCF]@Hl\"]%l(=w\"s", jsonLocation0, readableObjectId0);
      collectionDeserializer_CollectionReferringAccumulator0.handleUnresolvedReference(unresolvedForwardReference0);
      collectionDeserializer_CollectionReferringAccumulator0.add("l>tZP{@3?");
      assertFalse(priorityQueue0.contains("l>tZP{@3?"));
      assertEquals(0, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Module> class0 = Module.class;
      HashSet<Object> hashSet0 = new HashSet<Object>();
      CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, hashSet0);
      collectionDeserializer_CollectionReferringAccumulator0.add("x{bT__-DFa");
      assertTrue(hashSet0.contains("x{bT__-DFa"));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, priorityQueue0);
      JsonLocation jsonLocation0 = new JsonLocation(class0, 67L, 0L, 0, 0);
      Class<JsonDeserializer> class1 = JsonDeserializer.class;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class1, class0, mockRuntimeException0);
      ReadableObjectId readableObjectId0 = new ReadableObjectId(objectIdGenerator_IdKey0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference((JsonParser) null, "<gCF]@Hl\"]%l(=w\"s", jsonLocation0, readableObjectId0);
      collectionDeserializer_CollectionReferringAccumulator0.handleUnresolvedReference(unresolvedForwardReference0);
      // Undeclared exception!
      try { 
        collectionDeserializer_CollectionReferringAccumulator0.resolveForwardReference("l>tZP{@3?", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to resolve a forward reference with id [l>tZP{@3?] that wasn't previously seen as unresolved.
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator", e);
      }
  }
}
