/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:40:57 GMT 2023
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Converter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Type;
import java.time.format.FormatStyle;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDelegatingSerializer_ESTest extends StdDelegatingSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Converter<Integer, Object> converter0 = (Converter<Integer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(converter0).toString();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<Integer, ?>) converter0);
      Converter<Object, ?> converter1 = stdDelegatingSerializer0.getConverter();
      assertNotNull(converter1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Converter<Integer, CoreXMLSerializers.XMLGregorianCalendarSerializer> converter0 = (Converter<Integer, CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(converter0).convert(anyInt());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<Integer, ?>) converter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      StringWriter stringWriter0 = new StringWriter();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) stringWriter0);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.serializeWithType((Object) null, jsonGenerator0, defaultSerializerProvider_Impl0, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
      JsonSerializer<?> jsonSerializer0 = stdDelegatingSerializer0.getDelegatee();
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<ObjectReader> class0 = ObjectReader.class;
      Converter<ObjectReader, BeanSerializer> converter0 = (Converter<ObjectReader, BeanSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(converter0).convert(any(com.fasterxml.jackson.databind.ObjectReader.class));
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<ObjectReader, ?>) converter0);
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.isEmpty((SerializerProvider) null, (Object) dOMSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Converter<Object, StdDelegatingSerializer> converter0 = (Converter<Object, StdDelegatingSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonSerializer<StdDelegatingSerializer> jsonSerializer0 = (JsonSerializer<StdDelegatingSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0, simpleType0, jsonSerializer0);
      JsonSerializer<?> jsonSerializer1 = stdDelegatingSerializer0.createContextual((SerializerProvider) null, (BeanProperty) null);
      assertSame(stdDelegatingSerializer0, jsonSerializer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<FormatStyle> class0 = FormatStyle.class;
      Converter<FormatStyle, Integer> converter0 = (Converter<FormatStyle, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<FormatStyle, ?>) converter0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Converter<Integer, String> converter0 = (Converter<Integer, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(converter0).convert(anyInt());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<Integer, ?>) converter0);
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      MapType mapType0 = MapType.construct(class0, mapLikeType0, mapLikeType0);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.isEmpty((Object) mapType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Converter<Integer, BeanSerializer> converter0 = (Converter<Integer, BeanSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<Integer, ?>) converter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      stdDelegatingSerializer0.resolve(defaultSerializerProvider_Impl0);
      assertFalse(stdDelegatingSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Converter<Object, DOMSerializer> converter0 = (Converter<Object, DOMSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<BeanSerializer> class0 = BeanSerializer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = MapType.construct(class0, javaType0, javaType0);
      JsonSerializer<Integer> jsonSerializer0 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0, mapType0, jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Converter<Object, Integer> converter1 = (Converter<Object, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate(converter1, mapType0, stdDelegatingSerializer0);
      stdDelegatingSerializer1.resolve(defaultSerializerProvider_Impl0);
      assertFalse(stdDelegatingSerializer1.equals((Object)stdDelegatingSerializer0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Converter<StdDelegatingSerializer, Object> converter0 = (Converter<StdDelegatingSerializer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<FormatStyle> class0 = FormatStyle.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      PropertyName propertyName0 = new PropertyName("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapLikeType0, (PropertyName) null, annotationMap0, (AnnotatedMember) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.createContextual(defaultSerializerProvider_Impl0, beanProperty_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Converter<Object, StdDelegatingSerializer> converter0 = (Converter<Object, StdDelegatingSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<FormatStyle> class0 = FormatStyle.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0, mapLikeType0, (JsonSerializer<?>) null);
      PropertyName propertyName0 = new PropertyName("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapLikeType0, (PropertyName) null, annotationMap0, (AnnotatedMember) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.createContextual(defaultSerializerProvider_Impl0, beanProperty_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Converter<Object, StdDelegatingSerializer> converter0 = (Converter<Object, StdDelegatingSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      Converter<Object, DOMSerializer> converter1 = (Converter<Object, DOMSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer1 = new StdDelegatingSerializer(converter1, simpleType0, stdDelegatingSerializer0);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer1.createContextual((SerializerProvider) null, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      Converter<Object, CoreXMLSerializers.XMLGregorianCalendarSerializer> converter0 = (Converter<Object, CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(converter0).convert(any());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<Object, ?>) converter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.serialize(coreXMLSerializers_XMLGregorianCalendarSerializer0, jsonGeneratorDelegate0, serializerProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      Converter<Integer, Object> converter0 = (Converter<Integer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(converter0).convert(anyInt());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<Integer, ?>) converter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.serialize(dOMSerializer0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Converter<Object, CoreXMLSerializers.XMLGregorianCalendarSerializer> converter0 = (Converter<Object, CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      Class<Integer> class1 = Integer.class;
      Converter<Integer, DOMSerializer> converter1 = (Converter<Integer, DOMSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class1, (Converter<Integer, ?>) converter1);
      StdDelegatingSerializer stdDelegatingSerializer1 = new StdDelegatingSerializer(converter0, collectionType0, stdDelegatingSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = stdDelegatingSerializer1.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class1);
      assertEquals("", jsonNode0.asText());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Converter<Object, CoreXMLSerializers.XMLGregorianCalendarSerializer> converter0 = (Converter<Object, CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<Object, ?>) converter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema(serializerProvider0, (Type) class0, false);
      assertFalse(jsonNode0.isLong());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Converter<Object, StdDelegatingSerializer> converter0 = (Converter<Object, StdDelegatingSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<FormatStyle> class0 = FormatStyle.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0, mapLikeType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) mapLikeType0, true);
      assertNull(jsonNode0);
  }
}
