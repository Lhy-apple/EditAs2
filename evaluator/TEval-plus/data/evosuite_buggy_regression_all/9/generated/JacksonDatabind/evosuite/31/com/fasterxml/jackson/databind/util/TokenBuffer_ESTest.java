/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:47:31 GMT 2023
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.JsonWriteContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.util.RawValue;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.chrono.MinguoEra;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenBuffer_ESTest extends TokenBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000879; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, false);
      try { 
        tokenBuffer_Parser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000879; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0._appendRaw(57343, (Object) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("$&i!,TY");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      System.setCurrentTimeMillis(105L);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext0);
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNumber((-1.0));
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: VALUE_NUMBER_FLOAT]", string0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0._hasNativeId = true;
      tokenBuffer0._appendRaw((-1631), (Object) null);
      tokenBuffer0.writeNumber(2264);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: START_OBJECT, VALUE_TRUE, VALUE_NUMBER_FLOAT]", string0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      tokenBuffer_Segment0.append(3421, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNumber(2242);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0._appendRaw((-1631), (Object) null);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      
      tokenBuffer0.writeNumber(2264);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      Double double0 = new Double((-1631));
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(2264, (-1631), (Object) double0, (Object) double0, (Object) tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.nextFieldName();
      assertTrue(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      tokenBuffer0.writeNumber(bigDecimal0);
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TokenBuffer tokenBuffer0 = null;
      try {
        tokenBuffer0 = new TokenBuffer((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeNumber(2264);
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer0.writeObject((Object) null);
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("!fe~q]X%P/}H<**yi", (-588), (-588));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      tokenBuffer_Parser0.setFeatureMask(16);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.nextToken();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getTextOffset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ObjectMapper.findModules(classLoader1);
      tokenBuffer0.setFeatureMask((-1198));
      assertEquals((-1198), tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.asParser((JsonParser) tokenBuffer_Parser0);
      tokenBuffer0.getFeatureMask();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      try { 
        tokenBuffer_Parser2.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000879; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      tokenBuffer_Segment0.append(3590, jsonToken0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      try { 
        tokenBuffer0.writeObject(tokenBuffer_Parser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000879; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeNull();
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getTextCharacters();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0._appendRaw(49, (Object) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeNumberField("", (float) (-1631));
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0._appendRaw((-1631), (Object) null);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      int int0 = 2264;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("", 2264, 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      int int1 = tokenBuffer0._generatorFeatures;
      assertEquals(31, int1);
      assertFalse(int1 == int0);
      
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000879; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      int int0 = 2260;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeUTF8String((byte[]) null, 2260, (-23));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(objectMapper0);
      
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3590, jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0.nextLongValue(16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(true);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer_Segment0._tokenTypes = (long) 0;
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(0, jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer0.asParser((JsonParser) tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertNull(tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper1);
      
      TokenBuffer tokenBuffer3 = (TokenBuffer)tokenBuffer2.disable(jsonGenerator_Feature0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer3);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(30, tokenBuffer2.getFeatureMask());
      assertNull(tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertEquals(0, tokenBuffer3.getFormatFeatures());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer3.getOutputBuffered());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertEquals(30, tokenBuffer3.getFeatureMask());
      assertTrue(tokenBuffer3.canOmitFields());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertNull(tokenBuffer3.firstToken());
      assertNotNull(tokenBuffer3);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      
      boolean boolean0 = tokenBuffer_Parser1.getValueAsBoolean();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      
      try { 
        tokenBuffer_Parser1.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000879; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNotNull(tokenBuffer0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotNull(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Long long0 = new Long(16);
      assertEquals(16L, (long)long0);
      assertNotNull(long0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(1277, 869, (Object) long0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawUTF8String((byte[]) null, 8, (-597));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0._appendRaw((-1631), (Object) null);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertNotNull(jsonGeneratorDelegate0);
      
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      
      tokenBuffer0.writeEndArray();
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3421, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      JsonToken jsonToken1 = tokenBuffer_Parser0.nextToken();
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(jsonToken1, jsonToken0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.getCurrentToken());
      assertEquals(7, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(jsonToken1.asString());
      assertTrue(jsonToken1.isScalarValue());
      assertFalse(jsonToken1.isStructStart());
      assertFalse(jsonToken1.isBoolean());
      assertEquals(7, jsonToken1.id());
      assertFalse(jsonToken1.isStructEnd());
      assertTrue(jsonToken1.isNumeric());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      Integer integer0 = new Integer(52);
      assertEquals(52, (int)integer0);
      assertNotNull(integer0);
      
      tokenBuffer0.writeObject(jsonToken0);
      assertSame(jsonToken0, jsonToken1);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      
      tokenBuffer_Parser0._checkIsNumber();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.getCurrentToken());
      assertEquals(7, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      Number number0 = tokenBuffer_Parser0.getNumberValue();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.getCurrentToken());
      assertEquals(7, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(number0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(objectMapper0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append((-1641), jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNotNull(tokenBuffer_Parser0);
      
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0.nextLongValue((-1277L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0._appendRaw((-1631), (Object) null);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertNotNull(jsonGeneratorDelegate0);
      
      jsonGeneratorDelegate0.writeRawValue(" ... (truncated ");
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: START_OBJECT]", string0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      
      boolean boolean0 = true;
      tokenBuffer0.writeEndObject();
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertNotNull(jsonGeneratorDelegate0);
      
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(15, jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Segment1);
      
      tokenBuffer0.flush();
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0._appendRaw((-1631), (Object) null);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      tokenBuffer0.writeNumber(2264);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertNotNull(jsonGeneratorDelegate0);
      
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0._appendRaw((-1631), (Object) null);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      tokenBuffer0.writeNumber(2264);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertNotNull(jsonGeneratorDelegate0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-121);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)61, (byte) (-121)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeObject(byteArrayInputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed java.io.ByteArrayInputStream)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3421, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotNull(tokenBuffer1);
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonGenerator_Feature0, (Object) tokenBuffer1, (Object) tokenBuffer0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      
      Object object0 = tokenBuffer_Segment2.findObjectId(16);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0._appendRaw(2260, (Object) null);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertNotNull(jsonGeneratorDelegate0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.close();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.overrideCurrentName("AW=ieZ:\"=o");
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals("AW=ieZ:\"=o", tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      tokenBuffer0.writeObject((Object) null);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3421, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      double double0 = tokenBuffer_Parser0.getValueAsDouble();
      assertEquals(0.0, double0, 0.01);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      JsonToken jsonToken1 = tokenBuffer_Parser0.peekNextToken();
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(jsonToken1, jsonToken0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(jsonToken1.isNumeric());
      assertFalse(jsonToken1.isStructStart());
      assertNull(jsonToken1.asString());
      assertTrue(jsonToken1.isScalarValue());
      assertEquals(7, jsonToken1.id());
      assertFalse(jsonToken1.isStructEnd());
      assertFalse(jsonToken1.isBoolean());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      
      TokenBuffer.Parser tokenBuffer_Parser3 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser3.hasTextCharacters());
      assertNull(tokenBuffer_Parser3.getCurrentName());
      assertFalse(tokenBuffer_Parser3.isClosed());
      assertTrue(tokenBuffer_Parser3.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser3.getFeatureMask());
      assertFalse(tokenBuffer_Parser3.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser3.getTextOffset());
      assertFalse(tokenBuffer_Parser3.isExpectedStartArrayToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser3.peekNextToken());
      assertNull(tokenBuffer_Parser3.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser3.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser3.getCurrentTokenId());
      assertNull(tokenBuffer_Parser3.getCurrentToken());
      assertFalse(tokenBuffer_Parser3.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser3.hasCurrentToken());
      assertTrue(tokenBuffer_Parser3.canReadTypeId());
      assertNotNull(tokenBuffer_Parser3);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser2));
      
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000879; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = new JsonFactory();
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(objectMapper1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      
      TokenBuffer.Parser tokenBuffer_Parser2 = (TokenBuffer.Parser)tokenBuffer_Parser1.setFeatureMask(16);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertEquals(16, tokenBuffer_Parser2.getFeatureMask());
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      
      String string0 = tokenBuffer_Parser1.getCurrentName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(string0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      Integer integer0 = new Integer(17);
      assertEquals(17, (int)integer0);
      assertNotNull(integer0);
      
      Short short0 = new Short((short)2274);
      assertEquals((short)2274, (short)short0);
      assertNotNull(short0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(1275, jsonToken0, (Object) integer0, (Object) short0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      boolean boolean0 = tokenBuffer_Segment1.hasIds();
      assertTrue(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      String string1 = tokenBuffer_Parser0.getText();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(string1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3421, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNotNull(tokenBuffer1);
      
      Object object0 = tokenBuffer_Segment0.findObjectId(16);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(object0);
      
      String string0 = tokenBuffer_Parser0.getText();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeNumberField("", (float) (-1631));
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer0._appendRaw((-1631), (Object) null);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer0.writeNumber(2264);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertNotNull(jsonGeneratorDelegate0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertTrue(boolean0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0._appendRaw((-1631), (Object) null);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer0.writeNumber(2264);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setCodec((ObjectCodec) null);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: START_OBJECT, VALUE_TRUE, VALUE_NUMBER_FLOAT]", string0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0._appendRaw((-1611), (Object) null);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      tokenBuffer0.writeNumber(2264);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertNotNull(jsonGeneratorDelegate0);
      
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      assertNull(tokenBuffer_Segment1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      int int0 = tokenBuffer_Segment0.rawType(2260);
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeString("");
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.close();
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNotNull(tokenBuffer0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.deserialize(tokenBuffer_Parser0, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeNull();
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      assertNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNotNull(tokenBuffer_Parser0);
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(charArray0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3421, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      String string0 = objectMapper0.writeValueAsString(jsonToken0);
      assertEquals("\"VALUE_NUMBER_INT\"", string0);
      assertNotNull(string0);
      
      JsonToken jsonToken1 = JsonToken.VALUE_FALSE;
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.append(8, jsonToken1, (Object) tokenBuffer_Segment1, (Object) objectMapper0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(jsonToken1, jsonToken0);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(jsonToken0.equals((Object)jsonToken1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonToken1.equals((Object)jsonToken0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeNull();
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      assertNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.setCodec((ObjectCodec) null);
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      long long0 = tokenBuffer_Parser0.nextLongValue(16);
      assertEquals(16L, long0);
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertFalse(objectReader1.equals((Object)objectReader0));
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader1, false);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: ]", string0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(string0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      NullNode nullNode0 = NullNode.instance;
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.booleanValue());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isBigDecimal());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertNotNull(nullNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(nullNode0);
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.booleanValue());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isBigDecimal());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNotNull(jsonParser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectReader0, false);
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertNotNull(tokenBuffer1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer1._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      
      // Undeclared exception!
      try { 
        tokenBuffer1.writeTree(nullNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNotNull(tokenBuffer_Parser0);
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(string0);
      
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000879; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.overrideCurrentName("JSON");
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals("JSON", tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      tokenBuffer0.writeObject((Object) null);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      tokenBuffer0._appendRaw(16, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals("JSON", tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      String string0 = tokenBuffer1.toString();
      assertEquals("[TokenBuffer: ]", string0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertNotNull(string0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      tokenBuffer1.writeNumber(2484);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      tokenBuffer1.writeNumber((short) (-1145));
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      tokenBuffer1.writeNumber(bigDecimal0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Float float0 = new Float(57.0F);
      assertEquals(57.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, float0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertNotNull(iOContext1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(objectReader0);
      assertEquals(5, deserializationFeatureArray0.length);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2872, pipedReader0, objectReader0, charsToNameCanonicalizer0, (char[]) null, (-3239), 33, false);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(2872, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertNotNull(readerBasedJsonParser0);
      assertEquals(5, deserializationFeatureArray0.length);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(readerBasedJsonParser0, defaultDeserializationContext0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(2872, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      assertEquals(5, deserializationFeatureArray0.length);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(2872, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(5, deserializationFeatureArray0.length);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      
      tokenBuffer0.writeNumber((short)0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(2872, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(5, deserializationFeatureArray0.length);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.useDefaultPrettyPrinter();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(2872, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      assertNotNull(tokenBuffer1);
      assertEquals(5, deserializationFeatureArray0.length);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.setFeatureMask(16);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNotNull(tokenBuffer_Parser1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      String string0 = tokenBuffer_Parser0.getCurrentName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(string0);
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0._appendRaw(2260, (Object) null);
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: END_ARRAY]", string0);
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotNull(string0);
      
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(JsonToken.END_ARRAY, jsonToken0);
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(jsonToken0.isStructStart());
      assertEquals("]", jsonToken0.asString());
      assertFalse(jsonToken0.isNumeric());
      assertFalse(jsonToken0.isScalarValue());
      assertFalse(jsonToken0.isBoolean());
      assertTrue(jsonToken0.isStructEnd());
      assertEquals(4, jsonToken0.id());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Long long0 = new Long(698);
      assertEquals(698L, (long)long0);
      assertNotNull(long0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(2016, 698, (Object) long0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      boolean boolean0 = tokenBuffer_Parser0.canReadObjectId();
      assertTrue(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertNotNull(tokenBuffer1);
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      Object object1 = tokenBuffer_Segment1.findObjectId(698);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNull(object1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      Version version0 = tokenBuffer_Parser0.version();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(version0.isSnapshot());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertEquals(6, version0.getMinorVersion());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals(4, version0.getPatchLevel());
      assertEquals(2, version0.getMajorVersion());
      assertFalse(version0.isUknownVersion());
      assertNotNull(version0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Long long0 = new Long(698);
      assertEquals(698L, (long)long0);
      assertNotNull(long0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(2016, 698, (Object) long0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer_Parser0.peekNextToken());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      boolean boolean1 = tokenBuffer_Parser0.canReadObjectId();
      assertTrue(boolean1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertTrue(boolean1 == boolean0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(27, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(27, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      assertNotNull(tokenBuffer1);
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(27, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer_Parser0.peekNextToken());
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      Object object1 = tokenBuffer_Segment1.findObjectId(2016);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(27, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNull(object1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      Version version0 = tokenBuffer0.version();
      assertSame(tokenBuffer0, tokenBuffer1);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(27, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertFalse(version0.isUknownVersion());
      assertTrue(version0.isSnapshot());
      assertEquals(6, version0.getMinorVersion());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertEquals(2, version0.getMajorVersion());
      assertEquals(4, version0.getPatchLevel());
      assertNotNull(version0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      try { 
        tokenBuffer0.writeObject(objectMapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"characterEscapes\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3421, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      JsonWriteContext jsonWriteContext0 = tokenBuffer0.getOutputContext();
      assertEquals(5, JsonWriteContext.STATUS_EXPECT_NAME);
      assertEquals(1, JsonWriteContext.STATUS_OK_AFTER_COMMA);
      assertEquals(3, JsonWriteContext.STATUS_OK_AFTER_SPACE);
      assertEquals(4, JsonWriteContext.STATUS_EXPECT_VALUE);
      assertEquals(0, JsonWriteContext.STATUS_OK_AS_IS);
      assertEquals(2, JsonWriteContext.STATUS_OK_AFTER_COLON);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(jsonWriteContext0.getCurrentName());
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals(0, jsonWriteContext0.getCurrentIndex());
      assertTrue(jsonWriteContext0.inRoot());
      assertFalse(jsonWriteContext0.inArray());
      assertFalse(jsonWriteContext0.inObject());
      assertNotNull(jsonWriteContext0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeString((char[]) null, (-1640), 3421);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(objectMapper0);
      
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      assertNotNull(defaultPrettyPrinter0);
      
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(objectMapper1);
      
      TreeMap<String, InputStream> treeMap0 = new TreeMap<String, InputStream>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(treeMap0);
      assertEquals(0, treeMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertNotNull(simpleFilterProvider0);
      
      ObjectMapper objectMapper2 = objectMapper1.setFilterProvider(simpleFilterProvider0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, treeMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertNotNull(objectMapper2);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "JSON");
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, treeMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertNotNull(objectMapper3);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, treeMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeString("JSON");
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, treeMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = tokenBuffer0.canWriteBinaryNatively();
      assertTrue(boolean0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, treeMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer0._appendRaw(70, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, treeMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = '1';
      charArray0[2] = 't';
      charArray0[3] = '\\';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue(charArray0, 488, 370);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      boolean boolean0 = false;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.enable(jsonParser_Feature0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1, defaultDeserializationContext_Impl1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      
      tokenBuffer0.writeNumber(2247);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue(charArray0, 16, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3421, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      
      Long long0 = Long.valueOf(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Object object0 = tokenBuffer0._objectId;
      assertNull(object0);
      
      int int0 = tokenBuffer_Segment1.rawType((-1337));
      assertEquals(8, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertNotNull(tokenBuffer0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      
      tokenBuffer0.writeNumber(16);
      assertNotSame(objectMapper0, objectMapper1);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw(' ');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeNull();
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      assertNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      tokenBuffer_Parser0.nextToken();
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeNumber("w28+[[5|uUa`");
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      tokenBuffer0._appendRaw((-1631), (Object) null);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      tokenBuffer0.writeNumber((-5224));
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertNotNull(jsonGeneratorDelegate0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeNumber(2264);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      tokenBuffer0.writeTypeId(bigDecimal0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      tokenBuffer_Parser0.overrideCurrentName("AW=ieZ:\"=o");
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals("AW=ieZ:\"=o", tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      tokenBuffer0.writeObject((Object) null);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals("AW=ieZ:\"=o", tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(objectMapper0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      assertNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNotNull(tokenBuffer_Parser0);
      
      long long0 = tokenBuffer_Parser0.nextLongValue(16);
      assertEquals(16L, long0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.disable(jsonParser_Feature1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      Object object0 = tokenBuffer0.getCurrentValue();
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(object0);
      
      tokenBuffer0.flush();
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-64);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-26), (byte)103, (byte) (-26), (byte)103, (byte) (-64)}, byteArray0);
      assertEquals((short)26560, bigInteger0.shortValue());
      assertEquals((byte) (-64), bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertEquals(5, byteArray0.length);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.appendRaw((int) (byte)103, 14, (Object) jsonParser_Feature0, (Object) bigInteger0, (Object) jsonFactory0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertArrayEquals(new byte[] {(byte) (-26), (byte)103, (byte) (-26), (byte)103, (byte) (-64)}, byteArray0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals((short)26560, bigInteger0.shortValue());
      assertEquals((byte) (-64), bigInteger0.byteValue());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertNotNull(tokenBuffer_Segment2);
      assertEquals(5, byteArray0.length);
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      
      int int0 = tokenBuffer_Segment0.rawType(14);
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      
      String string0 = tokenBuffer_Parser0.getText();
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(string0);
      
      boolean boolean0 = tokenBuffer0.isClosed();
      assertFalse(boolean0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000879; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      StringReader stringReader0 = new StringReader("JSON");
      assertNotNull(stringReader0);
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(stringReader0).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Reader.class));
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = ':';
      charArray0[2] = '\'';
      charArray0[3] = 'p';
      charArray0[4] = '#';
      charArray0[5] = 'H';
      charArray0[6] = 'P';
      charArray0[7] = 'a';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertArrayEquals(new char[] {';', ':', '\'', 'p', '#', 'H', 'P', 'a'}, charArray0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNotNull(readerBasedJsonParser0);
      assertEquals(8, charArray0.length);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(15214880, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNotNull(deserializationConfig0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(injectableValues_Std0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, readerBasedJsonParser0, injectableValues_Std0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertArrayEquals(new char[] {';', ':', '\'', 'p', '#', 'H', 'P', 'a'}, charArray0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(15214880, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(15214880, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl1);
      assertEquals(8, charArray0.length);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(readerBasedJsonParser0, defaultDeserializationContext_Impl1);
      assertArrayEquals(new char[] {';', ':', '\'', 'p', '#', 'H', 'P', 'a'}, charArray0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(15214880, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(15214880, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      assertEquals(8, charArray0.length);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      
      tokenBuffer0.writeRawValue("JSON", 0, 0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertArrayEquals(new char[] {';', ':', '\'', 'p', '#', 'H', 'P', 'a'}, charArray0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(15214880, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(15214880, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(8, charArray0.length);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      
      Long long0 = Long.getLong("JSON");
      assertNull(long0);
      
      Long long1 = Long.getLong("JSON", (Long) null);
      assertNull(long1);
      
      tokenBuffer0.writeObjectId((Object) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertArrayEquals(new char[] {';', ':', '\'', 'p', '#', 'H', 'P', 'a'}, charArray0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(15214880, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(15214880, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(8, charArray0.length);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3421, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNotNull(tokenBuffer1);
      
      Object object0 = tokenBuffer_Segment1.findObjectId(16);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeNull();
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      assertNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.setFeatureMask(16);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      Class<MinguoEra> class0 = MinguoEra.class;
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0.readValueAs(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0._appendRaw(2260, (Object) null);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.close();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3421, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeRawValue("spdD5[L1Ao !h1E");
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertNotNull(tokenBuffer1);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertNotNull(jsonGeneratorDelegate0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate1 = new JsonGeneratorDelegate(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(jsonGeneratorDelegate1.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate1.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate1.getFormatFeatures());
      assertEquals(0, jsonGeneratorDelegate1.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate1.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate1.canOmitFields());
      assertEquals((-1), jsonGeneratorDelegate1.getOutputBuffered());
      assertNotNull(jsonGeneratorDelegate1);
      assertFalse(jsonGeneratorDelegate1.equals((Object)jsonGeneratorDelegate0));
      
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      tokenBuffer1.writeEndArray();
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0._appendRaw(2260, (Object) null);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      tokenBuffer0.writeNumber(2264);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertNotNull(jsonGeneratorDelegate0);
      
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      
      tokenBuffer0.writeString((String) null);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer0._append(jsonToken0, (Object) null);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertNotNull(objectReader0);
      
      Class<Float> class0 = Float.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertFalse(objectReader1.equals((Object)objectReader0));
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotNull(objectReader2);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader2, false);
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: ]", string0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(string0);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      NullNode nullNode0 = NullNode.instance;
      assertFalse(nullNode0.isFloat());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals(0, nullNode0.size());
      assertEquals("null", nullNode0.asText());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertNotNull(nullNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(nullNode0);
      assertFalse(nullNode0.isFloat());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals(0, nullNode0.size());
      assertEquals("null", nullNode0.asText());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertNotNull(jsonParser0);
      
      tokenBuffer0._appendRaw(100, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeNull();
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      assertNull(tokenBuffer_Segment1);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertNotNull(jsonGeneratorDelegate0);
      
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = new JsonFactory();
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(objectMapper1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
      assertNotSame(objectMapper0, objectMapper1);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Long long0 = new Long(16);
      assertEquals(16L, (long)long0);
      assertNotNull(long0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 869, (Object) long0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      tokenBuffer_Parser0.setCurrentValue(tokenBuffer0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNotNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      tokenBuffer_Parser0.overrideCurrentName("java.lang.Long@0000000027");
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = '/';
      charArray0[2] = '~';
      charArray0[3] = '?';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw(charArray0, 1, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeNumber(7);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      tokenBuffer0.writeStartArray();
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: VALUE_NUMBER_INT, START_ARRAY]", string0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNotNull(string0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNotNull(tokenBuffer_Parser0);
      
      try { 
        tokenBuffer_Parser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000879; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertNotNull(objectReader0);
      
      Class<Float> class0 = Float.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertFalse(objectReader1.equals((Object)objectReader0));
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotNull(objectReader2);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader2, false);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: ]", string0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(string0);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      NullNode nullNode0 = NullNode.instance;
      assertFalse(nullNode0.isBigDecimal());
      assertNull(nullNode0.numberType());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isDouble());
      assertNotNull(nullNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(nullNode0);
      assertFalse(nullNode0.isBigDecimal());
      assertNull(nullNode0.numberType());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isDouble());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNotNull(jsonParser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectReader0, false);
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotNull(tokenBuffer1);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer1._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer1, true);
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      tokenBuffer1.serialize(tokenBuffer0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectReader1, false, true);
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      
      boolean boolean0 = tokenBuffer_Parser0.hasTextCharacters();
      assertFalse(boolean0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = new JsonFactory();
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(objectMapper1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      
      tokenBuffer0.writeNumber(16);
      assertNotSame(objectMapper0, objectMapper1);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3421, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonToken jsonToken1 = JsonToken.VALUE_FALSE;
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.append(8, jsonToken1, (Object) tokenBuffer_Segment1, (Object) objectMapper0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(jsonToken1, jsonToken0);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(jsonToken0.equals((Object)jsonToken1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      
      Object object0 = tokenBuffer_Segment1.findTypeId(16);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(jsonToken0.equals((Object)jsonToken1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Long long0 = new Long(16);
      assertEquals(16L, (long)long0);
      assertNotNull(long0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 869, (Object) long0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      String string1 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(12, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(string1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      int int0 = tokenBuffer_Parser0.nextIntValue(869);
      assertEquals(869, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(3, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (START_ARRAY) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000879; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, true);
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0._appendRaw(2260, (Object) null);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.close();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      
      String string0 = tokenBuffer_Parser1.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(4, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(string0);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      
      String string1 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(string1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      tokenBuffer0.writeEndArray();
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      byte[] byteArray0 = new byte[0];
      tokenBuffer0.writeBinary(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, byteArray0.length);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      Integer integer0 = new Integer(1505);
      assertEquals(1505, (int)integer0);
      assertNotNull(integer0);
      
      tokenBuffer1._appendRaw(1505, (Object) null);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer1, true);
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertTrue(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      String string0 = tokenBuffer1.toString();
      assertEquals("[TokenBuffer: START_OBJECT]", string0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNotNull(string0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer2.firstToken());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(objectMapper0);
      
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3604, jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      long long0 = tokenBuffer_Segment1._tokenTypes;
      assertEquals(5L, long0);
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.disable(jsonParser_Feature0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      tokenBuffer0._appendRaw(3604, jsonFactory0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      tokenBuffer0.writeNumber(16);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertTrue(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      boolean boolean1 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertFalse(boolean1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(boolean1 == boolean0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      File file0 = MockFile.createTempFile("Failed to parse @JsonSerializableSchema.schemaItemDefinition value", "P)5[@!vk@RPw");
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("Failed to parse @JsonSerializableSchema.schemaItemDefinition value0P)5[@!vk@RPw", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/Failed to parse @JsonSerializableSchema.schemaItemDefinition value0P)5[@!vk@RPw", file0.toString());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeBinary((Base64Variant) null, (InputStream) mockFileInputStream0, (-3294));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(charArray0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      
      tokenBuffer_Parser0.close();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      tokenBuffer1.close();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      tokenBuffer0.flush();
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      
      tokenBuffer0.writeStartArray(16);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000879; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      assertNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, false, false);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      Integer integer0 = new Integer((-921));
      assertEquals((-921), (int)integer0);
      assertNotNull(integer0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertNotNull(tokenBuffer0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      tokenBuffer0.writeTree((TreeNode) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("2143", 923, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      tokenBuffer1.writeNumber(2484);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      tokenBuffer1.writeNumber((short) (-1145));
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNotNull(tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Long long0 = new Long(681);
      assertEquals(681L, (long)long0);
      assertNotNull(long0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(2016, 681, (Object) long0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)103, (byte)103}, byteArray0);
      assertEquals((byte)103, bigInteger0.byteValue());
      assertEquals((short)26471, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertEquals(3, byteArray0.length);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer_Parser0.peekNextToken());
      assertEquals(8, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      Long long1 = Long.valueOf((long) (-1641));
      assertEquals((-1641L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(681, (-1641), (Object) tokenBuffer_Segment0, (Object) long1, (Object) null);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(long0.equals((Object)long1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(long1.equals((Object)long0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      
      int int0 = tokenBuffer_Segment2.rawType((byte)0);
      assertEquals(7, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(long0.equals((Object)long1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(long1.equals((Object)long0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      
      JsonParser.NumberType jsonParser_NumberType0 = tokenBuffer_Parser0.getNumberType();
      assertEquals(JsonParser.NumberType.LONG, jsonParser_NumberType0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer_Parser0.peekNextToken());
      assertEquals(8, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(long0.equals((Object)long1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeNumber(2264);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      assertNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.overrideCurrentName("rh!?/sfanX8W");
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals("rh!?/sfanX8W", tokenBuffer_Parser0.getCurrentName());
      
      tokenBuffer0.writeObject("rh!?/sfanX8W");
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      Integer integer0 = new Integer(1505);
      assertEquals(1505, (int)integer0);
      assertNotNull(integer0);
      
      tokenBuffer1._appendRaw(1505, integer0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      String string0 = tokenBuffer1.toString();
      assertEquals("[TokenBuffer: START_OBJECT]", string0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertNotNull(string0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      // Undeclared exception!
      try { 
        tokenBuffer0.append(tokenBuffer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0._appendRaw(2260, (Object) null);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: END_ARRAY]", string0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(string0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      NullNode nullNode0 = NullNode.instance;
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.booleanValue());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals(0, nullNode0.size());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isFloat());
      assertNotNull(nullNode0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0, deserializationFeatureArray0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertNotNull(objectMapper2);
      assertEquals(3, deserializationFeatureArray0.length);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      
      PropertyNamingStrategy.LowerCaseStrategy propertyNamingStrategy_LowerCaseStrategy0 = (PropertyNamingStrategy.LowerCaseStrategy)PropertyNamingStrategy.LOWER_CASE;
      assertNotNull(propertyNamingStrategy_LowerCaseStrategy0);
      
      ObjectMapper objectMapper3 = objectMapper2.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseStrategy0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertNotNull(objectMapper3);
      assertEquals(3, deserializationFeatureArray0.length);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      
      ObjectMapper objectMapper4 = objectMapper3.enableDefaultTyping();
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertNotNull(objectMapper4);
      assertEquals(3, deserializationFeatureArray0.length);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      serializationFeatureArray0[0] = serializationFeature1;
      ObjectMapper objectMapper5 = objectMapper4.enable(serializationFeature0, serializationFeatureArray0);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper5);
      assertSame(objectMapper4, objectMapper1);
      assertNotSame(serializationFeature0, serializationFeature1);
      assertSame(objectMapper5, objectMapper4);
      assertSame(objectMapper5, objectMapper3);
      assertSame(objectMapper5, objectMapper0);
      assertSame(objectMapper5, objectMapper2);
      assertSame(objectMapper5, objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper5);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper5);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper5);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper5);
      assertSame(objectMapper3, objectMapper0);
      assertNotNull(objectMapper5);
      assertEquals(1, serializationFeatureArray0.length);
      assertEquals(3, deserializationFeatureArray0.length);
      assertFalse(serializationFeature0.equals((Object)serializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      
      JsonParser jsonParser0 = objectMapper5.treeAsTokens(nullNode0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper5);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper5);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper5);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper5);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper5);
      assertSame(objectMapper4, objectMapper1);
      assertNotSame(serializationFeature0, serializationFeature1);
      assertSame(objectMapper5, objectMapper4);
      assertSame(objectMapper5, objectMapper3);
      assertSame(objectMapper5, objectMapper0);
      assertSame(objectMapper5, objectMapper2);
      assertSame(objectMapper5, objectMapper1);
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.booleanValue());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals(0, nullNode0.size());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isFloat());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertNotNull(jsonParser0);
      assertEquals(1, serializationFeatureArray0.length);
      assertEquals(3, deserializationFeatureArray0.length);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(serializationFeature0.equals((Object)serializationFeature1));
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper4, false);
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      assertNotNull(tokenBuffer1);
      assertEquals(3, deserializationFeatureArray0.length);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer1._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertEquals(3, deserializationFeatureArray0.length);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      
      tokenBuffer1.writeTree(nullNode0);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper5);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper5);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper5);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper5);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper5);
      assertSame(objectMapper3, objectMapper0);
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.booleanValue());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals(0, nullNode0.size());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isFloat());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(3, deserializationFeatureArray0.length);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper5);
      assertSame(objectMapper4, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper5);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper5);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper5);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper5);
      assertSame(objectMapper3, objectMapper0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer2.firstToken());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertNotNull(tokenBuffer2);
      assertEquals(3, deserializationFeatureArray0.length);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      
      tokenBuffer1.writeTree(nullNode0);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper5);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper5);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper5);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper5);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper5);
      assertSame(objectMapper3, objectMapper0);
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.booleanValue());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals(0, nullNode0.size());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isFloat());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(3, deserializationFeatureArray0.length);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.enable(jsonGenerator_Feature0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertNotNull(tokenBuffer1);
      
      tokenBuffer0._appendRaw(2260, (Object) null);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(12, jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNotNull(tokenBuffer_Parser0);
      
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0.getObjectId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0._appendRaw((-1631), (Object) null);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: START_OBJECT, VALUE_TRUE, VALUE_NUMBER_FLOAT]", string0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(string0);
      
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(JsonToken.START_OBJECT, jsonToken0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(1, jsonToken0.id());
      assertFalse(jsonToken0.isStructEnd());
      assertFalse(jsonToken0.isNumeric());
      assertTrue(jsonToken0.isStructStart());
      assertFalse(jsonToken0.isScalarValue());
      assertFalse(jsonToken0.isBoolean());
      assertEquals("{", jsonToken0.asString());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0._appendRaw((-1631), (Object) null);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer0.writeString((SerializableString) null);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer0.writeNumber(2264);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertNotNull(jsonGeneratorDelegate0);
      
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: START_OBJECT]", string0);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3421, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      double double0 = tokenBuffer_Parser0.getValueAsDouble();
      assertEquals(0.0, double0, 0.01);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      JsonToken jsonToken1 = tokenBuffer_Parser0.peekNextToken();
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(jsonToken1, jsonToken0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(jsonToken1.isScalarValue());
      assertNull(jsonToken1.asString());
      assertTrue(jsonToken1.isNumeric());
      assertFalse(jsonToken1.isStructStart());
      assertFalse(jsonToken1.isBoolean());
      assertEquals(7, jsonToken1.id());
      assertFalse(jsonToken1.isStructEnd());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(7, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      
      Long long0 = Long.valueOf(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Object object0 = tokenBuffer0._objectId;
      assertNull(object0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.appendRaw(15, (-1641), (Object) tokenBuffer_Parser0, (Object) null, (Object) bigInteger0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(7, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      
      int int0 = tokenBuffer_Segment1.rawType((-1337));
      assertEquals(8, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      tokenBuffer_Parser0.getNumberType();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(7, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeNull();
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      
      Version version0 = objectReader0.version();
      assertEquals(2, version0.getMajorVersion());
      assertEquals(6, version0.getMinorVersion());
      assertTrue(version0.isSnapshot());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertEquals(4, version0.getPatchLevel());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertFalse(version0.isUknownVersion());
      assertNotNull(version0);
      
      SimpleModule simpleModule0 = new SimpleModule(version0);
      assertEquals(2, version0.getMajorVersion());
      assertEquals(6, version0.getMinorVersion());
      assertTrue(version0.isSnapshot());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertEquals(4, version0.getPatchLevel());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertFalse(version0.isUknownVersion());
      assertEquals("jackson-databind", simpleModule0.getModuleName());
      assertNotNull(simpleModule0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append((-32768), jsonToken0, (Object) bigDecimal0, (Object) simpleModule0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(2, version0.getMajorVersion());
      assertEquals(6, version0.getMinorVersion());
      assertTrue(version0.isSnapshot());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertEquals(4, version0.getPatchLevel());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertFalse(version0.isUknownVersion());
      assertEquals("jackson-databind", simpleModule0.getModuleName());
      assertNull(tokenBuffer_Segment1);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0._next;
      assertNull(tokenBuffer_Segment2);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNotNull(tokenBuffer_Parser0);
      
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = new JsonFactory();
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(objectMapper1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotNull(tokenBuffer0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      
      tokenBuffer0.writeNumber(16);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = new JsonFactory();
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(objectMapper1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      tokenBuffer_Parser0.nextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.setFeatureMask(16777215);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(16777215, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(16777215, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(16777215, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(16777215, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNotNull(tokenBuffer0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotNull(beanDeserializerFactory1);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      
      tokenBuffer_Parser2.nextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      
      Integer integer0 = new Integer(52);
      assertEquals(52, (int)integer0);
      assertNotNull(integer0);
      
      RawValue rawValue0 = new RawValue(jsonFactory0, true);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(rawValue0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      
      tokenBuffer0.writeObject(rawValue0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(16777215, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(16777215, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      Integer integer0 = new Integer(1505);
      assertEquals(1505, (int)integer0);
      assertNotNull(integer0);
      
      tokenBuffer1._appendRaw(1505, integer0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      tokenBuffer1.writeTree((TreeNode) null);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNotNull(arrayNode0);
      
      NullNode nullNode0 = arrayNode0.nullNode();
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(nullNode0.isShort());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.booleanValue());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isFloat());
      assertNull(nullNode0.textValue());
      assertEquals("null", nullNode0.asText());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isDouble());
      assertNotNull(nullNode0);
      
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null);
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      
      TokenBuffer tokenBuffer3 = tokenBuffer1.append(tokenBuffer0);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer3, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(31, tokenBuffer3.getFeatureMask());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertEquals((-1), tokenBuffer3.getOutputBuffered());
      assertTrue(tokenBuffer3.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer3.firstToken());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertFalse(tokenBuffer3.isClosed());
      assertEquals(0, tokenBuffer3.getFormatFeatures());
      assertNotNull(tokenBuffer3);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      
      tokenBuffer0.writeTree(nullNode0);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(nullNode0.isShort());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.booleanValue());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isFloat());
      assertNull(nullNode0.textValue());
      assertEquals("null", nullNode0.asText());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isDouble());
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.next();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNotNull(tokenBuffer_Parser0);
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Integer integer0 = new Integer(1505);
      assertEquals(1505, (int)integer0);
      assertNotNull(integer0);
      
      tokenBuffer0._appendRaw(1505, integer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertNotNull(jsonGeneratorDelegate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(100, 7, (Object) sequenceInputStream0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      Object object0 = tokenBuffer0._typeId;
      assertNull(object0);
      
      RawValue rawValue0 = new RawValue(tokenBuffer_Segment1, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(rawValue0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(1, 2, (Object) null, (Object) 0, (Object) rawValue0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer0._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment3.hasIds());
      assertNotNull(tokenBuffer_Segment3);
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment1));
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(6, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      int int0 = tokenBuffer_Parser0.nextIntValue(1505);
      assertEquals(1505, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(2, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      String string1 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(string1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      Integer integer0 = new Integer(1505);
      assertEquals(1505, (int)integer0);
      assertNotNull(integer0);
      
      tokenBuffer1._appendRaw(1505, integer0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(100, 7, (Object) sequenceInputStream0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      Object object0 = tokenBuffer0._typeId;
      assertNull(object0);
      
      Integer integer1 = Integer.getInteger("");
      assertNull(integer1);
      
      RawValue rawValue0 = new RawValue(tokenBuffer_Segment1, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(rawValue0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(1, 2, (Object) null, (Object) null, (Object) rawValue0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      String string0 = tokenBuffer_Parser0.nextTextValue();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(6, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      String string1 = tokenBuffer1.toString();
      assertEquals("[TokenBuffer: START_OBJECT]", string1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      // Undeclared exception!
      try { 
        tokenBuffer0.append(tokenBuffer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Long long0 = new Long(16);
      assertEquals(16L, (long)long0);
      assertNotNull(long0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 833, (Object) long0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(1, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      String string1 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(string1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      int int0 = tokenBuffer_Parser0.nextIntValue(833);
      assertEquals(833, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(3, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      String string2 = tokenBuffer_Parser0.getValueAsString((String) null);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(3, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(string2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      tokenBuffer1.writeEndArray();
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      String string3 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(string3);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0.writeNumber(16);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      tokenBuffer0.writeStartArray();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: VALUE_NUMBER_INT, START_ARRAY]", string0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNotNull(string0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      // Undeclared exception!
      try { 
        tokenBuffer1.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNotNull(tokenBuffer_Parser0);
      
      try { 
        tokenBuffer_Parser0.getBinaryValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary
         //  at [Source: java.lang.String@0000000879; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0._appendRaw((-1624), (Object) null);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertNotNull(jsonGeneratorDelegate0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.serialize(jsonGeneratorDelegate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      Long long0 = new Long(16);
      assertEquals(16L, (long)long0);
      assertNotNull(long0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 869, (Object) long0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNotNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      String string1 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer_Parser0.getCurrentToken());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(12, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(string1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer_Parser0.getCurrentToken());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(12, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser1, (DeserializationContext) null);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      
      int int1 = tokenBuffer1._generatorFeatures;
      assertEquals(31, int1);
      assertFalse(int1 == int0);
      
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_EMBEDDED_OBJECT) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000879; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      File file0 = MockFile.createTempFile("Unrecognized value type for VALUE_NUMBER_FLOAT: ", "g#v]>\"}x^B<`X`IZ");
      assertEquals("Unrecognized value type for VALUE_NUMBER_FLOAT: 0g#v]>\"}x^B<`X`IZ", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/Unrecognized value type for VALUE_NUMBER_FLOAT: 0g#v]>\"}x^B<`X`IZ", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser((InputStream) mockFileInputStream0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("Unrecognized value type for VALUE_NUMBER_FLOAT: 0g#v]>\"}x^B<`X`IZ", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/Unrecognized value type for VALUE_NUMBER_FLOAT: 0g#v]>\"}x^B<`X`IZ", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals((-2), mockFileInputStream0.available());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNotNull(uTF8StreamJsonParser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(uTF8StreamJsonParser0, (DeserializationContext) null);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("Unrecognized value type for VALUE_NUMBER_FLOAT: 0g#v]>\"}x^B<`X`IZ", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/Unrecognized value type for VALUE_NUMBER_FLOAT: 0g#v]>\"}x^B<`X`IZ", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals((-2), mockFileInputStream0.available());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNotNull(tokenBuffer0);
      
      tokenBuffer0._appendRaw(1111, file0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("Unrecognized value type for VALUE_NUMBER_FLOAT: 0g#v]>\"}x^B<`X`IZ", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/Unrecognized value type for VALUE_NUMBER_FLOAT: 0g#v]>\"}x^B<`X`IZ", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals((-2), mockFileInputStream0.available());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      tokenBuffer0.writeNumber(93);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("Unrecognized value type for VALUE_NUMBER_FLOAT: 0g#v]>\"}x^B<`X`IZ", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/Unrecognized value type for VALUE_NUMBER_FLOAT: 0g#v]>\"}x^B<`X`IZ", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals((-2), mockFileInputStream0.available());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("Unrecognized value type for VALUE_NUMBER_FLOAT: 0g#v]>\"}x^B<`X`IZ", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/Unrecognized value type for VALUE_NUMBER_FLOAT: 0g#v]>\"}x^B<`X`IZ", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals((-2), mockFileInputStream0.available());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertNotNull(jsonGeneratorDelegate0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.serialize(jsonGeneratorDelegate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      
      int int0 = 2260;
      tokenBuffer0._appendRaw(2260, (Object) null);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNotNull(tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.close();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.isClosed());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.next();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Segment1);
      
      int int1 = (-2856);
      String string0 = "Ho\\4";
      tokenBuffer_Parser0.nextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.isClosed());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3421, jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      JsonToken jsonToken1 = tokenBuffer_Parser0.nextToken();
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(jsonToken1, jsonToken0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(7, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(jsonToken1.asString());
      assertTrue(jsonToken1.isScalarValue());
      assertFalse(jsonToken1.isStructStart());
      assertFalse(jsonToken1.isBoolean());
      assertEquals(7, jsonToken1.id());
      assertFalse(jsonToken1.isStructEnd());
      assertTrue(jsonToken1.isNumeric());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      Integer integer0 = new Integer(52);
      assertEquals(52, (int)integer0);
      assertNotNull(integer0);
      
      tokenBuffer0.writeObject(jsonToken0);
      assertSame(jsonToken0, jsonToken1);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.append(3421, jsonToken1, (Object) jsonToken1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(jsonToken1, jsonToken0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(7, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(jsonToken1.asString());
      assertTrue(jsonToken1.isScalarValue());
      assertFalse(jsonToken1.isStructStart());
      assertFalse(jsonToken1.isBoolean());
      assertEquals(7, jsonToken1.id());
      assertFalse(jsonToken1.isStructEnd());
      assertTrue(jsonToken1.isNumeric());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      
      tokenBuffer_Parser0._checkIsNumber();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(7, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      Number number0 = tokenBuffer_Parser0.getNumberValue();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(7, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(number0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertEquals((-1), jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertNotNull(jsonGeneratorDelegate0);
      
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }
}
