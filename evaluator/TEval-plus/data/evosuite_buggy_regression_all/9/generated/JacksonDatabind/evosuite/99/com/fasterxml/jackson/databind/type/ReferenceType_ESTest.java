/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:57:03 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.util.ArrayList;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReferenceType_ESTest extends ReferenceType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      ReferenceType referenceType1 = (ReferenceType)referenceType0.refine(class0, (TypeBindings) null, simpleType0, javaTypeArray0);
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      JavaType javaType0 = referenceType0.getReferencedType();
      assertEquals(0, javaType0.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      boolean boolean0 = referenceType0.isReferenceType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      String string0 = referenceType0.toString();
      assertEquals("[reference type, class java.lang.Comparable<java.lang.Comparable<[simple type, class java.lang.Comparable]>]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      String string0 = referenceType0.getErasedSignature();
      assertEquals("Ljava/lang/Comparable;", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      ReferenceType referenceType0 = new ReferenceType(mapLikeType0, mapLikeType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0._narrow(class0);
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.equals((Object)referenceType0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[1] = (JavaType) simpleType0;
      ReferenceType referenceType0 = new ReferenceType(class0, typeBindings0, simpleType0, javaTypeArray0, javaTypeArray0[1], simpleType0, javaTypeArray0[2], class0, false);
      boolean boolean0 = referenceType0.hasContentType();
      assertFalse(referenceType0.isAnchorType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      // Undeclared exception!
      try { 
        ReferenceType.construct(class0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      ReferenceType referenceType0 = new ReferenceType(mapLikeType0, mapLikeType0);
      String string0 = referenceType0.getGenericSignature();
      assertEquals("Ljava/lang/Integer<Ljava/lang/Integer<Ljava/lang/Integer;Lcom/fasterxml/jackson/databind/type/PlaceholderForType;>;>;", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      JavaType javaType0 = referenceType0.getAnchorType();
      assertTrue(javaType0.hasContentType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      JavaType javaType0 = referenceType0.getContentType();
      assertFalse(javaType0.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[0]);
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom(mapType0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[2] = javaType0;
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom(javaTypeArray0[1], javaTypeArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentType(referenceType0);
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.equals((Object)referenceType0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentType(simpleType0);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      Class<SimpleType> class1 = SimpleType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(resolvedRecursiveType0);
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.equals((Object)referenceType0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Integer> class0 = Integer.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      ReferenceType referenceType0 = new ReferenceType(collectionLikeType0, collectionLikeType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      JavaType[] javaTypeArray1 = new JavaType[7];
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, javaTypeArray1[4], javaTypeArray1, (JavaType) referenceType0);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(referenceType0);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType1.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<String> class0 = String.class;
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
      Class<ReferenceType> class1 = ReferenceType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class0, class0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, (TypeBindings) null, mapLikeType0, javaTypeArray0, mapLikeType0, javaTypeArray0[1], class0, object0, true);
      ReferenceType referenceType1 = referenceType0.withValueHandler(class0);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentValueHandler(javaTypeArray0[2]);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Integer> class0 = Integer.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      ReferenceType referenceType0 = new ReferenceType(collectionLikeType0, collectionLikeType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      ReferenceType referenceType0 = new ReferenceType(mapLikeType0, mapLikeType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      assertTrue(referenceType2.useStaticType());
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertFalse(referenceType2.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      ReferenceType referenceType0 = new ReferenceType(mapLikeType0, mapLikeType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(referenceType0);
      boolean boolean0 = referenceType1.isAnchorType();
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertFalse(boolean0);
      assertTrue(referenceType0.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      boolean boolean0 = referenceType0.isAnchorType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      Object object0 = new Object();
      ReferenceType referenceType1 = referenceType0.withTypeHandler(object0);
      boolean boolean0 = referenceType1.equals(referenceType0);
      assertFalse(referenceType1.isAnchorType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Integer> class0 = Integer.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      ReferenceType referenceType0 = new ReferenceType(collectionLikeType0, collectionLikeType0);
      Class<ArrayList> class1 = ArrayList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) referenceType0);
      assertFalse(collectionType0.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      boolean boolean0 = referenceType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Integer> class0 = Integer.TYPE;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      ReferenceType referenceType0 = new ReferenceType(collectionLikeType0, collectionLikeType0);
      boolean boolean0 = referenceType0.equals(collectionLikeType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      Class<SimpleType> class1 = SimpleType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class2, typeBindings0, javaTypeArray0[1], javaTypeArray0, (JavaType) resolvedRecursiveType0);
      boolean boolean0 = referenceType0.equals(referenceType1);
      assertTrue(referenceType1.isAnchorType());
      assertFalse(boolean0);
      assertFalse(referenceType1.useStaticType());
  }
}
