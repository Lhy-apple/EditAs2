/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:56:13 GMT 2023
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.CalendarSerializer;
import com.fasterxml.jackson.databind.ser.std.DateSerializer;
import com.fasterxml.jackson.databind.ser.std.SqlDateSerializer;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeSerializerBase_ESTest extends DateTimeSerializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = new CalendarSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "Null SerializerProvider passed for ", false, javaType0, jsonTypeInfo_As0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1685, "Null SerializerProvider passed for ", propertyMetadata0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.handleSecondaryContextualization(calendarSerializer0, creatorProperty0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      // Undeclared exception!
      try { 
        calendarSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null SerializerProvider passed for java.util.Calendar
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = new CalendarSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handleSecondaryContextualization(calendarSerializer0, (BeanProperty) null);
      assertSame(calendarSerializer0, jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = new CalendarSerializer();
      boolean boolean0 = calendarSerializer0.isEmpty((Calendar) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = calendarSerializer0.isEmpty((Calendar) mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setTimeInMillis(0L);
      boolean boolean0 = calendarSerializer0.isEmpty((Calendar) mockGregorianCalendar0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = new CalendarSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2885, 2885, 2885);
      boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) mockGregorianCalendar0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = new CalendarSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Boolean boolean0 = Boolean.FALSE;
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      CalendarSerializer calendarSerializer0 = new CalendarSerializer(boolean0, dateFormat0);
      JsonNode jsonNode0 = calendarSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null, false);
      assertFalse(jsonNode0.isLong());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Boolean boolean0 = Boolean.TRUE;
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      CalendarSerializer calendarSerializer0 = new CalendarSerializer(boolean0, dateFormat0);
      JsonNode jsonNode0 = calendarSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null, false);
      assertFalse(jsonNode0.isBigDecimal());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateSerializer dateSerializer0 = DateSerializer.instance;
      Locale locale0 = Locale.ITALY;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(1, locale0);
      DateSerializer dateSerializer1 = dateSerializer0.withFormat((Boolean) null, dateFormat0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, dateSerializer0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 35, objectMapper0, dataOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        dateSerializer1.serialize((Date) null, (JsonGenerator) jsonGeneratorDelegate0, serializerProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      MockDate mockDate0 = new MockDate(0L);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        dateSerializer0.serialize((Date) mockDate0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayList> class0 = ArrayList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, collectionType0);
      assertFalse(collectionType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer(boolean0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      JavaType javaType0 = TypeFactory.unknownType();
      sqlDateSerializer0._acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, javaType0, true);
      assertFalse(javaType0.isContainerType());
  }
}
