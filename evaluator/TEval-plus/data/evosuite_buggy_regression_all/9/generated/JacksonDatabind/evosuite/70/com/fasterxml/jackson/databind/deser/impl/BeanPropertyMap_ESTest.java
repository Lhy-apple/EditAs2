/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:53:20 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLTimeoutException;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanPropertyMap_ESTest extends BeanPropertyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayDeque0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(false);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, priorityQueue0);
      SettableBeanProperty[] settableBeanPropertyArray0 = beanPropertyMap0.getPropertiesInInsertionOrder();
      assertEquals(0, settableBeanPropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, true);
      int int0 = beanPropertyMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, false);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(true);
      assertNotSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<CreatorProperty> class0 = CreatorProperty.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "' found, can't remove", false, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(arrayType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-53), valueInstantiator_Base0, propertyMetadata0);
      arrayDeque0.push(creatorProperty0);
      arrayDeque0.push(creatorProperty0);
      arrayDeque0.push(creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayDeque0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[9];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-53), (-53));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = beanPropertyMap0.findDeserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, propertyName0, "JSON");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<CreatorProperty> class0 = CreatorProperty.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "' found, can't remove", true, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(arrayType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-53), valueInstantiator_Base0, propertyMetadata0);
      arrayDeque0.push(creatorProperty0);
      arrayDeque0.push(creatorProperty0);
      arrayDeque0.push(creatorProperty0);
      arrayDeque0.push(creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayDeque0);
      assertEquals(4, beanPropertyMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      stack0.setSize(8);
      beanPropertyMap0.init(stack0);
      assertEquals("[null, null, null, null, null, null, null, null]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
      stack0.setSize(980);
      beanPropertyMap0.init(stack0);
      assertEquals(980, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(arrayType0, (TypeIdResolver) null, "t:&MERRavKDtuUB.", true, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer(17);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = PropertyName.construct("2-NE@", "0|7?sX!");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-599), integer0, propertyMetadata0);
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>(807);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayDeque0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      assertEquals(0, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<CreatorProperty> class0 = CreatorProperty.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "[ignored=%s,ignoreUnknown=%s,allowGetters=%s,allowSetters=%s,merge=%s]", false, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 5, arrayType0, propertyMetadata0);
      arrayDeque0.push(creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayDeque0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      assertSame(beanPropertyMap0, beanPropertyMap1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(arrayType0, (TypeIdResolver) null, "t:&MHRRavKDtuUB.", true, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer(17);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = PropertyName.construct("2-NE@", "0|7?sX!");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-599), integer0, propertyMetadata0);
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>(807);
      arrayDeque0.push(creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayDeque0);
      beanPropertyMap0.withProperty(creatorProperty0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      BeanPropertyMap beanPropertyMap2 = beanPropertyMap0.withProperty(creatorProperty0);
      assertSame(beanPropertyMap2, beanPropertyMap1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, false);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll((NameTransformer) null);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, false);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-32768), (Object) null, propertyMetadata0);
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      arrayDeque0.push(creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayDeque0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer((String) null, "CW+N-N");
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
      assertEquals(1, beanPropertyMap1.size());
      assertNotSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<CreatorProperty> class0 = CreatorProperty.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "2-NE@", false, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(arrayType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 5, valueInstantiator_Base0, propertyMetadata0);
      arrayDeque0.push(creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayDeque0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
      beanPropertyMap0.remove(creatorProperty0);
      beanPropertyMap0.renameAll(nameTransformer_Chained0);
      assertEquals(0, beanPropertyMap0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayDeque0);
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(priorityQueue0);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-32768), (Object) null, propertyMetadata0);
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      arrayDeque0.push(creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayDeque0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(set0);
      assertNotSame(beanPropertyMap1, beanPropertyMap0);
      assertEquals(1, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      arrayList0.add((SettableBeanProperty) null);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayList0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(set0);
      assertEquals(0, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 12, annotationMap0, propertyMetadata0);
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayDeque0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.replace(creatorProperty0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No entry '' found, can't replace
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<CreatorProperty> class0 = CreatorProperty.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "[ignored=%s,ignoreUnknown=%s,allowGetters=%s,allowSetters=%s,merge=%s]", false, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 5, arrayType0, propertyMetadata0);
      arrayDeque0.push(creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayDeque0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find(1888);
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<CreatorProperty> class0 = CreatorProperty.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "[ignored=%s,ignoreUnknown=%s,allowGetters=%s,allowSetters=%s,merge=%s]", true, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 21, arrayType0, propertyMetadata0);
      arrayDeque0.push(creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayDeque0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find((-1));
      assertEquals("", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.find((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not pass null property name
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayDeque0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find("com.fasterxml.jackson.databind.ser.std.CollectionSerializer");
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<CreatorProperty> class0 = CreatorProperty.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "' found, can't remove", false, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(arrayType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-53), valueInstantiator_Base0, propertyMetadata0);
      arrayDeque0.push(creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayDeque0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[9];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-53), (-53));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = beanPropertyMap0.findDeserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, propertyName0, "JSON");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<CreatorProperty> class0 = CreatorProperty.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "2-NE@", false, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(arrayType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 5, valueInstantiator_Base0, propertyMetadata0);
      arrayDeque0.push(creatorProperty0);
      arrayDeque0.push(creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayDeque0);
      beanPropertyMap0.remove(creatorProperty0);
      assertEquals(1, beanPropertyMap0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 12, annotationMap0, propertyMetadata0);
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      arrayDeque0.push(creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayDeque0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("|m+?'t");
      beanPropertyMap0.remove(settableBeanProperty0);
      assertEquals(1, beanPropertyMap0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 199, annotationMap0, propertyMetadata0);
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayDeque0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.remove(creatorProperty0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No entry '' found, can't remove
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<CreatorProperty> class0 = CreatorProperty.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      Class<Integer> class1 = Integer.class;
      JavaType[] javaTypeArray0 = new JavaType[3];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, typeBindings0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaTypeArray0[1], (TypeIdResolver) null, "I^pDN_G.5*@N8>P3AW?", false, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Integer integer0 = new Integer(819);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(false, "I^pDN_G.5*@N8>P3AW?", integer0, "I^pDN_G.5*@N8>P3AW?");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 819, javaTypeArray0[1], propertyMetadata0);
      arrayDeque0.add(creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayDeque0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.findDeserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<CreatorProperty> class0 = CreatorProperty.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, (TypeIdResolver) null, "' found, can't remove", false, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(arrayType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-53), valueInstantiator_Base0, propertyMetadata0);
      arrayDeque0.push(creatorProperty0);
      arrayDeque0.push(creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayDeque0, true);
      String string0 = beanPropertyMap0.toString();
      assertEquals("Properties=[([array type, component type: [simple type, class com.fasterxml.jackson.databind.deser.CreatorProperty]]), ([array type, component type: [simple type, class com.fasterxml.jackson.databind.deser.CreatorProperty]])]", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, true);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename((SettableBeanProperty) null, (NameTransformer) null);
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, false);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 205, annotationMap0, propertyMetadata0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((JsonDeserializer) null).when(jsonDeserializer0).unwrappingDeserializer(any(com.fasterxml.jackson.databind.util.NameTransformer.class));
      CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty1, nameTransformer0);
      assertFalse(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLTimeoutException0, "i\"As42m>O)");
      try { 
        beanPropertyMap0.wrapAndThrow(invocationTargetException0, linkedList0, "i\"As42m>O)", (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.sql.SQLTimeoutException) (through reference chain: java.util.LinkedList[\"i\"As42m>O)\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null, "n\"ps42m4>O)");
      try { 
        beanPropertyMap0.wrapAndThrow(invocationTargetException0, linkedList0, "i\"As42m>O)", (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // n\"ps42m4>O) (through reference chain: java.util.LinkedList[\"i\"As42m>O)\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayList0);
      MockError mockError0 = new MockError("b+QwB~sq}_Ow");
      // Undeclared exception!
      try { 
        beanPropertyMap0.wrapAndThrow(mockError0, annotationIntrospector0, "n8zxi0b[^", (DeserializationContext) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[8];
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.mappingException("(c", objectArray0);
      try { 
        beanPropertyMap0.wrapAndThrow(jsonMappingException0, objectArray0[4], "|dRfuo%-Vg9i-$D}", (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (c (through reference chain: UNKNOWN[\"|dRfuo%-Vg9i-$D}\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException("Y(");
      try { 
        beanPropertyMap0.wrapAndThrow(mockIOException0, "K/{", "K/{", defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      MockIOException mockIOException0 = new MockIOException();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
      try { 
        beanPropertyMap0.wrapAndThrow(mockIOException0, (Object) null, "n8zxi0b[^", (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        beanPropertyMap0.wrapAndThrow(sQLTimeoutException0, beanDeserializerFactory0, "' found, can't remove", defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.sql.SQLTimeoutException) (through reference chain: com.fasterxml.jackson.databind.deser.BeanDeserializerFactory[\"' found, can't remove\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_KebabCaseStrategy0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      Class<CreatorProperty> class0 = CreatorProperty.class;
      MappingIterator<CreatorProperty> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
      assertNotNull(mappingIterator0);
  }
}
