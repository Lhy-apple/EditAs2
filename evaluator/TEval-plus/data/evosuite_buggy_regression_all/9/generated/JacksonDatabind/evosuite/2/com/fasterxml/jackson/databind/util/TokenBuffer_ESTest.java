/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:41:20 GMT 2023
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleSerializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyFilter;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.temporal.ChronoField;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenBuffer_ESTest extends TokenBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      tokenBuffer_Segment0.append(141, jsonToken0, (Object) jsonToken0);
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer_Segment0.appendRaw(0, (-1071), (Object) null, (Object) bigInteger0, (Object) null);
      JsonToken jsonToken1 = JsonToken.VALUE_EMBEDDED_OBJECT;
      tokenBuffer_Segment0.append(0, jsonToken1, (Object) jsonToken1, (Object) jsonToken1, (Object) jsonToken1);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0.writeNull();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      TokenBuffer tokenBuffer0 = null;
      try {
        tokenBuffer0 = new TokenBuffer((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      Short short0 = new Short((short) (-2936));
      tokenBuffer0._appendRaw(1193, short0);
      tokenBuffer0.isClosed();
      tokenBuffer0.writeNumber((double) 1193);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)68;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawUTF8String(byteArray0, (short) (-2936), 1193);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TreeMap<Integer, Object> treeMap0 = tokenBuffer_Segment0._nativeIds;
      tokenBuffer_Segment0._nativeIds = null;
      tokenBuffer_Segment0.hasIds();
      tokenBuffer_Segment0.next();
      tokenBuffer_Segment0.next();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0.getTypeId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(41, jsonToken0, (Object) jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      Short short0 = new Short((short)0);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(16, 0, (Object) short0);
      tokenBuffer_Segment2.next();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0.getTypeId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setLocale((Locale) null);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2, false);
      tokenBuffer0.writeEndArray();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonGenerator jsonGenerator0 = tokenBuffer0.disable(jsonGenerator_Feature0);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.asParser((ObjectCodec) null);
      Short short0 = new Short((short) (-2936));
      tokenBuffer0.isClosed();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)16;
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertTrue(boolean0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      
      tokenBuffer0.writeNull();
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0.writeObjectFieldStart("R'PEGl");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedUTF8();
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Integer> class0 = Integer.class;
      ObjectReader objectReader0 = objectMapper0.reader(class0);
      Locale locale0 = Locale.ITALY;
      ObjectReader objectReader1 = objectReader0.with(locale0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ObjectReader objectReader2 = objectReader1.withAttributes(hashMap0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader2);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      tokenBuffer0._append(jsonToken0);
      tokenBuffer0.writeStartArray();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0._mayHaveNativeIds = false;
      Short short0 = new Short((short) (-2936));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      tokenBuffer0.writeBinaryField("EmfxM>JP.0)6", byteArray0);
      tokenBuffer0._appendRaw(1193, short0);
      tokenBuffer0.isClosed();
      tokenBuffer0.writeNumber((double) 1193);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setLocale((Locale) null);
      objectMapper1.findAndRegisterModules();
      Short short0 = new Short((short)5);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getTypeId();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0._appendRaw((short)5, (Object) null);
      // Undeclared exception!
      try { 
        tokenBuffer0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      tokenBuffer_Segment0.appendRaw(922, 922, (Object) null, (Object) jsonToken0, (Object) null);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      Long long0 = new Long(703L);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      ShortNode.valueOf((short) (-2236));
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        tokenBuffer0.serialize((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(922, jsonToken0, (Object) null, (Object) jsonToken0);
      assertNotNull(tokenBuffer_Segment1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("Overflow: numeric value (", "");
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(922, 922, (Object) jsonToken0, (Object) objectNode1, (Object) "l8:");
      Long long0 = new Long(650L);
      tokenBuffer_Segment2.append(922, jsonToken0, (Object) long0);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer_Segment0.rawType(79);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      tokenBuffer_Segment0.append(922, jsonToken0, (Object) null, (Object) jsonToken0);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      Long long0 = new Long(650L);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      ShortNode.valueOf((short) (-2236));
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      tokenBuffer_Parser0.getTypeId();
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, (String) null);
      LinkedHashSet<Module> linkedHashSet0 = new LinkedHashSet<Module>();
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<Module>) linkedHashSet0);
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, true);
      tokenBuffer0.writeNumber((short)0);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      tokenBuffer0.setCodec(objectMapper0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", isGetter: ");
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      int int0 = 1193;
      short short0 = (short) (-2936);
      Short short1 = new Short((short) (-2936));
      tokenBuffer0._appendRaw(1193, short1);
      tokenBuffer0.isClosed();
      tokenBuffer0.writeNumber((double) 1193);
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-75);
      byte byte0 = (byte)68;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("", 0, 1193);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper3, false, false);
      try { 
        tokenBuffer_Parser0.getBinaryValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary
         //  at [Source: java.lang.String@0000000032; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
      MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.AUTO_DETECT_CREATORS;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.USE_GETTERS_AS_SETTERS;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[4] = mapperFeature4;
      ObjectMapper objectMapper2 = objectMapper1.disable(mapperFeatureArray0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(serializedString0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectReader0, true, true);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(tokenBuffer_Parser0, tokenBuffer_Parser0);
      JsonLocation jsonLocation0 = jsonParserSequence0.getTokenLocation();
      tokenBuffer_Parser0.setLocation(jsonLocation0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParserSequence0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue((String) null, 16, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      Class<BigDecimal> class0 = BigDecimal.class;
      try { 
        objectMapper1.convertValue((Object) propertyAccessor0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not construct instance of java.math.BigDecimal from String value 'com.fasterxml.jackson.core.io.SerializedString@0000000168': not a valid representation
         //  at [Source: java.lang.String@0000001251; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TreeMap<Integer, Object> treeMap0 = tokenBuffer_Segment0._nativeIds;
      tokenBuffer_Segment0._nativeIds = null;
      tokenBuffer_Segment0.hasIds();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-126);
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (int) (byte)0, (int) (byte) (-39));
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParserDelegate0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw('c');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = objectMapper0.setLocale((Locale) null);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      assertNotNull(objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      
      ObjectMapper objectMapper4 = objectMapper0.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      assertNotNull(objectMapper4);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper4.mixInCount());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000032; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper3, false, false);
      tokenBuffer_Parser0.close();
      assertTrue(tokenBuffer_Parser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      ChronoField chronoField0 = ChronoField.HOUR_OF_AMPM;
      ObjectReader objectReader1 = objectReader0.withAttribute((Object) null, chronoField0);
      Locale locale0 = Locale.CHINA;
      ObjectReader objectReader2 = objectReader1.with(locale0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      ObjectReader objectReader3 = objectReader2.with(deserializationFeature1);
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature1;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature2;
      ObjectReader objectReader4 = objectReader3.without(deserializationFeature2, deserializationFeatureArray0);
      Class<Object> class0 = Object.class;
      ObjectReader objectReader5 = objectReader4.withType(class0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectReader5, false, false);
      tokenBuffer_Parser0.version();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      objectMapper0.enable(serializationFeature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeNumber((double) 16);
      tokenBuffer0.writeString("");
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      short short0 = (short) (-1016);
      Short short1 = new Short((short) (-1016));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1016), (short)short1);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, short1, false);
      assertNotNull(iOContext0);
      assertTrue(short1.equals((Object)short0));
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(true, true);
      assertNotNull(charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, objectMapper0, charsToNameCanonicalizer1);
      assertNotNull(readerBasedJsonParser0);
      assertTrue(short1.equals((Object)short0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((JsonParser) readerBasedJsonParser0);
      assertNotNull(tokenBuffer_Parser0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertTrue(short1.equals((Object)short0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      tokenBuffer0.writeNumberField("JSON", (float) 33);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      try { 
        tokenBuffer_Parser1.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000032; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertNotNull(arrayNode0);
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isClosed());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      tokenBuffer0.writeEndArray();
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, objectMapper1.mixInCount());
      
      HashSet<Module> hashSet0 = new HashSet<Module>(672);
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<Module>) hashSet0);
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, objectMapper2.mixInCount());
      
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature0, false);
      assertNotNull(objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, false);
      assertNotNull(tokenBuffer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer0.writeBoolean(false);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '8';
      charArray0[1] = 'v';
      charArray0[2] = 'S';
      charArray0[3] = '9';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw(charArray0, (-848), (-848));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(227, "{9djP<TT*3q9");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("{9djP<TT*3q9", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id={9djP<TT*3q9,offset=227,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(227, simpleTimeZone0.getRawOffset());
      
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone(simpleTimeZone0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("{9djP<TT*3q9", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id={9djP<TT*3q9,offset=227,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(227, simpleTimeZone0.getRawOffset());
      assertEquals(0, objectMapper1.mixInCount());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      assertNotNull(tokenBuffer0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("{9djP<TT*3q9", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id={9djP<TT*3q9,offset=227,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(227, simpleTimeZone0.getRawOffset());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      
      tokenBuffer0.writeEndArray();
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("{9djP<TT*3q9", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id={9djP<TT*3q9,offset=227,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(227, simpleTimeZone0.getRawOffset());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(227, jsonToken0);
      assertNotNull(tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper1, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("{9djP<TT*3q9", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id={9djP<TT*3q9,offset=227,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(227, simpleTimeZone0.getRawOffset());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("{9djP<TT*3q9", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id={9djP<TT*3q9,offset=227,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(227, simpleTimeZone0.getRawOffset());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.enable(jsonGenerator_Feature0);
      assertNotNull(tokenBuffer1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("{9djP<TT*3q9", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id={9djP<TT*3q9,offset=227,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(227, simpleTimeZone0.getRawOffset());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(111, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(111, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(227, "{9djP<TT*3q9");
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone(simpleTimeZone0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      tokenBuffer0.writeEndArray();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(227, jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser0.getCurrentName();
      tokenBuffer0.writeNumber((-16842752));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      tokenBuffer_Segment0.append(41, jsonToken0, (Object) jsonToken0, (Object) jsonToken0, (Object) jsonToken0);
      Short short0 = new Short((short)0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.next();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setLocale((Locale) null);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      objectMapper0.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping1 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping1, "");
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, true, true);
      tokenBuffer_Parser0.getTextLength();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setLocale((Locale) null);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      objectMapper0.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      HashSet<String> hashSet0 = new HashSet<String>();
      SimpleBeanPropertyFilter.FilterExceptFilter simpleBeanPropertyFilter_FilterExceptFilter0 = new SimpleBeanPropertyFilter.FilterExceptFilter(hashSet0);
      SimpleFilterProvider simpleFilterProvider1 = simpleFilterProvider0.addFilter("com.fasterxml.jackson.databind.SerializationFeature", (PropertyFilter) simpleBeanPropertyFilter_FilterExceptFilter0);
      SimpleFilterProvider simpleFilterProvider2 = simpleFilterProvider1.setFailOnUnknownId(true);
      SimpleFilterProvider simpleFilterProvider3 = simpleFilterProvider2.addFilter("com.fasterxml.jackson.databind.SerializationFeature", (SimpleBeanPropertyFilter) simpleBeanPropertyFilter_FilterExceptFilter0);
      objectMapper2.setFilters(simpleFilterProvider3);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, true, true);
      tokenBuffer_Parser0.getTextLength();
      tokenBuffer_Parser0.getParsingContext();
      tokenBuffer_Parser0.overrideCurrentName("");
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, true);
      tokenBuffer0.getCodec();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TreeMap<Integer, Object> treeMap0 = tokenBuffer_Segment0._nativeIds;
      tokenBuffer_Segment0._nativeIds = null;
      tokenBuffer_Segment0.hasIds();
      tokenBuffer_Segment0.next();
      tokenBuffer_Segment0.next();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.overrideCurrentName("(]Bbt2IKuF\"m(8t3'@{");
      tokenBuffer_Parser0.getTextOffset();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.JAPANESE;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      HashSet<Module> hashSet0 = new HashSet<Module>(672);
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<Module>) hashSet0);
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature0, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, false);
      tokenBuffer0.writeBoolean(false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer_Segment0.appendRaw(672, (-2708), (Object) null, (Object) hashSet0, (Object) hashSet0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature1);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonFactory_Feature0);
      ObjectMapper objectMapper4 = new ObjectMapper(jsonFactory4);
      objectMapper4.clearProblemHandlers();
      Class<BigInteger> class0 = BigInteger.class;
      ObjectReader objectReader0 = objectMapper3.readerWithView(class0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader1 = objectReader0.withHandler(deserializationProblemHandler0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectReader1, false, true);
      tokenBuffer_Parser0.isClosed();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.addHandler((DeserializationProblemHandler) null);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectMapper objectMapper2 = objectMapper1.setNodeFactory(jsonNodeFactory0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper2.reader((InjectableValues) injectableValues_Std0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, false);
      tokenBuffer0.firstToken();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      Double double0 = new Double((-1701.9871284));
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, false);
      Object object0 = tokenBuffer0._typeId;
      tokenBuffer_Segment0.append(2, jsonToken0, (Object) null);
      ObjectMapper objectMapper2 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper3 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature1;
      deserializationFeatureArray0[7] = deserializationFeature0;
      objectMapper1.enable(deserializationFeature1, deserializationFeatureArray0);
      ObjectMapper objectMapper4 = objectMapper3.disableDefaultTyping();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      objectMapper4.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper2);
      tokenBuffer1.getFeatureMask();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectMapper objectMapper1 = objectMapper0.addHandler((DeserializationProblemHandler) null);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectMapper objectMapper2 = objectMapper1.setNodeFactory(jsonNodeFactory0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper2.reader((InjectableValues) injectableValues_Std0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, false);
      tokenBuffer0.firstToken();
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      int int0 = (-1117);
      tokenBuffer_Segment0.appendRaw(2, 8000, (Object) jsonGenerator_Feature0);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      SerializedString serializedString0 = null;
      try {
        serializedString0 = new SerializedString((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Null String illegal for SerializedString
         //
         verifyException("com.fasterxml.jackson.core.io.SerializedString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.SETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, true, false);
      tokenBuffer_Parser0.close();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      tokenBuffer0.writeString("Z9YBof}K-0");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(227, "{9djP<TT*3q9");
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone(simpleTimeZone0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      tokenBuffer0.writeEndArray();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(227, jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper1, false, false);
      tokenBuffer_Parser0.overrideCurrentName("");
      try { 
        tokenBuffer_Parser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000032; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(922, jsonToken0, (Object) null, (Object) jsonToken0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("Overflow: numeric value (", "");
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_MONTH;
      tokenBuffer_Segment0.appendRaw(2202, 922, (Object) tokenBuffer_Segment1, (Object) tokenBuffer_Segment1, (Object) chronoField0);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(1092, 1092, (Object) jsonToken0, (Object) objectNode1, (Object) "l8:");
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.useDefaultPrettyPrinter();
      Long long0 = new Long(650L);
      // Undeclared exception!
      try { 
        tokenBuffer_Segment2.append((-825), jsonToken0, (Object) long0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      Short short0 = new Short((short) (-2936));
      tokenBuffer0._appendRaw(1193, short0);
      tokenBuffer0.isClosed();
      tokenBuffer0.writeNumber((double) 1193);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.canReadTypeId();
      System.setCurrentTimeMillis((byte) (-75));
      tokenBuffer0.firstToken();
      tokenBuffer0.writeObjectId(tokenBuffer_Parser0);
      tokenBuffer0.canWriteBinaryNatively();
      tokenBuffer0.canWriteBinaryNatively();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      ObjectMapper objectMapper2 = new ObjectMapper();
      ObjectMapper objectMapper3 = objectMapper0.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h<av47rW(\"=D8WFe'");
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      tokenBuffer0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.findAndRegisterModules();
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      tokenBuffer_Segment0.append((-2206), jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      tokenBuffer_Parser0.canReadTypeId();
      System.setCurrentTimeMillis(16);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.firstToken();
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      charArray0[1] = ']';
      charArray0[2] = 'k';
      charArray0[3] = '$';
      charArray0[4] = '5';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue(charArray0, 16, 16);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      objectMapper0.enable(serializationFeature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer tokenBuffer1 = tokenBuffer0.append(tokenBuffer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      tokenBuffer0.toString();
      tokenBuffer0.writeEndArray();
      // Undeclared exception!
      tokenBuffer1.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(treeMap0);
      ObjectMapper.findModules();
      objectMapper0.reader((InjectableValues) injectableValues_Std0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      ChronoField chronoField0 = ChronoField.AMPM_OF_DAY;
      tokenBuffer0.writeTypeId(chronoField0);
      tokenBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      tokenBuffer_Segment0.append((-2206), jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      tokenBuffer_Parser0.canReadTypeId();
      System.setCurrentTimeMillis(16);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.firstToken();
      tokenBuffer0.getOutputContext();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Short short0 = new Short((short) (-688));
      Class<BigDecimal> class0 = BigDecimal.class;
      objectMapper1.convertValue((Object) short0, class0);
      objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(treeMap0);
      objectMapper1.reader((InjectableValues) injectableValues_Std0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.firstToken();
      tokenBuffer0.writeTypeId(tokenBuffer_Segment0);
      tokenBuffer0.flush();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      Short short0 = new Short((short) (-2936));
      tokenBuffer0._appendRaw(1193, short0);
      tokenBuffer0.isClosed();
      tokenBuffer0.writeNumber((double) 1193);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)68;
      tokenBuffer0.close();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      boolean boolean0 = true;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper2, true, true);
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ObjectMapper objectMapper3 = objectMapper2.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      HashSet<String> hashSet0 = new HashSet<String>();
      SimpleBeanPropertyFilter.FilterExceptFilter simpleBeanPropertyFilter_FilterExceptFilter0 = new SimpleBeanPropertyFilter.FilterExceptFilter(hashSet0);
      SimpleFilterProvider simpleFilterProvider1 = simpleFilterProvider0.addFilter("", (PropertyFilter) simpleBeanPropertyFilter_FilterExceptFilter0);
      Byte byte0 = new Byte((byte) (-93));
      hashSet0.remove(byte0);
      simpleFilterProvider1.setFailOnUnknownId(false);
      SimpleFilterProvider simpleFilterProvider2 = simpleFilterProvider1.addFilter("com.fasterxml.jackson.databind.SerializationFeature", (SimpleBeanPropertyFilter) simpleBeanPropertyFilter_FilterExceptFilter0);
      objectMapper3.setFilters(simpleFilterProvider2);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper3, false, true);
      objectMapper2.setFilters(simpleFilterProvider0);
      tokenBuffer_Parser0.getTextLength();
      tokenBuffer_Parser0.getParsingContext();
      tokenBuffer_Parser0.overrideCurrentName("!-  Xutr");
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2, false);
      tokenBuffer0.writeEndObject();
      ShortNode shortNode0 = ShortNode.valueOf((short)1972);
      BigInteger bigInteger0 = shortNode0.bigIntegerValue();
      tokenBuffer0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("w)?Q(]yGKl 5");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper3, false, false);
      try { 
        tokenBuffer_Parser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000032; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setLocale((Locale) null);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ObjectMapper objectMapper4 = objectMapper0.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      Class<BigDecimal> class0 = BigDecimal.class;
      objectMapper1.findMixInClassFor(class0);
      HashSet<String> hashSet0 = new HashSet<String>();
      SimpleBeanPropertyFilter.FilterExceptFilter simpleBeanPropertyFilter_FilterExceptFilter0 = new SimpleBeanPropertyFilter.FilterExceptFilter(hashSet0);
      SimpleFilterProvider simpleFilterProvider1 = simpleFilterProvider0.addFilter("com.fasterxml.jackson.databind.SerializationFeature", (PropertyFilter) simpleBeanPropertyFilter_FilterExceptFilter0);
      SimpleFilterProvider simpleFilterProvider2 = simpleFilterProvider1.setFailOnUnknownId(true);
      SimpleFilterProvider simpleFilterProvider3 = simpleFilterProvider2.addFilter("com.fasterxml.jackson.databind.SerializationFeature", (SimpleBeanPropertyFilter) simpleBeanPropertyFilter_FilterExceptFilter0);
      objectMapper2.setFilters(simpleFilterProvider3);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, true, true);
      tokenBuffer_Parser0.getTextLength();
      tokenBuffer_Parser0.getParsingContext();
      tokenBuffer_Parser0.overrideCurrentName("");
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, true);
      tokenBuffer0.writeEndObject();
      tokenBuffer_Parser0.setCodec(objectMapper4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.addHandler((DeserializationProblemHandler) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeString("");
      Base64Variant base64Variant0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-57);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, 3035);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      Short short0 = new Short((short) (-2936));
      tokenBuffer0.isClosed();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      tokenBuffer_Segment0.append((int) (short) (-2936), jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.getValueAsDouble();
      tokenBuffer_Parser0.skipChildren();
      tokenBuffer_Parser0.canReadTypeId();
      tokenBuffer0.writeEndObject();
      tokenBuffer_Segment0.type(1);
      tokenBuffer0.setFeatureMask(1193);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      Byte byte0 = new Byte((byte) (-64));
      tokenBuffer_Segment0.append(6, jsonToken0, (Object) null, (Object) byte0);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper1 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      objectMapper1.enable(serializationFeature0);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      DefaultSerializerProvider defaultSerializerProvider0 = null;
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider((DefaultSerializerProvider) null);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.ANY;
      objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Short short0 = new Short((short) (-688));
      Class<BigDecimal> class0 = BigDecimal.class;
      // Undeclared exception!
      try { 
        objectMapper2.convertValue((Object) jsonAutoDetect_Visibility0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setLocale((Locale) null);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      objectMapper0.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.getPrettyPrinter();
      tokenBuffer0.setPrettyPrinter((PrettyPrinter) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0.writeString((SerializableString) serializedString0);
      tokenBuffer0.toString();
      tokenBuffer0.writeEndArray();
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper2, true, false);
      tokenBuffer_Parser0.peekNextToken();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Byte.valueOf((byte)48);
      Short short0 = new Short((short)91);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.getTypeId();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0._appendRaw((-2685), (Object) null);
      // Undeclared exception!
      try { 
        tokenBuffer0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      objectNode0.put("Overflow: numeric alue ", "");
      Long long0 = new Long(650L);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0.writeEndArray();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonGenerator jsonGenerator0 = tokenBuffer0.disable(jsonGenerator_Feature0);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SimpleSerializers simpleSerializers0 = new SimpleSerializers();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalKeySerializers(simpleSerializers0);
      ObjectMapper objectMapper3 = objectMapper0.setSerializerFactory(serializerFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper3, false, false);
      tokenBuffer_Parser0.overrideCurrentName("");
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      tokenBuffer0.writeEndObject();
      // Undeclared exception!
      tokenBuffer0.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      tokenBuffer_Segment0.append(922, jsonToken0, (Object) null, (Object) jsonToken0);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      Long long0 = new Long(650L);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      ShortNode shortNode0 = ShortNode.valueOf((short) (-2236));
      BigInteger bigInteger0 = shortNode0.bigIntegerValue();
      tokenBuffer0.writeNumber(bigInteger0);
      // Undeclared exception!
      try { 
        tokenBuffer0.serialize((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Short short0 = new Short((short) (-2936));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)16;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0.version();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory1.setInputDecorator(inputDecorator0);
      try { 
        MockURL.URL("JSON");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: JSON
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      ObjectMapper.findModules();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      ChronoField chronoField0 = ChronoField.AMPM_OF_DAY;
      tokenBuffer0.writeTypeId(chronoField0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0.writeString("KcZ);rXK*LNm06");
      tokenBuffer0.writeEndObject();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KcZ);rXK*LNm06");
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(1109, jsonToken0, (Object) jsonToken0);
      ShortNode shortNode0 = ShortNode.valueOf((short) (-3400));
      BigInteger bigInteger0 = shortNode0.bigIntegerValue();
      tokenBuffer_Segment1.appendRaw(16, 16, (Object) bigInteger0);
      tokenBuffer_Segment1.hasIds();
      BigDecimal bigDecimal0 = new BigDecimal((double) 1109);
      tokenBuffer0.writeNumber(bigDecimal0);
      tokenBuffer0.firstToken();
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("KcZ);rXK*LNm06", 16, 79);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "");
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'B';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeString(charArray0, 16, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      tokenBuffer_Parser0.close();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer1.writeNumber((double) 16);
      tokenBuffer1.writeString("'oCix,");
      JsonParser jsonParser0 = tokenBuffer_Parser0.setFeatureMask((-256));
      TokenBuffer tokenBuffer2 = new TokenBuffer(jsonParser0);
      TokenBuffer tokenBuffer3 = tokenBuffer2.append(tokenBuffer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.databind.ser.std.EnumSerializer");
      TokenBuffer tokenBuffer4 = new TokenBuffer(objectMapper1);
      TokenBuffer tokenBuffer5 = new TokenBuffer(jsonParser0);
      tokenBuffer1.writeString((SerializableString) null);
      tokenBuffer3.toString();
      tokenBuffer4.writeEndArray();
      tokenBuffer2.writeNumber((BigDecimal) null);
      tokenBuffer_Parser0.getCurrentLocation();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, true);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationFeature0, false);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectMapper objectMapper4 = objectMapper3.setNodeFactory(jsonNodeFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper4);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)85;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeUTF8String(byteArray0, (byte) (-76), (byte)11);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(922, jsonToken0, (Object) null, (Object) jsonToken0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      Long long0 = new Long(650L);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.getTextCharacters();
      ShortNode.valueOf((short)909);
      ShortNode.valueOf((short)909);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KcZ);rXK*LNm06");
      ShortNode shortNode0 = ShortNode.valueOf((short) (-3400));
      shortNode0.bigIntegerValue();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)118;
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.writeNumber((String) null);
      tokenBuffer0.writeNumber((long) (byte) (-121));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Short short0 = new Short((short) (-990));
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      tokenBuffer_Parser0.getEmbeddedObject();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.util.TokenBuffer$1");
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.toString();
      tokenBuffer0.writeEndArray();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1, false);
      tokenBuffer1.serialize(tokenBuffer0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      tokenBuffer0.writeNumber("com.fasterxml.jackson.databind.util.TokenBuffer$1");
      BigInteger bigInteger1 = arrayNode0.bigIntegerValue();
      tokenBuffer0.writeNumber(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      Short short0 = new Short((short) (-2936));
      tokenBuffer0.isClosed();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      tokenBuffer_Segment0.append((int) (short) (-2936), jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.getValueAsDouble();
      JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
      tokenBuffer_Parser0.canReadTypeId();
      tokenBuffer0.writeEndObject();
      System.setCurrentTimeMillis((short) (-2936));
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setLocale((Locale) null);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      ObjectMapper objectMapper4 = objectMapper0.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      simpleFilterProvider0.addFilter((String) null, (SimpleBeanPropertyFilter) null);
      HashSet<String> hashSet0 = new HashSet<String>();
      SimpleBeanPropertyFilter.FilterExceptFilter simpleBeanPropertyFilter_FilterExceptFilter0 = new SimpleBeanPropertyFilter.FilterExceptFilter(hashSet0);
      SimpleFilterProvider simpleFilterProvider1 = simpleFilterProvider0.addFilter("com.fasterxml.jackson.databind.SerializationFeature", (PropertyFilter) simpleBeanPropertyFilter_FilterExceptFilter0);
      SimpleFilterProvider simpleFilterProvider2 = simpleFilterProvider1.setFailOnUnknownId(true);
      SimpleFilterProvider simpleFilterProvider3 = simpleFilterProvider2.addFilter("com.fasterxml.jackson.databind.SerializationFeature", (SimpleBeanPropertyFilter) simpleBeanPropertyFilter_FilterExceptFilter0);
      objectMapper2.setFilters(simpleFilterProvider3);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, true, true);
      tokenBuffer_Parser0.getTextLength();
      tokenBuffer_Parser0.getParsingContext();
      tokenBuffer_Parser0.overrideCurrentName("");
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper4);
      tokenBuffer0.writeString("");
      tokenBuffer_Segment0.rawType(0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      System.setCurrentTimeMillis((-483L));
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      ArrayNode arrayNode0 = objectNode0.withArray("JSON");
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) bufferedOutputStream0);
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(922, jsonToken0, (Object) null, (Object) jsonToken0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      Long long0 = new Long(650L);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.getTextCharacters();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.close();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      tokenBuffer0.writeNumber(0.0);
      tokenBuffer0.writeString("com.fasterxml.jackson.databind.ObjectReader");
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[objectId=");
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.databind.ObjectReader");
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper0);
      tokenBuffer3.writeString((SerializableString) serializedString0);
      tokenBuffer0.toString();
      tokenBuffer3.writeEndArray();
      tokenBuffer2.writeNumber((BigDecimal) null);
      tokenBuffer_Parser0.getCurrentLocation();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        tokenBuffer3.deserialize(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(treeMap0);
      ObjectMapper.findModules();
      objectMapper0.reader((InjectableValues) injectableValues_Std0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z #xJ.>N}J <hzx4g");
      SerializedString serializedString0 = new SerializedString("z #xJ.>N}J <hzx4g");
      serializedString0.asQuotedChars();
      tokenBuffer0.writeString((SerializableString) serializedString0);
      tokenBuffer0.toString();
      tokenBuffer0.writeEndArray();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper3, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2);
      tokenBuffer0.writeNumber((double) 16);
      tokenBuffer0.writeString("Called operation not supported for TokenBuffer");
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ") not compatible with managed type (");
      tokenBuffer2.toString();
      tokenBuffer0.writeEndArray();
      // Undeclared exception!
      tokenBuffer2.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      tokenBuffer_Segment0._tokenTypes = (-2853L);
      objectMapper0.enable(serializationFeature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeNumber((double) 16);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      short short0 = (short)1847;
      ShortNode shortNode0 = ShortNode.valueOf((short)1847);
      BigInteger bigInteger0 = shortNode0.bigIntegerValue();
      tokenBuffer1.writeNumber(bigInteger0);
      JsonGenerator jsonGenerator0 = null;
      // Undeclared exception!
      try { 
        tokenBuffer0.serialize((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper2, true, true);
      tokenBuffer_Parser0.close();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeNumber((double) 16);
      tokenBuffer0.writeString("");
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer1.append(tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, true, true);
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000032; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper3, false, false);
      tokenBuffer_Parser0.close();
      tokenBuffer_Parser0.close();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2);
      ChronoField chronoField0 = ChronoField.NANO_OF_DAY;
      ObjectReader objectReader0 = objectMapper3.readerForUpdating(chronoField0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectReader0, false);
      tokenBuffer1.writeNumber((double) 16);
      tokenBuffer1.writeString("pn&9_\"Da!seI");
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectReader0, false);
      TokenBuffer tokenBuffer4 = tokenBuffer1.append(tokenBuffer3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Internal error: should never end up through this code path");
      SerializedString serializedString0 = new SerializedString("l");
      tokenBuffer0.writeString((SerializableString) serializedString0);
      tokenBuffer2.toString();
      tokenBuffer4.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Byte.valueOf((byte)48);
      Short short0 = new Short((short)91);
      Float float0 = new Float((float) 1157);
      tokenBuffer_Segment0.appendRaw(1157, 63, (Object) float0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.getTypeId();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0._appendRaw(4, (Object) null);
      tokenBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      objectMapper0.enable(serializationFeature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.pair((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      tokenBuffer0.writeNumber(0.0);
      tokenBuffer0.writeString((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U)uLJ.mhz8g.F)");
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.databind.ObjectReader");
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1);
      tokenBuffer1.writeString((SerializableString) serializedString0);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      tokenBuffer2.writeEndArray();
      tokenBuffer2.writeNumber((BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setLocale((Locale) null);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      objectMapper0.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, true, true);
      tokenBuffer_Parser0.getTextLength();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      SerializedString serializedString0 = new SerializedString("!}^W&");
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper3, false, false);
      tokenBuffer_Parser0.close();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2);
      tokenBuffer_Parser0.nextIntValue((-1905));
      tokenBuffer0.writeNumber((double) 16);
      tokenBuffer0.writeString("Called operation not supported for TokenBuffer");
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.asQuotedChars();
      tokenBuffer0.writeString((SerializableString) serializedString0);
      tokenBuffer2.toString();
      tokenBuffer0.writeEndArray();
      tokenBuffer0.serialize(tokenBuffer1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer2.writeNumber(bigInteger0);
      tokenBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      Short short0 = new Short((short) (-2936));
      tokenBuffer0._appendRaw(1193, short0);
      tokenBuffer0.isClosed();
      tokenBuffer0.writeNumber((double) 1193);
      LongNode longNode0 = new LongNode(1193);
      tokenBuffer0.writeTree(longNode0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Byte.valueOf((byte)48);
      Short short0 = new Short((short)91);
      Float float0 = new Float((float) 1157);
      tokenBuffer_Segment0.appendRaw(1157, 63, (Object) float0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.getTypeId();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0._appendRaw((-2685), (Object) null);
      // Undeclared exception!
      try { 
        tokenBuffer0.serialize((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setLocale((Locale) null);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Short short0 = new Short((short)10);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      tokenBuffer_Parser0.getEmbeddedObject();
      Class<BigDecimal> class0 = BigDecimal.class;
      objectMapper1.convertValue((Object) null, class0);
      objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(treeMap0);
      objectMapper2.reader((InjectableValues) injectableValues_Std0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, false);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper3, false, false);
      try { 
        tokenBuffer_Parser0.getShortValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000032; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper3, false, false);
      tokenBuffer_Parser0.close();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2);
      ObjectReader objectReader0 = objectMapper1.reader((JsonNodeFactory) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectReader0);
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "oB%:=dpX<B");
      Double double0 = new Double(16);
      tokenBuffer_Segment0.appendRaw(10, 5, (Object) double0, (Object) objectReader0, (Object) objectReader0);
      SerializedString serializedString0 = new SerializedString("");
      tokenBuffer0.writeString((SerializableString) serializedString0);
      tokenBuffer2.toString();
      tokenBuffer0.writeEndArray();
      tokenBuffer_Parser0.peekNextToken();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Byte.valueOf((byte)48);
      Short short0 = new Short((short)91);
      Float float0 = new Float((float) 1157);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(1157, 63, (Object) float0);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.getOutputTarget();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      tokenBuffer_Segment0.appendRaw(838, 962, (Object) null, (Object) null, (Object) bigDecimal0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.getTypeId();
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer1._appendRaw(661, tokenBuffer_Segment1);
      tokenBuffer1.toString();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setLocale((Locale) null);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      objectMapper0.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, true, true);
      tokenBuffer_Parser0.getTextLength();
      tokenBuffer_Parser0.peekNextToken();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeNumber((double) 16);
      tokenBuffer0.writeString("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SerializedString serializedString0 = new SerializedString("Called operation not supported for TokenBuffer");
      serializedString0.asQuotedChars();
      tokenBuffer0.toString();
      tokenBuffer0.writeStartArray();
      tokenBuffer0.writeEndArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer0.writeNumber(bigInteger0);
      tokenBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Byte.valueOf((byte)46);
      Short short0 = new Short((byte) (-123));
      Float float0 = new Float((float) (byte)46);
      Byte byte0 = new Byte((byte)48);
      tokenBuffer_Segment0.appendRaw(65534, (int) (byte) (-123), (Object) byte0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      tokenBuffer_Parser0.getTypeId();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0._appendRaw(100, (Object) null);
      tokenBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Overflow: numeric alue ");
      objectNode0.put("Overflow: numeric alue ", "");
      Long long0 = new Long(650L);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte) (-83);
      tokenBuffer0.writeBinary(byteArray0);
      tokenBuffer0.writeEndArray();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonGenerator jsonGenerator0 = tokenBuffer0.disable(jsonGenerator_Feature0);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, true);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, true, true);
      tokenBuffer_Parser0.getEmbeddedObject();
      Double double0 = new Double(0.0);
      Class<BigDecimal> class0 = BigDecimal.class;
      objectMapper0.convertValue((Object) double0, class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(treeMap0);
      objectMapper1.reader((InjectableValues) injectableValues_Std0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      tokenBuffer0.serialize(tokenBuffer1);
      tokenBuffer_Parser0.getText();
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setLocale((Locale) null);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      Float float0 = new Float(0.0);
      tokenBuffer_Segment0.append(9, jsonToken0, (Object) null, (Object) float0, (Object) objectMapper1);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      objectMapper0.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper2);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        jsonFactory3.createParser((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
}
