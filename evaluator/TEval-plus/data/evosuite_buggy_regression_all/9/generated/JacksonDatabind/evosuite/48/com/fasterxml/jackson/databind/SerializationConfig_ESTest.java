/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:49:34 GMT 2023
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.text.DateFormat;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SerializationConfig_ESTest extends SerializationConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      FilterProvider filterProvider0 = serializationConfig0.getFilterProvider();
      assertNull(filterProvider0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      SerializationConfig serializationConfig1 = serializationConfig0.with((ClassIntrospector) basicClassIntrospector0);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      SerializationConfig serializationConfig1 = serializationConfig0.withSerializationInclusion(jsonInclude_Include0);
      serializationConfig1.getSerializationInclusion();
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      Class<Integer> class0 = Integer.class;
      JsonInclude.Value jsonInclude_Value0 = serializationConfig0.getDefaultPropertyInclusion(class0);
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      try { 
        objectMapper0.writeValueAsString(simpleObjectIdResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class com.fasterxml.jackson.annotation.SimpleObjectIdResolver and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      SerializationConfig serializationConfig1 = serializationConfig0.with(propertyNamingStrategy0);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      Class<ObjectMapper.DefaultTypeResolverBuilder> class0 = ObjectMapper.DefaultTypeResolverBuilder.class;
      JsonFormat.Value jsonFormat_Value0 = serializationConfig0.getDefaultPropertyFormat(class0);
      assertEquals(JsonFormat.Shape.ANY, jsonFormat_Value0.getShape());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.with((Base64Variant) null);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      // Undeclared exception!
      try { 
        serializationConfig0.with((TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.BaseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        serializationConfig0.introspectDirectClassAnnotations(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      Locale locale0 = Locale.FRANCE;
      SerializationConfig serializationConfig1 = serializationConfig0.with(locale0);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      String string0 = serializationConfig0.toString();
      assertEquals("[SerializationConfig: flags=0x2989bc]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
      int int0 = serializationConfig0.getSerializationFeatures();
      assertEquals(2722236, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, (SimpleMixInResolver) null, rootNameLookup0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectWriter objectWriter0 = objectMapper0.writerWithDefaultPrettyPrinter();
      assertFalse(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, (SimpleMixInResolver) null);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.with((HandlerInstantiator) null);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.withAttributes((Map<?, ?>) null);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      JsonInclude.Value jsonInclude_Value0 = serializationConfig0.getDefaultPropertyInclusion();
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      VisibilityChecker<?> visibilityChecker0 = serializationConfig0.getDefaultVisibilityChecker();
      SerializationConfig serializationConfig1 = serializationConfig0.with(visibilityChecker0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector)ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
      SerializationConfig serializationConfig1 = serializationConfig0.withAppendedAnnotationIntrospector(jacksonAnnotationIntrospector0);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      SerializationConfig serializationConfig1 = serializationConfig0.withInsertedAnnotationIntrospector(annotationIntrospector1);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector)ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
      SerializationConfig serializationConfig1 = serializationConfig0.with((AnnotationIntrospector) jacksonAnnotationIntrospector0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      assertEquals(0, objectMapper1.mixInCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      SerializationConfig serializationConfig1 = serializationConfig0.with(typeFactory0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      SerializationConfig serializationConfig1 = serializationConfig0.withVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      mapperFeatureArray0[2] = mapperFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeatureArray0[0];
      MapperFeature mapperFeature1 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
      mapperFeatureArray0[2] = mapperFeature1;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeatureArray0);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[0];
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
      MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      mapperFeatureArray0[2] = mapperFeatureArray0[0];
      mapperFeatureArray0[3] = mapperFeatureArray0[0];
      mapperFeatureArray0[4] = mapperFeatureArray0[0];
      SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig1.canOverrideAccessModifiers());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      serializationConfig1.getDefaultVisibilityChecker();
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, true);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
      SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      SerializationConfig serializationConfig1 = serializationConfig0.with(dateFormat0);
      assertEquals(2721980, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.with((DateFormat) null);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      SerializationConfig serializationConfig2 = serializationConfig1.withRootName((PropertyName) null);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig2, serializationConfig1);
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName((PropertyName) null);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      SerializationConfig serializationConfig2 = serializationConfig1.withRootName(propertyName0);
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
      assertNotSame(serializationConfig2, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.with((SubtypeResolver) null);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.with((SubtypeResolver) stdSubtypeResolver0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      Class<NamedType> class0 = NamedType.class;
      SerializationConfig serializationConfig1 = serializationConfig0.withView(class0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.withView((Class<?>) null);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.withoutAttribute(rootNameLookup0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0, jsonEncoding0);
      serializationConfig1.initialize(jsonGenerator0);
      serializationConfig1.initialize(jsonGenerator0);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722238, serializationConfig1.getSerializationFeatures());
      assertEquals(31, jsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0, serializationFeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0, serializationFeatureArray0);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2738620, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(serializationFeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeatureArray0[0];
      serializationFeatureArray0[2] = serializationFeatureArray0[1];
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(serializationFeatureArray0);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722748, serializationConfig1.getSerializationFeatures());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      SerializationConfig serializationConfig1 = serializationConfig0.without(serializationFeature0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(serializationFeature0, serializationFeatureArray0);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722204, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(serializationFeature0, serializationFeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(serializationFeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      serializationFeatureArray0[1] = serializationFeature1;
      serializationFeatureArray0[2] = serializationFeatureArray0[1];
      SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(serializationFeatureArray0);
      assertEquals(625084, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
      SerializationConfig serializationConfig2 = serializationConfig1.with(jsonGenerator_Feature0);
      assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
      assertSame(serializationConfig2, serializationConfig1);
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
      SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
      assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
      assertNotSame(serializationConfig2, serializationConfig1);
      assertTrue(serializationConfig2.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
      SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
      assertTrue(serializationConfig2.canOverrideAccessModifiers());
      assertNotSame(serializationConfig2, serializationConfig0);
      assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
      assertSame(serializationConfig2, serializationConfig1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_FeatureArray0[0];
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
      SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(jsonGenerator_FeatureArray0);
      assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig2, serializationConfig1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(jsonGenerator_FeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn((-1192), 2220).when(formatFeature0).getMask();
      SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
      // Undeclared exception!
      try { 
        serializationConfig1.initialize((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 2).when(formatFeature0).getMask();
      SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn((-4503), (-4503), (-4503), (-4503)).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
      SerializationConfig serializationConfig2 = serializationConfig1.without(formatFeature0);
      assertNotSame(serializationConfig2, serializationConfig1);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
      assertTrue(serializationConfig2.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      SerializationConfig serializationConfig1 = serializationConfig0.without(formatFeature0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn((-65281), (-65281)).when(formatFeature0).getMask();
      SerializationConfig serializationConfig1 = serializationConfig0.without(formatFeature0);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn((-1192), 2220, (-1802)).when(formatFeature0).getMask();
      FormatFeature[] formatFeatureArray0 = new FormatFeature[3];
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(formatFeatureArray0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, 0, 0, 0).when(formatFeature0).getMask();
      FormatFeature[] formatFeatureArray0 = new FormatFeature[4];
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      formatFeatureArray0[3] = formatFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
      SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(formatFeatureArray0);
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
      assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
      assertSame(serializationConfig2, serializationConfig1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
      SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(formatFeatureArray0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      SerializationConfig serializationConfig1 = serializationConfig0.withFilters(simpleFilterProvider0);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.withFilters((FilterProvider) null);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonInclude.Value jsonInclude_Value0 = BeanProperty.EMPTY_INCLUDE;
      SerializationConfig serializationConfig1 = serializationConfig0.withPropertyInclusion(jsonInclude_Value0);
      assertSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = serializationConfig0.withDefaultPrettyPrinter((PrettyPrinter) null);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, (PrettyPrinter) null);
      SerializationConfig serializationConfig2 = serializationConfig1.withDefaultPrettyPrinter((PrettyPrinter) null);
      assertSame(serializationConfig2, serializationConfig1);
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0, jsonEncoding0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig1, minimalPrettyPrinter0);
      serializationConfig2.initialize(jsonGenerator0);
      assertEquals(31, jsonGenerator0.getFeatureMask());
      assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
      assertEquals(2722238, serializationConfig2.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      serializationConfig1.initialize(jsonGenerator0);
      assertEquals(543, jsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0, jsonEncoding0);
      serializationConfig1.initialize(jsonGenerator0);
      assertEquals(95, jsonGenerator0.getFeatureMask());
      assertEquals(2984380, serializationConfig1.getSerializationFeatures());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      JsonInclude.Include jsonInclude_Include0 = serializationConfig0.getSerializationInclusion();
      assertEquals(JsonInclude.Include.ALWAYS, jsonInclude_Include0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      boolean boolean0 = serializationConfig0.useRootWrapping();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      boolean boolean0 = serializationConfig1.useRootWrapping();
      assertFalse(boolean0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.withSimpleName("); serialization type ");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName1);
      boolean boolean0 = serializationConfig1.useRootWrapping();
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      boolean boolean0 = serializationConfig0.isEnabled(jsonGenerator_Feature0, jsonFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(jsonGenerator_FeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      boolean boolean0 = serializationConfig1.isEnabled(jsonGenerator_Feature0, jsonFactory0);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotSame(serializationConfig1, serializationConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
      JsonFactory jsonFactory0 = new JsonFactory();
      boolean boolean0 = serializationConfig1.isEnabled(jsonGenerator_Feature0, jsonFactory0);
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(boolean0);
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
      boolean boolean0 = serializationConfig0.hasSerializationFeatures(2368);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      boolean boolean0 = serializationConfig0.hasSerializationFeatures((byte)0);
      assertTrue(boolean0);
  }
}
