/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:46:58 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReferenceType_ESTest extends ReferenceType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, class0, class0, true);
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, referenceType0, referenceType0);
      Class<Integer> class1 = Integer.class;
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class1, (JavaType) referenceType0, (Object) mapLikeType0, (Object) referenceType0);
      boolean boolean0 = referenceType1.equals(referenceType0);
      assertFalse(referenceType1.useStaticType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      Object object0 = new Object();
      ArrayType arrayType0 = new ArrayType(simpleType0, object0, object0, object0, false);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) arrayType0, object0, object0);
      String string0 = referenceType0.getGenericSignature();
      assertFalse(referenceType0.useStaticType());
      assertEquals("Ljava/lang/Object<[Ljava/lang/Object;;", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = new SimpleType(class0);
      ArrayType arrayType0 = new ArrayType(simpleType0, simpleType0, (Object) null, class0, false);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) arrayType0, (Object) null, (Object) null);
      referenceType0.getReferencedType();
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<String> class0 = String.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<Object> class1 = Object.class;
      JavaType javaType0 = typeFactory0._constructType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class1, javaType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) collectionLikeType0, (Object) class0, (Object) typeFactory0);
      boolean boolean0 = referenceType0.isReferenceType();
      assertFalse(referenceType0.useStaticType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Integer integer0 = new Integer(0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, javaType0, (Object) class0, (Object) integer0);
      String string0 = referenceType0.toString();
      assertFalse(referenceType0.useStaticType());
      assertEquals("[reference type, class java.lang.String<java.lang.Object<[simple type, class java.lang.Object]>]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, class0, class0, true);
      String string0 = referenceType0.getErasedSignature();
      assertEquals("Ljava/lang/Object;", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<String> class0 = String.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<Object> class1 = Object.class;
      JavaType javaType0 = typeFactory0._constructType(class0, (TypeBindings) null);
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class1, javaType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) collectionLikeType0, (Object) class0, (Object) typeFactory0);
      referenceType0.getParameterSource();
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, (Object) null, true);
      JavaType javaType0 = referenceType0._narrow(class0);
      assertEquals(1, javaType0.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, class0, class0, true);
      int int0 = referenceType0.containedTypeCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, class0, class0, true);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(class0);
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, class0, class0, true);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler((Object) null);
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, class0, class0, true);
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, referenceType0, referenceType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(mapLikeType0);
      assertNotSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (JavaType) simpleType0, (Object) class1, (Object) simpleType0);
      ReferenceType referenceType1 = new ReferenceType(class0, referenceType0, class1, simpleType0, false);
      ReferenceType referenceType2 = referenceType1.withContentTypeHandler(simpleType0);
      ReferenceType referenceType3 = referenceType2.withValueHandler(class1);
      assertSame(referenceType3, referenceType2);
      assertNotSame(referenceType3, referenceType1);
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Integer integer0 = new Integer(0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, javaType0, (Object) class0, (Object) integer0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(referenceType0);
      assertFalse(referenceType1.useStaticType());
      assertNotSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Class<String> class1 = String.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, javaType0, (Object) class0, (Object) class1);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      assertFalse(referenceType1.useStaticType());
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, class0, class0, true);
      Object object0 = new Object();
      Class<String> class1 = String.class;
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class1, (JavaType) referenceType0, (Object) referenceType0, object0);
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      assertTrue(referenceType2.useStaticType());
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class1 = Object.class;
      JavaType javaType0 = typeFactory0.uncheckedSimpleType(class1);
      ReferenceType referenceType0 = new ReferenceType(class0, javaType0, javaType0, class1, true);
      JavaType javaType1 = referenceType0.containedType(1);
      assertNull(javaType1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Integer integer0 = new Integer(0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, javaType0, (Object) class0, (Object) integer0);
      JavaType javaType1 = referenceType0.containedTypeOrUnknown(0);
      assertFalse(referenceType0.useStaticType());
      assertSame(javaType1, javaType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class1 = Object.class;
      JavaType javaType0 = typeFactory0.uncheckedSimpleType(class1);
      ReferenceType referenceType0 = new ReferenceType(class0, javaType0, javaType0, class1, true);
      String string0 = referenceType0.containedTypeName(3337);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, class0, class0, true);
      String string0 = referenceType0.containedTypeName(0);
      assertNotNull(string0);
      assertEquals("T", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class1 = Object.class;
      JavaType javaType0 = typeFactory0.uncheckedSimpleType(class1);
      ReferenceType referenceType0 = new ReferenceType(class0, javaType0, javaType0, class1, true);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      boolean boolean0 = referenceType0.equals(serializationFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, class0, class0, true);
      boolean boolean0 = referenceType0.equals(referenceType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class1 = Object.class;
      JavaType javaType0 = typeFactory0.uncheckedSimpleType(class1);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, javaType0, (Object) class1, (Object) typeFactory0);
      boolean boolean0 = referenceType0.equals((Object) null);
      assertFalse(referenceType0.useStaticType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, class0, class0, true);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler("[simple type, class long]");
      boolean boolean0 = referenceType1.equals(referenceType0);
      assertTrue(boolean0);
      assertNotSame(referenceType1, referenceType0);
  }
}
