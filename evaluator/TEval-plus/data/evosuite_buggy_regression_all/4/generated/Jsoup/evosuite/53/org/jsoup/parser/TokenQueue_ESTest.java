/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:54:26 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("=7J");
      tokenQueue0.chompTo("=7J");
      assertEquals('\u0000', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("   a      ");
      boolean boolean0 = tokenQueue0.matchesCS("   a      ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("y&izVpvh");
      // Undeclared exception!
      try { 
        tokenQueue0.addFirst((Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("5");
      String string0 = tokenQueue0.toString();
      assertEquals("5", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("=pe[k h");
      tokenQueue0.addFirst("=pe[k h");
      assertEquals("=pe[k h=pe[k h", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("     ");
      tokenQueue0.chompBalanced(' ', ' ');
      // Undeclared exception!
      try { 
        tokenQueue0.consume("     ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("          ");
      tokenQueue0.consumeTo("djYTni");
      char char0 = tokenQueue0.peek();
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("          ");
      char char0 = tokenQueue0.peek();
      assertEquals(' ', char0);
      assertEquals("          ", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("          ");
      String[] stringArray0 = new String[1];
      tokenQueue0.chompBalanced('S', 'S');
      stringArray0[0] = "          ";
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("=pe[u h");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=pe[u h";
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals('=', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("1ked_)}={NBFkq3");
      tokenQueue0.consumeTagName();
      assertEquals(')', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("n:Ma;{");
      tokenQueue0.chompToIgnoreCase("n:Ma;{");
      assertEquals("", tokenQueue0.toString());
      
      boolean boolean0 = tokenQueue0.matchesAny((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<-cXriCF}dW38bOi{\"q");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
      assertEquals('<', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("          ");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
      assertEquals("          ", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<Q-cXriCF}dW38bOi{\"q");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("          ");
      tokenQueue0.consume("          ");
      boolean boolean0 = tokenQueue0.matchChomp("          ");
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("      2    ");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals('2', tokenQueue0.peek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("n:Ma;{");
      assertFalse(tokenQueue0.isEmpty());
      
      tokenQueue0.chompToIgnoreCase("n:Ma;{");
      String string0 = tokenQueue0.consumeWord();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("y&izVpvh");
      assertFalse(tokenQueue0.isEmpty());
      
      tokenQueue0.matchChomp("y&izVpvh");
      tokenQueue0.advance();
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("=J");
      tokenQueue0.advance();
      assertEquals('J', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("=J");
      tokenQueue0.chompToIgnoreCase("=jcxricf}");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("T%/LrcJ1q L;dw_[Q");
      tokenQueue0.consumeToIgnoreCase("Queue did not match expected sequence");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("width must be > 0");
      tokenQueue0.chompToIgnoreCase("0I5(RbWn-Q,");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("G ^Jc Q  ");
      tokenQueue0.chompBalanced('G', 'G');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("T%/LqcJ1q ;dw_[Q");
      tokenQueue0.chompBalanced('2', 'T');
      assertEquals("%/LqcJ1q ;dw_[Q", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = TokenQueue.unescape("~PAP|\\'cT}");
      assertEquals("~PAP|'cT}", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("5k]iyw+=iuknes!r9");
      tokenQueue0.consumeWord();
      assertEquals(']', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("5");
      tokenQueue0.consumeTagName();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String string0 = tokenQueue0.consumeElementSelector();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("C5-.iim");
      tokenQueue0.consumeElementSelector();
      assertEquals(".iim", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("n:Ma;{");
      assertFalse(tokenQueue0.isEmpty());
      
      tokenQueue0.chompToIgnoreCase("n:Ma;{");
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("h5o-bf+hry|4");
      tokenQueue0.consumeCssIdentifier();
      assertEquals('+', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("n:Ma;{");
      assertEquals('n', tokenQueue0.peek());
      
      tokenQueue0.chompToIgnoreCase("n:Ma;{");
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("h5o-bf+hry|4");
      tokenQueue0.consumeAttributeKey();
      assertEquals("+hry|4", tokenQueue0.toString());
  }
}
