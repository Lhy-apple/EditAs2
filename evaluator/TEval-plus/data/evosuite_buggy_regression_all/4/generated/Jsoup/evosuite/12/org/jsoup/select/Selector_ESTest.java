/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:51:04 GMT 2023
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.jsoup.select.Selector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Selector_ESTest extends Selector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("l+[%#6P)LyyU#K");
      Elements elements0 = Selector.select("l+[%#6P)LyyU#K", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell(":eq(");
      // Undeclared exception!
      try { 
        Selector.select(":eq(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document(":has(el) subselect must not be empty");
      Elements elements0 = Selector.select(":has(el) subselect must not be empty", (Element) document0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document(":not(selector) subselect must not be empty");
      Elements elements0 = Selector.select(":not(selector) subselect must not be empty", (Element) document0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("N.]B@LL");
      // Undeclared exception!
      try { 
        Selector.select("N.]B@LL", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell(":lt(");
      // Undeclared exception!
      try { 
        Selector.select(":lt(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document(":gt(");
      // Undeclared exception!
      try { 
        Selector.select(":gt(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("xwcYz9,C#N");
      Elements elements0 = Selector.select("xwcYz9,C#N", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("3O>:8hd ^w`iP)Y?");
      Elements elements0 = Selector.select("3O>:8hd ^w`iP)Y?", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document(",");
      // Undeclared exception!
      try { 
        Selector.select(",", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unknown combinator: ,
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document(":contains(text) query must not be empty");
      Elements elements0 = Selector.select(":contains(text) query must not be empty", (Element) document0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell(":containsOwn(");
      // Undeclared exception!
      try { 
        Selector.select(":containsOwn(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // :contains(text) query must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document(":matches(regex) query must not be empty");
      Elements elements0 = Selector.select(":matches(regex) query must not be empty", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell(":matchesOwn(");
      // Undeclared exception!
      try { 
        Selector.select(":matchesOwn(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // :matches(regex) query must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("c4s|");
      Elements elements0 = Selector.select("c4s|", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("^V&");
      Elements elements0 = Selector.select("Y[vWm$=KbDnH<K\"F)di", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("[^");
      // Undeclared exception!
      try { 
        Selector.select("[^", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("[e{0{b' by=)>[&U");
      Elements elements0 = Selector.select("[e{0{b' by=)>[&U", (Element) document0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("[OL'*=u#D");
      Elements elements0 = Selector.select("[OL'*=u#D", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("k+O~#8TJ*4");
      document0.appendElement("O");
      Elements elements0 = Selector.select("k+O~#8TJ*4", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("+O~#_zf{<TJ@4");
      Element element0 = document0.appendElement("O");
      // Undeclared exception!
      try { 
        Selector.select("+O~#_zf{<TJ@4", element0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '#_zf{<TJ@4': unexpected token at '{<TJ@4'
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("+O~#_zf{<TJ@4");
      Element element0 = document0.appendElement("O");
      // Undeclared exception!
      try { 
        Selector.select("+O~#_zf{<TJ@4", element0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '#_zf{<TJ@4': unexpected token at '{<TJ@4'
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("T8a,PkN6ZsIV[");
      Elements elements0 = document0.getElementsByIndexLessThan(126);
      Elements elements1 = Selector.filterOut(elements0, elements0);
      assertTrue(elements1.isEmpty());
  }
}
