/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:53:48 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("$ZD~i$w:vJ;,b,;KGmu");
      Element element0 = document0.getElementById("=:!WS>z/tN(px%0-");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("_oON!3Ito3@B$");
      Element element0 = document0.append("RXz<Jm>@BqZg");
      String string0 = element0.html();
      assertEquals(2, document0.childNodeSize());
      assertEquals("RXz\n<jm>\n @BqZg\n</jm>", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("ygm&FyVmH>~1\"");
      Document document1 = (Document)document0.appendText("ygm&FyVmH>~1\"");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("4%s+wLAmW.o`iY");
      Elements elements0 = document0.getElementsMatchingText("4%s+wLAmW.o`iY");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("frame");
      Element element0 = new Element(tag0, "frame");
      Element element1 = element0.append("frame");
      element1.appendChild(element0);
      element0.getElementsContainingText("frame");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("org.jso^p.no[es.Element");
      // Undeclared exception!
      try { 
        document0.child((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("y_`cpjmenx80adtb'");
      Element element0 = document0.tagName("y_`cpjmenx80adtb'");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("DaLa");
      Element element0 = document0.appendElement("textarea");
      element0.val("textarea");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("$Z~i$w:vJ,b,;KGmu");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("_oON!13Ito3@B$");
      document0.addClass("_oON!13Ito3@B$");
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("YOhVq");
      // Undeclared exception!
      try { 
        document0.html("YOhVq");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("_oON!3Ito3@B$");
      Elements elements0 = document0.getElementsByAttributeValue("_oON!3Ito3@B$", "cite");
      // Undeclared exception!
      try { 
        document0.insertChildren((-3397), elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("_oON!3Io3@B$");
      Elements elements0 = document0.getElementsByAttributeValueStarting("_oON!3Io3@B$", "_oON!3Io3@B$");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("_oON!13Ito3@B$");
      Element element0 = document0.prepend("[%s=%s]");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("y_`cpjmenx80adtb'");
      Elements elements0 = document0.getElementsMatchingOwnText("y_`cpjmenx80adtb'");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("n5");
      // Undeclared exception!
      try { 
        document0.after("n5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("$ZD~i$w:vJ;,b,;KGmu");
      Elements elements0 = document0.getElementsByIndexLessThan((-1484));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("ScriptDataLessthanSign");
      Elements elements0 = document0.getElementsByAttributeStarting(":nth-child(%d)");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("$ZD~i-$w:vJ;,b,;KGmu");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("DoctypeSystemIdentifier_singleQuoted");
      // Undeclared exception!
      try { 
        document0.wrap("p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("p7 8kbo+*0ot]%!/?.");
      Element element0 = document0.val("p7 8kbo+*0ot]%!/?.");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("'H=8%~ciPV~O=@GB");
      Elements elements0 = document0.getElementsByAttributeValueMatching("'H=8%~ciPV~O=@GB", "'H=8%~ciPV~O=@GB");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("'H=8%~ciPV~O=@GB");
      Elements elements0 = document0.getElementsByAttributeValueEnding("Dy7G-YxC{l", "Dy7G-YxC{l");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf(";/w4yw[tgr");
      FormElement formElement0 = new FormElement(tag0, "^s%", attributes0);
      Elements elements0 = formElement0.getElementsByClass("org.jsoup.select.Evaluator$IndexGreaterThan");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("Iw2J0tHMtL~Mt~=eZ+^");
      Elements elements0 = document0.getElementsByAttributeValueContaining("Iw2J0tHMtL~Mt~=eZ+^", "Iw2J0tHMtL~Mt~=eZ+^");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("_oON!3Ito3@B$");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("_6ON!3ott3@P$");
      Elements elements0 = document0.getElementsByAttributeValueNot("_6ON!3ott3@P$", "_6ON!3ott3@P$");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf(";/w4yw[tgr");
      FormElement formElement0 = new FormElement(tag0, "^s%", attributes0);
      String string0 = formElement0.toString();
      assertEquals("<;/w4yw[tgr></;/w4yw[tgr>", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("_oON!3Ito3@B$");
      Elements elements0 = document0.getElementsByAttribute("K9wZIN|xH<w+");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("_oON!3Ito3@B$");
      // Undeclared exception!
      try { 
        document0.before("_oON!3Ito3@B$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("_oON!3Io3@B$");
      Element element0 = document0.removeClass("_oON!3Io3@B$");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("_oON!3Ito3@B$");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("_oON!3Ito3@B$");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("_6ON!3ott3@P$");
      Elements elements0 = document0.getElementsByIndexGreaterThan(4);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("$ZD~i$w:vJ;,b,;KGmu");
      Element element0 = document0.appendElement("$ZD~i$w:vJ;,b,;KGmu");
      element0.prependChild(document0);
      // Undeclared exception!
      try { 
        document0.append("$zd~i$w:vj;,b,;kgmu.java.lang.String@0000000026 > #root");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Tag tag0 = Tag.valueOf("eX");
      Element element0 = new Element(tag0, "eX");
      element0.append("eX");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Tag tag0 = Tag.valueOf("eX");
      Element element0 = new Element(tag0, "eX");
      Element element1 = element0.appendChild(element0);
      List<TextNode> list0 = element1.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("_oON!3Ito3@B$");
      Element element0 = document0.appendChild(document0);
      List<DataNode> list0 = element0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Tag tag0 = Tag.valueOf("]1f?fip[;`9[di");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "$ZD~i$w:vJ;,b,;KGmu", attributes0);
      DataNode dataNode0 = DataNode.createFromEncoded("_3kRc4BPvcw&B+q", "]1f?fip[;`9[di");
      element0.appendChild(dataNode0);
      List<DataNode> list0 = element0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("$ZRi$w:vJ,b,;KGmu");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(5749, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("java.lang.String@0000000006");
      FormElement formElement0 = new FormElement(tag0, " ", attributes0);
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      Element element0 = formElement0.insertChildren((-1), linkedHashSet0);
      assertEquals("", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("_oON!3Ito3@B$");
      Element element0 = document0.appendElement("_oON!3Ito3@B$");
      Document document1 = new Document("_oON!3Ito3@B$");
      element0.prependChild(document1);
      String string0 = document1.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("_oON!3Ito3@B$");
      Elements elements0 = document0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("$Z~i$w:vJ,b,;KGmu");
      Element element0 = document0.appendChild(document0);
      element0.prependElement("insert position out of bounds.");
      document0.siblingElements();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("4%s+wLAmW.o`iY");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("6gjwtsszfs099i");
      Element element0 = document0.appendElement("yO");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      element0.addChildren(nodeArray0);
      document0.nextElementSibling();
      assertEquals(0, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("_oON!3Ito3@B$");
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("_oON!3Ito3@B$");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("_oON!3Ito3@B$");
      Element element0 = document0.appendChild(document0);
      document0.prependElement("x>$[ccc;Lpvjy1");
      element0.previousElementSibling();
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("$ZD~i$w:vJ;,b,;KGmu");
      Element element0 = document0.appendElement("$ZD~i$w:vJ;,b,;KGmu");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("$ZD~i$w:vJ;,b,;KGmu");
      Element element0 = document0.appendElement("$ZD~i$w:vJ;,b,;KGmu");
      element0.before((Node) document0);
      Document document1 = (Document)element0.firstElementSibling();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("Z!b%Vc)[");
      Element element0 = document0.appendElement("Z!b%Vc)[");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("_oON!3Io3@B$");
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("_oON!3Io3@B$");
      Element element0 = document0.appendElement("_oON!3Io3@B$");
      element0.replaceWith(document0);
      document0.prependChild(element0);
      Element element1 = element0.lastElementSibling();
      assertEquals("_oON!3Io3@B$", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("rv");
      Element element0 = document0.appendElement("rv");
      Element element1 = element0.appendChild(document0);
      element1.text("rv");
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("");
      DataNode dataNode0 = new DataNode("", "!");
      Element element0 = document0.appendChild(dataNode0);
      Elements elements0 = element0.getElementsContainingText("");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "rwX}LtW\"`l)m");
      Element element1 = element0.append("textarea");
      element0.appendChild(element1);
      // Undeclared exception!
      element0.getElementsContainingText("M");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("$ZRi$w:vJ,b,;KGmu");
      Element element0 = document0.append("$ZRi$w:vJ,b,;KGmu");
      String string0 = element0.ownText();
      assertEquals("$ZRi$w:vJ,b,;KGmu", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("T9?Up_$&");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.getElementsContainingOwnText("T9?Up_$&");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Tag tag0 = Tag.valueOf("jm");
      Element element0 = new Element(tag0, "java.lang.string@0000000i08");
      Comment comment0 = new Comment("jm", "java.lang.string@0000000i08");
      Element element1 = element0.appendChild(comment0);
      Elements elements0 = element1.getElementsContainingOwnText("jm");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "", "");
      boolean boolean0 = Element.preserveWhitespace(documentType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("txm");
      DataNode dataNode0 = new DataNode("VDZlEp$K|q=xnr(", ".8mhC#1p");
      document0.appendChild(dataNode0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("jW2Jl0:\"{");
      document0.appendElement("jW2Jl0:\"{");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("'H=8%~ciPV~O=@GB");
      Element element0 = document0.createElement("'H=8%~ciPV~O=@GB");
      element0.append("'H=8%~ciPV~O=@GB");
      document0.appendChild(element0);
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("ex");
      document0.append("ex");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("_oON!3Ito3@B$");
      DataNode dataNode0 = new DataNode("_oON!3Ito3@B$", "_oON!3Ito3@B$");
      document0.appendChild(dataNode0);
      String string0 = document0.data();
      assertEquals("_oON!3Ito3@B$", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("_oON!3Ito3@B$");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf(";/w4yw[tgr");
      Element element0 = new Element(tag0, "#4EaF:w@x q7lAGQ", attributes0);
      element0.toggleClass("org.jsoup.select.Evaluator$IndexGreaterThan");
      FormElement formElement0 = new FormElement(tag0, "^s%", attributes0);
      Elements elements0 = formElement0.getElementsByClass("org.jsoup.select.Evaluator$IndexGreaterThan");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Tag tag0 = Tag.valueOf("cWmZQ::uL43Y}(<h");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "$ZD~i$w:vJ;,b,;KGmu", attributes0);
      element0.toggleClass("cWmZQ::uL43Y}(<h");
      FormElement formElement0 = new FormElement(tag0, "cWmZQ::uL43Y}(<h", attributes0);
      Elements elements0 = formElement0.getElementsByClass("java.lang.String@0000000007");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Tag tag0 = Tag.valueOf("cWmZQ::uL43Y}(<h");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "$ZD~i$w:vJ;,b,;KGmu", attributes0);
      element0.setBaseUri("RcdataLessthanSign");
      Element element1 = element0.prependText("");
      element1.toggleClass("cWmZQ::uL43Y}(<h");
      FormElement formElement0 = new FormElement(tag0, "cWmZQ::uL43Y}(<h", attributes0);
      Elements elements0 = formElement0.getElementsByClass("java.lang.String@0000000007");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("VDZlEp$K|q=xnr(");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("$ZD~i$w:vJ;,b,;KGmu");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "$ZD~i$w:vJ;,b,;KGmu");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, 5, document_OutputSettings1);
      assertEquals("$ZD~i$w:vJ;,b,;KGmu<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("frame");
      Tag tag0 = Tag.valueOf("frame");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "frame", attributes0);
      document0.appendChild(formElement0);
      String string0 = document0.html();
      assertEquals("<frame>", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("VDZlEp$K|q=xnr(");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((StringBuilder) null, (-4230), document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("_oON!3Io3@B$");
      boolean boolean0 = document0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("6gjwtsszfs099i");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      Document document1 = document0.clone();
      assertTrue(document1.equals((Object)document0));
      
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
      assertFalse(document0.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("ygm&FyVmH>~1\"");
      Document document1 = document0.clone();
      boolean boolean0 = document1.equals(document0);
      assertTrue(boolean0);
  }
}
