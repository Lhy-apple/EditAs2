/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:57:27 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("width must be > 0", "width must be > 0");
      attributes0.put(attribute0);
      attribute0.setKey("width must be > 0");
      assertEquals("width must be > 0", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("KVt{5ynx&,2S#[XNPh", "KVt{5ynx&,2S#[XNPh");
      attribute0.isDataAttribute();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("declare", "declare");
      String string0 = attribute0.html();
      assertEquals("declare", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attribute attribute0 = new Attribute("~*+{C3=hfR+PuH", (String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute1.equals(attribute0);
      assertEquals("", attribute1.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attribute attribute0 = new Attribute("YEXs)?5qoaQRE=", "YEXs)?5qoaQRE=");
      String string0 = attribute0.toString();
      assertEquals("YEXs)?5qoaQRE==\"YEXs)?5qoaQRE=\"", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute attribute0 = new Attribute("Km'yfk{33", "        ", (Attributes) null);
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertEquals("Km'yfk{33", attribute0.getKey());
      assertFalse(boolean0);
      assertEquals("        ", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attribute attribute0 = new Attribute("YEXs)?5qoaQRE=", "YEXs)?5qoaQRE=");
      attribute0.setKey("YEXs)?5qoaQRE=");
      assertEquals("YEXs)?5qoaQRE=", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("declare", "declare", attributes0);
      attribute0.setKey("declare");
      assertEquals("declare", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("declare", "declare", attributes0);
      String string0 = attribute0.setValue("declare");
      assertEquals("declare", attribute0.getValue());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("8PClhl,PqWg;'T", "8PClhl,PqWg;'T");
      Attribute attribute0 = new Attribute("8PClhl,PqWg;'T", "8PClhl,PqWg;'T", attributes1);
      String string0 = attribute0.setValue("8PClhl,PqWg;'T");
      assertEquals("8PClhl,PqWg;'T", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-autofocus");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attribute attribute0 = new Attribute("A7[U&4%bck", "A7[U&4%bck");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      attribute0.html((Appendable) stringWriter0, document_OutputSettings1);
      assertEquals("A7[U&4%bck=\"A7[U&amp;4%bck\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attribute attribute0 = new Attribute("YEXs)?5qoaQRE=", (String) null);
      String string0 = attribute0.toString();
      assertEquals("YEXs)?5qoaQRE=", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-autofocus", "");
      String string0 = attribute0.toString();
      assertEquals("data-autofocus=\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attribute attribute0 = new Attribute("reversed", "reversed");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attribute attribute0 = new Attribute("p|haf0as,l{*+", "p|haf0as,l{*+");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attribute attribute0 = new Attribute("A7[&4%Gk", (String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("width must be > 0", "width must be > 0");
      boolean boolean0 = attribute0.equals(attributes0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attribute attribute0 = new Attribute("i>*p4bcej8?+io", "i>*p4bcej8?+io");
      boolean boolean0 = attribute0.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attribute attribute0 = new Attribute("YEXs)&?Hqo)NQRE=", "YEXs)&?Hqo)NQRE=");
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attribute attribute0 = new Attribute("e,WCsFd.Ypv~^~p", (String) null);
      Attribute attribute1 = Attribute.createFromEncoded("e,WCsFd.Ypv~^~p", "e,WCsFd.Ypv~^~p");
      boolean boolean0 = attribute0.equals(attribute1);
      assertFalse(boolean0);
      assertTrue(attribute1.equals((Object)attribute0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attribute attribute0 = new Attribute("A7[U&4%bck", "A7[U&4%bck");
      Attribute attribute1 = new Attribute("Nh-:P!gaB9", "A7[U&4%bck");
      boolean boolean0 = attribute1.equals(attribute0);
      assertEquals("A7[U&4%bck", attribute1.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute attribute0 = new Attribute("A7[U&4%bck", "A7[U&4%bck");
      Attribute attribute1 = new Attribute("A7[U&4%bck", "A7[U&4%bck");
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attribute attribute0 = new Attribute("a", (String) null);
      attribute0.hashCode();
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute attribute0 = new Attribute("YEXs)?5qoaQRE=", "YEXs)?5qoaQRE=");
      attribute0.hashCode();
  }
}
