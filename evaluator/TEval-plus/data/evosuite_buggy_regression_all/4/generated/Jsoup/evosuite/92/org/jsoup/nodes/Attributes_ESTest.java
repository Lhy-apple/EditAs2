/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:56:48 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attributes_ESTest extends Attributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Map<String, String> map0 = attributes0.dataset();
      boolean boolean0 = attributes0.equals(map0);
      assertEquals(0, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hashCode();
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      attributes0.equals(attributes1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("gf](-dG", "gf](-dG");
      attributes0.putIgnoreCase("<4d", "pa`9y(*K");
      attributes0.put("U6o#k,!MNCsJ~\"'Exj", "9Xu`IC'/c`p~");
      attributes0.addAll(attributes0);
      assertEquals(3, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("cz_uR];%$iU6Q]+]", "da'");
      attributes0.putIgnoreCase("da'", "p");
      Attributes attributes2 = attributes1.put(".Se/ZWPt]j89_bd_", "cz_uR];%$iU6Q]+]");
      Attributes attributes3 = attributes2.clone();
      attributes0.addAll(attributes3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("(", "(");
      attributes1.removeIgnoreCase("(");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("`I=u7ex)FHzfp<", true);
      attributes1.addAll(attributes0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("cz_uR];%$iU6Q]+]", "da'");
      attributes0.get("cz_uR];%$iU6Q]+]");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.get("|+I|W5<f]zHove/");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("VY^V7:", "WYIdK=!Wuz8hG_");
      attributes1.getIgnoreCase("VY^V7:");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.getIgnoreCase("attributeSingleValueCharsSorted");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("da'", "p");
      attributes0.putIgnoreCase("da'", "p");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.node<.Attributes$Dataset$DatasetIterator", "org.jsoup.node<.Attributes$Dataset$DatasetIterator");
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.normalize();
      attributes1.putIgnoreCase("org.jsoup.node<.Attributes$Dataset$DatasetIterator", " org.jsoup.node<.Attributes$Dataset$DatasetIterator=\"org.jsoup.node<.Attributes$Dataset$DatasetIterator\"");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("lEd6hi]~w=.,J", false);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("(", "(");
      attributes0.putIgnoreCase("pu", "(");
      attributes1.remove("(");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.removeIgnoreCase("Qf*29G");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hasKey("MErp");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("1[k\"#1@~&nx", "1[k\"#1@~&nx");
      attributes1.hasKey("1[k\"#1@~&nx");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hasKeyIgnoreCase("NJl9{yq+NJ0V");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("F", "F");
      attributes1.hasKeyIgnoreCase("F");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.addAll(attributes0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("(", "(");
      attributes1.asList();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes$Dataset", (String) null);
      attributes1.asList();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("cz_uR];%$iU6Q]+]", "da'");
      attributes0.toString();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("org.jsoup.nodes.Attributes$Dataset$EntrySet", true);
      attributes0.html();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("i7sbj*=GJ+", true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.jsoup.nodes.Attributes$Dataset$EntrySet");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      attributes1.html((Appendable) mockFileWriter0, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.equals(attributes0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", "+");
      Attributes attributes2 = new Attributes();
      attributes1.equals(attributes2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", "");
      Attributes attributes2 = attributes1.clone();
      attributes1.equals(attributes2);
  }
}
