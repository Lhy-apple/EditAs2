/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:53:32 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("b");
      Element element0 = document0.createElement("b");
      Element element1 = element0.prependChild(document0);
      document0.appendElement("b");
      String string0 = element1.outerHtml();
      assertEquals(1, element0.childNodeSize());
      assertEquals("<b>\n <#root>\n  <b></b>\n </#root></b>", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document(">");
      Document document1 = (Document)document0.appendText(">");
      document1.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("0>");
      Elements elements0 = document0.getElementsMatchingText("0>");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("r?6 -");
      boolean boolean0 = document0.isBlock();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("69-");
      // Undeclared exception!
      try { 
        document0.child(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.prependText("textarea");
      Element element0 = document0.appendElement("textarea");
      element0.prependChild(document0);
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("0PD-sI-Hr^zAg");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("8$}");
      Element element0 = document0.addClass("hmIo}");
      Elements elements0 = element0.getElementsByClass(">hUuA*6p#$+f`8#/");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.html("Insert position out of bounds.");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("0PDw-sI-Hr^z7AKg");
      Elements elements0 = document0.getElementsByAttributeValue("0PDw-sI-Hr^z7AKg", "0PDw-sI-Hr^z7AKg");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("s+");
      Elements elements0 = document0.getElementsByAttributeValueStarting("s+", "s+");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("g_!#(~bFrvK3");
      Element element0 = document0.appendElement("g_!#(~bFrvK3");
      element0.reparentChild(document0);
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("selected");
      document0.prepend("org.jsoup.nodes.Element$1");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document(" qnH?~u9tu!6");
      Elements elements0 = document0.getElementsMatchingOwnText(" qnH?~u9tu!6");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("j&]c:");
      // Undeclared exception!
      try { 
        document0.after("j&]c:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("tag name must not be empty.");
      Elements elements0 = document0.getElementsByIndexLessThan((-1654));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("\"V_,fTB&[C");
      Element element0 = document0.prependElement("\"V_,fTB&[C");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document(">");
      Elements elements0 = document0.getElementsByIndexEquals((-973));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("textarea");
      // Undeclared exception!
      try { 
        document0.wrap("textarea");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document(">");
      Element element0 = document0.val(">");
      assertEquals(">", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document(">");
      Elements elements0 = document0.getElementsByAttributeValueMatching(">", "");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("26");
      Elements elements0 = document0.getElementsByAttributeValueEnding("IyX'l`]58]|e", "br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("8$}");
      Elements elements0 = document0.getElementsByClass(">hUuA*6p#$+f`8#/");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("Children collection to be inserted must not be null.");
      Elements elements0 = document0.getElementsByAttributeValueContaining("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      Element element1 = element0.text("textarea");
      Elements elements0 = element1.getElementsContainingOwnText("textarea");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("6 -");
      Document document1 = document0.clone();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("textarea");
      Elements elements0 = document0.getElementsByAttributeValueNot("textarea", "textarea");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("0PDw-sI-Hr^z7Ag");
      Elements elements0 = document0.getElementsByAttribute("0PDw-sI-Hr^z7Ag");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("4R<s:[0rnd my{");
      Element element0 = document0.removeClass("4R<s:[0rnd my{");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("W");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document(">");
      // Undeclared exception!
      try { 
        document0.title(">");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("\"V_,fTB5[C");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1788));
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.prependChild(document0);
      // Undeclared exception!
      try { 
        element1.before("br");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      document0.appendElement("Insert position out of bounds.");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Tag tag0 = Tag.valueOf("^2$");
      Element element0 = new Element(tag0, "");
      Element element1 = element0.text("^2$");
      List<TextNode> list0 = element1.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document(";");
      Element element0 = document0.appendElement(";");
      DataNode dataNode0 = new DataNode("treebuilder{currenttoken=", "treebuilder{currenttoken=");
      element0.after((Node) dataNode0);
      assertEquals(1, dataNode0.siblingIndex());
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("tag name must not be empty.");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      Element element0 = document0.insertChildren(0, linkedList0);
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("e`%NC#SQMW0/=_`;QW");
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2379), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("tag name must not be empty.");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(7, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("");
      document0.toggleClass("");
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("r?6 -");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("e`%NC#SQMW0/=_`;QW");
      Element element0 = document0.appendElement("e`%NC#SQMW0/=_`;QW");
      element0.replaceWith(document0);
      document0.prependChild(element0);
      Elements elements0 = document0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("e`%NC#SQMW0/=_`;QW");
      Element element0 = document0.appendElement("e`%NC#SQMW0/=_`;QW");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document(">");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("e`%NC#SQMW0/=_`;QW");
      Element element0 = document0.appendElement("e`%NC#SQMW0/=_`;QW");
      element0.replaceWith(document0);
      document0.prependChild(element0);
      Document document1 = (Document)element0.nextElementSibling();
      assertEquals("e`%NC#SQMW0/=_`;QW", document1.location());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document(">");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document(">");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document(">");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element0 = document0.appendElement(">");
      Element element1 = element0.previousElementSibling();
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("6 -");
      Element element0 = document0.appendElement("6 -");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("6 -");
      Element element0 = document0.appendElement("6 -");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      element0.addChildren(nodeArray0);
      Element element1 = document0.firstElementSibling();
      assertEquals(2, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("r?6zN F");
      Element element0 = document0.appendElement("r?6zN F");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("0PDw-sI-Hr^z7AKg");
      Element element0 = document0.appendElement("0PDw-sI-Hr^z7AKg");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("0PDw-sI-Hr^z7AKg");
      Element element0 = document0.appendElement("0PDw-sI-Hr^z7AKg");
      element0.before((Node) document0);
      Element element1 = element0.lastElementSibling();
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document(">");
      Element element0 = document0.getElementById(">");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("I");
      document0.prependText("I");
      Elements elements0 = document0.getElementsContainingText("I");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("br");
      Comment comment0 = new Comment("br", "br");
      document0.appendChild(comment0);
      Elements elements0 = document0.getElementsContainingText("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("0PDw-sI-Hr^z7AKg");
      Comment comment0 = new Comment("", "*yf.\"4n[we.java.lang.String@0000000013");
      document0.prependChild(comment0);
      Elements elements0 = document0.getElementsContainingOwnText("0PDw-sI-Hr^z7AKg");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("6 -");
      document0.appendElement("6 -");
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("26");
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "6UJd#C|+:$o", attributes0);
      document0.prependChild(formElement0);
      document0.appendElement("br");
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TextNode textNode0 = new TextNode("r?6 -", "r?6 -");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("0PDw-sI-Hr^z7AKg");
      Element element0 = document0.appendElement("0PDw-sI-Hr^z7AKg");
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("g_!#(~ FrvKX3");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      Comment comment0 = new Comment("g_!#(~ FrvKX3", "g_!#(~ FrvKX3");
      nodeArray0[1] = (Node) comment0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("6 -");
      document0.appendText("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("g_!#(~bFrvK3");
      Element element0 = document0.appendElement("g_!#(~bFrvK3");
      element0.prependText("g_!#(~bFrvK3");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("br");
      DataNode dataNode0 = new DataNode("br", "br");
      Element element0 = document0.appendChild(dataNode0);
      String string0 = element0.data();
      assertEquals("br", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("H!da=&");
      document0.appendElement("H!da=&");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Tag tag0 = Tag.valueOf("0PDw-sI-Hr^z7AKg");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Element element0 = new Element(tag0, "systemId", attributes1);
      attributes1.html();
      Element element1 = element0.tagName("systemId");
      element1.getElementsByAttributeStarting("systemId");
      element0.toggleClass("0PDw-sI-Hr^z7AKg");
      boolean boolean0 = element0.hasClass("java.lang.string@0000000015");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("g_!#(~bFrvK3");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      element0.val("7/zwZg`7o:j}9IaS@");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("6 -");
      StringBuilder stringBuilder0 = new StringBuilder("%vSYi5wj");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, (-959), document_OutputSettings0);
      assertEquals("%vSYi5wj<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("b");
      Element element0 = document0.createElement("b");
      Element element1 = document0.appendElement("b");
      element1.prependChild(element0);
      String string0 = document0.outerHtml();
      assertEquals("<b><b></b></b>", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      formElement0.outerHtmlHead(stringBuilder0, 520, document_OutputSettings0);
      assertEquals("br\nbr>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.appendElement("br");
      String string0 = document0.outerHtml();
      assertEquals("<br />", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document(",Wvc_$h)pv[;$ME^");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((StringBuilder) null, (-3953), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.createElement("br");
      element0.prependChild(document0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element0.outerHtmlTail(stringBuilder0, 7485, document_OutputSettings1);
      assertEquals(1, document_OutputSettings1.indentAmount());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      Element element1 = element0.text("textarea");
      element1.append("textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail((StringBuilder) null, 3153, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      element0.text("textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail((StringBuilder) null, (-939), document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("systemId");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      String string0 = document1.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("tag name must not be empty.");
      boolean boolean0 = document0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("tag name must not be empty.");
      Document document1 = new Document("tag name must not be empty.");
      boolean boolean0 = document0.equals(document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("r?6 -");
      document0.appendElement("r?6 -");
      Document document1 = new Document("r?6 -");
      boolean boolean0 = document0.equals(document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      element0.hashCode();
  }
}
