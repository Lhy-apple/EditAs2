/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:51:34 GMT 2023
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("w", "sub", "sub");
      Whitelist whitelist2 = whitelist0.addEnforcedAttribute("w", "sub", "sub");
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"";
      whitelist0.addAttributes("\"", stringArray0);
      Document document0 = new Document("\"");
      Attribute attribute0 = new Attribute("\"", "\"");
      whitelist0.addProtocols("\"", "{\ry?/<s =O0ejIBb", stringArray0);
      boolean boolean0 = whitelist0.isSafeAttribute("\"", document0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "col";
      stringArray0[1] = "col";
      stringArray0[2] = "col";
      whitelist0.addProtocols("col", "col", stringArray0);
      Whitelist whitelist1 = whitelist0.addProtocols("col", "col", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "e";
      whitelist0.addAttributes("e", stringArray0);
      Document document0 = Document.createShell("e");
      Attribute attribute0 = Attribute.createFromEncoded("e", "e");
      Whitelist whitelist1 = whitelist0.addProtocols("e", "e", stringArray0);
      boolean boolean0 = whitelist1.isSafeAttribute("e", document0, attribute0);
      assertEquals("", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "e";
      Whitelist whitelist1 = whitelist0.addAttributes("e", stringArray0);
      Whitelist whitelist2 = whitelist1.addAttributes("e", stringArray0);
      assertSame(whitelist1, whitelist2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      boolean boolean0 = whitelist0.isSafeTag("eem");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      boolean boolean0 = whitelist0.isSafeTag("em");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Document document0 = new Document(":all");
      Attribute attribute0 = new Attribute(":all", "triangleq");
      boolean boolean0 = whitelist0.isSafeAttribute("{l", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{l";
      stringArray0[1] = "{l";
      stringArray0[2] = ":all";
      stringArray0[3] = ":all";
      whitelist0.addAttributes(":all", stringArray0);
      Document document0 = new Document(":all");
      Attribute attribute0 = new Attribute(":all", "triangleq");
      attribute0.setKey("VQ(zVFa8eN0UE3");
      boolean boolean0 = whitelist0.isSafeAttribute("e", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{l";
      stringArray0[1] = "{l";
      stringArray0[2] = ":all";
      stringArray0[3] = ":all";
      whitelist0.addAttributes(":all", stringArray0);
      Document document0 = new Document(":all");
      Attribute attribute0 = new Attribute(":all", "triangleq");
      boolean boolean0 = whitelist0.isSafeAttribute("{l", document0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "e";
      whitelist0.preserveRelativeLinks(true);
      whitelist0.addAttributes("e", stringArray0);
      Document document0 = Document.createShell("e");
      Attribute attribute0 = Attribute.createFromEncoded("e", "e");
      Whitelist whitelist1 = whitelist0.addProtocols("e", "e", stringArray0);
      boolean boolean0 = whitelist1.isSafeAttribute("e", document0, attribute0);
      assertEquals("e", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Attributes attributes0 = whitelist0.getEnforcedAttributes("i");
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Attributes attributes0 = whitelist0.getEnforcedAttributes("a");
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("oh6");
      boolean boolean0 = whitelist_TagName0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = Whitelist.Protocol.valueOf("$uOL>@r{yn8i?{'");
      boolean boolean0 = whitelist_Protocol0.equals("$uOL>@r{yn8i?{'");
      assertFalse(boolean0);
  }
}
