/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:53:25 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("Pat2ern syntax errr:N");
      Elements elements0 = document0.getElementsByIndexLessThan((-2468));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.appendText("Pattern syntax error: ");
      StringBuilder stringBuilder0 = new StringBuilder("Pattern syntax error: ");
      document0.outerHtml(stringBuilder0);
      assertEquals("Pattern syntax error: \n<#root>\n Pattern syntax error: \n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      Element element0 = document0.prependElement("axprrq0u7");
      Element element1 = element0.nextElementSibling();
      assertEquals("axprrq0u7", element0.tagName());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("Pattern syntax errr: ");
      Element element0 = document0.appendChild(document0);
      document0.tagName("br");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText("Pattern syntax errr: ");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.child(10411);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10411, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("U>");
      Element element0 = document0.prependText("U>");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("Pae2ern syntaxeurl:N");
      // Undeclared exception!
      try { 
        document0.html("Pae2ern syntaxeurl:N");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("output");
      Element element0 = document0.addClass("ba=%wmnn(l^p}- ?");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document(".");
      // Undeclared exception!
      try { 
        document0.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("4iW&W0");
      Elements elements0 = document0.getElementsByAttributeValue("4iW&W0", "4iW&W0");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("QDQVW4Bs2`|J7GYZ8");
      Elements elements0 = document0.getElementsByAttributeValueStarting("QDQVW4Bs2`|J7GYZ8", "textarea");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.prepend("");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("Mkq=q4QU");
      // Undeclared exception!
      try { 
        document0.after("Mkq=q4QU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      Elements elements0 = document0.getElementsByAttributeStarting("Pattern syntax error: ");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("BaseURI must not be null");
      // Undeclared exception!
      try { 
        document0.wrap("BaseURI must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("QDQVW4Bs2`|J7GYZ8");
      Element element0 = document0.val("QDQVW4Bs2`|J7GYZ8");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("M");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("BaseURI must not be null");
      Elements elements0 = document0.getElementsByAttributeValueMatching("BaseURI must not be null", "BaseURI must not be null");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("Mkq=q4QU");
      Elements elements0 = document0.getElementsByClass("ahqkn%!dk0b{<nzv4<d");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      Elements elements0 = document0.getElementsContainingText("Pattern syntax error: ");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("Pattern syntax errr: ");
      Elements elements0 = document0.getElementsByAttributeValueContaining("acdronym", "acdronym");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Element element0 = new Element(tag0, "id");
      element0.text("id");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("uYLVP\"");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("u?6rf*igkgs]%z_.h%");
      Document document1 = document0.clone();
      document1.appendChild(document0);
      assertEquals(0, document0.childNodeSize());
      
      boolean boolean0 = document0.preserveWhitespace();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("#");
      Elements elements0 = document0.getElementsByAttributeValueNot("#", "%c:dF,yIv= .9'-;");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("Mkq=q4QU");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.before("Pattern syntax error: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("children collection to be inserted must not be null.");
      Document document1 = (Document)document0.removeClass("children collection to be inserted must not be null.");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("YvJ(nWlO:#D");
      // Undeclared exception!
      try { 
        document0.title("YvJ(nWlO:#D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("YvJ(nWlO:#D");
      Elements elements0 = document0.getElementsByIndexGreaterThan(57);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("u?6rf*igkgs]%z_.h%");
      String string0 = document0.id();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.appendChild(document0);
      Elements elements0 = document0.parents();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      Element element0 = document0.appendChild(document0);
      element0.tagName(".");
      // Undeclared exception!
      try { 
        element0.parents();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("Pattern syntax errr: ");
      Element element0 = document0.appendText("'QHD/Q*W/=<Ejv");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals(19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$IndexEquals", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("u?6rf*igkgs]%z_.h%");
      document0.appendChild(document0);
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("");
      document0.appendText("");
      List<TextNode> list0 = document0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("Pattern syntax errr: ");
      Comment comment0 = new Comment("nvoga", "nvoga");
      document0.appendChild(comment0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("-");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren(59, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("v{&N.BtVEg/`lBG;p");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1995), linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("G>");
      List<DataNode> list0 = document0.dataNodes();
      Element element0 = document0.insertChildren((-1), list0);
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("Mkq=q4QU");
      Elements elements0 = document0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("Z");
      Element element0 = document0.appendChild(document0);
      element0.appendElement("f_)MdBaF:kK");
      document0.siblingElements();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("Pae2ern syntaxeurl:N");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("output");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document1.addChildren(0, nodeArray0);
      document0.nextElementSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("BaseURI must not be null");
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("Z");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("BaseURI must not be null");
      document0.appendElement("BaseURI must not be null");
      Element element0 = document0.appendChild(document0);
      element0.previousElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("");
      document0.appendChild(document0);
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.appendChild(document0);
      Element element0 = document0.prependElement("-g-Hs:7Q,.{");
      assertEquals(1, document0.siblingIndex());
      
      element0.firstElementSibling();
      assertEquals("-g-hs:7q,.{", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("output");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document1.addChildren(0, nodeArray0);
      document1.lastElementSibling();
      assertEquals(2, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("Pattern syntax errr: ");
      Comment comment0 = new Comment("nvoga", "nvoga");
      document0.appendChild(comment0);
      Elements elements0 = document0.getElementsMatchingText("org.jsoup.nodes.Element");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("Pat2ern syntax errr:N");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("Pat2ern syntax errr:N");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("sipo:r#h/&");
      document0.appendText("sipo:r#h/&");
      Elements elements0 = document0.getElementsMatchingOwnText("Pattern syntx erro: ");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("<!");
      Comment comment0 = new Comment(">9HhLKxIk", "");
      document0.appendChild(comment0);
      Elements elements0 = document0.getElementsContainingOwnText("rT]H+}");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("<!");
      document0.prependElement("-g-Hs:7Q,.{");
      Elements elements0 = document0.getElementsContainingOwnText("rT]H+}");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.appendText("");
      document0.tagName("br");
      Elements elements0 = element0.getElementsMatchingText("");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("u?6rf*igkgs]%z_.h%");
      document0.appendChild(document0);
      document0.preserveWhitespace();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("");
      document0.appendText("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("Mkq=q4QU");
      DataNode dataNode0 = new DataNode("q?+t;!'X5", "Mkq=q4QU");
      document0.appendChild(dataNode0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("Pattern syntax errr: ");
      Document document1 = document0.clone();
      document1.appendChild(document0);
      assertEquals(0, document0.childNodeSize());
      
      boolean boolean0 = document1.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("Pattern syntax errr: ");
      Document document1 = document0.clone();
      document0.append("org.jsoup.select.evaluator$attributewithvaluenot");
      document1.appendChild(document0);
      boolean boolean0 = document1.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("Pat2ern syntax errr:N");
      DataNode dataNode0 = new DataNode("Pat2ern syntax errr:N", "&.v-7Qb#PLL");
      Element element0 = document0.appendChild(dataNode0);
      String string0 = element0.data();
      assertEquals("Pat2ern syntax errr:N", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("Pat2ern syntax errr:N");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("-");
      Document document1 = document0.clone();
      Document document2 = document1.clone();
      assertFalse(document2.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("");
      boolean boolean0 = document0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("Mkq=q4QU");
      Element element0 = document0.toggleClass("Mkq=q4QU");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.toggleClass("");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("{c^pq.|4.T86=9@");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "ov|3>uW_~l{>s");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "E");
      element0.val("S");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("Mkq=q4QU");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      stringBuilder0.append((-1.0F));
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, (-250), document_OutputSettings1);
      assertEquals("-1.0<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.tagName("textarea");
      StringBuilder stringBuilder0 = new StringBuilder("#root");
      document0.outerHtml(stringBuilder0);
      assertEquals("#root<textarea></textarea>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("Pat2ern syntax errr:N");
      Document document1 = (Document)document0.appendChild(document0);
      document0.tagName("br");
      StringBuilder stringBuilder0 = new StringBuilder();
      document1.outerHtml(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("");
      document0.tagName("br");
      StringBuilder stringBuilder0 = new StringBuilder();
      document0.outerHtml(stringBuilder0);
      assertEquals("<br />", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("</");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((StringBuilder) null, 10871, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("textarea");
      DataNode dataNode0 = new DataNode("textarea", "textarea");
      document0.appendChild(dataNode0);
      document0.tagName("textarea");
      StringBuilder stringBuilder0 = new StringBuilder("#root");
      document0.outerHtml(stringBuilder0);
      assertEquals("#root<textarea>textarea</textarea>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("output");
      document0.append("output");
      String string0 = document0.html();
      assertEquals("output", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.hashCode();
  }
}
