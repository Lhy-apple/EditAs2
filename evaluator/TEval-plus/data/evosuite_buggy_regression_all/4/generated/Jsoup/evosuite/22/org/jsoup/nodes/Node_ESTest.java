/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:51:56 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("=rD12a<v)t\"hS]!J", "=rD12a<v)t\"hS]!J");
      // Undeclared exception!
      try { 
        textNode0.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("=rD12a<v)t\"hS]!J", "=rD12a<v)t\"hS]!J");
      textNode0.setBaseUri("=rD12a<v)t\"hS]!J");
      assertEquals("=rD12a<v)t\"hS]!J", textNode0.baseUri());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("=rD2a<)t\"hS]!J", "=rD2a<)t\"hS]!J");
      Document document0 = new Document("=rD2a<)t\"hS]!J");
      // Undeclared exception!
      try { 
        document0.after((Node) textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("abs:html");
      // Undeclared exception!
      try { 
        document0.after("abs:html");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("=rD2a<)t\"hS]!J");
      document0.prependChild(document0);
      Node node0 = document0.unwrap();
      assertSame(node0, document0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = new TextNode("b$fZH2Fo 8|J", "b$fZH2Fo 8|J");
      Node node0 = textNode0.clone();
      assertEquals(0, node0.siblingIndex());
      assertNotSame(node0, textNode0);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = new TextNode("\n", "n@<2y e~e");
      String string0 = textNode0.toString();
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("abs:=rd2a<)t\"h.s]!j", "?", "n@<2y e~e", "?");
      String string0 = documentType0.toString();
      assertEquals("<!DOCTYPE abs:=rd2a<)t\"h.s]!j PUBLIC \"?\" \"n@<2y e~e\">", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("I-L&S;k<KX7(M8", "I-L&S;k<KX7(M8");
      Node node0 = textNode0.removeAttr("I-L&S;k<KX7(M8");
      assertEquals(0, node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("zhcy");
      Elements elements0 = document0.getElementsByIndexEquals(1717);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("I-L&S;k<KX7(M8");
      // Undeclared exception!
      try { 
        document0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("html");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextNode textNode0 = new TextNode("b$fZH2Fo 8|J", "b$fZH2Fo 8|J");
      textNode0.attributes();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("abs:htRml");
      document0.absUrl("abs:htRml");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("abs:htRml");
      document0.attr("abs:htRml", "abs:htRml");
      document0.absUrl("abs:htRml");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("=rD2a<)t\"hS]!J");
      document0.prependChild(document0);
      document0.before("=rD2a<)t\"hS]!J");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("=rD12a<v)t\"hS]!J", "=rD12a<v)t\"hS]!J");
      // Undeclared exception!
      try { 
        textNode0.wrap("=rD12a<v)t\"hS]!J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("=rD12a<v)t\"hS]!J");
      TextNode textNode0 = new TextNode("=rD12a<v)t\"hS]!J", "=rD12a<v)t\"hS]!J");
      textNode0.setParentNode(document0);
      textNode0.wrap("=rD12a<v)t\"hS]!J");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("qK9F _");
      TextNode textNode0 = new TextNode("0T*$YwLX}8", "QDXLLiRE}g`!tj");
      textNode0.setParentNode(document0);
      textNode0.unwrap();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextNode textNode0 = new TextNode("=RrD12a<VtFx~!J", "=RrD12a<VtFx~!J");
      Document document0 = Document.createShell("=RrD12a<VtFx~!J");
      textNode0.setParentNode(document0);
      textNode0.setParentNode(document0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("html");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("abs:html");
      Element element0 = document0.prependChild(document0);
      document0.replaceChild(element0, element0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("A0X4(");
      TextNode textNode0 = new TextNode("id", "A0X4(");
      textNode0.setParentNode(document0);
      // Undeclared exception!
      try { 
        textNode0.replaceWith(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextNode textNode0 = new TextNode("b$fZH2Fo 8|J", "b$fZH2Fo 8|J");
      DataNode dataNode0 = new DataNode("b$fZH2Fo 8|J", "b$fZH2Fo 8|J");
      // Undeclared exception!
      try { 
        textNode0.removeChild(dataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("=rD12a<v)t\"hS]!J", "=rD12a<v)t\"hS]!J");
      Document document0 = new Document("=rD12a<v)t\"hS]!J");
      textNode0.setParentNode(document0);
      textNode0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("=RrD12a<VtFx~!J", "=RrD12a<VtFx~!J");
      Document document0 = Document.createShell("=RrD12a<VtFx~!J");
      textNode0.siblingIndex = 7;
      textNode0.setParentNode(document0);
      // Undeclared exception!
      try { 
        textNode0.previousSibling();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextNode textNode0 = new TextNode("b$fZH2Fo 8|J", "b$fZH2Fo 8|J");
      Document document0 = new Document("\n");
      textNode0.equals(document0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("I-L&S;k<KX7(M8", "I-L&S;k<KX7(M8");
      textNode0.equals(textNode0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("qK9F _");
      TextNode textNode0 = new TextNode("0T*$YwLX}8", "QDXLLiRE}g`!tj");
      textNode0.setParentNode(document0);
      textNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("html");
      document0.clone();
  }
}
