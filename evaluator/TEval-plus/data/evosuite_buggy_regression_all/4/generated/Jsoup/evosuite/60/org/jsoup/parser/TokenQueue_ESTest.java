/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:54:14 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("width must be > 0");
      tokenQueue0.chompTo("width must be > 0");
      tokenQueue0.advance();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(";C C5| *O,Z+(x1_");
      boolean boolean0 = tokenQueue0.matchesCS(";C C5| *O,Z+(x1_");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"pvnxcL");
      Character character0 = new Character('U');
      tokenQueue0.addFirst(character0);
      assertEquals("U\"pvnxcL", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"$GOWN.(w1}r");
      String string0 = tokenQueue0.toString();
      assertEquals("\"$GOWN.(w1}r", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"wy9(o[&Cuw[");
      tokenQueue0.chompBalanced('\"', '\"');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("S");
      String string0 = tokenQueue0.consumeTo("[qP7r;z");
      assertEquals("S", string0);
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*vgxs:9w0mc)]8ys;\"pvxc/");
      char char0 = tokenQueue0.peek();
      assertEquals('*', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertTrue(tokenQueue0.isEmpty());
      
      char char0 = tokenQueue0.peek();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("hF&4/z?h6C5dF+Rk");
      String[] stringArray0 = new String[0];
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      tokenQueue0.consumeElementSelector();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      tokenQueue0.consumeTagName();
      // Undeclared exception!
      try { 
        tokenQueue0.consume("_");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      boolean boolean0 = tokenQueue0.matchesAny((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-aQ\"QV2C/");
      tokenQueue0.consumeTagName();
      assertEquals('\"', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"pvnxcL");
      tokenQueue0.consumeToIgnoreCase("@=");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<0&,I<-M&;<C");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(";C C5| *O,Z+(x1_");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<c&wI<z-M&;<C");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("     ");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("hF&4/z?h6C5dF+Rk");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals('h', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String string0 = tokenQueue0.consumeWord();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("U]vL");
      tokenQueue0.advance();
      assertEquals("]vL", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("]RlD]s]/y");
      tokenQueue0.consumeToIgnoreCase("]RlD]s]/y");
      assertEquals(']', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("]RlD]s]/y");
      tokenQueue0.chompToIgnoreCase("WuU#NASX4");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(";C C5| *O,Z+(x1_");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ";C C5| *O,Z+(x1_";
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals(';', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("']>&Y5C6g");
      tokenQueue0.chompBalanced('R', 'R');
      assertEquals("]>&Y5C6g", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"wy9(o[uwe");
      tokenQueue0.consume();
      tokenQueue0.chompBalanced('w', 'w');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("zx9CjMfV?[L^cf");
      tokenQueue0.chompBalanced('B', 'z');
      assertEquals('x', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = TokenQueue.unescape("\\|gt");
      assertEquals("|gt", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = TokenQueue.unescape("]RlD]s]/y");
      assertEquals("]RlD]s]/y", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("q(i");
      tokenQueue0.consumeWord();
      assertEquals("(i", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("KaQ\"PE=VxC/");
      tokenQueue0.consumeElementSelector();
      assertEquals('\"', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("{K<G^$!y@sy0}");
      tokenQueue0.consume("{K<G^$!y@sy0}");
      tokenQueue0.consumeCssIdentifier();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("zx9rmfvm-l^cf");
      tokenQueue0.consumeCssIdentifier();
      assertEquals("^cf", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("xbg)L#Y^");
      assertEquals('x', tokenQueue0.peek());
      
      tokenQueue0.remainder();
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("xbgL#Y^");
      tokenQueue0.consumeAttributeKey();
      assertEquals('#', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      tokenQueue0.consumeAttributeKey();
      assertEquals("", tokenQueue0.toString());
  }
}
