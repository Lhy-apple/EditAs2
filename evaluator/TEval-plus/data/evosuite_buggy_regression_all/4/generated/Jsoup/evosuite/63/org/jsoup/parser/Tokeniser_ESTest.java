/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:55:37 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Tokeniser_ESTest extends Tokeniser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("eYF&#x");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.createTempBuffer();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      CharacterReader characterReader0 = new CharacterReader("&gt;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.emitDoctypePending();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      tokeniser0.acknowledgeSelfClosingFlag();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.createCommentPending();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&af");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.read();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(") &78_q<sc>h^;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertEquals(11, characterReader0.pos());
      assertEquals(") &78_q", token0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(";&#8K:r");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.emitCommentPending();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&gt;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      boolean boolean0 = tokeniser0.currentNodeInHtmlNS();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&gt;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.createDoctypePending();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-2321));
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.getState();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(";&#98K:r");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      // Undeclared exception!
      try { 
        tokeniser0.emit((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      CharacterReader characterReader0 = new CharacterReader("&gt;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      token_StartTag0.selfClosing = true;
      tokeniser0.emit(token_StartTag0);
      tokeniser0.read();
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("(d/Aja3lR)Hm");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(43);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.EndTag token_EndTag0 = new Token.EndTag();
      tokeniser0.emit(token_EndTag0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("(d/Aja3lR)Hm");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(43);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.EndTag token_EndTag0 = new Token.EndTag();
      token_EndTag0.newAttribute();
      tokeniser0.emit(token_EndTag0);
      assertEquals(1, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertEquals("&", token0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("O&#7g");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(12);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Character character0 = Character.valueOf('4');
      tokeniser0.consumeCharacterReference(character0, true);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(";&#8K:r");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Character character0 = new Character(';');
      int[] intArray0 = tokeniser0.consumeCharacterReference(character0, true);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&&#X8K:r");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertEquals("&\bK:r", token0.toString());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("o&#9D-9K:r");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertTrue(parseErrorList0.isEmpty());
      assertEquals("o\tD-9K:r", token0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("o&#*D39K4r");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertEquals("o&#*D39K4r", token0.toString());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      CharacterReader characterReader0 = new CharacterReader("&ogt;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      String string0 = tokeniser0.unescapeEntities(false);
      assertEquals(5, characterReader0.pos());
      assertEquals("\u29C1", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&At;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertEquals("&At;", token0.toString());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&gt_;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      String string0 = tokeniser0.unescapeEntities(true);
      assertTrue(characterReader0.isEmpty());
      assertEquals("&gt_;", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&gt;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      String string0 = tokeniser0.unescapeEntities(true);
      assertTrue(characterReader0.isEmpty());
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("eYF&#x");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.Tag token_Tag0 = tokeniser0.createTagPending(false);
      assertNotNull(token_Tag0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("(d/Aja3lR)Hm");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(43);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      boolean boolean0 = tokeniser0.isAppropriateEndTagToken();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      CharacterReader characterReader0 = new CharacterReader("&At;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      tokeniser0.tagPending = (Token.Tag) token_StartTag0;
      token_StartTag0.nameAttr("oqe?b!sui9yNto=<n+~:", (Attributes) null);
      tokeniser0.emit(token_StartTag0);
      token_StartTag0.nameAttr("&At;", (Attributes) null);
      boolean boolean0 = tokeniser0.isAppropriateEndTagToken();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      CharacterReader characterReader0 = new CharacterReader("&At;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      tokeniser0.tagPending = (Token.Tag) token_StartTag0;
      token_StartTag0.nameAttr("&At;", (Attributes) null);
      tokeniser0.emit(token_StartTag0);
      boolean boolean0 = tokeniser0.isAppropriateEndTagToken();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      CharacterReader characterReader0 = new CharacterReader("&gt;");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      token_StartTag0.nameAttr("&gt;", (Attributes) null);
      tokeniser0.emit(token_StartTag0);
      String string0 = tokeniser0.appropriateEndTagName();
      assertEquals("&gt;", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("(d/Aja3lR)Hm");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(43);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      String string0 = tokeniser0.appropriateEndTagName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Cn](\"+<}tw>KEtj");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertEquals("Cn](\"+<}tw>KEtj", token0.toString());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("C](\"+<}w>KEt[");
      ParseErrorList parseErrorList0 = new ParseErrorList(43, 43);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertFalse(parseErrorList0.isEmpty());
      assertEquals("C](\"+<}w>KEt[", token0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&g<t;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertEquals("&g", token0.toString());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&g<t;");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(1572);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertFalse(parseErrorList0.isEmpty());
      assertEquals("&g", token0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&gt");
      ParseErrorList parseErrorList0 = new ParseErrorList(4557, 4557);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token token0 = tokeniser0.read();
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(">", token0.toString());
  }
}
