/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:55:54 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("fb#1whv");
      // Undeclared exception!
      try { 
        document0.wrap("fb#1whv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("#LuRq-VZ{+M6");
      document0.appendText("#LuRq-VZ{+M6");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("NYWI");
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsMatchingText("NYWI");
      assertEquals("NYWI", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      document0.prependText("!P`");
      document0.getElementsContainingText("!P`");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("x*CRg1c1R)#Wc/:");
      // Undeclared exception!
      try { 
        document0.child(1415);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1415, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("/Z?^4\n");
      Element element0 = document0.tagName("/Z?^4\n");
      assertEquals("/Z?^4\n", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("?hl");
      document0.dataset();
      assertEquals("?hl", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("#`dR!Z{+M6");
      Element element0 = document0.addClass("#`dR!Z{+M6");
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("#`dR!Z{+M6", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("gLS-vI+C+'! 1Cdv\"\"");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("#LuRq-V:Z{+M6");
      assertFalse(document0.hasParent());
      
      Element element0 = document0.html("#LuRq-V:Z{+M6");
      assertEquals("#LuRq-V:Z{+M6", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.attr("", true);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("lPY!:3!_\"(q-y:QM}");
      document0.getElementsByAttributeValue("lPY!:3!_\"(q-y:QM}", "lPY!:3!_\"(q-y:QM}");
      assertEquals(1, document0.childNodeSize());
      assertEquals("lPY!:3!_\"(q-y:QM}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("#`dR!Z{+M6");
      document0.getElementsByAttributeValueStarting("#`dR!Z{+M6", "#`dR!Z{+M6");
      assertEquals("#`dR!Z{+M6", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("Insert positionout of bounds.");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("Insert positionout of bounds.", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("~Jd;[cr{HL6t&Mt|'=W");
      document0.prepend("Q");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("G");
      Elements elements0 = document0.getElementsMatchingOwnText("G");
      assertEquals("G", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("lPY!:3!_\"(q-y:QM}");
      Elements elements0 = document0.getElementsByIndexLessThan(1784);
      assertEquals(1, document0.childNodeSize());
      assertEquals(3, elements0.size());
      assertEquals("lPY!:3!_\"(q-y:QM}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("O<Z]O4*xd");
      document0.getElementsByAttributeStarting("O<Z]O4*xd");
      assertEquals("O<Z]O4*xd", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexEquals((-126610503));
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("#`dR!Z{+M6");
      Element element0 = document0.val("#`dR!Z{+M6");
      assertEquals("#`dR!Z{+M6", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      document0.getElementsByAttributeValueMatching("s+", "s+");
      assertEquals("s+", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("uR");
      document0.is("uR");
      assertEquals("uR", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("ChaacterReferenceInata");
      document0.getElementsByAttributeValueEnding("ChaacterReferenceInata", "ChaacterReferenceInata");
      assertEquals(1, document0.childNodeSize());
      assertEquals("ChaacterReferenceInata", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("#`dR!Z{+M6");
      Elements elements0 = document0.getElementsByClass("#`dR!Z{+M6");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#`dR!Z{+M6", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("br");
      document0.getElementsByAttributeValueContaining("br", "br");
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("zHpoRaKk9R?#y7dC\"C`");
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("DOqm~L");
      document0.doSetBaseUri("DOqm~L");
      assertEquals("DOqm~L", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("br");
      document0.getElementsByAttributeValueNot("br", "br");
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      document0.getElementsByAttribute("s+");
      assertEquals("s+", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("bounds.");
      // Undeclared exception!
      try { 
        document0.before("bounds.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("i|");
      Element element0 = document0.removeClass("i|");
      assertEquals("i|", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("xgyknESbywJ");
      document0.getAllElements();
      assertEquals("xgyknESbywJ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("9h");
      document0.selectFirst("9h");
      assertEquals(1, document0.childNodeSize());
      assertEquals("9h", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.body();
      Elements elements0 = element0.parents();
      assertEquals(1, elements0.size());
      assertEquals("br", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("`dR!Z{+M");
      document0.prependText("`dR!Z{+M");
      document0.getElementsByIndexGreaterThan(721);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("~Jd;[cr{HL6t&Mt|'=W");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("~Jd;[cr{HL6t&Mt|'=W", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("br");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      DataNode dataNode0 = new DataNode((String) null);
      nodeArray0[1] = (Node) dataNode0;
      document0.addChildren(nodeArray0);
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("br", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("a@A|@DCF106VT&");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren(1115, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("#`dR!Z{+M6");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-925), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(28, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("       ");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1969913780), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("value");
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      Element element0 = document0.toggleClass("Insert position out of bounds.");
      element0.cssSelector();
      assertEquals("Insert position out of bounds.", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("Insert positionout of bounds.");
      Element element0 = document0.head();
      element0.after("org.jsoup.nodes.Entities$EscapeMode");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(1)", string0);
      assertEquals("Insert positionout of bounds.", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      Elements elements0 = element0.siblingElements();
      assertEquals(2, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("@An:Won}R3:uk");
      document0.siblingElements();
      assertEquals("@An:Won}R3:uk", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
      assertEquals("br", element0.baseUri());
      assertTrue(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("bounds.");
      document0.nextElementSibling();
      assertEquals("bounds.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("i|");
      Element element0 = document0.prependElement("i|");
      Element element1 = element0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
      assertTrue(element0.hasParent());
      assertEquals("br", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("#`dR!Z{+M6");
      document0.previousElementSibling();
      assertEquals("#`dR!Z{+M6", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      assertEquals("head", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("|");
      Element element0 = document0.prependElement("i|");
      assertTrue(element0.hasParent());
      
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
      assertEquals("|", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertEquals("head", element1.baseUri());
      assertEquals("head", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Element element0 = new Element("h+OJt:J2d|Y75Ou6?W");
      Document document0 = new Document("}j");
      Element element1 = document0.appendTo(element0);
      element1.lastElementSibling();
      assertEquals(1, element0.childNodeSize());
      assertEquals("}j", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      assertEquals("Pattern syntax error: ", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("&3P");
      document0.reparentChild(document0);
      int int0 = document0.elementSiblingIndex();
      assertEquals("&3P", document0.baseUri());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("\"6<0A^[je`=?Pp");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      Comment comment0 = new Comment("\"6<0A^[je`=?Pp");
      linkedList0.add(comment0);
      document0.insertChildren((-2), (Collection<? extends Node>) linkedList0);
      document0.getElementsContainingText("y-&Gr*UJ18T8");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataDoubleEscapeEnd");
      document0.title("ScriptDataDoubleEscapeEnd");
      Elements elements0 = document0.getElementsContainingText("ScriptDataDoubleEscapeEnd");
      assertEquals(4, elements0.size());
      assertEquals("ScriptDataDoubleEscapeEnd", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("-D");
      document0.prependElement("-D");
      Element element0 = document0.prependText("-D");
      Elements elements0 = element0.getElementsContainingText("-D");
      assertEquals(3, document0.childNodeSize());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.prependText("NkAx|drr%");
      document0.getElementsContainingOwnText("");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      DataNode dataNode0 = new DataNode(")<qn`r\"SJyMc");
      document0.prependChild(dataNode0);
      document0.ownText();
      assertEquals("Insert position out of bounds.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.prependElement("br");
      document0.prependElement("br");
      document0.ownText();
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("#root", "#root", "#root");
      boolean boolean0 = Element.preserveWhitespace(documentType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("br");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      DataNode dataNode0 = new DataNode((String) null);
      nodeArray0[1] = (Node) dataNode0;
      document0.addChildren(nodeArray0);
      assertEquals("br", document0.baseUri());
      
      boolean boolean0 = Element.preserveWhitespace(nodeArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell("Insert positionout of bounds.");
      Element element0 = document0.head();
      element0.after("org.jsoup.nodes.Entities$EscapeMode");
      boolean boolean0 = document0.hasText();
      assertEquals("Insert positionout of bounds.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.text("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertEquals("#root", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      DocumentType documentType0 = new DocumentType(">Nh'+B=h83gG8xUDN", ">Nh'+B=h83gG8xUDN", "Insert position out of bounds.", (String) null);
      document0.prependChild(documentType0);
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      DataNode dataNode0 = new DataNode(")<qn`r\"SJyMc");
      document0.prependChild(dataNode0);
      String string0 = document0.data();
      assertEquals(")<qn`r\"SJyMc", string0);
      assertEquals("Insert position out of bounds.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("sHYa;2|#&=[=:uV(x=");
      Comment comment0 = new Comment("sHYa;2|#&=[=:uV(x=", "");
      document0.appendChild(comment0);
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("O<Z]O4*xd");
      document0.prepend("O<Z]O4*xd");
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("s+");
      Element element0 = document0.toggleClass("s+");
      boolean boolean0 = element0.hasClass("java.lang.string@0000000006 }nsert positgn {<s of box~ds.");
      assertEquals("s+", element0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("s+");
      Element element0 = document0.toggleClass("s+");
      document0.toggleClass("Inert position out of bounds.");
      boolean boolean0 = element0.hasClass("java.lang.string@0000000006 }nsert positgn {<s of box~ds.");
      assertEquals("s+", element0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      Element element0 = document0.toggleClass("s+");
      element0.toggleClass("org.jsoup.nodes.Element$1");
      boolean boolean0 = document0.hasClass("org.jsoup.nodes.Element$1");
      assertTrue(boolean0);
      assertEquals("s+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("E89@']%z:e#v");
      document0.toggleClass("E89@']%z:e#v");
      document0.toggleClass("    0  ");
      document0.hasClass("    0  ");
      assertEquals("E89@']%z:e#v", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      document0.toggleClass("s+");
      document0.toggleClass("org.jsoup.nodes.Element$1");
      document0.toggleClass("java.lang.string@0000000006 }nsert positgn {<s of box~ds.");
      boolean boolean0 = document0.hasClass("org.jsoup.nodes.Element$1");
      assertEquals(1, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("}nsert positgn ort of box~ds.");
      document0.toggleClass("}nsert positgn ort of box~ds.");
      Element element0 = document0.toggleClass("}nsert positgn ort of box~ds.");
      boolean boolean0 = element0.hasClass("s+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = Document.createShell("blwhv");
      document0.toggleClass("org.jsoup.select.Evaluator$Attribute");
      Element element0 = document0.toggleClass("org.jsoup.select.Evaluator$Attribute");
      Element element1 = element0.toggleClass("org.jsoup.select.Evaluator$Attribute");
      assertEquals("blwhv", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = Document.createShell("#`dR!Z{+M6");
      document0.val();
      assertEquals("#`dR!Z{+M6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = Document.createShell("#`R!Z{+M6");
      Element element0 = document0.createElement("textarea");
      element0.val();
      assertEquals("#`R!Z{+M6", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      Element element0 = document0.prependElement("textarea");
      element0.val("ER-/<72u.M&$YM0<Uq");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = Document.createShell("\"e3");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      String string0 = document0.html();
      assertEquals("<html><head></head><body></body></html>", string0);
      assertEquals("\"e3", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      element0.appendElement("br");
      document0.html();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      element0.appendElement("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      document0.outputSettings(document_OutputSettings0);
      document0.html();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = Document.createShell("a@A|@DCF106VT&");
      MockFileWriter mockFileWriter0 = new MockFileWriter("a@A|@DCF106VT&");
      document0.html((OutputStreamWriter) mockFileWriter0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("a@A|@DCF106VT&", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Comment comment0 = new Comment("br", (String) null);
      Attributes attributes0 = comment0.attributes();
      FormElement formElement0 = new FormElement(tag0, "java.lang.string@0000000006 y<4t_w78d)n", attributes0);
      StringBuffer stringBuffer0 = new StringBuffer("java.lang.string@0000000006 y<4t_w78d)n");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      formElement0.outerHtmlHead(stringBuffer0, 0, document_OutputSettings1);
      assertEquals(59, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.title("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      document0.outputSettings(document_OutputSettings1);
      String string0 = document0.html();
      assertEquals("br", document0.baseUri());
      assertEquals("<html>\n <head>\n  <title>br</title>\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = Document.createShell("#`dR!Z{+M6");
      Element element0 = document0.getElementById("#`dR!Z{+M6");
      assertNull(element0);
      
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertNotSame(document1, document0);
      assertEquals("#`dR!Z{+M6", document1.baseUri());
  }
}
