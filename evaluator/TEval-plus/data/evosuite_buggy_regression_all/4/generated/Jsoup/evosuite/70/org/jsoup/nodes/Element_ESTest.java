/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:56:33 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("hgroup");
      document0.appendText("hgroup");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell(">Bq");
      document0.prependText(">Bq");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("fallback");
      Element element0 = document0.text("fallback");
      element0.appendChild(document0);
      Pattern pattern0 = Pattern.compile("fallback");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell(":nth-child(%d)");
      // Undeclared exception!
      try { 
        document0.child((-3462));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000069");
      assertFalse(document0.hasParent());
      
      document0.title("java.lang.string@0000000069");
      document0.toString();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("1`bm}");
      Element element0 = document0.tagName("1`bm}");
      assertFalse(element0.hasParent());
      assertEquals("1`bm}", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("hgroup");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("hgroup", document0.baseUri());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("m_@31J|Chkf;");
      Element element0 = document0.addClass("m_@31J|Chkf;");
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Element element0 = new Element("^aVG$x}g");
      assertEquals("^aVG$x}g", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell(".");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.attr("org.jsoup.nodes.Element$NodeList", true);
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell(":1`b/}");
      assertFalse(document0.hasParent());
      
      document0.getElementsByAttributeValue("|s'Gp,{", ":1`b/}");
      assertEquals(":1`b/}", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("pre");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("pre", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("!rp.lsou.helperstwngutil1");
      Charset charset0 = document0.charset();
      assertFalse(document0.hasParent());
      
      document0.charset(charset0);
      String string0 = document0.toString();
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body></body>\n</html>", string0);
      assertEquals("!rp.lsou.helperstwngutil1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell(">Jq");
      Element element0 = document0.prepend(">Jq");
      element0.textNodes();
      assertEquals(2, document0.childNodeSize());
      assertEquals(">Jq", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("oX#");
      Elements elements0 = document0.getElementsMatchingOwnText("oX#");
      assertEquals(0, elements0.size());
      assertEquals("oX#", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell(";8(!'/uk8");
      // Undeclared exception!
      try { 
        document0.after(";8(!'/uk8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("pre");
      Elements elements0 = document0.getElementsByIndexLessThan((-843));
      assertEquals("pre", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("1^");
      document0.normalise();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.getElementsByAttributeStarting("org.jsoup.nodes.Element$NodeList");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("pre");
      Elements elements0 = document0.getElementsByIndexEquals(2345);
      assertEquals("pre", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("nJlidVte");
      // Undeclared exception!
      try { 
        document0.wrap("org.jsoup.select.Evaluator$IsNthOfType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("Rr2o");
      document0.getElementsByAttributeValueMatching("Rr2o", "Rr2o");
      assertEquals("Rr2o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("pre");
      document0.is("pre");
      assertEquals("pre", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("Rr2o");
      document0.getElementsByAttributeValueEnding("Rr2o", "</");
      assertEquals("Rr2o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("Rr2o");
      Elements elements0 = document0.getElementsByClass("Rr2o");
      assertEquals("Rr2o", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("-yTo$t\"tT#GAN");
      Elements elements0 = document0.getElementsContainingText("-yTo$t\"tT#GAN");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals("-yTo$t\"tT#GAN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.getElementsByAttributeValueContaining("+,u (2-2A+", "org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("miFPI");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("");
      document0.doSetBaseUri("");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000069");
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("pre");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("pre", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell(">Bq");
      Element element0 = document0.appendTo(document0);
      element0.previousElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.getElementsByAttributeValueNot("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("qa2&jR{_\"!");
      document0.getElementsByAttribute("K");
      assertEquals(1, document0.childNodeSize());
      assertEquals("qa2&jR{_\"!", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("nJlidVte");
      // Undeclared exception!
      try { 
        document0.before("nJlidVte");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Tag tag0 = Tag.valueOf("fallback");
      Element element0 = new Element(tag0, "fallback");
      Element element1 = element0.removeClass("fallback");
      assertEquals("fallback", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("orp.lsou.helperstrngutil$1");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("orp.lsou.helperstrngutil$1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      Elements elements0 = document0.getElementsMatchingText("br");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.selectFirst("org.jsoup.nodes.Element$1");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.nodes.Element$1': unexpected token at '$1'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("miFPI");
      Element element0 = document0.head();
      element0.html("miFPI");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell(":1`b/}");
      document0.prepend(":1`b/}");
      document0.getElementsByIndexGreaterThan(14);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell(">Jq");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals(">Jq", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("m_@31J|Chkf;");
      Node[] nodeArray0 = new Node[6];
      DataNode dataNode0 = new DataNode("3u1^@1'c");
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.dataNodes();
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("Bq");
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      // Undeclared exception!
      try { 
        document0.insertChildren(6, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("xvNaN3Xv");
      Elements elements0 = document0.getElementsContainingOwnText("xvNaN3Xv");
      assertEquals(0, elements0.size());
      
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) elements0);
      assertEquals("xvNaN3Xv", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-914), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("fallback");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(1, nodeArray0);
      assertEquals("fallback", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("Rr2o");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        document0.insertChildren((-435), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren(1229, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      document0.toggleClass("org.jsoup.nodes.Element$NodeList");
      document0.cssSelector();
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell(":lsw-chsild");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals(":lsw-chsild", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("-yTo$t\"tT#GAN");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals("-yTo$t\"tT#GAN", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Comment comment0 = new Comment("#root");
      Attributes attributes0 = comment0.attributes();
      FormElement formElement0 = new FormElement(tag0, "#root", attributes0);
      formElement0.siblingElements();
      assertEquals("#root", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("1`bm}");
      document0.reparentChild(document0);
      Element element0 = document0.nextElementSibling();
      assertEquals("1`bm}", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell(":1`b/}");
      document0.nextElementSibling();
      assertEquals(":1`b/}", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell(":1`b/}");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertEquals(":1`b/}", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.oodes.Element$NgdeList");
      document0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.oodes.Element$NgdeList", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell(">Bq");
      Element element0 = document0.createElement(">Bq");
      Element element1 = document0.appendTo(element0);
      element1.previousElementSibling();
      assertEquals(1, element0.childNodeSize());
      assertEquals(">Bq", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("R?>$AL");
      Tag tag0 = Tag.valueOf("value");
      Element element0 = new Element(tag0, "");
      document0.appendTo(element0);
      assertEquals(1, element0.childNodeSize());
      
      document0.firstElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell(":1`b/}");
      document0.appendTo(document0);
      document0.firstElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("1`bm}");
      document0.reparentChild(document0);
      Element element0 = document0.lastElementSibling();
      assertNull(element0);
      assertEquals("1`bm}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("fallback");
      document0.appendChild(document0);
      document0.lastElementSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("orp.lsou.helperstrngutil$1");
      Element element0 = document0.getElementById("orp.lsou.helperstrngutil$1");
      assertEquals(1, document0.childNodeSize());
      assertNull(element0);
      assertEquals("orp.lsou.helperstrngutil$1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Document.createShell("miFPI");
      DocumentType documentType0 = new DocumentType("miFPI", "miFPI", "miFPI", "fw!MP", "miFPI");
      document0.appendChild(documentType0);
      Pattern pattern0 = Pattern.compile("miFPI");
      document0.getElementsMatchingText(pattern0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell(">Bq");
      document0.title(">Bq");
      document0.getElementsContainingOwnText("sJA");
      assertEquals(1, document0.childNodeSize());
      assertEquals(">Bq", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Document.createShell("pre");
      Comment comment0 = new Comment("pre", "pre");
      document0.appendChild(comment0);
      document0.getElementsContainingOwnText("m_@31J|Chkf;");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Comment comment0 = new Comment("#root");
      boolean boolean0 = Element.preserveWhitespace(comment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Document.createShell(">Jq");
      document0.prepend(">Jq");
      document0.toString();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.text("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell(":1`b/}");
      document0.prepend(":1`b/}");
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell(":1`b/}");
      DataNode dataNode0 = DataNode.createFromEncoded("2;wQ", "2;wQ");
      document0.appendChild(dataNode0);
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("m_@31J|Chkf;");
      Element element0 = document0.text("m_@31J|Chkf;");
      boolean boolean0 = element0.hasText();
      assertEquals(1, element0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell(":last-child");
      DataNode dataNode0 = new DataNode("InRow", "org.jsoup.nodes.Element$NodeList");
      document0.prependChild(dataNode0);
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell(">Jq");
      document0.text(">Jq");
      document0.data();
      assertEquals(">Jq", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("org.jsoup.helper.StringUtil$1");
      document0.toggleClass("org.jsoup.helper.StringUtil$1");
      boolean boolean0 = document0.hasClass("org.jsoup.helper.StringUtil$1");
      assertFalse(boolean0);
      assertEquals("org.jsoup.helper.StringUtil$1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("org.jsoup.helper.StringUtil$1");
      Element element0 = document0.toggleClass("org.jsoup.helper.StringUtil$1");
      element0.toggleClass("org.jsoup.helper.StringUtil$1");
      boolean boolean0 = document0.hasClass("org.jsoup.helper.StringUtil$1");
      assertTrue(boolean0);
      assertEquals("org.jsoup.helper.StringUtil$1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document(":lsw-chsild");
      document0.toggleClass("org.jsou.helper.StrngUtil$1");
      boolean boolean0 = document0.hasClass("org.jsou.helper.StrngUtil$1");
      assertFalse(boolean0);
      assertEquals(":lsw-chsild", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = Document.createShell("miFPI");
      document0.toggleClass("miFPI");
      document0.toggleClass("          ");
      document0.hasClass("miFPI");
      assertEquals(1, document0.childNodeSize());
      assertEquals("miFPI", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document(">Bq");
      document0.toggleClass(">Bq");
      Element element0 = document0.toggleClass(">Bq");
      boolean boolean0 = element0.hasClass("org.jsou.helper.StrngUtil$1");
      assertFalse(boolean0);
      assertEquals(">Bq", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("org.jsoup.helper.StringUtil$1");
      Element element0 = document0.toggleClass("org.jsoup.helper.StringUtil$1");
      element0.toggleClass("org.jsoup.helper.StringUtil$1");
      Element element1 = element0.toggleClass("org.jsoup.helper.StringUtil$1");
      assertEquals("org.jsoup.helper.StringUtil$1", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("org.jsoup.helper.StringUtil$1");
      document0.val();
      assertEquals("org.jsoup.helper.StringUtil$1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Comment comment0 = new Comment("#root");
      Attributes attributes0 = comment0.attributes();
      FormElement formElement0 = new FormElement(tag0, "#root", attributes0);
      formElement0.val();
      assertEquals("#root", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = Document.createShell("xvNaN3Xv");
      Element element0 = document0.val("class");
      assertEquals("xvNaN3Xv", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "#root");
      element0.val("#root");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("strong", parseSettings0);
      Element element0 = new Element(tag0, "#1+P7dH@(B:9,La");
      StringBuilder stringBuilder0 = new StringBuilder("strong");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlHead(stringBuilder0, 79, document_OutputSettings0);
      assertEquals("strong<strong>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = Document.createShell("fallback");
      MockFileWriter mockFileWriter0 = new MockFileWriter("fallback");
      document0.html(mockFileWriter0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("fallback", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = Document.createShell(":1`b/}");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.html();
      assertEquals(":1`b/}", document1.baseUri());
      assertEquals("<html><head></head><body></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = new Document(":lsw-chsild");
      Document document1 = (Document)document0.toggleClass(":lsw-chsild");
      Document document2 = document1.clone();
      assertEquals(":lsw-chsild", document2.baseUri());
      assertNotSame(document2, document1);
  }
}
