/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:52:01 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataNode dataNode0 = new DataNode("abs:", "abs:");
      // Undeclared exception!
      try { 
        dataNode0.attr("abs:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("#'ezt");
      document0.setBaseUri("#'ezt");
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextNode textNode0 = new TextNode("valu", "valu");
      Node node0 = textNode0.removeAttr("valu");
      assertSame(textNode0, node0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextNode textNode0 = new TextNode("H0'y_$N#2AzvG|#]J<x", "H0'y_$N#2AzvG|#]J<x");
      textNode0.toString();
      assertEquals(0, (int)textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("-8]>Od^MkT6");
      Element element0 = document0.prepend("-8]>Od^MkT6");
      Element element1 = element0.clone();
      assertEquals(0, (int)element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      // Undeclared exception!
      try { 
        document0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("-8]>Od^MkT6");
      Element element0 = document0.clone();
      assertNotSame(element0, document0);
      assertEquals(0, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comment comment0 = new Comment("realpart", "realpart");
      String string0 = comment0.toString();
      assertEquals("\n<!--realpart-->", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("#'ezt");
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = new TextNode("valu", "valu");
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("#ty7", "!hJ:xPw", true);
      String string0 = xmlDeclaration0.absUrl("#ty7");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("abs:=oyb?if", "abs:=oyb?if", false);
      xmlDeclaration0.attr("abs:=oyb?if", "abs:=oyb?if");
      String string0 = xmlDeclaration0.absUrl("abs:=oyb?if");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("#'ezt");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.body();
      assertNotNull(element0);
      
      element0.setParentNode(document0);
      assertEquals(1, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("abs:");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("abs:");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("#ty7", "!hJ:xPw", true);
      Element element0 = document0.prependChild(xmlDeclaration0);
      xmlDeclaration0.replaceWith(element0);
      assertEquals(0, (int)element0.siblingIndex());
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("#'ezt");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.replaceChild(element0, element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("#'ezt");
      TextNode textNode0 = new TextNode("#'ezt", "#'ezt");
      // Undeclared exception!
      try { 
        textNode0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("#'ezt");
      Element element0 = document0.appendElement("#'ezt");
      element0.previousSibling();
      assertEquals(0, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("#'ezt");
      Element element0 = document0.appendElement("#'ezt");
      Element element1 = (Element)element0.previousSibling();
      assertNotNull(element1);
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("#'ezt");
      Elements elements0 = document0.getElementsByIndexGreaterThan(713);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("#'ezt", "#'ezt", true);
      boolean boolean0 = xmlDeclaration0.equals(xmlDeclaration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("4e:F", "4e:F", true);
      DataNode dataNode0 = DataNode.createFromEncoded("4e:F", "4e:F");
      xmlDeclaration0.parentNode = (Node) dataNode0;
      xmlDeclaration0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextNode textNode0 = new TextNode("valu", "valu");
      textNode0.hashCode();
  }
}
