/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:50:36 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<c\"</C", "<c\"</C");
      assertEquals("<c\"</C", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<?AzO><?z9.6h", "<?AzO><?z9.6h");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<![CDATA[", "<![CDATA[");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Parser.parse("<WG/>Qc}\"m/C", "<WG/>Qc}\"m/C");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parse("<!--", "<!--");
      assertEquals("<!--", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parse("<!", "<!");
      assertEquals("<!", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Parser.parse("<!--%s-->", "<!--%s-->");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Parser.parse("~Gd-03t<<pME);Pw>Q", "~Gd-03t<<pME);Pw>Q");
      assertEquals("~Gd-03t<<pME);Pw>Q", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parse("<7E6C!JPeC:6+rUW~='", "Go<bbSE");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Parser.parse("=<EfR`p=<g", "=<EfR`p=<g");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Parser.parse("5n.L06Kq<DxBK.n=^Y ,", "5n.L06Kq<DxBK.n=^Y ,");
      assertEquals("5n.L06Kq<DxBK.n=^Y ,", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t<7<HR\"`{QYtT=5g", "t<7<HR\"`{QYtT=5g");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Parser.parse("</andBW/V", "</andBW/V");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Parser.parse("<W/c}andB</V", "<W/c}andB</V");
      assertEquals("#document", document0.nodeName());
  }
}
