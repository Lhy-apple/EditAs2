/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:55:23 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("6<b;|V7");
      Document document1 = (Document)document0.appendText("6<b;|V7");
      assertEquals("6<b;|V7", document1.location());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("VeE?Y\"m,#`8725'");
      Elements elements0 = document0.getElementsMatchingText("VeE?Y\"m,#`8725'");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prepend("br");
      element0.appendChild(document0);
      element0.getElementsContainingText("br");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("[&s]Xob{{?o0{`c");
      // Undeclared exception!
      try { 
        document0.child((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      FormElement formElement1 = new FormElement(tag0, "Patter syntax error:", attributes0);
      formElement1.appendChild(formElement0);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((Object) formElement0);
      assertEquals("<br>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("ePr");
      Element element0 = document0.tagName("ePr");
      assertEquals("ePr", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.val("Pattern syntax error: ");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("l%ss");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.addClass("br");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Element element0 = new Element("b");
      element0.prependText("b");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail((Appendable) null, 1478, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("[&]Xobe(?o0`c");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("class");
      // Undeclared exception!
      try { 
        document0.html("class");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      Element element0 = document0.attr("Insert position out of bounds.", true);
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValue("br", "br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValueStarting("br", "br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsMatchingOwnText("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("WM");
      // Undeclared exception!
      try { 
        document0.after("WM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      document0.appendChild(document0);
      document0.firstElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("F");
      Elements elements0 = document0.getElementsByAttributeStarting("F");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("0");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("dj%P@SgrEeX+FL9g!");
      // Undeclared exception!
      try { 
        document0.wrap("dj%P@SgrEeX+FL9g!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("3@c[");
      Element element0 = document0.val("3@c[");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValueMatching("br", "br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("br");
      boolean boolean0 = document0.is("br");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("#");
      Elements elements0 = document0.getElementsByAttributeValueEnding("#", "#");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByClass("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("class");
      Elements elements0 = document0.getElementsByAttributeValueContaining("class", "class");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("0");
      TextNode textNode0 = TextNode.createFromEncoded("0", "0");
      // Undeclared exception!
      try { 
        document0.after((Node) textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("textarea");
      Document document1 = document0.clone();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValueNot("br", "br");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttribute("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("dj%P@SgrEeX+FL9g!");
      // Undeclared exception!
      try { 
        document0.before("dj%P@SgrEeX+FL9g!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("P#4c:Mj1#Mx>o");
      Element element0 = document0.removeClass("P#4c:Mj1#Mx>o");
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("r");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByTag("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-670));
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("br");
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "br", attributes0);
      element0.appendChild(document0);
      assertEquals(0, document0.siblingIndex());
      
      document0.prepend("p#`2?_YYgYM#");
      boolean boolean0 = element0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("class");
      Element element0 = document0.prependElement("class");
      Elements elements0 = element0.parents();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document(">vM_^d aU#UKgQeM");
      document0.prepend(">vM_^d aU#UKgQeM");
      Elements elements0 = document0.children();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("class");
      document0.prependElement("class");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("Ro;?%B+~@PiXs<*5Mnv");
      document0.prepend("Ro;?%B+~@PiXs<*5Mnv");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("encoding", parseSettings0);
      Element element0 = new Element(tag0, "encoding", attributes0);
      DataNode dataNode0 = DataNode.createFromEncoded("K7j}", ")w<C75Md'ho8O[DzKvh");
      Element element1 = element0.appendChild(dataNode0);
      List<DataNode> list0 = element1.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prepend("p#`2?_YYgYM#");
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("b");
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      // Undeclared exception!
      try { 
        document0.insertChildren(6592, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("br");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-466), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("b");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      Document document1 = (Document)document0.insertChildren(0, linkedHashSet0);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Tag tag0 = Tag.valueOf("b1vr");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "b1vr", attributes0);
      Element element0 = formElement0.toggleClass("b1vr");
      String string0 = element0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendChild(document0);
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      FormElement formElement1 = new FormElement(tag0, "Patter syntax error:", attributes0);
      formElement1.appendChild(formElement0);
      String string0 = formElement0.cssSelector();
      assertEquals("br > br", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("class");
      Element element0 = document0.appendChild(document0);
      element0.appendElement("#root");
      element0.siblingElements();
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("P#*c:Mj1#Mx>o");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendChild(document0);
      element0.appendElement("#root");
      element0.nextElementSibling();
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("class");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("br");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      TextNode textNode0 = TextNode.createFromEncoded("br", "s]5b}jl");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "z8'NU 0^0|lg7+O_;l[", attributes0);
      document0.prependChild(formElement0);
      Element element0 = document0.appendChild(document0);
      element0.previousElementSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("class");
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("class");
      Element element0 = document0.appendChild(document0);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("`'lRJAC", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "p", attributes0);
      document0.appendChild(formElement0);
      assertEquals(1, formElement0.siblingIndex());
      
      Element element1 = element0.lastElementSibling();
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("br");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      Element element0 = formElement0.getElementById("Patter syntax error:");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("br");
      DocumentType documentType0 = new DocumentType("br", "br", "br", "Split offset must be not be negative");
      document0.appendChild(documentType0);
      Elements elements0 = document0.getElementsContainingText("5pO3");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prepend("br");
      Elements elements0 = element0.getElementsContainingOwnText("br");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("br");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      Comment comment0 = new Comment("br", "Nkf0ug");
      nodeArray0[1] = (Node) comment0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Comment comment0 = new Comment("jwG{Z*BKVVMQZc/v", "jwG{Z*BKVVMQZc/v");
      boolean boolean0 = Element.preserveWhitespace(comment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      document0.prependElement("Insert position out of bounds.");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("");
      TextNode textNode0 = new TextNode("", "M``G3,?AC`");
      document0.prependChild(textNode0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("");
      DocumentType documentType0 = new DocumentType("M``G3,?AC`", "", "!#*0iui8O U", " > ", "readonly");
      document0.prependChild(documentType0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("MVr_");
      DataNode dataNode0 = DataNode.createFromEncoded("br", "MVr_");
      document0.appendChild(dataNode0);
      String string0 = document0.data();
      assertEquals("br", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("class");
      Comment comment0 = new Comment("Tag name must not be empty.", "]{8K");
      Element element0 = document0.appendChild(comment0);
      String string0 = element0.data();
      assertEquals("Tag name must not be empty.", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("class");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("0br");
      document0.prepend("0br");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Pattern syntax error: ", attributes0);
      formElement0.toggleClass("Pattern syntax error: ");
      boolean boolean0 = formElement0.hasClass("org.jsoup.parser.HtmlTreeBuilderState");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("b");
      FormElement formElement0 = new FormElement(tag0, "b", attributes0);
      Element element0 = formElement0.toggleClass("java.lang.string@0000000007");
      boolean boolean0 = element0.hasClass("java.lang.string@0000000007");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Tag tag0 = Tag.valueOf("b1vr");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "b1vr", attributes0);
      Element element0 = formElement0.toggleClass("b1vr");
      element0.toggleClass("kODv:u..qk");
      boolean boolean0 = formElement0.hasClass("sAZXl`!.&%jxh$v2{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded(" ", "");
      Attributes attributes0 = textNode0.attributes();
      Tag tag0 = Tag.valueOf("blockquote");
      FormElement formElement0 = new FormElement(tag0, "b", attributes0);
      formElement0.toggleClass("");
      formElement0.toggleClass(" ");
      boolean boolean0 = formElement0.hasClass("b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("b");
      FormElement formElement0 = new FormElement(tag0, "b", attributes0);
      formElement0.toggleClass("java.lang.string@0000000007");
      Element element0 = formElement0.toggleClass("java.lang.string@0000000007");
      boolean boolean0 = element0.hasClass("java.lang.string@0000000007");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TextNode textNode0 = new TextNode("java.lang.string@0000000007", "java.lang.string@0000000007");
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("b");
      FormElement formElement0 = new FormElement(tag0, "b", attributes0);
      formElement0.toggleClass("java.lang.string@0000000007");
      Element element0 = formElement0.toggleClass("java.lang.string@0000000007");
      boolean boolean0 = element0.hasClass("java.lang.string@0000000007");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Tag tag0 = Tag.valueOf("b1vr");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "b1vr", attributes0);
      Element element0 = formElement0.toggleClass("b1vr");
      Element element1 = element0.toggleClass("kODv:u..qk");
      Element element2 = element1.toggleClass("kODv:u..qk");
      assertFalse(element2.isBlock());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Tag tag0 = Tag.valueOf("b1vr");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "b1vr", attributes0);
      String string0 = formElement0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea", attributes0);
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = new Document("br");
      StringWriter stringWriter0 = new StringWriter(8656);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringWriter0, (-697), document_OutputSettings1);
      assertEquals("<#root>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = new Document("g]`c`d~G.1'n");
      document0.prependElement("g]`c`d~G.1'n");
      String string0 = document0.html();
      assertEquals("<g]`c`d~G.1'n></g]`c`d~G.1'n>", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Element element0 = new Element("br");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element0.outerHtmlHead(charArrayWriter0, 4980, document_OutputSettings0);
      assertEquals(4985, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      document0.prependText("br");
      String string0 = document0.html();
      assertEquals("br\n<br>", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      element0.prependText("br");
      document0.html();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      StringWriter stringWriter0 = new StringWriter(2048);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(stringWriter0, 6, document_OutputSettings1);
      assertEquals("\n      <br />", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Document document0 = new Document("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, (-2394), document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Document document0 = new Document("g]`c`d~G.1'n");
      Element element0 = document0.prependElement("g]`c`d~G.1'n");
      element0.prependText("g]`c`d~G.1'n");
      document0.html();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Document document0 = new Document("ScriptDataEscapedLessthanSign");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      String string0 = document0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Document document0 = new Document("Ex4.ooJ5UaFqbx~ML");
      BufferedWriter bufferedWriter0 = document0.html((BufferedWriter) null);
      assertNull(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }
}
