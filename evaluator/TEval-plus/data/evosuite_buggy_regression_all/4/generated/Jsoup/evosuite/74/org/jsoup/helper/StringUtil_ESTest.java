/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:56:28 GMT 2023
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.helper.StringUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtil_ESTest extends StringUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = StringUtil.resolve("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = StringUtil.join((Collection) linkedList0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = StringUtil.padding(2250);
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      String string1 = StringUtil.join(stringArray0, stringArray0[1]);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(182);
      linkedList0.add(integer0);
      Iterator<Integer> iterator0 = linkedList0.iterator();
      String string0 = StringUtil.join(iterator0, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.padding((-4257));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = StringUtil.padding(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("Zdnso/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("           ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric(" v     ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(160);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "                                      ");
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "                                      ", true);
      assertEquals("                                      ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Oy{Hx2 w2_M?{B");
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "Oy{Hx2 w2_M?{B", true);
      assertEquals("Oy{Hx2 w2_M?{BOy{Hx2 w2_M?{B", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = StringUtil.padding(1132);
      String string1 = StringUtil.normaliseWhitespace(string0);
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtil.in("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[21];
      stringArray0[0] = "5C8$'1|rz0<RHPc";
      // Undeclared exception!
      try { 
        StringUtil.in("3$UjcK>/m", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "  Q        ";
      boolean boolean0 = StringUtil.in("  Q        ", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtil.inSorted("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      boolean boolean0 = StringUtil.inSorted("", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(".r=K6mn{'m /jLOmE><", ".r=K6mn{'m /jLOmE><", 2441, ".r=K6mn{'m /jLOmE><", uRLStreamHandler0);
      try { 
        StringUtil.resolve(uRL0, ".r=K6mn{'m /jLOmE><");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: .r=k6mn{'m /jlome><
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URL uRL1 = StringUtil.resolve(uRL0, "?      ");
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample?", uRL1.toExternalForm());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = StringUtil.resolve(uRL0, ".QGO=g*Es<8h m");
      assertEquals("http://www.someFakeButWellFormedURL.org/.QGO=g*Es<8h m", uRL1.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringBuilder stringBuilder0 = StringUtil.stringBuilder();
      StringUtil.normaliseWhitespace(".Pu )T'o5VZ_");
      StringBuilder stringBuilder1 = stringBuilder0.append(".Pu )T'o5VZ_");
      StringBuilder stringBuilder2 = stringBuilder1.append(".Pu )T'o5VZ_");
      StringBuilder stringBuilder3 = stringBuilder0.append((CharSequence) "U=wJ>D`QQqE0+KH$V");
      char[] charArray0 = new char[14];
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      stringBuilder3.append(stringBuffer0);
      StringBuilder stringBuilder4 = stringBuilder0.append(charArray0);
      StringBuilder stringBuilder5 = stringBuilder4.append(charArray0, (int) '\u0000', (int) '\u0000');
      stringBuilder5.append("U=wJ>D`QQqE0+KH$V");
      StringBuilder stringBuilder6 = stringBuilder2.insert((int) '\u0000', (CharSequence) stringBuffer0);
      stringBuilder6.append(stringBuffer0);
      stringBuilder2.insert(9, (CharSequence) stringBuilder6);
      stringBuilder4.insert(9, "org.jsoup.helper.StringUtil$1");
      stringBuilder1.append((CharSequence) stringBuilder4);
      stringBuilder4.append((Object) stringBuilder2);
      StringBuffer stringBuffer1 = new StringBuffer(".Pu )T'o5VZ_");
      StringBuilder stringBuilder7 = stringBuilder2.append(stringBuffer1);
      StringBuffer stringBuffer2 = new StringBuffer(".Pu )T'o5VZ_");
      stringBuilder7.append((Object) stringBuilder0);
      stringBuffer2.insert(9, (CharSequence) stringBuilder3);
      assertEquals(4236, stringBuffer2.length());
      
      StringBuilder stringBuilder8 = StringUtil.stringBuilder();
      assertSame(stringBuilder8, stringBuilder1);
  }
}
