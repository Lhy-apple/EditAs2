/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:34:37 GMT 2023
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.JsonWriteContext;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonWriteContext_ESTest extends JsonWriteContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      jsonWriteContext0.getCurrentName();
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
      assertEquals(0, jsonWriteContext0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      jsonWriteContext0.getDupDetector();
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertTrue(jsonWriteContext0.inRoot());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      StringBuffer stringBuffer0 = new StringBuffer();
      jsonWriteContext0.setCurrentValue(stringBuffer0);
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      String string0 = jsonWriteContext0.toString();
      assertTrue(jsonWriteContext0.inRoot());
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.getParent();
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
      assertNull(jsonWriteContext1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      jsonWriteContext0.getCurrentValue();
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
      assertEquals("ARRAY", jsonWriteContext1.getTypeDesc());
      assertNotNull(jsonWriteContext1);
      
      JsonWriteContext jsonWriteContext2 = jsonWriteContext0.createChildObjectContext();
      assertEquals(0, jsonWriteContext2.getEntryCount());
      assertTrue(jsonWriteContext2.inObject());
      assertSame(jsonWriteContext2, jsonWriteContext1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      assertTrue(jsonWriteContext0.inRoot());
      
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.reset(1197);
      assertFalse(jsonWriteContext1.inRoot());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      JsonWriteContext jsonWriteContext2 = jsonWriteContext0.createChildArrayContext();
      jsonWriteContext1.writeValue();
      assertEquals(1, jsonWriteContext1.getEntryCount());
      
      int int0 = jsonWriteContext2.writeValue();
      assertEquals(2, jsonWriteContext2.getEntryCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
      assertNotNull(jsonWriteContext1);
      
      String string0 = jsonWriteContext1.toString();
      assertFalse(jsonWriteContext0.inArray());
      assertEquals(0, jsonWriteContext1.getEntryCount());
      assertEquals("[0]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext1 = new JsonWriteContext(16, jsonWriteContext0, dupDetector0);
      jsonWriteContext1._child = jsonWriteContext0;
      jsonWriteContext1._child.withDupDetector(dupDetector0);
      JsonWriteContext jsonWriteContext2 = jsonWriteContext1._child.createChildObjectContext();
      assertTrue(jsonWriteContext2.inObject());
      assertEquals(0, jsonWriteContext2.getEntryCount());
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      int int0 = jsonWriteContext0.writeFieldName("/");
      assertEquals(0, int0);
      
      int int1 = jsonWriteContext0.writeFieldName("/");
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals(4, int1);
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      jsonWriteContext0.writeValue();
      int int0 = jsonWriteContext0.writeFieldName("-INF");
      assertEquals(1, jsonWriteContext0.getEntryCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      jsonWriteContext0.writeFieldName("2yi()jFKgOT)rNO%");
      JsonWriteContext jsonWriteContext1 = new JsonWriteContext(2, jsonWriteContext0, dupDetector0);
      try { 
        jsonWriteContext1.writeFieldName("2yi()jFKgOT)rNO%");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Duplicate field '2yi()jFKgOT)rNO%'
         //
         verifyException("com.fasterxml.jackson.core.json.JsonWriteContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      JsonWriteContext jsonWriteContext1 = new JsonWriteContext(2, jsonWriteContext0, dupDetector0);
      int int0 = jsonWriteContext1.writeValue();
      assertEquals(1, jsonWriteContext1.getEntryCount());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      jsonWriteContext0.writeValue();
      int int0 = jsonWriteContext0.writeValue();
      assertEquals(1, jsonWriteContext0.getCurrentIndex());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      StringBuilder stringBuilder0 = new StringBuilder();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      jsonWriteContext1.appendDesc(stringBuilder0);
      assertEquals("{?}", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      StringBuilder stringBuilder0 = new StringBuilder();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      jsonWriteContext1._currentName = "KE^g)rs~o`Z+4:p{>";
      jsonWriteContext1.appendDesc(stringBuilder0);
      assertEquals("{\"KE^g)rs~o`Z+4:p{>\"}", stringBuilder0.toString());
  }
}
