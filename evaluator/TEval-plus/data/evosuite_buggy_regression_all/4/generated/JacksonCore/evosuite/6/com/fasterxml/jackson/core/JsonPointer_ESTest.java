/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:35:56 GMT 2023
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonPointer_ESTest extends JsonPointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      jsonPointer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("sLL2", 0);
      String string0 = jsonPointer0.getMatchingProperty();
      assertNotNull(string0);
      assertEquals("~sLL2", string0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("sLL2", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("+rC>.q$W&{JTD4xmG", 0);
      JsonPointer jsonPointer1 = jsonPointer0.tail();
      boolean boolean0 = jsonPointer0.equals(jsonPointer1);
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("+rC>.q$W&{JTD4xmG", jsonPointer0.toString());
      assertEquals("~+rC>.q$W&{JTD4xmG", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(boolean0);
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("0");
      String string0 = jsonPointer0.toString();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
      assertEquals("0", string0);
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertTrue(jsonPointer0.mayMatchProperty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf("/5e_tx ");
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("5e_tx ", jsonPointer0.getMatchingProperty());
      assertEquals("/5e_tx ", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.matches();
      assertTrue(boolean0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      int int0 = jsonPointer0.getMatchingIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf((String) null);
      assertFalse(jsonPointer0.mayMatchElement());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      assertTrue(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer.valueOf("~+rC>.q$W&{JTD4xmG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"~+rC>.q$W&{JTD4xmG\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("@5");
      boolean boolean0 = jsonPointer0.matches();
      assertTrue(jsonPointer0.mayMatchElement());
      assertEquals("@5", jsonPointer0.toString());
      assertEquals("5", jsonPointer0.getMatchingProperty());
      assertFalse(boolean0);
      assertTrue(jsonPointer0.mayMatchProperty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("@6034493725");
      boolean boolean0 = jsonPointer0.mayMatchProperty();
      assertTrue(boolean0);
      assertEquals("6034493725", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("sLL2", 0);
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertEquals("sLL2", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("~sLL2", jsonPointer0.getMatchingProperty());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertFalse(boolean0);
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("@5");
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertTrue(boolean0);
      assertFalse(jsonPointer0.matches());
      assertEquals("@5", jsonPointer0.toString());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("5", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.matchProperty("~+rC.q&{JT4xmG");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("sLL2", 0);
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty("~sLL2");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertNotNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("~+rC>.q$W&{JTD4xmG");
      assertTrue(jsonPointer0.mayMatchProperty());
      
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty("~+rC>.q$W&{JTD4xmG");
      assertNull(jsonPointer1);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
      assertEquals("+rC>.q$W&{JTD4xmG", jsonPointer0.getMatchingProperty());
      assertEquals("~+rC>.q$W&{JTD4xmG", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.matchElement(0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("@5");
      JsonPointer jsonPointer1 = jsonPointer0.matchElement(5);
      assertEquals("5", jsonPointer0.getMatchingProperty());
      assertNotNull(jsonPointer1);
      assertEquals("@5", jsonPointer0.toString());
      assertEquals("", jsonPointer1.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = jsonPointer0.matchElement((-1));
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.equals(jsonPointer0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.equals((Object) null);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("~+rC>.qW&{JTD:xmG");
      boolean boolean0 = jsonPointer0.equals("~+rC>.qW&{JTD:xmG");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
      assertEquals("+rC>.qW&{JTD:xmG", jsonPointer0.getMatchingProperty());
      assertEquals("~+rC>.qW&{JTD:xmG", jsonPointer0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("@1.oLEdEJ", 1);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("/.oLEdEJ", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals("@1.oLEdEJ", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("@2034493725");
      assertEquals("@2034493725", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
      assertEquals(2034493725, jsonPointer0.getMatchingIndex());
      assertEquals("2034493725", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("~/5e_tx ");
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals("~/5e_tx ", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("urF.(\"~7OOb7`~");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
      assertEquals("rF.(\"~7OOb7`~", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("@~");
      assertEquals("@~", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("~", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("bXYj uH%{_Axu~2/Df");
      assertEquals("XYj uH%{_Axu~2", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("bXYj uH%{_Axu~2/Df", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("?~x|,}H.O]~e");
      assertEquals("?~x|,}H.O]~e", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
      assertEquals("~x|,}H.O]~e", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.mayMatchElement());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("@/0343725", 2);
      assertEquals("@/0343725", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
      assertEquals("~343725", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }
}
