/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:35:12 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.JsonElement;
import java.sql.Date;
import java.sql.Timestamp;
import java.time.Instant;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultDateTypeAdapter_ESTest extends DefaultDateTypeAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      String string0 = defaultDateTypeAdapter0.toString();
      assertEquals("DefaultDateTypeAdapter(SimpleDateFormat)", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Instant instant0 = MockInstant.ofEpochMilli((-4497L));
      java.util.Date date0 = java.util.Date.from(instant0);
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(date0);
      java.util.Date date1 = defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      assertNotNull(date1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((-1427), (-1427));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1427
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends java.util.Date>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree((java.util.Date) null);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Instant instant0 = MockInstant.ofEpochMilli((-4497L));
      java.util.Date date0 = java.util.Date.from(instant0);
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(date0);
      Class<java.util.Date> class1 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1);
      java.util.Date date1 = defaultDateTypeAdapter1.fromJsonTree(jsonElement0);
      assertNotSame(date0, date1);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Instant instant0 = MockInstant.ofEpochMilli((-4497L));
      java.util.Date date0 = java.util.Date.from(instant0);
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(date0);
      java.util.Date date1 = defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      assertEquals("2014-02-14 20:21:21.32", date1.toString());
  }
}
