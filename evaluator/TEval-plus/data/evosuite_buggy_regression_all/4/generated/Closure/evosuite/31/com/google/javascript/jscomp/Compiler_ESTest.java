/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:11:16 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import java.io.CharArrayReader;
import java.io.File;
import java.io.PrintStream;
import java.net.URI;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TreeMap;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedHashSet<SourceFile> linkedHashSet0 = new LinkedHashSet<SourceFile>();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>(linkedHashSet0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
      
      CompilerInput compilerInput0 = compiler0.getSynthesizedExternsInput();
      assertEquals("{SyntheticVarsDeclar}", compilerInput0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource((JSModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.disableThreads();
      LinkedHashSet<SourceFile> linkedHashSet0 = new LinkedHashSet<SourceFile>();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>(linkedHashSet0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      compiler0.toSource();
      assertEquals(1.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
      JSModule[] jSModuleArray0 = new JSModule[2];
      // Undeclared exception!
      try { 
        compiler0.init(jSSourceFileArray0, jSModuleArray0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.resetUniqueNameId();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Level level0 = Level.FINEST;
      Compiler.setLoggingLevel(level0);
      assertEquals("FINEST", level0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getCssRenamingMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      boolean boolean0 = compiler0.hasRegExpGlobalReferences();
      assertTrue(boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      compiler0.setState(compiler_IntermediateState0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compilerOptions0.checkTypes);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("j:#y+^Z~;sU@94M'a2w");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      MockFile mockFile0 = new MockFile("Not an extern input: %s", "d^H*SYU{");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
      jSSourceFileArray0[0] = jSSourceFile0;
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      // Undeclared exception!
      try { 
        compiler0.replaceIncrementalSourceAst(jsAst0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.rebuildInputsFromModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      compiler0.addNewScript(jsAst0);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.computeCFG();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getPropertyMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.processDefines();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.DefaultPassConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Compiler.runCallableWithLargeStack((Callable<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.languageMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.setCssRenamingMap((CssRenamingMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("j:#y+^Z~;sU@94M'a2w");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
      try { 
        compiler0.getWarningCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getVariableMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Logger logger0 = Logger.getLogger("com.google.javascript.jscomp.Compiler$9");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.getFunctionalInformationMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.recordFunctionInformation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
      
      compiler0.buildKnownSymbolTable();
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("J");
      String string0 = compiler0.toSource(node0);
      assertEquals("\"J\"", string0);
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromFile("s@r");
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
      // Undeclared exception!
      try { 
        compiler0.compile(sourceFile0, jSSourceFileArray0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getModuleGraph();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("E3*O?;wMTb|?'NBs|j", "[testcode]");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.getSourceMap();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("j:#y+^Z~;sU@94M'a2w");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.getInputsForTesting();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = compiler0.recentChange;
      compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getInputsById();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.setHasRegExpGlobalReferences(true);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getMessages();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("j:#y+^Z~;sU@94M'a2w");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.getExternsForTesting();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.removeTryCatchFinally();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getTopScope();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder0.getLineIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder0.getColumnIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("j:#y+^Z~;sU@94M'a2w");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      MockFile mockFile0 = new MockFile("Not an extern input: %s", "d^H*SYU{");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
      jSSourceFileArray0[0] = jSSourceFile0;
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compilerOptions0.setSourceMapOutputPath("Not an extern input: %s");
      compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
      assertFalse(compilerOptions0.checkTypes);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      Stack<JSModule> stack0 = new Stack<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) stack0, compilerOptions0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compilerOptions0.checkTypes);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
      // Undeclared exception!
      try { 
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("?6PNh=5DXHb&'yait");
      JSModule[] jSModuleArray0 = new JSModule[1];
      // Undeclared exception!
      try { 
        compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        Compiler.runCallable((Callable<Object>) null, false, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        Compiler.runCallable((Callable<Object>) null, false, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
      compiler0.setPassConfig(passConfig_PassConfigDelegate0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PassConfig passConfig0 = compiler0.getPassConfig();
      // Undeclared exception!
      try { 
        compiler0.setPassConfig(passConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // this.passes has already been assigned
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("j:#y+^Z~;sU@94M'a2w");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      MockFile mockFile0 = new MockFile("Noi an exJern input: %s", "d^H*SYU{");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
      jSSourceFileArray0[0] = jSSourceFile0;
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
      compiler0.parse();
      compiler0.check();
      assertEquals(0.25, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      compiler0.stripCode(compilerOptions0.stripNamePrefixes, compilerOptions0.aliasableStrings, compilerOptions0.stripTypes, compilerOptions0.stripNameSuffixes);
      assertFalse(compilerOptions0.exportTestFunctions);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("j:#y+^Z~;sU@94M'a2w");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
      try { 
        compiler0.endPass();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tracer should not be null at the end of a pass.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("j:#y+^Z~;sU@94M'a2w");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      MockFile mockFile0 = new MockFile("Noi an exJern input: %s", "d^H*SYU{");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      Node node0 = compiler0.parse((SourceFile) jSSourceFile0);
      compiler0.areNodesEqualForInlining(node0, node0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedHashSet<SourceFile> linkedHashSet0 = new LinkedHashSet<SourceFile>();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>(linkedHashSet0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SourceFile sourceFile0 = SourceFile.fromReader("fm,[W]I", charArrayReader0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      compiler0.addIncrementalSourceAst(jsAst0);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("j:#y+^Z~;sU@94M'a2w");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      MockFile mockFile0 = new MockFile("Not an extern input: %s", "d^H*SYU{");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
      jSSourceFileArray0[0] = jSSourceFile0;
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      // Undeclared exception!
      try { 
        compiler0.addNewSourceAst(jsAst0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Input already exists: /data/lhy/TEval-plus/Not an extern input: %s/d^H*SYU{
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getDegenerateModuleGraph();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSModuleGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      compiler0.getReverseAbstractInterpreter();
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("j:#y+^Z~;sU@94M'a2w");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      MockFile mockFile0 = new MockFile("Not an extern input: %s", "d^H*SYU{");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
      jSSourceFileArray0[0] = jSSourceFile0;
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compilerOptions0.setIdeMode(true);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
      compiler0.parse();
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
      compiler0.processAMDAndCommonJSModules();
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode("", "j:#y+^Z~;sU@94M'a2w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("j:#y+^Z~;sU@94M'a2w");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      MockFile mockFile0 = new MockFile("Not an extern input: %s", "d^H*SYU{");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
      jSSourceFileArray0[0] = jSSourceFile0;
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
      compiler0.parseTestCode("");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("CATCH");
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.disableThreads();
      MockFile mockFile0 = new MockFile("fm,[W]I", "fm,[W]I");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      compiler0.parse((SourceFile) jSSourceFile0);
      compiler0.toSource();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("j:#y+^Z~;sU@94M'a2w");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.disableThreads();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("(");
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[8];
      jSSourceFileArray0[0] = jSSourceFile0;
      jSSourceFileArray0[1] = jSSourceFile0;
      jSSourceFileArray0[2] = jSSourceFile0;
      jSSourceFileArray0[3] = jSSourceFile0;
      jSSourceFileArray0[4] = jSSourceFile0;
      jSSourceFileArray0[5] = jSSourceFileArray0[1];
      jSSourceFileArray0[6] = jSSourceFile0;
      jSSourceFileArray0[7] = jSSourceFile0;
      compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
      compiler0.toSourceArray();
      assertEquals(3, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.append("[testcode]");
      boolean boolean0 = compiler_CodeBuilder0.endsWith("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("/*\n");
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      boolean boolean0 = compiler_CodeBuilder0.endsWith("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.append("j:#y+^Z~;sU@94M'a2w");
      boolean boolean0 = compiler_CodeBuilder0.endsWith("T,TMTi");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      boolean boolean0 = compiler0.isInliningForbidden();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
      // Undeclared exception!
      try { 
        compiler0.ensureLibraryInjected((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("j:#y+^Z~;sU@94M'a2w");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("j:#y+^Z~;sU@94M'a2w");
      Node node0 = compiler0.parse((SourceFile) jSSourceFile0);
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
      jSSourceFileArray0[0] = jSSourceFile0;
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
      String[] stringArray0 = compiler0.toSourceArray();
      JSError jSError0 = JSError.make((String) null, node0, compilerOptions0.checkGlobalNamesLevel, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
      compiler0.report(jSError0);
      assertTrue(jSSourceFile0.isExtern());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("j:#y+^Z~;sU@94M'a2w");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("j:#y+^Z~;sU@94M'a2w");
      compiler0.parse((SourceFile) jSSourceFile0);
      // Undeclared exception!
      try { 
        compiler0.buildKnownSymbolTable();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      Region region0 = compiler0.getSourceRegion("", 59);
      assertNull(region0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("j:#y+^Z~;sU@94M'a2w");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      mockPrintStream0.print(" g%");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("j:#y+^Z~;sU@94M'a2w");
      compiler0.parse((SourceFile) jSSourceFile0);
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
      jSSourceFileArray0[0] = jSSourceFile0;
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getSourceLine((String) null, 2132);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getSourceRegion("the error manager cannot be null", (-1));
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getAstDotGraph();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      String string0 = compiler0.getAstDotGraph();
      assertEquals("digraph AST {\n  node [color=lightblue2, style=filled];\n  node0 [label=\"BLOCK\"];\n  node1 [label=\"SCRIPT\"];\n  node0 -> node1 [weight=1];\n  node1 -> RETURN [label=\"UNCOND\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n  node0 -> RETURN [label=\"SYN_BLOCK\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n  node0 -> node1 [label=\"UNCOND\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedHashSet<SourceFile> linkedHashSet0 = new LinkedHashSet<SourceFile>();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>(linkedHashSet0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      ErrorManager errorManager0 = compiler0.getErrorManager();
      assertEquals(0, errorManager0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ErrorManager errorManager0 = compiler0.getErrorManager();
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertNotNull(errorManager0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>(comparator0);
      Node node0 = Node.newString(1, "[");
      // Undeclared exception!
      try { 
        compiler0.updateGlobalVarReferences(treeMap0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MockFile mockFile0 = new MockFile("E3*O?;wMTb|?'NBs|j", "[testcode]");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      compiler0.setProgress(1666.67);
      assertEquals(1.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.setProgress((-3412.2835121));
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }
}
