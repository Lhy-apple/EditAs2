/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:07:34 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSlot;
import com.google.javascript.rhino.jstype.StaticScope;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamedType_ESTest extends NamedType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "XFHliuh4", "com.google.common.base.Predicates$ObjectPredicate", (-536870912), (-1572));
      boolean boolean0 = namedType0.isNamedType();
      assertEquals("XFHliuh4", namedType0.getReferenceName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "pCC@'qoY", "pCC@'qoY", 1630, 1630);
      String string0 = namedType0.toString();
      assertEquals("pCC@'qoY", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "}[j;><LED.?,m5_SB32", "}[j;><LED.?,m5_SB32", 87855567, 87855567);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, namedType0, "Not declared as a type name");
      boolean boolean0 = enumElementType0.isEquivalentTo(namedType0);
      assertTrue(namedType0.isNominalType());
      assertEquals("}[j;><LED.?,m5_SB32", namedType0.getReferenceName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "XFHliuh4", "com.google.common.base.Predicates$ObjectPredicate", (-536870912), (-1572));
      boolean boolean0 = namedType0.hasReferenceName();
      assertTrue(boolean0);
      assertEquals("XFHliuh4", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "com.google.common.collect.AbstractMultimap$WrappedSortedSet", "pC}@'`IoY", 29, 47);
      jSTypeRegistry0.resolveTypesInScope(namedType0);
      assertEquals("com.google.common.collect.AbstractMultimap$WrappedSortedSet", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.forwardDeclareType("X.");
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "X.", "X.", (-1405), (-1405));
      Node node0 = Node.newNumber((double) 0);
      namedType0.defineProperty((String) null, namedType0, false, node0);
      namedType0.resolveInternal(simpleErrorReporter0, namedType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "XFHliuh4", "com.google.common.base.Predicates$ObjectPredicate", (-536870912), (-1572));
      ObjectType objectType0 = namedType0.getReferencedObjTypeInternal();
      Node node0 = Node.newString(0, "Unknown class name");
      namedType0.defineProperty("", objectType0, true, node0);
      boolean boolean0 = namedType0.defineProperty("XFHliuh4", objectType0, true, node0);
      assertTrue(boolean0);
      assertEquals("XFHliuh4", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "void", "9", 22, 5);
      JSType[] jSTypeArray0 = new JSType[2];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) namedType0, false, jSTypeArray0);
      namedType0.resolveInternal(simpleErrorReporter0, functionType0);
      assertEquals("void", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.forwardDeclareType("X.");
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "X.", "X.", (-1405), (-1405));
      namedType0.resolveInternal(simpleErrorReporter0, namedType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.setLastGeneration(false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "pCC@'qoY", "pCC@'qoY", 1654, 1654);
      namedType0.resolveInternal(simpleErrorReporter0, namedType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<String> immutableList0 = ImmutableList.of("_)og/mzH5N%QFrd", "_)og/mzH5N%QFrd", "_)og/mzH5N%QFrd", "_)og/mzH5N%QFrd", "_)og/mzH5N%QFrd");
      jSTypeRegistry0.setTemplateTypeNames(immutableList0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "_)og/mzH5N%QFrd", "_)og/mzH5N%QFrd", (-114), (-114));
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      namedType0.setValidator(predicate0);
      namedType0.resolveInternal(simpleErrorReporter0, namedType0);
      assertTrue(namedType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "pMlFZcEF?", "pMlFZcEF?", 1156, 1156);
      SimpleSlot simpleSlot0 = new SimpleSlot("com.google.javascript.rhino.jstype.NamedType$1", (JSType) null, false);
      namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, "Named type with empty name component");
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "W}+c:.G", 94, 94);
      SimpleSlot simpleSlot0 = new SimpleSlot("Not declared as a constructor", namedType0, true);
      NamedType namedType1 = (NamedType)namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, "W}+c:.G");
      assertEquals("", namedType1.getReferenceName());
      assertNotNull(namedType1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "Not declared as a constructor", 1, 1);
      namedType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      boolean boolean0 = namedType0.setValidator(predicate0);
      assertTrue(namedType0.isResolved());
      assertFalse(boolean0);
  }
}
