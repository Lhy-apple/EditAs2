/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:09:50 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckSideEffects;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CheckSideEffects_ESTest extends CheckSideEffects_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("collapseProperties");
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
      // Undeclared exception!
      try { 
        checkSideEffects0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("collapsero,eries");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.aggressiveVarCheck, false);
      checkSideEffects0.process(node0, node0);
      assertFalse(node0.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("colFlapsero,eries", ";DIfwtX");
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkProvides, false);
      checkSideEffects0.process(node0, node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("ollapyeProerties");
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      Node node1 = new Node(115, node0, node0, 51, 51);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, false);
      checkSideEffects0.hotSwapScript(node1, node1);
      assertFalse(node1.isCase());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("N&o5_");
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkGlobalThisLevel, false);
      checkSideEffects0.process(node0, node0);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("~");
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      Node node1 = Node.newNumber(681.88089, 44, 388);
      Node node2 = new Node(125, node1, node0, 2, 43);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkRequires, false);
      checkSideEffects0.hotSwapScript(node2, node2);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("'}g&,");
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
      checkSideEffects0.process(node0, node0);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("ollapyeProerties");
      CheckSideEffects.StripProtection checkSideEffects_StripProtection0 = new CheckSideEffects.StripProtection(compiler0);
      Node node1 = new Node(37, node0, 36, 2);
      checkSideEffects_StripProtection0.process(node1, node1);
      assertEquals(46, Node.IS_NAMESPACE);
  }
}
