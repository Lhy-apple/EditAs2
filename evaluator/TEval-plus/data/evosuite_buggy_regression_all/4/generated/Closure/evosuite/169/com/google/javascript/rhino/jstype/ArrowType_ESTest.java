/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:25:06 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrowType_ESTest extends ArrowType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.ArrowType");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      // Undeclared exception!
      try { 
        arrowType0.getGreatestSubtype(errorFunctionType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "x]'c3Uqo|1");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      // Undeclared exception!
      try { 
        arrowType0.testForEquality(errorFunctionType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "}");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      // Undeclared exception!
      try { 
        arrowType0.getLeastSupertype(errorFunctionType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "8");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      String string0 = arrowType0.toAnnotationString();
      assertEquals("[ArrowType]", string0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
      Visitor<Integer> visitor0 = (Visitor<Integer>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        arrowType0.visit(visitor0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "IsInstanceOf(");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      arrowType0.getPossibleToBooleanOutcomes();
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
      ArrowType arrowType1 = new ArrowType(jSTypeRegistry0, (Node) null, arrowType0, false);
      boolean boolean0 = arrowType1.isSubtype(arrowType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "IsInstanceOf(");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType((Node) null);
      boolean boolean0 = arrowType1.isSubtype(arrowType0);
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "[ArrowType]");
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) errorFunctionType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node((-1685), node0, node0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node1, jSTypeArray0[0], true);
      boolean boolean0 = arrowType0.isSubtype(arrowType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "[ArrowType]");
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) errorFunctionType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node((-1685), node0, node0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node1, jSTypeArray0[0], true);
      ArrowType arrowType1 = new ArrowType(jSTypeRegistry0, node0, jSTypeArray0[0], true);
      boolean boolean0 = arrowType1.isSubtype(arrowType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "IsInstanceOf(");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) errorFunctionType0;
      jSTypeArray0[1] = (JSType) arrowType0;
      jSTypeArray0[2] = (JSType) errorFunctionType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node0);
      boolean boolean0 = arrowType0.isSubtype(arrowType1);
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "IsInstanceOf(");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[2] = (JSType) errorFunctionType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node0);
      boolean boolean0 = arrowType1.isSubtype(arrowType0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "IsInstanceOf(");
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[2] = (JSType) errorFunctionType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType((Node) null);
      boolean boolean0 = arrowType0.isSubtype(arrowType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "[ArrowType]");
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) errorFunctionType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node(55, node0, node0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node1, jSTypeArray0[0], true);
      ArrowType arrowType1 = new ArrowType(jSTypeRegistry0, node0, jSTypeArray0[0], true);
      boolean boolean0 = arrowType0.isSubtype(arrowType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "43l^KFRG?");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      Node node0 = Node.newNumber(1291.0042632031893, 27591, 0);
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node0);
      boolean boolean0 = arrowType0.isSubtype(arrowType1);
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "[ArrowType]");
      Node node0 = Node.newString("Unknown class name");
      Node node1 = new Node(12, node0, node0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, errorFunctionType0, false);
      ArrowType arrowType1 = new ArrowType(jSTypeRegistry0, node1, (JSType) null, false);
      boolean boolean0 = arrowType1.isSubtype(arrowType0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "[ArrowType]");
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) errorFunctionType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node((-1685), node0, node0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node1, jSTypeArray0[0], true);
      boolean boolean0 = arrowType0.hasEqualParameters(arrowType0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "[ArrowType]");
      Node node0 = Node.newString(0, "Named type with empty name component", 0, 1);
      Node node1 = new Node((-1685), node0, node0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node1, errorFunctionType0, false);
      ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType1.hasEqualParameters(arrowType0, false);
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "sW");
      ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType1.hasEqualParameters(arrowType0, false);
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "[ArrowType]");
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[1] = (JSType) errorFunctionType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, jSTypeArray0[1], false);
      ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType0.hasEqualParameters(arrowType1, true);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "REFERENCE_ERROR_FUNCTION_TYPE");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType0.checkArrowEquivalenceHelper(arrowType0, false);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "[ArrowType]");
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      boolean boolean0 = errorFunctionType0.hasEqualCallType(functionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "[ArrowType]");
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) errorFunctionType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node((-1685), node0, node0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node1, jSTypeArray0[0], true);
      arrowType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "[ArrowType]");
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) errorFunctionType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, jSTypeArray0[0], true);
      JSType jSType0 = arrowType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertFalse(jSType0.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "[ArrowType]");
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) errorFunctionType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, jSTypeArray0[0], true);
      boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "[ArrowType]");
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) errorFunctionType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node((-1685), node0, node0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node1, jSTypeArray0[0], true);
      boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
      boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newNumber(1291.0042632031893, 27591, 0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
      boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "[ArrowType]");
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) errorFunctionType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node((-1685), node0, node0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node1, jSTypeArray0[0], true);
      boolean boolean0 = arrowType0.hasAnyTemplateInternal();
      assertFalse(boolean0);
  }
}
