/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:19:35 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.AstParallelizer;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MakeDeclaredNamesUnique;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeOptimizationsPass;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.RuntimeTypeCheck;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SimpleDefinitionFinder;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VerboseMessageFormatter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.io.File;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = Node.newString("", 3177, 25);
      NodeUtil.getVarsDeclaredInBranch(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NodeUtil.opToStr(76);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(";SX9p*E!tJ#(3", ";SX9p*E!tJ#(3");
      Node node0 = compiler0.parse(jSSourceFile0);
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(0, node0.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newNumber(996.0, 37, 37);
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString(4009, "RETURN_RESULT");
      Node node1 = Node.newString(32, "T~c@");
      Node node2 = Node.newString(5, "com.google.javascript.jscomp.InvocationsCallback", 16, 1136);
      Node node3 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.isLhs(node0, node3);
      assertEquals(130, node3.getType());
      
      boolean boolean1 = NodeUtil.isEmptyBlock(node2);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.isStatement(node0);
      boolean boolean3 = NodeUtil.isPrototypeProperty(node1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      Node node0 = new Node(111);
      node0.removeChildren();
      NodeUtil.isEmptyBlock(node0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.newExpr((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node((-222), 1305, (-222));
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isFunctionDeclaration(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeUtil.isCall(node0);
      node0.setVarArgs(true);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      NodeUtil.isValidDefineValue(node0, treeSet0);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.append("com.google.javascript.jscomp.NodeUtil$VarCollector");
      int int0 = 19;
      Node node0 = Node.newNumber((double) 19);
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = NodeUtil.isCall(node0);
      node0.setVarArgs(true);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      boolean boolean1 = NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.getExpressionBooleanValue(node0);
      Node node1 = new Node((-24));
      boolean boolean2 = NodeUtil.isSimpleOperator(node1);
      assertTrue(boolean2 == boolean1);
      
      NodeUtil.isSimpleOperatorType((-599));
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean3 = NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString(98, ".OA\"fvW-@Y.");
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NodeUtil.isLatin("~-8Y");
      Node node0 = Node.newString("~-8Y");
      Node[] nodeArray0 = new Node[11];
      nodeArray0[2] = node0;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newNumber(0.0);
      NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "BEFORE_OPTIMIZATIONS", node0, "BEFORE_OPTIMIZATIONS");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        treeSet0.subSet((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newString("|YE&", (-993), (-993));
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "|YE&", 2372, 4);
      node0.addChildToFront(node1);
      assertEquals(4, node1.getCharno());
      assertEquals(2372, node1.getLineno());
      assertEquals(38, node1.getType());
      
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      boolean boolean1 = NodeUtil.isGetOrSetKey(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      NodeUtil.referencesThis(node0);
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isLoopStructure(node0);
      NodeUtil.isForIn(node0);
      NodeUtil.isGetProp(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(4095);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=4095> (type 4095)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
      String string0 = "hj6y?9#]Ed";
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
      nodeTraversal0.getEnclosingFunction();
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax0.mayHaveSideEffects((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Node node0 = Node.newString((-1392), "Infinity", (-202), (-1392));
      NodeUtil.opToStr(1);
      boolean boolean0 = NodeUtil.isArrayLiteral(node0);
      boolean boolean1 = NodeUtil.isFunctionExpression(node0);
      boolean boolean2 = NodeUtil.isStrWhiteSpaceChar(4095);
      boolean boolean3 = NodeUtil.isForIn(node0);
      assertTrue(boolean3 == boolean1);
      
      NodeUtil.opToStr((-2787));
      boolean boolean4 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean4 == boolean2);
      
      NodeUtil.getNumberValue(node0);
      int int0 = NodeUtil.precedence(26);
      assertEquals(13, int0);
      
      boolean boolean5 = NodeUtil.isSimpleOperatorType(13);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      NodeUtil.opToStr(83);
      NodeUtil.getStringNumberValue("Fi?qc1Y1hLLjh%");
      Node node0 = Node.newString(105, "jaJb]#q86M.5zHBX", 105, (-569));
      NodeUtil.isNullOrUndefined(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for throw (type 49)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeUtil.referencesThis(node0);
      String string0 = NodeUtil.arrayToString(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1446);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
      String string0 = "";
      Node node0 = Node.newString("");
      PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("");
      Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
      Node[] nodeArray0 = new Node[0];
      Node node2 = NodeUtil.newCallNode(node1, nodeArray0);
      NodeUtil.isPrototypePropertyDeclaration(node2);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      Node node1 = new Node(36, node0);
      node0.setVarArgs(true);
      Node node2 = new Node(37, (-725), 59);
      // Undeclared exception!
      try { 
        NodeUtil.newName((CodingConvention) null, "4ddE<I:\"", node2, "4ddE<I:\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = new Node(15, 15, 16);
      Node node1 = new Node(15, node0, node0, node0, node0, 25, 18);
      Node node2 = NodeUtil.newName(defaultCodingConvention0, "%", node1, "/} l(&gp~#3a");
      boolean boolean0 = NodeUtil.isNew(node2);
      assertEquals(25, node2.getLineno());
      assertFalse(boolean0);
      assertTrue(node2.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NodeUtil.isLatin("~-8Y");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.setTweakToStringLiteral("~-8Y", "~-8Y");
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node((-222), 1299, (-222));
      boolean boolean0 = NodeUtil.isString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionObjectCallOrApply((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(102, 7680, 102);
      NodeUtil.mayBeString(node0);
      String string0 = NodeUtil.opToStr(31);
      assertNull(string0);
      
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: INC 7680
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      boolean boolean0 = NodeUtil.referencesThis(node0);
      boolean boolean1 = NodeUtil.isVarDeclaration(node0);
      assertTrue(boolean1 == boolean0);
      
      Compiler compiler0 = new Compiler();
      boolean boolean2 = NodeUtil.mayEffectMutableState(node0, compiler0);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintStream0.close();
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Normalize.parseAndNormalizeTestCode(compiler0, "Q", "Q");
      String string0 = NodeUtil.opToStr((-2097152));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeUtil.referencesThis(node0);
      NodeUtil.isSwitchCase(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      NodeUtil.mayBeString(node0);
      NodeUtil.containsType(node0, 34, sourceMap_DetailLevel0);
      String string0 = NodeUtil.arrayToString(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      Node node1 = node0.cloneNode();
      node0.setVarArgs(true);
      node1.putBooleanProp(28, true);
      boolean boolean0 = NodeUtil.isFunction(node1);
      NodeUtil.isConstantName(node0);
      node1.setLineno(37);
      NodeUtil.getObjectLitKeyName(node0);
      boolean boolean1 = NodeUtil.isEmptyBlock(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = new Node(77, 77, 106);
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StatementFusion statementFusion0 = new StatementFusion();
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ";I ra$dN%*)OB}", ";I ra$dN%*)OB}");
      // Undeclared exception!
      try { 
        statementFusion0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString(98, ".OA\"fvW-@Y.");
      // Undeclared exception!
      try { 
        NodeUtil.isBooleanResult(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      NodeUtil.isCall(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      nodeUtil_MayBeStringResultPredicate0.apply(node0);
      NodeUtil.isLoopStructure(node0);
      String string0 = NodeUtil.arrayToString(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      String string0 = NodeUtil.opToStr((-10));
      assertNull(string0);
      
      Node node0 = new Node((-10));
      boolean boolean0 = NodeUtil.isNullOrUndefined(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NodeUtil.getStringNumberValue("rsajK-Y/tV@Wq");
      NodeUtil.isCommutative(60);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.getStringNumberValue("4ddE<I:\"");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(1801, 102, 102);
      Node node1 = Node.newNumber(4189.638, 23, (-2));
      NodeUtil.isVar(node1);
      NodeUtil.isExpressionNode(node1);
      NodeUtil.getStringNumberValue("qA>B1)Gq1>");
      Node node2 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      NodeUtil.getPrototypeClassName(node0);
      boolean boolean1 = NodeUtil.isLoopStructure(node0);
      assertTrue(boolean1 == boolean0);
      
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("4ddE<I:\"", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      node0.setString("4ddE<I:\"");
      Node node1 = node0.cloneNode();
      node0.setVarArgs(true);
      NodeUtil.getPrototypeClassName(node0);
      NodeUtil.getStringValue(node0);
      NodeUtil.getObjectLitKeyName(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node1, (Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node(768);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      // Undeclared exception!
      try { 
        NodeUtil.getNumberValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      String string0 = NodeUtil.opToStrNoFail(25);
      assertEquals("%", string0);
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("", 3177, 25);
      int int0 = NodeUtil.getCount(node0, nodeUtil_MatchDeclaration0, nodeUtil_MatchDeclaration0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeUtil.isHoistedFunctionDeclaration(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.opToStr(19);
      NodeUtil.isAssociative(21);
      NodeUtil.opToStr(47);
      NodeUtil.mayBeStringHelper(node0);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      nodeUtil_BooleanResultPredicate0.equals(simpleErrorReporter0);
      nodeUtil_BooleanResultPredicate0.equals(simpleErrorReporter0);
      nodeUtil_BooleanResultPredicate0.equals(">>>");
      nodeUtil_BooleanResultPredicate0.equals(">>>");
      Object object0 = new Object();
      nodeUtil_BooleanResultPredicate0.equals(object0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 46, nodeUtil_BooleanResultPredicate0);
      assertEquals(0, int0);
      
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      NodeUtil.getNumberValue(node0);
      boolean boolean1 = NodeUtil.isExpressionNode(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      boolean boolean0 = NodeUtil.referencesThis(node0);
      boolean boolean1 = NodeUtil.isSwitchCase(node0);
      assertTrue(boolean1 == boolean0);
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      String string0 = NodeUtil.opToStr(14);
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      mockPrintStream0.close();
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q", "~e_7$5*OLP`eZ85e");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      node0.getAncestors();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "~e_7$5*OLP`eZ85e", node0);
      node0.addChildToBack(node1);
      NodeUtil.isNumericResultHelper(node0);
      CodingConvention codingConvention0 = compiler0.getCodingConvention();
      Node node2 = NodeUtil.newQualifiedNameNode(codingConvention0, "~e_7$5*OLP`eZ85e", (-2788), 25);
      NodeUtil.isUndefined(node0);
      NodeUtil.isReferenceName(node1);
      // Undeclared exception!
      try { 
        node0.removeChild(node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = NodeUtil.opToStr(93);
      assertEquals("+=", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = NodeUtil.opToStr(915);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.jsRoot;
      NodeUtil.getInfoForNameNode((Node) null);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction((Node) null, 341);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      String string0 = NodeUtil.opToStrNoFail(97);
      assertEquals("%=", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString(98, ".OA\"fvW-@Y.");
      NodeUtil.isNameReferenced(node0, ".OA\"fvW-@Y.");
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node(152);
      boolean boolean0 = NodeUtil.isCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node((-681));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.setColorizeErrorOutput(true);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      NodeUtil.getStringValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -681
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      char[] charArray0 = new char[5];
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q", "~e_7$5*OLP`eZ85e");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "^7APy 5!5Y[", node0);
      NodeUtil.getPrototypeClassName(node1);
      NodeUtil.getStringValue(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: SCRIPT 1 [sourcename: java.lang.String@0000000456] [synthetic: 1]
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 104: DOT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.isBooleanResultHelper((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node((-222), 1299, (-222));
      node0.children();
      NodeUtil.getInfoForNameNode(node0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_H6w x:yX-$IFT");
      node0.setJSDocInfo((JSDocInfo) null);
      boolean boolean0 = NodeUtil.isString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      Node node0 = new Node(1801, 7680, 102);
      NodeUtil.isTryFinallyNode(node0, node0);
      Stack<JSType> stack0 = new Stack<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFile mockFile0 = new MockFile("}`1J^nB@!_U");
      String string0 = NodeUtil.opToStr(45);
      assertEquals("===", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString((-1407), "qA>B1)Gq1>");
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = new Node((-1686), (-1686), (-1686));
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean1 = NodeUtil.isThis(node1);
      assertEquals(122, node1.getType());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(3722);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-2464));
      nodeUtil_MatchNodeType0.equals(compiler0);
      Node node0 = Node.newString(94, "$4");
      boolean boolean0 = NodeUtil.isVar(node0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "$4", node0);
      Node node2 = new Node(1407, 1675, (-89));
      NodeUtil.getVarsDeclaredInBranch(node1);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      boolean boolean1 = NodeUtil.mayBeStringHelper(node1);
      assertFalse(boolean1 == boolean0);
      assertTrue(node1.isQualifiedName());
      
      NodeUtil.getNumberValue(node0);
      int int0 = NodeUtil.precedence(40);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      Node node0 = Node.newString(0, "T~c@");
      Node node1 = new Node(102, 1801, 4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      NodeUtil.copyNameAnnotations(node0, node2);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      NodeUtil.newName(closureCodingConvention0, "com.google.javascript.jscomp.CheckGlobalThis", node0, "com.google.javascript.jscomp.CheckGlobalThis");
      NodeUtil.opToStr(110);
      NodeUtil.isLoopStructure(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      Node node1 = node0.cloneNode();
      node0.setVarArgs(true);
      node0.putBooleanProp(286, true);
      NodeUtil.isFunction(node0);
      NodeUtil.isConstantName(node1);
      NodeUtil.getStringValue(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node1, 33);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newString(4009, "RETURN_RESULT");
      Node node1 = Node.newString(32, "T~c@");
      Node.newString(5, "com.google.javascript.jscomp.InvocationsCallback", 16, 1136);
      Node node2 = NodeUtil.newExpr(node0);
      NodeUtil.isLhs(node0, node2);
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newNumber((-1572.42530372), 1121, 1121);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(48);
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newNumber(2.0, 26, 26);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      NodeUtil.mayBeString(node0);
      CompilerOptions compilerOptions1 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel1 = compilerOptions1.sourceMapDetailLevel;
      assertSame(sourceMap_DetailLevel1, sourceMap_DetailLevel0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      NodeUtil.opToStr(48);
      Node node0 = Node.newNumber((-2009.247511), 48, 48);
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      boolean boolean1 = NodeUtil.isForIn(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newNumber((double) 996, (-3976), (-3976));
      Node node1 = new Node(37, node0);
      Node node2 = Node.newString("prepareAst", 36, 48);
      boolean boolean0 = NodeUtil.isStatement(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean1 = nodeUtil_MayBeStringResultPredicate0.apply(node1);
      Node.newNumber((double) 27, 3, 2);
      boolean boolean2 = NodeUtil.isVar(node0);
      assertFalse(boolean2 == boolean1);
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node3 = NodeUtil.newName(closureCodingConvention0, "prepareAst", node2);
      assertEquals(36, node3.getLineno());
      assertEquals(38, node3.getType());
      
      boolean boolean3 = NodeUtil.isCommutative(2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(40, "+?|#%)g}n!oa,+gcUAl");
      NodeUtil.isBooleanResult(node0);
      String string0 = NodeUtil.opToStr(148);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = new Node(26);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      NodeUtil.getLoopCodeBlock(node0);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got NOT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node(75);
      NodeUtil.isStrWhiteSpaceChar(1);
      NodeUtil.getExpressionBooleanValue(node0);
      Node node1 = Node.newString((-344), ".OA\"fvW-@Y.");
      NodeUtil.isNumericResultHelper(node1);
      node1.addChildrenToBack(node0);
      NodeUtil.getInfoForNameNode(node0);
      Node node2 = Node.newString(0, "^7APy 5!5Y[");
      node2.setLineno(38);
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString("4ddE<Iy:\"");
      node0.setString("4ddE<Iy:\"");
      node0.cloneNode();
      AstParallelizer astParallelizer0 = AstParallelizer.createNewFunctionLevelAstParallelizer(node0, false);
      List<Node> list0 = astParallelizer0.split();
      Node node1 = NodeUtil.newFunctionNode("4ddE<Iy:\"", list0, node0, 92, 25);
      node0.clonePropsFrom(node1);
      assertEquals(105, node1.getType());
      assertEquals(3, node1.getChildCount());
      assertEquals(92, node1.getLineno());
      assertEquals(25, node1.getCharno());
      
      node0.setVarArgs(false);
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newString(49, "undefined");
      Node node1 = new Node(31, 176, 4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NodeUtil.mayBeString(node0);
      String string0 = NodeUtil.opToStr(9);
      assertEquals("|", string0);
      assertNotNull(string0);
      
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      boolean boolean1 = NodeUtil.isSimpleOperator(node1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node((-1492), (-1492), (-1492));
      Node node1 = new Node((-1492), node0);
      NodeUtil.opToStr(119);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1492
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NodeUtil.opToStr(83);
      NodeUtil.getStringNumberValue("Fi?qc1Y1hLLjh%");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString(35, "#w5g'Iack`");
      NodeUtil.isNumericResultHelper(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = NodeUtil.isCommutative(1);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.referencesThis(node0);
      boolean boolean2 = NodeUtil.mayBeString(node0);
      assertFalse(boolean2 == boolean1);
      
      String string0 = NodeUtil.opToStr(90);
      assertEquals("<<=", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      MockFile mockFile1 = new MockFile(mockFile0, "._KroEAgdN5PQNN%A");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      String string0 = NodeUtil.opToStr(106);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q", "Q");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      String string0 = NodeUtil.opToStr(52);
      assertEquals("instanceof", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(625, 1, 309);
      NodeUtil.mayBeString(node0);
      String string0 = NodeUtil.opToStr(12);
      assertEquals("==", string0);
      
      boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      // Undeclared exception!
      try { 
        NodeUtil.isSparseArray(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1744), 2271);
      node0.getQualifiedName();
      NodeUtil.isBooleanResultHelper(node0);
      // Undeclared exception!
      try { 
        node0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      String string0 = NodeUtil.opToStr(98);
      assertNull(string0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(99);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      boolean boolean0 = NodeUtil.referencesThis(node0);
      boolean boolean1 = NodeUtil.isSwitchCase(node0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.isLoopStructure(node0);
      boolean boolean3 = NodeUtil.isNameReferenced(node0, "rsajK-Y/tV@Wq");
      assertFalse(boolean3);
      
      boolean boolean4 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      mockFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = '@';
      mockPrintStream0.println(charArray0);
      mockPrintStream0.print('@');
      mockPrintStream0.close();
      char[] charArray1 = new char[5];
      charArray1[1] = '@';
      charArray1[1] = '@';
      charArray1[3] = '@';
      charArray1[4] = '@';
      Node node0 = Node.newString(25, "Q");
      NodeUtil.isNumericResultHelper(node0);
      NodeUtil.getInfoForNameNode(node0);
      Node node1 = Node.newString(94, "Q");
      node1.setLineno(8);
      NodeUtil.opToStr(11);
      NodeUtil.mayBeStringHelper(node1);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString("4ddE<Iy:\"");
      node0.setString("4ddE<Iy:\"");
      node0.cloneNode();
      node0.setVarArgs(false);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = NodeUtil.isCall(node0);
      node0.setVarArgs(true);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      boolean boolean1 = NodeUtil.isGetOrSetKey(node0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Stack<JSType> stack1 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack1);
      NodeUtil.isPrototypePropertyDeclaration(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LP does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1197, 392, 392);
      Node node1 = new Node(1197, node0, node0, node0, node0);
      NodeUtil.redeclareVarsInsideBranch(node1);
      SyntheticAst syntheticAst0 = new SyntheticAst("hqghzcn");
      syntheticAst0.getAstRoot((AbstractCompiler) null);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newString("4dE<I:\"");
      node0.setString("4dE<I:\"");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      NodeUtil.isHoistedFunctionDeclaration(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.opToStr(33);
      // Undeclared exception!
      try { 
        simpleErrorReporter0.warning((String) null, "4dE<I:\"", 27, (String) null, 39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeUtil.referencesThis(node0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      printStreamErrorManager0.printSummary();
      simpleErrorReporter0.warning("gi`bO", "gi`bO", 12, "gi`bO", (-634));
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      NodeUtil.opToStr(40);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newString(49, "u=defzned");
      Node node1 = new Node(31, 176, 4);
      // Undeclared exception!
      try { 
        NodeUtil.isStatement(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(3408.0469867122206, (-400), (-400));
      NodeUtil.newUndefinedNode(node0);
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.opToStr(20);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node1 = peepholeFoldWithTypes0.optimizeSubtree(node0);
      Node node2 = peepholeRemoveDeadCode0.optimizeSubtree(node1);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node2, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Q");
      char[] charArray0 = new char[5];
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q", "~e_7$5*OLP`eZ85e");
      Node node1 = NodeUtil.newExpr(node0);
      node1.setIsSyntheticBlock(false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      StatementFusion statementFusion0 = new StatementFusion();
      Node node2 = statementFusion0.optimizeSubtree(node0);
      boolean boolean0 = NodeUtil.isLoopStructure(node2);
      assertFalse(boolean0);
      
      String string0 = NodeUtil.arrayToString(node1);
      assertEquals(130, node1.getType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StatementFusion statementFusion0 = new StatementFusion();
      Node node0 = Node.newNumber(974.6477953335);
      Node node1 = new Node((-782), node0, node0);
      ControlFlowAnalysis.getCatchHandlerForBlock(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew((Node) null, (-685));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      boolean boolean1 = NodeUtil.isThis(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Node node0 = Node.newString(49, "undefined");
      Node node1 = new Node(31, 176, 4);
      boolean boolean0 = NodeUtil.isString(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.mayBeString(node1);
      boolean boolean2 = NodeUtil.canBeSideEffected(node0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeUtil.referencesThis(node0);
      NodeUtil.isSwitchCase(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      NodeUtil.mayBeString(node0);
      String string0 = NodeUtil.opToStr(30);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = new Node(83);
      NodeUtil.isStrWhiteSpaceChar(1);
      NodeUtil.getExpressionBooleanValue(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      mockPrintStream0.close();
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[4] = '@';
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q", "~e_7$5*OLP`eZ85e");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      byte[] byteArray0 = new byte[0];
      mockPrintStream0.write(byteArray0);
      node0.getAncestors();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "~e_7$5*OLP`eZ85e", node0);
      boolean boolean0 = NodeUtil.isExpressionNode(node1);
      NodeUtil.getExpressionBooleanValue(node0);
      Node node2 = new Node(301);
      boolean boolean1 = NodeUtil.isSimpleOperator(node1);
      assertEquals(0, node1.getCharno());
      assertTrue(boolean1 == boolean0);
      assertEquals(38, node1.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NodeUtil.isValidPropertyName("jdTl`R9yvZJ7Le_ze%Y");
      Node node0 = Node.newNumber((double) 102, 26, 26);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      // Undeclared exception!
      try { 
        NodeUtil.containsType(node0, 108, sourceMap_DetailLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      Node node1 = node0.cloneNode();
      node0.setVarArgs(true);
      node0.putBooleanProp(286, true);
      NodeUtil.isFunction(node0);
      NodeUtil.isConstantName(node1);
      NodeUtil.getStringValue(node0);
      node0.setLineno(28);
      NodeUtil.opToStr(36);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      // Undeclared exception!
      try { 
        NodeUtil.containsType(node0, 9, sourceMap_DetailLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      node0.setString("4ddE<I:\"");
      node0.cloneNode();
      node0.setVarArgs(true);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      Node node1 = node0.cloneNode();
      node0.setVarArgs(true);
      node0.putBooleanProp(286, true);
      boolean boolean0 = NodeUtil.isFunction(node0);
      NodeUtil.isConstantName(node1);
      NodeUtil.getStringValue(node0);
      node0.setLineno(28);
      NodeUtil.opToStr(36);
      boolean boolean1 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = NodeUtil.isSimpleFunctionObjectCall(node1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(7680, 75, 7680);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(44);
      Node node1 = NodeUtil.newVarNode("REGEXP", node0);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NodeUtil.isLatin("~-8Y");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(108, 108, 706);
      NodeUtil.isAssign(node0);
      MessageFormatter messageFormatter0 = null;
      // Undeclared exception!
      try { 
        Logger.getAnonymousLogger("~-8Y");
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find ~-8Y bundle
         //
         verifyException("java.util.logging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      NodeUtil.referencesThis(node0);
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isLoopStructure(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString(49, "undefined");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(36);
      boolean boolean1 = NodeUtil.containsFunction(node0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.isControlStructure(node0);
      Node node1 = new Node(16, 39, 1);
      NodeUtil.opToStr(3);
      Node node2 = new Node(20);
      boolean boolean3 = NodeUtil.isSimpleOperator(node2);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      Node node0 = Node.newString(101, "JSCompiler_renameProperty");
      NodeUtil.containsType(node0, 16);
      NodeUtil.isCommutative(22);
      NodeUtil.getLoopCodeBlock(node0);
      StatementFusion statementFusion0 = new StatementFusion();
      // Undeclared exception!
      try { 
        statementFusion0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("", 551, 551);
      node0.setLineno(1024);
      Node node1 = Node.newString(2700, "+infiFnity", 29, 49);
      Node node2 = NodeUtil.newExpr(node0);
      NodeUtil.containsFunction(node0);
      NodeUtil.isExprAssign(node2);
      NodeUtil.isConstantName(node2);
      NodeUtil.opToStr(23);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "4ddE<I:\"";
      Node node0 = Node.newString("4ddE<I:\"");
      node0.setString("4ddE<I:\"");
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(102, 7680, 102);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(31);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      mockFile0.setReadable(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('x');
      mockPrintStream0.close();
      Locale locale0 = Locale.TAIWAN;
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.ConcreteType$1", "com.google.javascript.jscomp.ConcreteType$1");
      mockFileOutputStream0.flush();
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      node0.getAncestors();
      Node node1 = Node.newString(11, "_})!jdUcISm3");
      boolean boolean0 = NodeUtil.isVar(node1);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      Node node2 = NodeUtil.newName(closureCodingConvention0, "_})!jdUcISm3", node1);
      boolean boolean1 = NodeUtil.isExpressionNode(node2);
      assertFalse(boolean1);
      
      NodeUtil.getExpressionBooleanValue(node2);
      assertTrue(node2.isQualifiedName());
      
      Node node3 = new Node(10);
      boolean boolean2 = NodeUtil.isSimpleOperator(node1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString("valueOf");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[2];
      StatementFusion statementFusion0 = new StatementFusion();
      abstractPeepholeOptimizationArray0[0] = (AbstractPeepholeOptimization) statementFusion0;
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      NodeUtil.getExpressionBooleanValue(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = NodeUtil.opToStr(46);
      assertEquals("!==", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(132);
      NodeUtil.getStringValue(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
      peepholeSubstituteAlternateSyntax0.getExceptionHandler(node0);
      closureCodingConvention0.extractClassNameIfRequire((Node) null, node0);
      // Undeclared exception!
      try { 
        NodeUtil.newName(closureCodingConvention0, "Q", (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString(35, "#w5g'Iack`");
      NodeUtil.isNumericResultHelper(node0);
      Node node1 = new Node(24, (-16), 0);
      node0.addChildToFront(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = NodeUtil.isCommutative(1);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.referencesThis(node0);
      boolean boolean2 = NodeUtil.mayBeString(node0);
      assertFalse(boolean2 == boolean1);
      
      String string0 = NodeUtil.opToStr(90);
      assertEquals("<<=", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString(35, "#w5g'Iack`");
      NodeUtil.isNumericResultHelper(node0);
      Node node1 = new Node(24, (-16), 0);
      node1.addChildToFront(node0);
      node0.addChildToFront(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      NodeUtil.isCommutative(1);
      // Undeclared exception!
      try { 
        NodeUtil.referencesThis(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newString("4ddE<Iy:\"");
      node0.setString("4ddE<Iy:\"");
      node0.cloneNode();
      node0.setVarArgs(false);
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      mockPrintStream0.close();
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = new Node(192, 7680, 23);
      boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
      NodeUtil.mayBeString(node0);
      Node.newNumber((double) 24, 2546, (-130));
      NodeUtil.opToStr(106);
      NodeUtil.mayBeStringHelper(node0);
      boolean boolean1 = NodeUtil.mayBeString(node0, false);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseTestCode("R~\"y~sr.jG");
      NodeUtil.isLhs(node1, node1);
      NodeUtil.isExprAssign(node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node2 = Node.newString(23, "R~\"y~sr.jG", 34, 2);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node4 = new Node(27, node0, node3, node0, node0, 18, 48);
      NodeUtil.newExpr(node4);
      NodeUtil.isLhs(node3, node3);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      NodeUtil.mayBeString(node2);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got LP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      Node.newString("hj6y?9#]Ed", 38, 38);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.NodeUtil$1", 555, 1276);
      compiler0.getRoot();
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeSyntheticCode(compiler0, "hj6y?9#]Ed", "arguments");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      Node node0 = Node.newString(2377, "infinity");
      Node node1 = new Node(28, 3, 98);
      NodeUtil.isString(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.putBooleanProp(41, false);
      NodeUtil.opToStr(1);
      NodeUtil.mayBeStringHelper(node1);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2377
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hqghzn");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hqghzn");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NodeUtil$1", "N+^24!Ry>Q");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      NodeUtil.opToStr((-435));
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NodeUtil.getStringNumberValue("+infinity");
      // Undeclared exception!
      try { 
        NodeUtil.isLatin((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      node0.cloneNode();
      Node node1 = new Node(26, 2, 148);
      NodeUtil.isString(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(29);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got NOT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NodeUtil.opToStr(2734);
      boolean boolean0 = NodeUtil.isValidPropertyName("wta01nl%^^mu|6:<(iB");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Node node0 = new Node(1738);
      NodeUtil.isNumericResultHelper(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      NodeUtil.isCommutative(27);
      NodeUtil.referencesThis(node0);
      NodeUtil.isPrototypeProperty(node0);
      String string0 = NodeUtil.opToStr(120);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      Node node0 = Node.newString(25, "Q");
      NodeUtil.isNumericResultHelper(node0);
      NodeUtil.getInfoForNameNode(node0);
      NodeUtil.isCommutative(130);
      NodeUtil.isExpressionNode(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      String string0 = NodeUtil.opToStr(62);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newString(25, "hqghzcn");
      NodeUtil.isNumericResultHelper(node0);
      NodeUtil.getInfoForNameNode(node0);
      node0.setLineno(264);
      NodeUtil.opToStr((-4175));
      NodeUtil.mayBeStringHelper(node0);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      Node node1 = node0.cloneNode();
      node0.setVarArgs(true);
      node1.putBooleanProp(28, true);
      boolean boolean0 = NodeUtil.isFunction(node1);
      NodeUtil.isConstantName(node0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.enableExternExports(false);
      boolean boolean1 = NodeUtil.containsType(node1, (-879), sourceMap_DetailLevel0);
      assertTrue(boolean1 == boolean0);
      
      String string0 = NodeUtil.opToStrNoFail(24);
      assertEquals("/", string0);
      
      NodeUtil.isVarDeclaration(node1);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      boolean boolean2 = NodeUtil.mayEffectMutableState(node1, compiler1);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4ddE<I:\"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.println('J');
      mockPrintStream0.print('J');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      mockPrintStream1.close();
      Node node0 = Node.newString("undefined");
      boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
      NodeUtil.mayBeString(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      boolean boolean1 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      Node node0 = Node.newString((-204), "undefined");
      node0.putBooleanProp(20, false);
      boolean boolean0 = NodeUtil.isFunction(node0);
      NodeUtil.isConstantName(node0);
      NodeUtil.getStringValue(node0);
      Node node1 = Node.newString(51, "undefined");
      node1.setLineno(115);
      String string0 = NodeUtil.opToStr(10);
      assertEquals("^", string0);
      
      boolean boolean1 = NodeUtil.mayBeStringHelper(node1);
      assertTrue(boolean1 == boolean0);
      
      Double double0 = NodeUtil.getStringNumberValue("Q");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node(26);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.reserveRawExports = true;
      compilerOptions0.setColorizeErrorOutput(false);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      NodeUtil.opToStr((-660));
      NodeUtil.mayBeStringHelper(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getNumberValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      String string0 = NodeUtil.opToStr(111);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = new Node((-214748364), 27, 1551);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      String string0 = NodeUtil.opToStr(23);
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("STAR");
      Node node0 = Node.newString("1jp{Y[");
      node0.putBooleanProp(46, true);
      Node node1 = Node.newString(38, "!");
      node1.setLineno(16);
      NodeUtil.opToStr(12);
      NodeUtil.getNumberValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isStatement(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = Node.newNumber(0.6264909177148823, 3393, 996);
      Node node1 = Node.newNumber((double) 996);
      Node node2 = new Node(0, 340, 0);
      boolean boolean0 = NodeUtil.isString(node1);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      boolean boolean1 = NodeUtil.mayBeString(node0);
      assertTrue(boolean1 == boolean0);
      
      NodeUtil.opToStr(40);
      boolean boolean2 = NodeUtil.isLoopStructure(node2);
      assertFalse(boolean2);
      
      String string0 = NodeUtil.arrayToString(node2);
      assertNotNull(string0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(0);
      int int0 = NodeUtil.getCount(node2, nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newString(49, "undefined");
      Node node1 = new Node(31, 176, 4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(9);
      NodeUtil.mayBeStringHelper(node0);
      NodeUtil.arrayToString(node0);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(32);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      NodeUtil.isCommutative(19);
      NodeUtil.getArrayElementStringValue(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getNearestFunctionName(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((-1057), "ObjectPropertyStringPreprocess");
      Node node1 = new Node(41, 35, 14);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(16);
      NodeUtil.mayBeStringHelper(node1);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got NULL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node(102, 7680, 102);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(31);
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.opToStr(4);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      mockFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = '@';
      mockPrintStream0.println(charArray0);
      Node node0 = Node.newString(130, "Q");
      NodeUtil.isBooleanResult(node0);
      String string0 = NodeUtil.opToStr(49);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newString("|YE&", (-993), (-993));
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "|YE&", 2372, 4);
      node0.addChildToFront(node1);
      NodeUtil.newVarNode("^7APy 5!5Y[", node0);
      NodeUtil.isNumericResultHelper(node0);
      NodeUtil.isGetOrSetKey(node0);
      NodeUtil.isUndefined(node1);
      String string0 = NodeUtil.opToStr(1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("4ddE<I:\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setString("4ddE<I:\"");
      Node node1 = node0.cloneNode();
      node0.setVarArgs(true);
      node1.setLineno(22);
      NodeUtil.getArrayElementStringValue(node1);
      node1.putBooleanProp((-1230), true);
      NodeUtil.mayBeString(node1);
      NodeUtil.opToStr(42);
      NodeUtil.mayBeStringHelper(node0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isLatin((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "Q";
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      mockFile0.setReadable(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('x');
      mockPrintStream0.close();
      Locale locale0 = Locale.TAIWAN;
      mockPrintStream0.printf(locale0, "com.google.javascript.jscomp.ConcreteType$1", (Object[]) null);
      Node node0 = Node.newString(100, "com.google.javascript.jscomp.ConcreteType$1", 2599, 2599);
      NodeUtil.isFunction(node0);
      NodeUtil.isConstantName(node0);
      NodeUtil.getStringValue(node0);
      node0.setLineno(2599);
      NodeUtil.opToStr(1757);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeStringHelper(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      mockFile0.setReadable(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      String string0 = "@I{m,8CydAI";
      Node.newString(9, "@I{m,8CydAI");
      NodeUtil.opToStr(41);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parseSyntheticCode("@I{m,8CydAI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Node node0 = Node.newNumber(2.147483647E9);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(17, 85, 16);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(2907);
      NodeUtil.containsFunction(node1);
      NodeUtil.isEmptyFunctionExpression(node0);
      NodeUtil.opToStr(27);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeStringHelper((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      Node node1 = new Node(122, 3009, (-725));
      NodeUtil.isNumericResultHelper(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      NodeUtil.isCommutative(82);
      NodeUtil.referencesThis(node1);
      NodeUtil.isLiteralValue(node0, false);
      String string0 = NodeUtil.opToStr((-2059));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      NodeUtil.isLhs(node0, node0);
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      boolean boolean1 = NodeUtil.isLoopStructure(node0);
      assertFalse(boolean1);
      
      Double double0 = NodeUtil.getStringNumberValue("rsajK-Y/tV@Wq");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      NodeUtil.getExpressionBooleanValue(node0);
      boolean boolean2 = NodeUtil.isEmptyBlock(node0);
      Compiler compiler0 = new Compiler();
      Node node1 = new Node(46, node0, node0, node0);
      boolean boolean3 = NodeUtil.isLhs(node0, node1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = NodeUtil.isImmutableValue(node1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      int int0 = 3177;
      int int1 = 34;
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 34: SETPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('$');
      SyntheticAst syntheticAst0 = new SyntheticAst(" - ");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      node0.putBooleanProp(11, false);
      boolean boolean0 = NodeUtil.isFunction(node0);
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      boolean boolean1 = NodeUtil.mayBeString(node1);
      NodeUtil.getStringValue(node1);
      Node node2 = Node.newString(8, "com.google.javascript.jscomp.mozilla.rhino.ast.Name");
      node1.setLineno(4);
      NodeUtil.opToStr(4);
      NodeUtil.getNumberValue(node2);
      boolean boolean2 = NodeUtil.isFunctionExpression(node0);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = NodeUtil.isSimpleOperatorType(121);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = NodeUtil.isUndefined(node2);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MockFile mockFile0 = new MockFile("A");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'u';
      charArray0[5] = 'J';
      charArray0[6] = 'J';
      charArray0[7] = 'L';
      charArray0[8] = 'J';
      mockPrintStream0.println(charArray0);
      PrintStream printStream0 = mockPrintStream0.append('T');
      Compiler compiler0 = new Compiler(printStream0);
      Node node0 = new Node(1419, 'J', 'J');
      boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
      assertFalse(boolean0);
      
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(5);
      Node node1 = Node.newString(121, "Wxk!~fez$r$T");
      boolean boolean1 = NodeUtil.mayBeStringHelper(node1);
      boolean boolean2 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newString(1197, "hqghzcn");
      Node node1 = Node.newString(24, "T~c@", (-1492), (-2242));
      Node node2 = NodeUtil.newExpr(node0);
      assertEquals(130, node2.getType());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.opToStr((-370));
      Node node3 = Node.newString(24, "T~c@");
      boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node3);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Node node1 = new Node(35, (-17), 126);
      NodeUtil.getStringNumberValue("EB|3y4!u0[6gmg||");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.isReferenceName(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: NOT 26
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('x');
      mockPrintStream0.close();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      Locale locale0 = Locale.TAIWAN;
      Locale.forLanguageTag("Q");
      PrintStream printStream0 = mockPrintStream1.printf(locale0, "Q", (Object[]) null);
      Compiler compiler0 = new Compiler(printStream0);
      Node node0 = compiler0.parseTestCode("VfV)");
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.isUndefined(node0);
      NodeUtil.isReferenceName(node0);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Infinity");
      mockPrintStream0.print('@');
      mockPrintStream0.close();
      mockPrintStream0.println((char[]) null);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "._KroEAgdN5PQNN%A", "h']NU<bTs3:");
      mockFile0.toPath();
      node0.setIsSyntheticBlock(true);
      node0.getAncestors();
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
      Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
      node1.addChildToBack(node0);
      NodeUtil.isConstantName(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node2 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "._KroEAgdN5PQNN%A", 7, 31);
      NodeUtil.isUndefined(node0);
      NodeUtil.isReferenceName(node2);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hqghzcn");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hqghzcn");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NodeUtil$1", "N+^24!Ry>Q");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x>");
      NodeUtil.arrayToString(node0);
      NodeUtil.isLabelName(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSCRIPT 1 [sourcename: java.lang.String@0000000474] [synthetic: 1]
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      String string0 = NodeUtil.opToStr(19);
      assertEquals(">>", string0);
      
      boolean boolean1 = NodeUtil.isAssociative(21);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isLhs(node0, node0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">=", "4d06-<<.'PU+MOf");
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.NodeUtil$1");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "4d06-<<.'PU+MOf";
      objectArray0[1] = (Object) ">=";
      PrintStream printStream0 = mockPrintStream0.format("^=", objectArray0);
      Compiler compiler0 = new Compiler(printStream0);
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.javascript.jscomp.CollapseProperties");
      CompilerOptions compilerOptions1 = new CompilerOptions();
      compilerOptions1.enableExternExports(true);
      String string0 = NodeUtil.opToStr(78);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      char[] charArray0 = new char[1];
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.getStringNumberValue("Q");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertFalse(compilerOptions0.foldConstants);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q", "ObjectPropertyStringPreprocess");
      mockFile0.toPath();
      node0.getAncestors();
      Node node1 = node0.copyInformationFromForTree(node0);
      node0.addChildToBack(node0);
      NodeUtil.getStringValue(node0);
      node0.setLineno((-451));
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType('@');
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      nodeUtil_MatchShallowStatement0.equals("Q");
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      Node node0 = Node.newNumber(3410.111878968447, (-400), (-400));
      Node node1 = new Node(1, node0);
      NodeUtil.isLabelName(node1);
      Node node2 = new Node(47, 57296, 23);
      NodeUtil.isString(node2);
      node2.setOptionalArg(false);
      Node node3 = Node.newString(136, "Q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.close();
      Node node4 = Node.newString("undefined");
      NodeUtil.isTryFinallyNode(node3, node4);
      NodeUtil.mayBeString(node2);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.mayBeStringHelper(node2);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got EOL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.setColorizeErrorOutput(true);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      compilerOptions0.summaryDetailLevel = 22;
      compilerOptions0.enableExternExports(false);
      NodeUtil.opToStr(118);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(26);
      NodeUtil.referencesThis(node0);
      NodeUtil.isFunctionExpression(node0);
      NodeUtil.isWithinLoop(node0);
      NodeUtil.isNameReferenced(node0, "");
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">=", "4d06-<<.'PU+MOf");
      Node node0 = new Node(27, 18, (-749));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      NodeUtil.mayBeString(node0);
      String string0 = NodeUtil.opToStr(1487);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      mockFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('-');
      mockPrintStream0.close();
      char[] charArray0 = new char[5];
      charArray0[1] = '-';
      charArray0[1] = '-';
      charArray0[3] = '-';
      charArray0[4] = '-';
      Node node0 = Node.newString(25, "Q");
      NodeUtil.isNumericResultHelper(node0);
      NodeUtil.getInfoForNameNode(node0);
      Node node1 = Node.newString(94, "Q");
      node1.setLineno(8);
      NodeUtil.opToStr(73);
      NodeUtil.mayBeStringHelper(node1);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newString(25, "Q");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      NodeUtil.opToStr(2);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NodeUtil.opToStr(109);
      NodeUtil.trimJsWhiteSpace("mvP D}^+>s");
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("4ddE<I:\"");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hqghzcn");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.println('<');
      Compiler compiler0 = new Compiler(mockPrintStream0);
      mockPrintStream0.close();
      Node node0 = Node.newString(13, "hqghzcn");
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      NodeUtil.getInfoForNameNode(node0);
      Node.newString(1523, "com.google.javascript.jscomp.SourceFile$Generated");
      Node node1 = new Node(24);
      boolean boolean1 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = new Node(75);
      NodeUtil.isStrWhiteSpaceChar(1);
      NodeUtil.getExpressionBooleanValue(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setLineno(3994);
      NodeUtil.opToStr((-3827));
      NodeUtil.getLoopCodeBlock(node0);
      NodeUtil.getStringNumberValue("Gg9Mqi<S{cj}]+|`nkm");
      NodeUtil.newUndefinedNode(node0);
      Compiler compiler0 = new Compiler();
      NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionDeclaration((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("R~\"y~sr.jG");
      Node node0 = compiler0.parseSyntheticCode("u]X-Y<%7<I`S");
      node0.setLineno(106);
      NodeUtil.opToStr(13);
      Stack<JSType> stack0 = new Stack<JSType>();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(49, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFile mockFile1 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Node node0 = Node.newString((-9), "rsajK-Y/tV@Wq");
      Node node1 = new Node(1388, 14, 4095);
      Node node2 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.isAssign(node2);
      node0.getQualifiedName();
      boolean boolean1 = NodeUtil.isLiteralValue(node2, true);
      boolean boolean2 = NodeUtil.isFunctionObjectCallOrApply(node2);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = NodeUtil.isLoopStructure(node2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      String string0 = NodeUtil.opToStr(86);
      assertNotNull(string0);
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString(35, "#w5g'Iack`");
      NodeUtil.isNumericResultHelper(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      NodeUtil.isCommutative(2);
      NodeUtil.referencesThis(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NaN");
      compilerOptions0.enableExternExports(true);
      NodeUtil.containsType(node0, 26, sourceMap_DetailLevel0);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString(102, ".OA\"fvW-@Y.");
      boolean boolean0 = NodeUtil.referencesThis(node0);
      boolean boolean1 = NodeUtil.isSwitchCase(node0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.isLoopStructure(node0);
      boolean boolean3 = NodeUtil.isForIn(node0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newNumber((double) 996, (-3964), (-3964));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isConstantName(node0);
      NodeUtil.getStringValue(node0);
      Node node1 = Node.newString(4095, "fUsF;AE)]");
      node1.setLineno(3123);
      NodeUtil.opToStr((-575));
      NodeUtil.mayBeStringHelper(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getStringNumberValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      mockFile0.toPath();
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "gKf!HTa`yQw1Mn<avh{", "'>/T3*Q$'R1]z'?l");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = compiler0.options;
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      boolean boolean0 = NodeUtil.containsType(node0, 1662, compilerOptions0.sourceMapDetailLevel);
      CompilerOptions compilerOptions1 = new CompilerOptions();
      boolean boolean1 = NodeUtil.isFunctionExpression(node0);
      assertFalse(boolean1);
      
      NodeUtil.isSimpleOperatorType(1223);
      boolean boolean2 = NodeUtil.isEmptyFunctionExpression(node0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      Node node0 = Node.newNumber(3410.111878968447, (-400), (-400));
      Node node1 = new Node(1, node0);
      boolean boolean0 = NodeUtil.isLabelName(node1);
      Node node2 = new Node(47, 57296, 23);
      NodeUtil.isString(node2);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.setColorizeErrorOutput(true);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      compilerOptions0.enableExternExports(false);
      NodeUtil.getStringValue(node2);
      String string0 = NodeUtil.getObjectLitKeyName(node0);
      assertEquals("3410.111878968447", string0);
      
      boolean boolean1 = NodeUtil.isEmptyBlock(node1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-2464));
      nodeUtil_MatchNodeType0.equals(compiler0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      Node node0 = Node.newNumber((double) (-2464));
      NodeUtil.getNumberValue(node0);
      NodeUtil.precedence(43);
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchNodeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      mockPrintStream0.println((char[]) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "._KroEAgdN5PQNN%A", "h']NU<bTs23:");
      mockFile0.toPath();
      node0.setIsSyntheticBlock(true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      node0.getAncestors();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "1h{u\"YkX32", node0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
      Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
      node2.addChildToBack(node0);
      NodeUtil.isEmptyBlock(node1);
      NodeUtil.isStatement(node0);
      NodeUtil.isPrototypeProperty(node0);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      Node node1 = node0.cloneNode();
      node0.setVarArgs(true);
      node1.putBooleanProp(28, true);
      boolean boolean0 = NodeUtil.isFunction(node1);
      assertFalse(boolean0);
      
      NodeUtil.isConstantName(node0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.enableExternExports(false);
      compilerOptions0.enableExternExports(false);
      NodeUtil.opToStr(39);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("4ddE<I:\"", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString("4ddE<Iy:\"");
      node0.setString("4ddE<Iy:\"");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      Node node1 = new Node(33, node0, 32, 24);
      NodeUtil.isString(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      NodeUtil.opToStr(13);
      NodeUtil.mayBeStringHelper(node0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      NodeUtil.containsType(node0, 82, sourceMap_DetailLevel0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.enableExternExports(true);
      NodeUtil.containsType(node0, 47, compilerOptions0.sourceMapDetailLevel);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 1: EOL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString("73#cN\"Y;B");
      NodeUtil.copyNameAnnotations(node0, node0);
      node0.setIsSyntheticBlock(true);
      NodeUtil.isFunctionDeclaration(node0);
      Node node1 = new Node(86, 1, 89);
      NodeUtil.evaluatesToLocalValue(node0);
      Node node2 = new Node((-1805), 3110, 121);
      NodeUtil.isString(node1);
      node1.setOptionalArg(true);
      NodeUtil.isString(node0);
      Node node3 = NodeUtil.newExpr(node2);
      node3.setOptionalArg(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node4 = null;
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypeClassName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newNumber(2.0, 26, 26);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      compilerOptions0.enableExternExports(true);
      NodeUtil.opToStr(107);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newNumber(2.0, 26, 26);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(121);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      mockPrintStream0.close();
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      mockPrintStream0.println(charArray0);
      Node node0 = Node.newString(43, "Q", (int) '@', (-2103));
      NodeUtil.isFunction(node0);
      NodeUtil.isConstantName(node0);
      NodeUtil.getStringValue(node0);
      node0.setLineno('@');
      NodeUtil.opToStr(47);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      mockPrintStream0.close();
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      mockPrintStream0.println(charArray0);
      Node node0 = Node.newString(43, "Q", (int) '@', (-2103));
      boolean boolean0 = NodeUtil.isFunction(node0);
      NodeUtil.isConstantName(node0);
      NodeUtil.getStringValue(node0);
      node0.setLineno('@');
      String string0 = NodeUtil.opToStr(21);
      boolean boolean1 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean2);
      
      String string1 = NodeUtil.trimJsWhiteSpace("+");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newString(93, ".OA\"fvW-@Y.");
      boolean boolean0 = NodeUtil.referencesThis(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = NodeUtil.mayBeString(node0);
      assertFalse(boolean1 == boolean0);
      
      String string0 = NodeUtil.opToStr(21);
      assertEquals("+", string0);
      
      boolean boolean2 = NodeUtil.isLabelName(node0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("+infinity", ".OA\"fvW-@Y.", (-285), "hGR!8b", 117);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newNumber(3410.111878968447, 2042, 117);
      NodeUtil.isVar(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.isExpressionNode(node0);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bm+f4gUfN");
      NodeUtil.getStringNumberValue("bm+f4gUfN");
      NodeUtil.getLoopCodeBlock(node1);
      NodeUtil.isSimpleOperatorType(42);
      Node node2 = NodeUtil.newVarNode("hGR!8b", node0);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock((Node) null, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      NodeUtil.referencesThis(node0);
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isLoopStructure(node0);
      Node node1 = Node.newNumber(873.0761, 2, 2);
      NodeUtil.isBooleanResult(node1);
      String string0 = NodeUtil.opToStr(105);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      char[] charArray0 = new char[5];
      Compiler compiler0 = new Compiler(mockPrintStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintStream0.println(charArray0);
      Node node0 = new Node((-4), 4230, (-453));
      NodeUtil.getVarsDeclaredInBranch(node0);
      Double double0 = NodeUtil.getStringNumberValue("~e_7$5*OLP`eZ85e");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      NodeUtil.opToStr(37);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = null;
      closureCodingConvention0.isOptionalParameter((Node) null);
      Node node1 = NodeUtil.newUndefinedNode((Node) null);
      node1.getJsDocBuilderForNode();
      node1.removeChildren();
      node1.toStringTree();
      // Undeclared exception!
      try { 
        NodeUtil.isConstantByConvention(closureCodingConvention0, node1, (Node) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // VOID is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = new Node(26);
      boolean boolean0 = NodeUtil.referencesThis(node0);
      NodeUtil.isFunctionExpression(node0);
      boolean boolean1 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean1);
      
      Node node1 = new Node(74, 14, 11);
      NodeUtil.getVarsDeclaredInBranch(node1);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.opToStr((-268435456));
      boolean boolean2 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      node0.putBooleanProp(28, true);
      boolean boolean0 = NodeUtil.isFunction(node0);
      assertFalse(boolean0);
      
      node0.setString("4ddE<I:\"");
      NodeUtil.isConstantName(node0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.setLooseTypes(false);
      compilerOptions0.enableExternExports(false);
      compilerOptions0.enableExternExports(false);
      NodeUtil.opToStr(1);
      boolean boolean1 = NodeUtil.mayBeStringHelper(node0);
      Double double0 = NodeUtil.getStringNumberValue("infinity");
      assertNull(double0);
      
      NodeUtil.getExpressionBooleanValue(node0);
      boolean boolean2 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeUtil.referencesThis(node0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      printStreamErrorManager0.printSummary();
      simpleErrorReporter0.warning("~e_7$5*OLP`eZ85e", "~e_7$5*OLP`eZ85e", 12, "~e_7$5*OLP`eZ85e", (-634));
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      NodeUtil.opToStr(82);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      Node node0 = Node.newNumber(3410.111878968447, (-400), (-400));
      Node node1 = new Node(1, node0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/data/lhy/TEval-plus");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Node.newString((-3378), "com.google.common.collect.ImmutableSetMultimap$Builder");
      NodeUtil.isNumericResultHelper(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
      
      String string0 = NodeUtil.opToStr(18);
      assertEquals("<<", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hqghzcn");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.println('<');
      SyntheticAst syntheticAst0 = new SyntheticAst("hqghzcn");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      mockPrintStream0.close();
      Node node0 = Node.newString(13, "o+U;.+|]x&oWbmP*");
      NodeUtil.isNumericResultHelper(node0);
      NodeUtil.getInfoForNameNode(node0);
      Stack<Node> stack0 = new Stack<Node>();
      Node node1 = NodeUtil.newFunctionNode("^=", stack0, node0, 2230, (-226));
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      nodeUtil_MatchNotFunction0.apply(node1);
      NodeUtil.isSwitchCase(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FUNCTION  does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NodeUtil.mayHaveSideEffects(node0);
      NodeUtil.referencesThis(node0);
      node0.setLineno(65279);
      NodeUtil.opToStr((byte) (-105));
      NodeUtil.isBooleanResult(node0);
      String string0 = NodeUtil.opToStr(117);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.setColorizeErrorOutput(true);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      compilerOptions0.summaryDetailLevel = 22;
      compilerOptions0.enableExternExports(false);
      SourceMap.DetailLevel sourceMap_DetailLevel1 = compilerOptions0.sourceMapDetailLevel;
      NodeUtil.containsType(node0, 24, sourceMap_DetailLevel0);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(28);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node.newString(0, "T~c@");
      Node.newString((-3545), "");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.opToStr(15);
      NodeUtil.getStringNumberValue("l$:{N3%,H~?4oYL.Uj~");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-2464));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node.newString(94, "$4");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      String string0 = NodeUtil.opToStr(22);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      Node node0 = Node.newString(1433, "Q");
      node0.addSuppression("Q");
      NodeUtil.mayBeString(node0);
      NodeUtil.getStringNumberValue("com.google.javascript.jscomp.NodeUtil$VarCollector");
      NodeUtil.opToStr(114);
      Node node1 = new Node(38);
      node1.setType(2662);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      NodeUtil.isLiteralValue(node0, true);
      NodeUtil.isFunctionObjectCallOrApply(node1);
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      mockPrintStream0.println((char[]) null);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "._KroEAgdN5PQNN%A", "h']NU<bTs23:");
      mockFile0.toPath();
      CodingConvention codingConvention0 = compiler0.getCodingConvention();
      Node node1 = NodeUtil.newName(codingConvention0, "Infinity", node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      node0.setLineno(14);
      String string0 = NodeUtil.opToStr(33);
      assertNull(string0);
      
      NodeUtil.getNumberValue(node0);
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node1);
      assertTrue(node1.isUnscopedQualifiedName());
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(34);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.setColorizeErrorOutput(true);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      compilerOptions0.summaryDetailLevel = 22;
      // Undeclared exception!
      try { 
        NodeUtil.getStringValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      mockPrintStream0.close();
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      mockPrintStream0.println(charArray0);
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      String string0 = NodeUtil.opToStr(77);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newString("4dE<I:\"");
      node0.setString("4dE<I:\"");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)101;
      NodeUtil.isCommutative(19);
      node0.setLineno(0);
      NodeUtil.opToStr((byte) (-105));
      NodeUtil.isArrayLiteral(node0);
      NodeUtil.isCommutative(9);
      NodeUtil.getLoopCodeBlock(node0);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      NodeUtil.referencesThis(node0);
      Node node1 = Node.newString(20, ":.%5t>],");
      NodeUtil.isNumericResultHelper(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      NodeUtil.isCommutative(2352);
      NodeUtil.referencesThis(node0);
      NodeUtil.mayBeString(node0);
      NodeUtil.isCommutative(10);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      nodeUtil_MatchDeclaration0.apply(node1);
      // Undeclared exception!
      try { 
        NodeUtil.isStatement(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("Unknown precedence for ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString(94, "c!>E3GTHb-4Ql_&");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node1 = compiler0.parseTestCode("Unknown precedence for ");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      NodeUtil.isEmptyBlock(node1);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(328);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      mockFile0.setReadable(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('x');
      mockPrintStream0.close();
      Locale locale0 = Locale.TAIWAN;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "Q", (Object[]) null);
      Compiler compiler0 = new Compiler(printStream0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString((-701), "Q");
      ControlFlowAnalysis.computeFallThrough(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      Node node1 = new Node(1431655764, 8233, (-2));
      NodeUtil.opToStr(85);
      Node node2 = new Node(40);
      boolean boolean1 = NodeUtil.isSimpleOperator(node1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      mockFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      String string0 = NodeUtil.opToStr(88);
      assertEquals("^=", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      String string0 = NodeUtil.opToStr(97);
      assertEquals("%=", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q", "ObjectPropertyStringPreprocess");
      Double double0 = NodeUtil.getStringNumberValue("ObjectPropertyStringPreprocess");
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      String string0 = NodeUtil.opToStr(29);
      assertEquals("-", string0);
      
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
      assertTrue(boolean0);
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      Vector<JSType> vector0 = new Stack<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      NodeUtil.getNumberValue(node2);
      node2.addChildrenToBack(node1);
      int int0 = NodeUtil.precedence(18);
      assertEquals(10, int0);
      
      NodeUtil.getBooleanValue(node1);
      String string1 = NodeUtil.getSourceName(node1);
      assertNotNull(string1);
      assertEquals(130, node1.getType());
      
      boolean boolean1 = NodeUtil.isNullOrUndefined(node0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q", "ObjectPropertyStringPreprocess");
      mockFile0.toPath();
      node0.getAncestors();
      node0.copyInformationFromForTree(node0);
      NodeUtil.isNameReferenced(node0, "com.google.javascript.jscomp.RuntimeTypeCheck");
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = ".OA\"fvW-@Y.";
      Node node0 = Node.newString(113, ".OA\"fvW-@Y.");
      NodeUtil.isArrayLiteral(node0);
      NodeUtil.getStringNumberValue(".OA\"fvW-@Y.");
      NodeUtil.opToStr(17);
      Node node1 = new Node(8203);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.tryFoldWhile(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!=");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("!=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      char[] charArray0 = new char[6];
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '+';
      charArray0[4] = '+';
      charArray0[5] = '+';
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Compiler compiler1 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler1, "right side of numeric comparison", "com.google.javascript.jscomp.NodeUtil$1");
      mockFile0.toPath();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      boolean boolean0 = NodeUtil.containsType(node0, 20, sourceMap_DetailLevel0);
      boolean boolean1 = NodeUtil.isExpressionNode(node0);
      assertTrue(boolean1 == boolean0);
      
      CompilerOptions compilerOptions1 = new CompilerOptions();
      NodeUtil.isFunctionExpression(node0);
      boolean boolean2 = NodeUtil.isSimpleOperatorType(51);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      Node node1 = Node.newString(29, "4ddE<I:\"");
      NodeUtil.isNumericResultHelper(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = NodeUtil.isCommutative(88);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.referencesThis(node0);
      boolean boolean2 = NodeUtil.mayBeString(node1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q", "ObjectPropertyStringPreprocess");
      mockFile0.toPath();
      compiler0.getReverseAbstractInterpreter();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = Node.newString(48, "$4");
      Node node2 = compiler0.parseTestCode("G%'w}jkNl");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      NodeUtil.isEmptyBlock(node2);
      NodeUtil.mayBeString(node1);
      NodeUtil.opToStr((-1856));
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString(80, "7W9csyIz,M", 35, 2553);
      node0.setQuotedString();
      node0.setLineno(2553);
      MockFile mockFile0 = new MockFile(">=", "4d06-<<.'PU+MOf");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.containsType(node0, 7);
      NodeUtil.opToStr(32);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: RB 7W9csyIz,M 2553 [quoted: 1]
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newString(49, "undefined");
      Node node1 = new Node(31, 176, 4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(9);
      NodeUtil.mayBeStringHelper(node0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      NodeUtil.isValidDefineValue(node1, treeSet0);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('X');
      mockPrintStream0.close();
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      charArray0[5] = 'X';
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "~e_7$5*OLP`eZ85e", "RegExp");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      node0.getAncestors();
      Node node1 = Node.newNumber((double) 2, 506, (-810));
      boolean boolean0 = NodeUtil.isVar(node1);
      assertFalse(boolean0);
      
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      Node node2 = NodeUtil.newName(closureCodingConvention0, "Q", node0);
      boolean boolean1 = NodeUtil.isExpressionNode(node1);
      NodeUtil.getExpressionBooleanValue(node2);
      assertTrue(node2.isUnscopedQualifiedName());
      
      Node node3 = new Node(35);
      boolean boolean2 = NodeUtil.isSimpleOperator(node3);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('x');
      mockPrintStream0.close();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      Locale locale0 = Locale.TAIWAN;
      Locale.forLanguageTag("Q");
      PrintStream printStream0 = mockPrintStream1.printf(locale0, "Q", (Object[]) null);
      Compiler compiler0 = new Compiler(printStream0);
      Node node0 = compiler0.parseTestCode("VfV)");
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.opToStr(1331);
      boolean boolean1 = NodeUtil.hasCatchHandler(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      NodeUtil.trimJsWhiteSpace("sX}ID)h8<@");
      NodeUtil.opToStr(72);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction1 = new NodeUtil.MatchNotFunction();
      // Undeclared exception!
      try { 
        NodeUtil.isValidPropertyName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.TokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      String string0 = NodeUtil.opToStr(104);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      mockFile0.setReadable(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('m');
      SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.jscomp.mozilla.rhino.ast.Name");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      node0.putBooleanProp(11, true);
      boolean boolean0 = NodeUtil.isFunction(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.mayBeString(node0);
      NodeUtil.getStringValue(node0);
      Node node1 = Node.newString(303, "{9ElIl%");
      node1.setLineno(1440);
      NodeUtil.opToStr((-339));
      NodeUtil.getNumberValue(node0);
      NodeUtil.isFunctionExpression(node1);
      boolean boolean2 = NodeUtil.isSimpleOperatorType(29);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      Node node1 = node0.cloneNode();
      node0.setVarArgs(true);
      node0.putBooleanProp(286, true);
      boolean boolean0 = NodeUtil.isFunction(node0);
      assertFalse(boolean0);
      
      NodeUtil.isConstantName(node1);
      NodeUtil.getStringValue(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      closureCodingConvention0.extractClassNameIfRequire(node1, node1);
      Node node2 = NodeUtil.newName(closureCodingConvention0, "com.google.javascript.jscomp.NodeUtil$1", node1);
      String string0 = node2.checkTreeEquals(node1);
      assertEquals("Node tree inequality:\nTree1:\nNAME com.google.javascript.jscomp.NodeUtil$1\n\n\nTree2:\nSTRING 4ddE<I:\"\n\n\nSubtree1: NAME com.google.javascript.jscomp.NodeUtil$1\n\n\nSubtree2: STRING 4ddE<I:\"\n", string0);
      
      NodeUtil.opToStr((-15));
      boolean boolean1 = NodeUtil.mayBeStringHelper(node1);
      boolean boolean2 = NodeUtil.isSimpleFunctionObjectCall(node2);
      assertNotSame(node2, node1);
      assertFalse(boolean2 == boolean1);
      
      String string1 = NodeUtil.trimJsWhiteSpace("4ddE<I:\"");
      assertEquals("4ddE<I:\"", string1);
      
      NodeUtil.getPrototypeClassName(node0);
      boolean boolean3 = NodeUtil.isLabelName((Node) null);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newString((int) '@', "undefined");
      node0.putBooleanProp('@', false);
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.getStringValue(node0);
      node0.setLineno('@');
      NodeUtil.opToStr(76);
      NodeUtil.mayBeStringHelper(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isSparseArray(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.isHoistedFunctionDeclaration(node0);
      NodeUtil.getPrototypeClassName(node0);
      NodeUtil.isLoopStructure(node0);
      NodeUtil.arrayToString(node0);
      String string0 = NodeUtil.opToStr(38);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      mockPrintStream0.close();
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q", "~e_7$5*OLP`eZ85e");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      node0.getAncestors();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "^7APy 5!5Y[", node0);
      assertTrue(node1.isQualifiedName());
      
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerOptions compilerOptions1 = new CompilerOptions();
      Double double0 = NodeUtil.getStringNumberValue("O");
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      NodeUtil.getExpressionBooleanValue(node0);
      Node node2 = NodeUtil.getRootOfQualifiedName(node1);
      NodeUtil.isEmptyBlock(node2);
      Node node3 = NodeUtil.newName(closureCodingConvention1, "~e_7$5*OLP`eZ85e", node2);
      boolean boolean0 = NodeUtil.isLoopStructure(node3);
      assertEquals(1, node3.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.append("com.google.javascript.jscomp.NodeUtil$VarCollector");
      Node node0 = Node.newNumber(2.147483647E9);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(17, 85, 16);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(2907);
      boolean boolean1 = NodeUtil.containsFunction(node1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.isControlStructure(node1);
      Node node2 = new Node(31, 23, 12);
      String string0 = NodeUtil.opToStr(17);
      assertEquals(">=", string0);
      
      Node node3 = new Node(25);
      boolean boolean3 = NodeUtil.isSimpleOperator(node3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      Vector<JSType> vector0 = new Vector<JSType>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q");
      Node node0 = Node.newString(35, ":.%5t>],");
      NodeUtil.isNumericResultHelper(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = NodeUtil.isCommutative(79);
      assertFalse(boolean0);
      
      NodeUtil.referencesThis(node0);
      boolean boolean1 = NodeUtil.mayBeString(node0);
      String string0 = NodeUtil.opToStr(88);
      assertEquals("^=", string0);
      
      boolean boolean2 = NodeUtil.containsCall(node0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "^7APy 5!5Y[", node0);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      CompilerOptions compilerOptions1 = new CompilerOptions();
      node0.setLineno((-3673));
      NodeUtil.opToStr(0);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertTrue(node1.isQualifiedName());
      assertNull(double0);
      assertEquals(26, node1.getCharno());
      
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      boolean boolean1 = NodeUtil.isSimpleOperatorType(48);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q", "Q");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "^7APy 5!5Y[", node0);
      assertEquals(1, node1.getLineno());
      
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      node1.setLineno(9);
      NodeUtil.opToStr((-3));
      NodeUtil.getNumberValue(node1);
      NodeUtil.isFunctionObjectCallOrApply(node1);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(113);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NodeUtil.precedence(23);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "exec");
      MockPrintStream mockPrintStream0 = new MockPrintStream("exec");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eqpzT[HNhwXc");
      mockPrintStream0.print('\"');
      Node node0 = Node.newString(12, "<", 23, 40);
      node0.children();
      node0.putBooleanProp(109, true);
      NodeUtil.opToStr(109);
      NodeUtil.isArrayLiteral(node0);
      NodeUtil.isFunctionExpression(node0);
      NodeUtil.isStrWhiteSpaceChar(9);
      NodeUtil.isLhs(node0, node0);
      NodeUtil.isForIn(node0);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node1 = NodeUtil.newFunctionNode("String", linkedList0, node0, 702, 25);
      nodeUtil_MatchNotFunction0.apply(node0);
      NodeUtil.isSwitchCase(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-2464));
      nodeUtil_MatchNodeType0.equals(compiler0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString(94, "$4");
      boolean boolean0 = NodeUtil.isVar(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "$4", node0);
      boolean boolean1 = NodeUtil.isExpressionNode(node1);
      assertTrue(boolean1 == boolean0);
      assertTrue(node1.isUnscopedQualifiedName());
      
      NodeUtil.getExpressionBooleanValue(node0);
      Node node2 = new Node(107);
      boolean boolean2 = NodeUtil.isSimpleOperator(node2);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = Node.newString(49, "undefined");
      node0.setString("undefined");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "ty.O", 4, (-760));
      NodeUtil.isConstantName(node1);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.setLooseTypes(false);
      compilerOptions0.enableExternExports(true);
      compilerOptions0.enableExternExports(true);
      NodeUtil.opToStr((-2));
      Node node2 = new Node(119, node1, node0, node0, 43, (-4451));
      NodeUtil.mayBeStringHelper(node2);
      // Undeclared exception!
      try { 
        NodeUtil.getStringNumberValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newString(17, "com.google.javascript.jscomp.mozilla.rhino.ast.EmptyExpression");
      node0.setOptionalArg(false);
      Node node1 = new Node((-1341), 4183, 16);
      NodeUtil.isString(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.putBooleanProp((-202), false);
      NodeUtil.mayBeString(node1);
      NodeUtil.opToStr(29);
      NodeUtil.mayBeStringHelper(node0);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got GE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = Node.newString(49, "undefined");
      Node node1 = new Node(31, 176, 4);
      NodeUtil.isString(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.putBooleanProp(4095, false);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(9);
      NodeUtil.isExpressionNode(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      Node node2 = new Node(29, node0, node1, 25, 15);
      NodeUtil.isFunctionExpression(node2);
      NodeUtil.isSimpleOperatorType(39);
      String string0 = NodeUtil.opToStr(108);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFile mockFile1 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "undefined", "(VCL`UJ7lwNL_JM");
      mockFile1.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      node0.getAncestors();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "m&_O6H![{vR\"XWssG", node0);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      node0.setLineno(2);
      NodeUtil.opToStr((-3353));
      NodeUtil.getNumberValue(node0);
      NodeUtil.isFunctionExpression(node1);
      assertEquals(0, node1.getCharno());
      assertEquals(38, node1.getType());
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst(" - ");
      String string0 = NodeUtil.opToStr(98);
      assertNull(string0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Compiler compiler0 = new Compiler();
      Node node1 = new Node((-3), node0, node0, node0, 41, 0);
      NodeUtil.isFunctionExpression(node1);
      NodeUtil.isStrWhiteSpaceChar(10);
      NodeUtil.isLhs(node0, node0);
      Logger logger0 = Tracer.logger;
      Compiler compiler1 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      node1.setLineno(405);
      NodeUtil.isCommutative((-30));
      NodeUtil.opToStr(18);
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-1612));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=-1612> (type -1612)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      NodeUtil.isValidPropertyName("jdTl`R9yvZJ7Le_ze%Y");
      Node node0 = Node.newNumber((double) 102, 26, 26);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.isAssociative(1);
      NodeUtil.isFunctionExpression(node0);
      NodeUtil.isStrWhiteSpaceChar(32);
      NodeUtil.isLhs(node0, node0);
      NodeUtil.isAssign(node0);
      NodeUtil.isForIn(node0);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node1 = NodeUtil.newFunctionNode(">", linkedList0, node0, 40, 0);
      assertEquals(40, node1.getLineno());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.setLineno((-203));
      NodeUtil.opToStr(0);
      NodeUtil.mayBeStringHelper(node1);
      boolean boolean0 = NodeUtil.isAssociative(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">=", "4d06-<<.'PU+MOf");
      SyntheticAst syntheticAst0 = new SyntheticAst("STAR");
      Node node0 = Node.newString("1jp{Y[");
      node0.putBooleanProp(46, true);
      Node node1 = Node.newString(511, "!");
      node1.setLineno((-158));
      String string0 = NodeUtil.opToStr(12);
      assertEquals("==", string0);
      
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = 'H';
      charArray0[2] = 'I';
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "::this.", "com.google.javascript.jscomp.NodeUtil$1");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.opToStr(1561);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newString(35, ":.%5t>],");
      NodeUtil.isNumericResultHelper(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      NodeUtil.isCommutative(79);
      NodeUtil.referencesThis(node0);
      NodeUtil.mayBeString(node0);
      NodeUtil.isCommutative(12);
      Node node1 = new Node(87855567, node0, node0, node0, node0, 17, 5);
      NodeUtil.getLoopCodeBlock(node1);
      Node node2 = Node.newNumber((double) 21);
      NodeUtil.getNameReferenceCount(node2, "Q");
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 87855567
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      String string0 = NodeUtil.trimJsWhiteSpace("sX}ID)h8<@");
      assertEquals("sX}ID)h8<@", string0);
      
      NodeUtil.opToStr(72);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      NodeUtil.opToStr(84);
      Node node0 = Node.newString(84, "sX}ID)h8<@");
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/c.FwP&t>%xI>-;`0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('x');
      MockPrintStream mockPrintStream1 = new MockPrintStream("/c.FwP&t>%xI>-;`0");
      mockPrintStream1.close();
      Locale locale0 = Locale.TAIWAN;
      mockPrintStream0.printf(locale0, "/c.FwP&t>%xI>-;`0", (Object[]) null);
      Node node0 = Node.newString(52, "/c.FwP&t>%xI>-;`0", 16, 102);
      boolean boolean0 = NodeUtil.isFunction(node0);
      NodeUtil.isConstantName(node0);
      NodeUtil.getStringValue(node0);
      node0.setLineno(2599);
      NodeUtil.opToStr((-50));
      boolean boolean1 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean2);
      
      String string0 = NodeUtil.trimJsWhiteSpace("com.google.javascript.jscomp.ConcreteType$1");
      assertEquals("com.google.javascript.jscomp.ConcreteType$1", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      mockPrintStream0.close();
      mockPrintStream0.println((char[]) null);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      mockPrintStream0.println((char[]) null);
      Compiler compiler1 = new Compiler(mockPrintStream0);
      Compiler compiler2 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler2, "KyPO{'BB^4@ *K4SYl", "com.google.javascript.jscomp.NodeUtil$1");
      MockFile mockFile1 = new MockFile("Infinity");
      mockFile1.toPath();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      boolean boolean0 = NodeUtil.containsType(node0, 30, compilerOptions0.sourceMapDetailLevel);
      boolean boolean1 = NodeUtil.isExpressionNode(node0);
      assertTrue(boolean1 == boolean0);
      
      CompilerOptions compilerOptions1 = new CompilerOptions();
      NodeUtil.isFunctionExpression(node0);
      boolean boolean2 = NodeUtil.isSimpleOperatorType(37);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      charArray0[5] = '@';
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "~e_7$5*OLP`eZ85e", "RegExp");
      MockFile mockFile1 = new MockFile(mockFile0, "com.google.common.collect.Lists$RandomAccessListWrapper");
      mockFile1.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      node0.getAncestors();
      Node.newNumber(32.0, (-298), 16);
      boolean boolean0 = NodeUtil.isVar(node0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      boolean boolean1 = NodeUtil.isExpressionNode(node1);
      assertFalse(boolean1);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      NodeUtil.isFunctionExpression(node0);
      boolean boolean2 = NodeUtil.isSimpleOperatorType(30);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = Node.newString(49, "undefined");
      Node node1 = new Node(31, 176, 4);
      NodeUtil.isString(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.mayBeStringHelper(node1);
      NodeUtil.getStringNumberValue("^7APy 5!5Y[");
      NodeUtil.newUndefinedNode(node0);
      Compiler compiler0 = new Compiler();
      VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter(compiler0);
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(verboseMessageFormatter0, logger0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
      // Undeclared exception!
      try { 
        NodeUtil.isTryCatchNodeContainer(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4ddE<I:\"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.println('J');
      mockPrintStream0.print('J');
      SyntheticAst syntheticAst0 = new SyntheticAst("4ddE<I:\"");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      mockPrintStream0.close();
      Node node0 = Node.newString(13, "cy?GU'2$p%Qj\"");
      NodeUtil.isNumericResultHelper(node0);
      NodeUtil.getInfoForNameNode(node0);
      Node node1 = Node.newString(15, "4ddE<I:\"");
      node0.setLineno(0);
      NodeUtil.opToStr((-3715));
      NodeUtil.mayBeStringHelper(node1);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      mockFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = '@';
      mockPrintStream0.println(charArray0);
      mockPrintStream0.print('@');
      SyntheticAst syntheticAst0 = new SyntheticAst(":mjMq");
      Logger logger0 = Logger.getLogger("-infinity");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      node0.putBooleanProp(11, true);
      boolean boolean0 = NodeUtil.isFunction(node0);
      NodeUtil.isConstantName(node0);
      NodeUtil.getStringValue(node0);
      Node node1 = Node.newString(18, ":mjMq");
      node0.setLineno((-948));
      NodeUtil.opToStr(2397);
      NodeUtil.getNumberValue(node1);
      NodeUtil.isFunctionExpression(node1);
      boolean boolean1 = NodeUtil.isSimpleOperatorType(41);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      String string0 = NodeUtil.opToStr(79);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFile mockFile1 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(93, 7680, 7680);
      NodeUtil.getVarsDeclaredInBranch(node0);
      NodeUtil.getStringNumberValue("+?|#%)g}n!oa,+gcUAl");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.opToStr(3);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = new Node(113, 221, 113);
      node0.siblings();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      NodeUtil.opToStr(21);
      Node node1 = new Node(103, 6032, 0);
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter2);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(183);
      NodeUtil.mayBeStringHelper(node1);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Node node2 = ControlFlowAnalysis.computeFallThrough(node0);
      treeSet0.add("+?|#%)g}n!oa,+gcUAl");
      Node.tokenToName(19);
      NodeUtil.isValidDefineValue(node2, treeSet0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.parseTestCode((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.jscomp.mozilla.rhino.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Stack<JSType> stack0 = new Stack<JSType>();
      Vector<JSType> vector0 = new Vector<JSType>();
      String string0 = NodeUtil.opToStr(35);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.opToStr(68);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("$OJ");
      char[] charArray0 = new char[4];
      charArray0[2] = 'U';
      charArray0[1] = 'M';
      charArray0[2] = '@';
      charArray0[3] = ';';
      mockPrintStream0.println(charArray0);
      Node node1 = new Node(10, 28, (-1244));
      NodeUtil.getVarsDeclaredInBranch(node1);
      Double double0 = NodeUtil.getStringNumberValue("|dtR,A)c");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.opToStr(442);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newString("73#cN\"Y;B");
      NodeUtil.copyNameAnnotations(node0, node0);
      node0.setIsSyntheticBlock(true);
      NodeUtil.isFunctionDeclaration(node0);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.opToStr(1);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.getExpressionBooleanValue(node0);
      NodeUtil.isEmptyBlock(node1);
      Compiler compiler0 = new Compiler();
      Node node2 = compiler0.getRoot();
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      Node node0 = Node.newNumber(3410.111878968447, (-400), (-400));
      Node node1 = new Node(1, node0);
      boolean boolean0 = NodeUtil.isLabelName(node1);
      Node node2 = new Node(47, 57296, 23);
      NodeUtil.isString(node2);
      node2.setOptionalArg(false);
      Node.newString(136, "Q");
      node2.putBooleanProp(20, false);
      boolean boolean1 = NodeUtil.isFunction(node0);
      NodeUtil.isConstantName(node2);
      NodeUtil.getStringValue(node2);
      Node node3 = Node.newString(27, "msg.undef.label");
      node2.setLineno(1612);
      NodeUtil.opToStr(160);
      boolean boolean2 = NodeUtil.mayBeStringHelper(node3);
      assertTrue(boolean2 == boolean0);
      
      String string0 = NodeUtil.opToStr(13);
      assertEquals("!=", string0);
      
      Node node4 = new Node(44);
      boolean boolean3 = NodeUtil.isSimpleOperator(node2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      Node node1 = new Node(207, 332, 4712);
      NodeUtil.isString(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.putBooleanProp(95, false);
      NodeUtil.mayBeString(node1);
      NodeUtil.opToStr(117);
      NodeUtil.mayBeStringHelper(node1);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ObjectType.cast((JSType) null);
      NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createConstructorType((JSType) null, false, (JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      Node node1 = Node.newNumber((double) 15, 1783, 29);
      Node node2 = new Node(100000, node1);
      boolean boolean0 = NodeUtil.isLabelName(node1);
      Node node3 = new Node(46, (-3), 17);
      NodeUtil.isString(node0);
      Node node4 = Node.newString(41, "<0O");
      Node node5 = Node.newString(48, "8yw8)/?<z-.,b&5{P)y");
      node5.putBooleanProp((-187), false);
      boolean boolean1 = NodeUtil.isFunction(node0);
      NodeUtil.isConstantName(node3);
      NodeUtil.getStringValue(node4);
      Node.newString(12, "w9DU%'jGeBZA2");
      node5.setLineno(91);
      NodeUtil.opToStr((-2027));
      boolean boolean2 = NodeUtil.mayBeStringHelper(node1);
      assertTrue(boolean2 == boolean1);
      
      NodeUtil.opToStr(31);
      Node node6 = new Node((-179));
      boolean boolean3 = NodeUtil.isSimpleOperator(node6);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node.newString(0, "T~c@");
      Node.newString((-3545), "");
      Node node0 = Node.newString(0, "com.google.javascript.jscomp.InvocationsCallback", 0, 1500);
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      boolean boolean1 = NodeUtil.isEmptyBlock(node0);
      NodeUtil.getExpressionBooleanValue(node0);
      boolean boolean2 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean2);
      
      boolean boolean3 = NodeUtil.isSimpleOperatorType(16);
      assertFalse(boolean3 == boolean1);
      
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean4 = NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      mockFile0.setReadable(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('m');
      SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.jscomp.mozilla.rhino.ast.Name");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      node0.putBooleanProp(11, true);
      boolean boolean0 = NodeUtil.isFunction(node0);
      boolean boolean1 = NodeUtil.mayBeString(node0);
      NodeUtil.getStringValue(node0);
      Node node1 = Node.newNumber(0.0, 9, 507);
      boolean boolean2 = NodeUtil.isVar(node1);
      assertTrue(boolean2 == boolean0);
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node2 = NodeUtil.newName(closureCodingConvention0, "c:SgH'hFdAjO", node1);
      boolean boolean3 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean3 == boolean1);
      
      NodeUtil.getExpressionBooleanValue(node1);
      Node node3 = new Node(4095);
      boolean boolean4 = NodeUtil.isSimpleOperator(node2);
      assertFalse(boolean4);
      assertEquals(9, node2.getLineno());
      assertTrue(node2.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = Node.newNumber((double) 996, (-3976), (-3976));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      NodeUtil.isStrWhiteSpaceChar(48);
      NodeUtil.getExpressionBooleanValue(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      mockPrintStream0.close();
      String string0 = "<";
      Node node0 = Node.newString(119, "<", (-62), (-62));
      NodeUtil.opToStr(94);
      NodeUtil.isAssociative(113);
      NodeUtil.isFunctionExpression(node0);
      NodeUtil.isStrWhiteSpaceChar(795);
      NodeUtil.isLhs(node0, node0);
      NodeUtil.isForIn(node0);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got WITH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hqghzcn");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      mockPrintStream1.println('<');
      mockPrintStream0.print('A');
      SyntheticAst syntheticAst0 = new SyntheticAst("hqghzcn");
      Compiler compiler0 = new Compiler(mockPrintStream1);
      mockPrintStream1.close();
      Node node0 = Node.newString(13, "o+U;.+|]x&oWbmP*");
      NodeUtil.isNumericResultHelper(node0);
      NodeUtil.getInfoForNameNode(node0);
      Node node1 = Node.newString(1523, "com.google.javascript.jscomp.SourceFile$Generated");
      node1.setLineno((-1));
      NodeUtil.opToStr(29);
      NodeUtil.mayBeStringHelper(node0);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFile mockFile1 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      Node node0 = new Node(1608, 189, 1608);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      String string0 = NodeUtil.opToStr(27);
      assertEquals("~", string0);
      
      boolean boolean1 = NodeUtil.containsFunction(node0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.isControlStructure(node0);
      Node node1 = new Node(27, 17, 45);
      NodeUtil.opToStr(32);
      Node node2 = new Node(0);
      boolean boolean3 = NodeUtil.isSimpleOperator(node1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Node node0 = new Node(27, 27, 4027);
      NodeUtil.isString(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.putBooleanProp(176, false);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(147);
      NodeUtil.mayBeStringHelper(node0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      char[] charArray0 = new char[5];
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q", "~e_7$5*OLP`eZ85e");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "^7APy 5!5Y[", node0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
      assertEquals(0, node1.getCharno());
      assertEquals(38, node1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = Node.newString("valueOf");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1);
      Compiler compiler0 = new Compiler();
      AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[2];
      StatementFusion statementFusion0 = new StatementFusion();
      abstractPeepholeOptimizationArray0[0] = (AbstractPeepholeOptimization) statementFusion0;
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(compiler0, abstractPeepholeOptimizationArray0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0, (SyntacticScopeCreator.RedeclarationHandler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, peepholeOptimizationsPass0, syntacticScopeCreator0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler1.defaultCodingConvention;
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "D:v.;S4/", node0, "valueOf");
      node1.putBooleanProp(41, true);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(45);
      NodeUtil.mayBeStringHelper(node1);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      NodeUtil.isValidDefineValue(node1, treeSet0);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<[R`kR5");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "<[R`kR5");
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      mockPrintStream1.print('t');
      mockPrintStream1.close();
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'J';
      charArray0[3] = '@';
      charArray0[4] = '@';
      mockPrintStream1.println(charArray0);
      mockPrintStream0.println(charArray0);
      Node node0 = new Node(98, (-16), 65136);
      NodeUtil.getVarsDeclaredInBranch(node0);
      NodeUtil.opToStr(43);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      Node node0 = new Node((-2588), 8233, 8233);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(43);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      node1.checkTreeEqualsSilent(node0);
      // Undeclared exception!
      try { 
        node1.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2588
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      mockPrintStream0.println((char[]) null);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "._KroEAgdN5PQNN%A", "h']NU<bTs23:");
      mockFile0.toPath();
      node0.setIsSyntheticBlock(true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      node0.getAncestors();
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.isSimpleOperatorType(0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = Node.newString(".OA\"fvW-@Y.");
      NodeUtil.copyNameAnnotations(node0, node0);
      node0.setIsSyntheticBlock(true);
      NodeUtil.isFunctionDeclaration(node0);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isSimpleOperator(node1);
      NodeUtil.opToStr(93);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node2 = peepholeFoldWithTypes0.optimizeSubtree(node0);
      Node node3 = peepholeRemoveDeadCode0.optimizeSubtree(node2);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      mockPrintStream0.close();
      mockPrintStream0.println((char[]) null);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "._KroEAgdN5PQNN%A", "h']NU<bTs3:");
      mockFile0.toPath();
      node0.setIsSyntheticBlock(true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      mockPrintStream0.println((char[]) null);
      mockPrintStream0.println((char[]) null);
      Node node1 = new Node(119, 0, 43);
      NodeUtil.getVarsDeclaredInBranch(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.opToStr(49);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      MockPrintStream mockPrintStream0 = new MockPrintStream("O");
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      mockPrintStream0.println(charArray0);
      Node node0 = new Node(3082, 1731, 3082);
      NodeUtil.getVarsDeclaredInBranch(node0);
      Double double0 = NodeUtil.getStringNumberValue("regexp");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      String string0 = NodeUtil.opToStr(87);
      assertEquals("|=", string0);
      
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      char[] charArray0 = new char[4];
      charArray0[1] = 'H';
      charArray0[2] = 'I';
      charArray0[3] = '+';
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q", "com.google.javascript.jscomp.NodeUtil$1");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.isExpressionNode(node0);
      NodeUtil.getExpressionBooleanValue(node0);
      Node node1 = new Node(96);
      NodeUtil.isSimpleOperator(node1);
      // Undeclared exception!
      try { 
        NodeUtil.isValidPropertyName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.TokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newString(1197, "hqghzcn");
      Node node1 = Node.newString(114, "T~c@", (-1492), (-2242));
      Node node2 = NodeUtil.newExpr(node0);
      assertEquals(130, node2.getType());
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
      boolean boolean1 = nodeUtil_MatchDeclaration0.apply(node0);
      boolean boolean2 = NodeUtil.referencesThis(node0);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = NodeUtil.isSimpleOperatorType(116);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      Node node0 = Node.newNumber(2704.58, (-400), 113);
      Node node1 = new Node(28, node0);
      Node node2 = new Node(33, 1, 46);
      NodeUtil.mayEffectMutableState(node0);
      Node node3 = Node.newString(18, "Q");
      node1.putBooleanProp(1890, false);
      Node node4 = ControlFlowAnalysis.computeFallThrough(node3);
      boolean boolean0 = NodeUtil.isFunction(node4);
      NodeUtil.getStringValue(node2);
      Node node5 = Node.newString(31, "msg.undef.label");
      node4.setLineno(147);
      NodeUtil.opToStr((-1559));
      boolean boolean1 = NodeUtil.mayBeStringHelper(node3);
      assertTrue(boolean1 == boolean0);
      
      NodeUtil.getNumberValue(node3);
      boolean boolean2 = NodeUtil.isFunctionExpression(node5);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = Node.newString(49, "undefined");
      Node node1 = new Node(31, 176, 4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NodeUtil.mayBeString(node0);
      String string0 = NodeUtil.opToStr(9);
      assertNotNull(string0);
      assertEquals("|", string0);
      
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      boolean boolean1 = NodeUtil.isValidDefineValue(node1, treeSet0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(36);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = NodeUtil.isFunctionDeclaration(node1);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node.newString(112, "NSUR]j5o)~u!Jy ");
      Node node0 = Node.newString(84, "NSUR]j5o)~u!Jy ");
      Node node1 = Node.newString(41, "NSUR]j5o)~u!Jy ", 11, 8287);
      Node node2 = NodeUtil.newExpr(node0);
      Node node3 = Node.newNumber((double) 8, 1, (-739));
      NodeUtil.isVar(node2);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node4 = new Node(37);
      NodeUtil.isExpressionNode(node4);
      NodeUtil.getVarsDeclaredInBranch(node2);
      NodeUtil.getStringNumberValue(".prototype.");
      NodeUtil.getLoopCodeBlock(node2);
      NodeUtil.isSimpleOperatorType(17);
      NodeUtil.newVarNode("NSUR]j5o)~u!Jy ", (Node) null);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node3, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hqghzcn");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      mockPrintStream1.println('<');
      mockPrintStream0.print('A');
      SyntheticAst syntheticAst0 = new SyntheticAst("hqghzcn");
      Compiler compiler0 = new Compiler(mockPrintStream1);
      mockPrintStream1.close();
      Node node0 = Node.newString(21, "hqghzcn");
      // Undeclared exception!
      try { 
        NodeUtil.isNumericResultHelper(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = NodeUtil.opToStr(95);
      assertEquals("*=", string0);
      
      boolean boolean0 = NodeUtil.isLatin("@>EdvbaJ8X~BApBGil_");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = Node.newString(49, "undefined");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.putBooleanProp(31, true);
      NodeUtil.opToStr((-609));
      NodeUtil.isAssociative((-609));
      NodeUtil.isFunctionExpression(node0);
      NodeUtil.isStrWhiteSpaceChar(24);
      NodeUtil.isLhs(node0, node0);
      NodeUtil.isAssign(node0);
      NodeUtil.isForIn(node0);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      linkedList0.add(node0);
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode("undefined", linkedList0, node0, 1, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      mockPrintStream0.println((char[]) null);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "._KroEAgdN5PQNN%A", "h']NU<bTs23:");
      mockFile0.toPath();
      CodingConvention codingConvention0 = compiler0.getCodingConvention();
      Node node1 = NodeUtil.newName(codingConvention0, "Infinity", node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      node0.setLineno(14);
      String string0 = NodeUtil.opToStr(33);
      assertNull(string0);
      
      NodeUtil.getNumberValue(node0);
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node1);
      boolean boolean1 = NodeUtil.canBeSideEffected(node1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      Node node0 = new Node(101, 0, 221);
      node0.siblings();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      node0.putBooleanProp(1420, true);
      NodeUtil.opToStr((-3106));
      NodeUtil.isAssociative(32);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = Node.newString(113, ".OA\"fvW-@Yo.");
      NodeUtil.isArrayLiteral(node0);
      NodeUtil.isCommutative(43);
      NodeUtil.getLoopCodeBlock(node0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hqghzcn");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      mockFileOutputStream0.release();
      mockPrintStream1.println('<');
      mockPrintStream0.print('A');
      SyntheticAst syntheticAst0 = new SyntheticAst("hqghzcn");
      Compiler compiler0 = new Compiler(mockPrintStream1);
      mockPrintStream1.close();
      Node node0 = Node.newString(13, "o+U;.+|]x&oWbmP*");
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      NodeUtil.getInfoForNameNode(node0);
      Node node1 = Node.newString(1523, "com.google.javascript.jscomp.SourceFile$Generated");
      node1.setLineno((-1));
      String string0 = NodeUtil.opToStr(29);
      assertEquals("-", string0);
      
      boolean boolean1 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean1 == boolean0);
      
      NodeUtil.getNumberValue(node0);
      int int0 = NodeUtil.precedence(4);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hqghzcn");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NodeUtil$1", "N+^24!Ry>Q");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = compiler0.options;
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      NodeUtil.containsFunction(node0);
      NodeUtil.isExprAssign(node0);
      NodeUtil.isConstantName(node0);
      NodeUtil.opToStr(96);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFile mockFile1 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = 'L';
      mockFileOutputStream0.release();
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'L';
      mockPrintStream0.println(charArray0);
      Node node0 = new Node(59, 7680, 7680);
      NodeUtil.getVarsDeclaredInBranch(node0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Q");
      FileSystemHandling.createFolder(evoSuiteFile0);
      NodeUtil.getStringNumberValue("+?|#%)g}n!oa,+gcUAl");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.opToStr(3);
      NodeUtil.mayHaveSideEffects(node0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0, compiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got ENUM_NEXT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = new Node(102, 7680, 102);
      NodeUtil.mayBeString(node0);
      NodeUtil.getStringNumberValue("com.google.javascript.jscomp.NodeUtil$VarCollector");
      NodeUtil.opToStr((-1431));
      Node node1 = new Node(26);
      node1.setType(44);
      NodeUtil.isLiteralValue(node1, false);
      NodeUtil.isFunctionObjectCallOrApply(node0);
      NodeUtil.getBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-2464));
      nodeUtil_MatchNodeType0.equals(compiler0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(";M(*JY5^AUV%r9((e", ";M(*JY5^AUV%r9((e", (-2464), ";M(*JY5^AUV%r9((e", (-285));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = Node.newNumber(100.0, (-1640531527), 29);
      NodeUtil.isVar(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.isExpressionNode(node0);
      NodeUtil.getVarsDeclaredInBranch(node0);
      NodeUtil.getStringNumberValue("bm+f4gUfN");
      NodeUtil.getLoopCodeBlock(node0);
      NodeUtil.isSimpleOperatorType(63);
      Node node1 = NodeUtil.newVarNode("com.google.javascript.jscomp.mozilla.rhino.Kit", (Node) null);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("$OJ");
      char[] charArray0 = new char[4];
      mockPrintStream0.println();
      charArray0[2] = 'U';
      charArray0[1] = 'M';
      charArray0[2] = '@';
      charArray0[3] = ';';
      mockPrintStream0.println(charArray0);
      Node node1 = new Node(10, 28, (-1244));
      NodeUtil.getVarsDeclaredInBranch(node1);
      NodeUtil.getStringNumberValue("|dtR,A)c");
      NodeUtil.opToStr(0);
      NodeUtil.mayBeStringHelper(node1);
      NodeUtil.getNumberValue(node1);
      node0.addChildrenToBack(node1);
      NodeUtil.precedence(41);
      NodeUtil.getBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newString("valueOf");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("valueOf", "EXPR_VOID", 94, "EXPR_VOID", 4095);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      node0.removeFirstChild();
      Node node1 = new Node(10, 12, 27);
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1);
      NodeUtil.mayBeString(node1);
      NodeUtil.opToStr(4);
      NodeUtil.mayBeStringHelper(node1);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node1, treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-2464));
      nodeUtil_MatchNodeType0.equals("tD(RV?");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.opToStr((-2464));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      boolean boolean0 = NodeUtil.containsFunction(node1);
      boolean boolean1 = NodeUtil.isControlStructure(node0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      nodeArray0[3] = node1;
      nodeArray0[4] = node1;
      boolean boolean2 = NodeUtil.isNumericResultHelper(node0);
      assertTrue(boolean2 == boolean1);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean3 = NodeUtil.isCommutative(113);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = NodeUtil.referencesThis(node1);
      boolean boolean5 = NodeUtil.isLiteralValue(node0, true);
      assertTrue(boolean5 == boolean4);
      
      NodeUtil.opToStr((-2421));
      int int0 = NodeUtil.precedence(9);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q", "Q");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      node0.getAncestors();
      boolean boolean0 = NodeUtil.isAssign(node0);
      assertFalse(boolean0);
      
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      boolean boolean1 = nodeUtil_MatchNotFunction0.apply(node0);
      boolean boolean2 = NodeUtil.isValidPropertyName("Q");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Node node0 = new Node(75);
      boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(1);
      NodeUtil.getExpressionBooleanValue(node0);
      Node node1 = Node.newString((-344), ".OA\"fvW-@Y.");
      NodeUtil.isNumericResultHelper(node1);
      NodeUtil.getInfoForNameNode(node0);
      Node node2 = Node.newString(0, "^7APy 5!5Y[");
      node2.setLineno(38);
      NodeUtil.opToStr(2183);
      boolean boolean1 = NodeUtil.mayBeStringHelper(node2);
      assertFalse(boolean1 == boolean0);
      
      NodeUtil.getNumberValue(node1);
      int int0 = NodeUtil.precedence(14);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-2464));
      nodeUtil_MatchNodeType0.equals(compiler0);
      Node node0 = Node.newString(94, "$4");
      boolean boolean0 = NodeUtil.isVar(node0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "$4", node0);
      Node node2 = new Node(1407, 1675, (-89));
      NodeUtil.getVarsDeclaredInBranch(node1);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.opToStr(0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
      Node node3 = new Node(31, node1, node1, node0, 43, 41);
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node3);
      assertFalse(boolean1 == boolean0);
      assertTrue(node1.isQualifiedName());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      mockFile0.setReadable(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('m');
      Compiler compiler0 = new Compiler(mockPrintStream0);
      NodeUtil.opToStr(92);
      NodeUtil.opToStr((-1740));
      Node node0 = new Node(1548);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = new Node(26);
      NodeUtil.referencesThis(node0);
      NodeUtil.getStringNumberValue("JSC_READ_WITHOUT_SET");
      // Undeclared exception!
      try { 
        NodeUtil.getExpressionBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream1.close();
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "%_g\u0007h", "<");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      node0.getAncestors();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "^7APy 5!5Y[", node0);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      node1.setLineno(125);
      NodeUtil.opToStr((-39));
      Double double0 = NodeUtil.getNumberValue(node1);
      assertNull(double0);
      
      NodeUtil.isFunctionObjectCallOrApply(node1);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(74);
      boolean boolean1 = NodeUtil.isFunctionObjectCallOrApply(node1);
      assertTrue(boolean1 == boolean0);
      assertEquals(38, node1.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      Node node0 = Node.newString(119, "<", (-62), (-62));
      node0.putBooleanProp((-503), false);
      NodeUtil.opToStr(94);
      NodeUtil.isArrayLiteral(node0);
      NodeUtil.isFunctionExpression(node0);
      NodeUtil.isStrWhiteSpaceChar(795);
      NodeUtil.isLhs(node0, node0);
      NodeUtil.isForIn(node0);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      node0.setLineno((-503));
      NodeUtil.opToStr(1);
      NodeUtil.mayBeStringHelper(node0);
      NodeUtil.getNumberValue(node0);
      NodeUtil.precedence(11);
      // Undeclared exception!
      try { 
        NodeUtil.isStatement(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = Node.newString(118, "Q");
      Node node1 = new Node(33, (-368), 18);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.newName(googleCodingConvention0, "Q", node1, (String) null);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = "Q";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      mockFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Node node0 = Node.newString(304, "Q");
      Node node1 = new Node(44, (-383), 39);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(101);
      NodeUtil.mayBeStringHelper(node0);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got QMARK
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Node node0 = Node.newString("Q", 1738, 1738);
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean1 = NodeUtil.isCommutative(27);
      boolean boolean2 = NodeUtil.referencesThis(node0);
      boolean boolean3 = NodeUtil.isLiteralValue(node0, false);
      assertFalse(boolean3 == boolean0);
      
      NodeUtil.isFunctionObjectCallOrApply(node0);
      boolean boolean4 = NodeUtil.isSimpleOperatorType(52);
      assertFalse(boolean4 == boolean1);
      
      boolean boolean5 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      mockPrintStream0.close();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Infinity", "XMLHttpRequest");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parse(jSSourceFile0);
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = new Node(64);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      String string0 = NodeUtil.opToStr(74);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.append("0EoRqgYCJQi");
      compiler_CodeBuilder0.append("com.google.javascript.jscomp.NodeUtil$VarCollector");
      Node node0 = Node.newNumber(2.147483647E9);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.javascript.jscomp.NodeUtil$VarCollector");
      Node node1 = new Node(17, 85, 16);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(2904);
      boolean boolean1 = NodeUtil.containsFunction(node1);
      boolean boolean2 = NodeUtil.isControlStructure(node1);
      assertFalse(boolean2);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      node0.setLineno(2904);
      NodeUtil.opToStr((-1));
      NodeUtil.getNumberValue(node0);
      boolean boolean3 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = NodeUtil.isSimpleOperatorType(19);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hqghzcn");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NodeUtil$1", "N+^24!Ry>Q");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = compiler0.options;
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      boolean boolean0 = NodeUtil.containsType(node0, 936, sourceMap_DetailLevel0);
      NodeUtil.getStringValue(node0);
      node0.setLineno(936);
      NodeUtil.opToStr(3604);
      boolean boolean1 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean1 == boolean0);
      
      NodeUtil.isSimpleFunctionObjectCall(node0);
      NodeUtil.trimJsWhiteSpace("");
      boolean boolean2 = NodeUtil.isGetProp(node0);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      Locale locale0 = Locale.TAIWAN;
      Node node0 = Node.newString(2599, "Q", 100, 100);
      boolean boolean0 = NodeUtil.isFunction(node0);
      NodeUtil.isConstantName(node0);
      NodeUtil.getStringValue(node0);
      node0.setLineno(1589);
      NodeUtil.opToStr(111);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean1 = NodeUtil.mayBeStringHelper(node1);
      assertTrue(boolean1 == boolean0);
      assertEquals(100, node1.getCharno());
      
      boolean boolean2 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean2);
      
      String string0 = NodeUtil.trimJsWhiteSpace("Fi?qc1Y1hLLjh%");
      assertEquals("Fi?qc1Y1hLLjh%", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      Node node0 = Node.newNumber(3410.111878968447, (-400), (-400));
      Node node1 = new Node(1, node0);
      NodeUtil.isLabelName(node1);
      Node node2 = new Node(47, 57296, 23);
      NodeUtil.isString(node2);
      node2.setOptionalArg(false);
      Node node3 = Node.newString(136, "Q");
      node2.putBooleanProp(20, false);
      NodeUtil.isFunction(node0);
      NodeUtil.isFunctionExpression(node1);
      NodeUtil.isStrWhiteSpaceChar((-1));
      NodeUtil.isLhs(node0, node2);
      NodeUtil.isForIn(node2);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      node3.setLineno(7);
      NodeUtil.opToStr(802);
      NodeUtil.mayBeStringHelper(node2);
      NodeUtil.getNumberValue(node2);
      NodeUtil.precedence(27);
      // Undeclared exception!
      try { 
        NodeUtil.isStatement(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      Node node0 = Node.newString(1433, "Q");
      Node node1 = Node.newString(111, "yZ");
      Node node2 = Node.newString(122, "+infinity");
      NodeUtil.isNumericResultHelper(node2);
      NodeUtil.getInfoForNameNode(node0);
      Node node3 = Node.newString(19, "^7APy 5!5Y[");
      node1.setLineno((-547));
      NodeUtil.opToStr(15);
      NodeUtil.mayBeStringHelper(node3);
      // Undeclared exception!
      try { 
        NodeUtil.getNumberValue(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      Node node0 = new Node(126, 126, 88);
      NodeUtil.referencesThis(node0);
      NodeUtil.isSwitchCase(node0);
      NodeUtil.isLoopStructure(node0);
      NodeUtil.isControlStructureCodeBlock(node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.append("~eJT");
      Node node0 = Node.newNumber(2.147483647E9);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(17, 85, 16);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(0);
      NodeUtil.isCommutative(0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      NodeUtil.isValidDefineValue(node0, treeSet0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("G3<{O(&DVlMmyI=", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      NodeUtil.isAssociative(101);
      String string0 = "8fL";
      MockPrintStream mockPrintStream0 = new MockPrintStream("8fL");
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        RuntimeTypeCheck.getBoilerplateCode(compiler0, "C8/V_J?@C|C/G3o?_V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = new Node(75);
      boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(1);
      assertFalse(boolean0);
      
      NodeUtil.getExpressionBooleanValue(node0);
      Node node1 = Node.newString((-344), ".OA\"fvW-@Y.");
      NodeUtil.isNumericResultHelper(node1);
      NodeUtil.getInfoForNameNode(node0);
      Node node2 = Node.newString(0, "^7APy 5!5Y[");
      node2.setLineno(38);
      NodeUtil.opToStr(2183);
      boolean boolean1 = NodeUtil.mayBeStringHelper(node2);
      NodeUtil.opToStr(75);
      boolean boolean2 = NodeUtil.isAssign(node2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      mockPrintStream0.close();
      mockPrintStream0.println((char[]) null);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "._KroEAgdN5PQNN%A", "h']NU<bTs3:");
      mockFile0.toPath();
      node0.setIsSyntheticBlock(false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      node0.getAncestors();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "1h{u\"YkX32", node0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
      peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
      NodeUtil.getNumberValue(node0);
      NodeUtil.isFunctionObjectCallOrApply(node1);
      NodeUtil.isSimpleOperatorType(22);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.append("~eJT");
      Node node0 = Node.newNumber(2.147483647E9);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(17, 85, 16);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(0);
      NodeUtil.isCommutative(0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node.newString(1, "'UARLAgYoN");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      NodeUtil.isCommutative(33);
      NodeUtil.isLatin("(,klM [^i");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      String string0 = NodeUtil.opToStr(103);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      char[] charArray0 = new char[5];
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q", "~e_7$5*OLP`eZ85e");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "^7APy 5!5Y[", node0);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      loggerErrorManager0.generateReport();
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      Node node2 = compiler1.externsRoot;
      NodeUtil.nodeTypeMayHaveSideEffects(node1, compiler0);
      // Undeclared exception!
      try { 
        NodeUtil.isExprAssign((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NodeUtil.isStrWhiteSpaceChar(2238);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      Node node0 = new Node(37, (-48), 2129);
      NodeUtil.getVarsDeclaredInBranch(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.opToStr(26);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-2464));
      nodeUtil_MatchNodeType0.equals(compiler0);
      Node node0 = Node.newString(94, "$4");
      boolean boolean0 = NodeUtil.isVar(node0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "$4", node0);
      node0.getAncestors();
      NodeUtil.newName(googleCodingConvention0, "$4", node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerOptions compilerOptions1 = new CompilerOptions();
      compiler0.parseTestCode("\"C");
      boolean boolean1 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isLiteralValue(node1, true);
      boolean boolean3 = NodeUtil.isFunctionObjectCallOrApply(node1);
      assertTrue(boolean3 == boolean2);
      assertTrue(node1.isUnscopedQualifiedName());
      
      boolean boolean4 = NodeUtil.isStrWhiteSpaceChar(118);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      mockPrintStream0.println((char[]) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) "Q";
      objectArray0[2] = (Object) "Q";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) mockPrintStream0;
      mockPrintStream0.printf("Q", objectArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "ts.cursor=", "\"@&;$%lguf9A|?m");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.opToStr(122);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hqghzcn");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("hqghzcn");
      mockPrintStream1.println('<');
      mockPrintStream0.print('3');
      SyntheticAst syntheticAst0 = new SyntheticAst("hqghzcn");
      Compiler compiler0 = new Compiler(mockPrintStream1);
      mockPrintStream1.close();
      Node node0 = Node.newString(13, "hqghzcn");
      NodeUtil.isNumericResultHelper(node0);
      NodeUtil.getInfoForNameNode(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "com.google.javascript.jscomp.CodeChangeHandler$RecentChange", node0);
      boolean boolean0 = NodeUtil.isExpressionNode(node1);
      assertTrue(node1.isQualifiedName());
      
      Node node2 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.CodeChangeHandler$RecentChange", 127, 34);
      NodeUtil.getExpressionBooleanValue(node2);
      Node node3 = new Node(8);
      boolean boolean1 = NodeUtil.isSimpleOperator(node2);
      assertTrue(node2.isUnscopedQualifiedName());
      assertEquals(127, node2.getLineno());
      assertFalse(boolean1 == boolean0);
      assertEquals(34, node2.getCharno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.append("~eJT");
      Node node0 = Node.newNumber(2.147483647E9);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(17, 85, 16);
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(2907);
      NodeUtil.containsFunction(node1);
      NodeUtil.isControlStructure(node1);
      Node node2 = new Node(31, 23, 12);
      NodeUtil.opToStr(17);
      NodeUtil.mayBeStringHelper(node0);
      NodeUtil.opToStr(0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ifeq (type 6)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = new Node(102, 7680, 102);
      NodeUtil.mayBeString(node0);
      String string0 = NodeUtil.arrayToString(node0);
      assertNotNull(string0);
      
      node0.putBooleanProp(29, false);
      NodeUtil.mayBeString(node0);
      String string1 = NodeUtil.opToStr(16);
      assertEquals(">", string1);
      
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Node node1 = new Node(28, node0, node0, node0);
      NodeUtil.isValidDefineValue(node1, treeSet0);
      boolean boolean1 = NodeUtil.isStatementBlock(node1);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isStrWhiteSpaceChar((-771));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-2464));
      nodeUtil_MatchNodeType0.equals("tD(RV?");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      NodeUtil.opToStr((-2464));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      NodeUtil.containsFunction(node1);
      NodeUtil.isControlStructure(node0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      nodeArray0[3] = node1;
      nodeArray0[4] = node1;
      NodeUtil.isNumericResultHelper(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.newName(closureCodingConvention0, "tD(RV?", node0);
      NodeUtil.isExpressionNode(node0);
      NodeUtil.getExpressionBooleanValue(node0);
      Node node2 = new Node(98);
      NodeUtil.isSimpleOperator(node0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, (String) null, "tD(RV?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate key: lends
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".prototype.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '+';
      charArray0[4] = '~';
      charArray0[5] = '+';
      charArray0[6] = '+';
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "IFuon$R@+xV", "ts.cursor=");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = compiler0.options;
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      NodeUtil.containsType(node0, 32, compilerOptions0.sourceMapDetailLevel);
      CompilerOptions compilerOptions1 = new CompilerOptions();
      NodeUtil.isFunctionExpression(node0);
      NodeUtil.isSimpleOperatorType(97);
      NodeUtil.isEmptyFunctionExpression(node0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      mockFile0.setReadable(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.opToStr(1584);
      NodeUtil.isSimpleOperatorType(98);
      Node node0 = Node.newString(98, "I}KMFXrx3SzkH{Y&MJP");
      NodeUtil.isObjectLitKey(node0, node0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = new Node(102, 7680, 102);
      NodeUtil.mayBeString(node0);
      NodeUtil.getStringNumberValue("com.google.javascript.jscomp.NodeUtil$VarCollector");
      NodeUtil.opToStr((-1431));
      Node node1 = new Node(26);
      NodeUtil.getStringNumberValue("~");
      NodeUtil.opToStr(6002);
      Node node2 = new Node((-46));
      node0.setType(27);
      // Undeclared exception!
      try { 
        NodeUtil.isLiteralValue(node1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = Node.newString(113, ".OA\"fvW-@Yo.");
      NodeUtil.isArrayLiteral(node0);
      NodeUtil.isCommutative(2237);
      NodeUtil.getLoopCodeBlock(node0);
      node0.setVarArgs(true);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      NodeUtil.isNullOrUndefined(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for switch (type 110)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      mockFile0.toPath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      mockFile0.setReadable(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('x');
      mockPrintStream0.close();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      Locale locale0 = Locale.TAIWAN;
      PrintStream printStream0 = mockPrintStream1.printf(locale0, "Q", (Object[]) null);
      Compiler compiler0 = new Compiler(printStream0);
      Node node0 = Node.newNumber(1500.008546017199);
      NodeUtil.isConstantName(node0);
      Node node1 = Node.newString(114, "1BZy%a*X\"N|jl");
      Node node2 = new Node(6);
      NodeUtil.isSimpleOperator(node1);
      // Undeclared exception!
      try { 
        TypedScopeCreator.getBestJSDocInfo(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypedScopeCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hqghzcn");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      mockPrintStream1.println('<');
      mockPrintStream0.print('3');
      SyntheticAst syntheticAst0 = new SyntheticAst("hqghzcn");
      Compiler compiler0 = new Compiler(mockPrintStream1);
      mockPrintStream1.close();
      Node node0 = Node.newString(13, "hqghzcn");
      NodeUtil.isNumericResultHelper(node0);
      NodeUtil.getInfoForNameNode(node0);
      Node.newString((-2897), "hqghzcn");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = Node.newString("4ddE<I:\"");
      Node node1 = Node.newString(20, "m3 ");
      NodeUtil.isNumericResultHelper(node1);
      NodeUtil.getInfoForNameNode(node0);
      Stack<Node> stack0 = new Stack<Node>();
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode((String) null, stack0, node1, 30, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.isSimpleOperatorType(12);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      NodeUtil.getStringNumberValue("hqghzcn");
      NodeUtil.opToStr('<');
      Node node0 = new Node('<');
      node0.setType(1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      NodeUtil.isLiteralValue(node0, false);
      Node node1 = new Node('<', node0, node0, node0, node0);
      NodeUtil.isFunctionObjectCallOrApply(node1);
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFile mockFile1 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q", "t<,cusor=");
      mockFile1.toPath();
      CodingConvention codingConvention0 = compiler0.getCodingConvention();
      Node node1 = NodeUtil.newName(codingConvention0, "t<,cusor=", node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      node1.setLineno(15);
      NodeUtil.opToStr(1186);
      NodeUtil.getNumberValue(node0);
      NodeUtil.isFunctionObjectCallOrApply(node0);
      NodeUtil.canBeSideEffected(node0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      mockFile0.toPath();
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "gKf!HTa`yQw1Mn<avh{", "'>/T3*Q$'R1]z'?l");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = compiler0.options;
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      NodeUtil.containsType(node0, 23, compilerOptions0.sourceMapDetailLevel);
      CompilerOptions compilerOptions1 = new CompilerOptions();
      NodeUtil.isFunctionExpression(node0);
      node0.setType(114);
      NodeUtil.isSimpleOperatorType(1223);
      NodeUtil.isEmptyFunctionExpression(node0);
      NodeUtil.isLoopStructure(node0);
      NodeUtil.getStringValue(node0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      Node node0 = Node.newString(119, "<", (-62), (-62));
      node0.putBooleanProp((-503), false);
      NodeUtil.opToStr(91);
      NodeUtil.isArrayLiteral(node0);
      NodeUtil.isFunctionExpression(node0);
      NodeUtil.isStrWhiteSpaceChar(795);
      NodeUtil.isLhs(node0, node0);
      NodeUtil.isForIn(node0);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      node0.setLineno((-503));
      NodeUtil.opToStr(1);
      NodeUtil.mayBeStringHelper(node0);
      NodeUtil.getNumberValue(node0);
      NodeUtil.precedence(46);
      // Undeclared exception!
      try { 
        NodeUtil.isStatement(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      mockPrintStream0.close();
      JSSourceFile.fromCode("Infinity", "XMLHttpRequest");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      NodeUtil.precedence(46);
      Node node0 = compiler0.externsRoot;
      // Undeclared exception!
      try { 
        NodeUtil.isStatement((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      File file0 = MockFile.createTempFile("Infinity", "Wzzvj`A/n{<RSR7H}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockFile mockFile0 = new MockFile("s9+!ah26l?S9ORprw", "<U=IV5");
      mockFile0.setReadable(false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("4ddE<I:\"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream1);
      mockPrintStream0.print('x');
      mockPrintStream0.close();
      Locale locale0 = Locale.TAIWAN;
      mockPrintStream0.printf(locale0, "Wzzvj`A/n{<RSR7H}", (Object[]) null);
      Node node0 = Node.newString(100, "4ddE<I:\"", 1749, 2737);
      NodeUtil.isFunction(node0);
      NodeUtil.isConstantName(node0);
      NodeUtil.getStringValue(node0);
      node0.setLineno(95);
      NodeUtil.opToStr(64);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeStringHelper(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-2464));
      nodeUtil_MatchNodeType0.equals(compiler0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning(";M(*JY5^AUV%r9((e", ";M(*JY5^AUV%r9((e", (-2464), ";M(*JY5^AUV%r9((e", (-285));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = new Node(26);
      node0.setType(44);
      Node node1 = Node.newNumber(1.0);
      NodeUtil.isLiteralValue(node1, true);
      NodeUtil.isFunctionObjectCallOrApply(node1);
      NodeUtil.getBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = new Node((-3976), 996, 996);
      MockFile mockFile0 = new MockFile("toString", "~jz");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      mockPrintStream0.print('w');
      SyntheticAst syntheticAst0 = new SyntheticAst("~jz");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      mockPrintStream0.close();
      Node node1 = Node.newString(113, "}j>K?kPQq-");
      NodeUtil.isNumericResultHelper(node1);
      NodeUtil.getInfoForNameNode(node1);
      Node.newString(37, "}j>K?kPQq-");
      node0.setLineno(101);
      NodeUtil.opToStr(56);
      NodeUtil.mayBeStringHelper(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeSyntheticCode(compiler0, (String) null, "}j>K?kPQq-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      NodeUtil.opToStr(83);
      Node node0 = Node.newString(83, "$*2swH{UaDb?|Sfd0");
      NodeUtil.isVar(node0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = Node.newString(97, "", 1138, 14);
      Node node2 = NodeUtil.newName(googleCodingConvention0, "", node1);
      Node node3 = new Node((-11), 30, 91);
      NodeUtil.getVarsDeclaredInBranch(node1);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.mayBeStringHelper(node1);
      NodeUtil.getNumberValue(node2);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(111);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for case (type 111)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = Node.newString(85, "undefined");
      Node node1 = new Node(31, 176, 4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      NodeUtil.opToStr('?');
      Node node0 = new Node('?');
      node0.setType(2);
      NodeUtil.isFunctionObjectCallOrApply(node0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      mockPrintStream0.println((char[]) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "._KroEAgdN5PQNN%A", "h']NU<bTs23:");
      mockFile0.toPath();
      node0.setIsSyntheticBlock(true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      node0.getAncestors();
      NodeUtil.newName(googleCodingConvention0, "1h{u\"YkX32", node0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
      Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
      node1.toString();
      node1.addChildToBack(node0);
      Node node2 = Node.newString((-688), "SYNTAX_ERROR_FUNCTION_TYPE");
      NodeUtil.mayBeStringHelper(node2);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Node node0 = Node.newString(1197, "hqghzcn");
      Node.newString(114, "T~c@", (-1492), (-2242));
      node0.setVarArgs(true);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      NodeUtil.isNullOrUndefined(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(115);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for for (type 115)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      char[] charArray0 = new char[5];
      mockPrintStream0.println(charArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q", "~e_7$5*OLP`eZ85e");
      mockFile0.toPath();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.isLiteralValue(node0, true);
      NodeUtil.isFunctionObjectCallOrApply(node0);
      NodeUtil.isSimpleOperatorType(44);
      NodeUtil.isFunctionObjectCallOrApply(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      Node node0 = new Node(69, 0, 221);
      node0.siblings();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = Node.newString(14, "com.google.javascript.jscomp.NodeUtil$1", 44, 0);
      NodeUtil.isThis(node0);
      NodeUtil.isEmptyBlock(node0);
      NodeUtil.getExpressionBooleanValue(node1);
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.isSimpleOperatorType(50);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.has(node1, nodeUtil_MatchNotFunction0, nodeUtil_MatchNotFunction0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintStream0.close();
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Q", "Q");
      mockFile0.toPath();
      NodeUtil.getNumberValue(node0);
      NodeUtil.precedence(29);
      CompilerOptions compilerOptions0 = compiler0.options;
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, sourceMap_DetailLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(2494);
      nodeUtil_MatchNodeType0.equals(mockFile0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      Node node0 = Node.newNumber(1669.8);
      Node.newNumber((-96.9662783257), 2, 39);
      NodeUtil.precedence(33);
      NodeUtil.isArrayLiteral(node0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      Node node0 = new Node(101, 0, 221);
      node0.siblings();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.putBooleanProp(1420, true);
      NodeUtil.opToStr((-3106));
      NodeUtil.isAssociative((-3));
      NodeUtil.isFunctionExpression(node0);
      NodeUtil.isStrWhiteSpaceChar(44);
      NodeUtil.isLhs(node0, node0);
      Logger logger0 = Tracer.logger;
      NodeUtil.isStrWhiteSpaceChar((-1762));
      NodeUtil.isSimpleOperatorType(87);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q");
      Node node0 = Node.newNumber(3410.111878968447, (-400), (-400));
      Node node1 = new Node(1, node0);
      NodeUtil.isLabelName(node1);
      Node node2 = new Node(47, 57296, 23);
      NodeUtil.isString(node2);
      node2.setOptionalArg(false);
      Node.newString(136, "Q");
      node2.putBooleanProp(20, false);
      node1.setCharno(18);
      NodeUtil.isFunction(node0);
      NodeUtil.isFunctionExpression(node1);
      NodeUtil.isStrWhiteSpaceChar((-1));
      NodeUtil.isLhs(node0, node2);
      NodeUtil.isForIn(node2);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for bindname (type 48)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = Node.newString(114, "T~c@", (-1492), (-2242));
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      Node node1 = NodeUtil.newFunctionNode("T~c@", arrayList0, node0, 126, 147);
      node0.addChildAfter(node1, node1);
      NodeUtil.opToStr(115);
      NodeUtil.isAssociative(2);
      NodeUtil.isFunctionExpression(node0);
      Logger logger0 = Tracer.logger;
      NodeUtil.isStrWhiteSpaceChar(45);
      NodeUtil.isSimpleOperatorType(108);
      NodeUtil.isExpressionNode(node0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node node0 = Node.newString(49, "undefined");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.mayBeString(node0);
      NodeUtil.opToStr(9);
      Node node1 = new Node((-34), 2, 25);
      NodeUtil.getVarsDeclaredInBranch(node0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.mayBeStringHelper(node0);
      NodeUtil.getNumberValue(node1);
      NodeUtil.precedence(42);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      mockFile0.toPath();
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "gKf!HTa`yQw1Mn<avh{", "'>/T3*Q$'R1]z'?l");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = compiler0.options;
      SourceMap.DetailLevel sourceMap_DetailLevel0 = compilerOptions0.sourceMapDetailLevel;
      NodeUtil.containsType(node0, 23, compilerOptions0.sourceMapDetailLevel);
      CompilerOptions compilerOptions1 = new CompilerOptions();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      CompilerOptions compilerOptions2 = new CompilerOptions();
      node0.setLineno(15);
      NodeUtil.opToStr(99);
      NodeUtil.getNumberValue(node0);
      NodeUtil.isFunctionObjectCallOrApply(node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      NodeUtil.canBeSideEffected(node1);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NodeUtil.isAssociative(2238);
      NodeUtil.isStrWhiteSpaceChar(147);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      Node node0 = new Node(37, (-48), 2129);
      NodeUtil.getInfoForNameNode(node0);
      Node node1 = Node.newString(8, "#6F8");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Set<String> set0 = compilerOptions0.idGenerators;
      NodeUtil.isValidDefineValue(node0, set0);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NodeUtil.isAssociative(2238);
      NodeUtil.isStrWhiteSpaceChar(147);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      Node node0 = new Node(37, (-48), 2129);
      NodeUtil.getInfoForNameNode(node0);
      Node node1 = Node.newString(8, "#6F8");
      node1.setLineno(15);
      NodeUtil.opToStr((-1653132075));
      NodeUtil.mayBeStringHelper(node0);
      NodeUtil.getNumberValue(node1);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=74> (type 74)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Infinity");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.close();
      Node node0 = Node.newString(119, "<", (-62), (-62));
      node0.putBooleanProp((-503), false);
      NodeUtil.opToStr(94);
      NodeUtil.isArrayLiteral(node0);
      NodeUtil.isFunctionExpression(node0);
      NodeUtil.isStrWhiteSpaceChar(795);
      NodeUtil.isLhs(node0, node0);
      NodeUtil.isForIn(node0);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Set<String> set0 = compilerOptions0.idGenerators;
      NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNameSuffixes);
      NodeUtil.isControlStructureCodeBlock(node0, node0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<[R`kR5");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "<[R`kR5");
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      mockPrintStream1.print('t');
      mockPrintStream1.close();
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      Node node0 = Node.newString((-569), "jaJb]#q86M.5zHBX", (-569), 119);
      NodeUtil.isNullOrUndefined(node0);
      NodeUtil.precedence(47);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('@');
      mockPrintStream0.close();
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '@';
      mockPrintStream0.println(charArray0);
      Node node0 = Node.newString(43, "Q", (int) '@', (-2103));
      NodeUtil.isFunction(node0);
      NodeUtil.isConstantName(node0);
      NodeUtil.getStringValue(node0);
      node0.setLineno('@');
      NodeUtil.opToStr(21);
      NodeUtil.mayBeStringHelper(node0);
      NodeUtil.isSimpleFunctionObjectCall(node0);
      NodeUtil.isThis(node0);
      NodeUtil.getNumberValue(node0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node node0 = new Node(102, 7680, 102);
      NodeUtil.isString(node0);
      node0.setOptionalArg(false);
      Node node1 = Node.newString(15, "ts.cursor=");
      node0.putBooleanProp(116, false);
      NodeUtil.isConstantName(node1);
      NodeUtil.getStringValue(node0);
      Node node2 = Node.newString(28, "msg.undef.label");
      NodeUtil.opToStr(14);
      NodeUtil.mayBeStringHelper(node0);
      NodeUtil.opToStr(27);
      Node node3 = new Node(35);
      NodeUtil.isSimpleOperator(node2);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Bad LHS for assignment: ");
      int int0 = 77;
      // Undeclared exception!
      try { 
        NodeUtil.precedence(77);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for try (type 77)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }
}
