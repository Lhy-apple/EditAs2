/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:08:16 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Denormalize;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.InferJSDocInfo;
import com.google.javascript.jscomp.InlineProperties;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeValidator_ESTest extends TypeValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      Vector<JSType> vector0 = new Vector<JSType>();
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(unionType0).canTestForShallowEqualityWith(any(com.google.javascript.rhino.jstype.JSType.class));
      doReturn("Not declared as a constructor").when(unionType0).toString();
      doReturn(vector0).when(unionType0).getAlternates();
      doReturn(jSType0).when(unionType0).restrictByNotNullOrUndefined();
      JSType jSType1 = modificationVisitor0.caseUnionType(unionType0);
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, jSType1, jSType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      typeValidator0.expectValidTypeofName(nodeTraversal0, node0, "");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      Vector<JSType> vector0 = new Vector<JSType>();
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn("Not declared as a constructor").when(unionType0).toString();
      doReturn(vector0).when(unionType0).getAlternates();
      doReturn(false).when(unionType0).matchesObjectContext();
      doReturn(jSType0).when(unionType0).restrictByNotNullOrUndefined();
      JSType jSType1 = modificationVisitor0.caseUnionType(unionType0);
      boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, jSType1, "Not declared as a type name");
      assertEquals(1, compiler0.getWarningCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.setShouldReport(false);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, noObjectType0, jSType0, (String) null);
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSError jSError0 = JSError.make("Named type with empty name component", node0, compiler0.MOTION_ITERATIONS_ERROR, (String[]) null);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      String string0 = typeValidator_TypeMismatch0.toString();
      assertEquals("(NoObject, NoObject)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
      boolean boolean0 = typeValidator0.expectObject((NodeTraversal) null, node0, jSType1, "Named type with empty name component");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0, (ScopeCreator) null);
      typeValidator0.expectActualObject(nodeTraversal0, node0, functionType0, "Not declared as a constructor");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      typeValidator0.expectActualObject(nodeTraversal0, node0, jSType0, "UNCOND");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      typeValidator0.expectAnyObject(nodeTraversal0, node0, functionType0, "");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      Vector<JSType> vector0 = new Vector<JSType>();
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(unionType0).isAllType();
      doReturn(false).when(unionType0).isEmptyType();
      doReturn(false).when(unionType0).isUnionType();
      doReturn((ParameterizedType) null).when(unionType0).toMaybeParameterizedType();
      doReturn("Not declared as a constructor").when(unionType0).toString();
      doReturn(vector0).when(unionType0).getAlternates();
      doReturn(false).when(unionType0).isObject();
      doReturn(false, false).when(unionType0).isUnknownType();
      doReturn(jSType0).when(unionType0).restrictByNotNullOrUndefined();
      JSType jSType1 = modificationVisitor0.caseUnionType(unionType0);
      typeValidator0.expectAnyObject(nodeTraversal0, node0, jSType1, "!1^V");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      Vector<JSType> vector0 = new Vector<JSType>();
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(unionType0).isAllType();
      doReturn(false).when(unionType0).isEmptyType();
      doReturn(false).when(unionType0).isUnionType();
      doReturn((ParameterizedType) null).when(unionType0).toMaybeParameterizedType();
      doReturn((String) null).when(unionType0).toString();
      doReturn(vector0).when(unionType0).getAlternates();
      doReturn(false).when(unionType0).isObject();
      doReturn(false, false).when(unionType0).isUnknownType();
      doReturn((JSType) null).when(unionType0).restrictByNotNullOrUndefined();
      JSType jSType0 = modificationVisitor0.caseUnionType(unionType0);
      // Undeclared exception!
      try { 
        typeValidator0.expectAnyObject(nodeTraversal0, node0, jSType0, "!1^V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("invalid cast - must be a subtype or supertype\nfrom: {0}\nto  : {1}", node0, jSType0);
      typeValidator0.expectString(nodeTraversal0, node0, enumType0, "Unknown class name");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0, (ScopeCreator) null);
      typeValidator0.expectString(nodeTraversal0, node0, functionType0, "");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      typeValidator0.expectNumber(nodeTraversal0, node0, jSType0, "EjL^4~BR%-c/j4U\"");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[6];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, false, jSTypeArray0);
      // Undeclared exception!
      try { 
        typeValidator0.expectNumber(nodeTraversal0, node0, functionType0, "z1e8[z[^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      typeValidator0.expectBitwiseable(nodeTraversal0, (Node) null, jSType0, "Unknown class name");
      assertFalse(jSType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      // Undeclared exception!
      try { 
        typeValidator0.expectBitwiseable((NodeTraversal) null, node0, jSType0, "Not declared as a constructor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("comgoogle.common.collet.Multimaps$CustomSetMultimap", "comgoogle.common.collet.Multimaps$CustomSetMultimap");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inferJSDocInfo0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, jSType0, "Not declared as a constructor");
      assertFalse(node0.isWith());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.common.collet.Multimaps$CustomSetMultimap", node0, jSType0);
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, enumType0, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0, (ScopeCreator) null);
      typeValidator0.expectStringOrNumber(nodeTraversal0, (Node) null, jSType0, (String) null);
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("comgoogle.common.collet.Multimaps$CustomSetMultimap", "comgoogle.common.collet.Multimaps$CustomSetMultimap");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inferJSDocInfo0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, "Unknown class name", jSType0);
      assertEquals(1, compiler0.getWarningCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "H$.Vim';<!Cx", 50, (-2354));
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, "Named type with empty name component", (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined((NodeTraversal) null, node0, jSType0, "Named type with empty name component", jSType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, jSType0, jSType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      Vector<JSType> vector0 = new Vector<JSType>();
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn(jSType0, jSType0).when(unionType0).autoboxesTo();
      doReturn(false).when(unionType0).canTestForShallowEqualityWith(any(com.google.javascript.rhino.jstype.JSType.class));
      doReturn(vector0).when(unionType0).getAlternates();
      JSType jSType1 = modificationVisitor0.caseUnionType(unionType0);
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, jSType1, jSType1);
      assertFalse(node0.isHook());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      Vector<JSType> vector0 = new Vector<JSType>();
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn(jSType0, jSType0).when(unionType0).autoboxesTo();
      doReturn(false).when(unionType0).canTestForShallowEqualityWith(any(com.google.javascript.rhino.jstype.JSType.class));
      doReturn(false, false).when(unionType0).isAllType();
      doReturn(false).when(unionType0).isUnionType();
      doReturn((ParameterizedType) null).when(unionType0).toMaybeParameterizedType();
      doReturn("Not declared as a constructor", (String) null).when(unionType0).toString();
      doReturn(vector0).when(unionType0).getAlternates();
      doReturn(false, false, false).when(unionType0).isUnknownType();
      doReturn(jSType0, (JSType) null).when(unionType0).restrictByNotNullOrUndefined();
      JSType jSType1 = modificationVisitor0.caseUnionType(unionType0);
      // Undeclared exception!
      try { 
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, jSType1, jSType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0, (ScopeCreator) null);
      JSType jSType1 = jSTypeRegistry0.getGreatestSubtypeWithProperty(functionType0, "w3\"?U&`V*x*(@!");
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, functionType0, jSType1, node0, "Not declared as a constructor");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
      UnknownType unknownType0 = (UnknownType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf((NodeTraversal) null, node0, unknownType0, functionType0, node0, "Not declared as a constructor");
      assertTrue(unknownType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSTypeNative jSTypeNative1 = JSTypeNative.NUMBER_OBJECT_TYPE;
      JSType jSType1 = jSTypeRegistry0.getNativeType(jSTypeNative1);
      // Undeclared exception!
      try { 
        typeValidator0.expectCanAssignToPropertyOf((NodeTraversal) null, node0, jSType0, jSType1, node0, "Not declared as a constructor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSTypeNative jSTypeNative1 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      JSType jSType1 = jSTypeRegistry0.getNativeType(jSTypeNative1);
      // Undeclared exception!
      try { 
        typeValidator0.expectCanAssignToPropertyOf((NodeTraversal) null, node0, jSType0, jSType1, node0, "Not declared as a constructor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0, typedScopeCreator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      JSType jSType1 = jSTypeRegistry0.createOptionalType(enumElementType0);
      // Undeclared exception!
      try { 
        typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType1, enumType0, (Node) null, "Unknown class name");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSTypeNative jSTypeNative1 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      JSType jSType1 = jSTypeRegistry0.getNativeType(jSTypeNative1);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf((NodeTraversal) null, node0, jSType1, jSType0, node0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, noObjectType0);
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf((NodeTraversal) null, node0, enumType0, noObjectType0, node0, "Not declared as a constructor");
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      boolean boolean0 = typeValidator0.expectCanAssignTo((NodeTraversal) null, node0, jSType0, jSType0, "Unknown class name");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0, typedScopeCreator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, (Node) null, enumElementType0, enumType0, "");
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSTypeNative jSTypeNative1 = JSTypeNative.BOOLEAN_OBJECT_TYPE;
      JSType jSType1 = jSTypeRegistry0.getNativeType(jSTypeNative1);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      // Undeclared exception!
      try { 
        typeValidator0.expectCanAssignTo((NodeTraversal) null, node0, jSType0, jSType1, "#Jze\"Q)_G");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, noObjectType0);
      typeValidator0.expectArgumentMatchesParameter((NodeTraversal) null, node0, noObjectType0, enumType0, node0, (-1288));
      assertTrue(noObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSTypeNative jSTypeNative1 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      JSType jSType1 = jSTypeRegistry0.getNativeType(jSTypeNative1);
      // Undeclared exception!
      try { 
        typeValidator0.expectArgumentMatchesParameter((NodeTraversal) null, node0, jSType1, jSType0, node0, 55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      typeValidator0.expectCanOverride(nodeTraversal0, node0, jSType0, jSType0, "DDa", jSType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      JSType[] jSTypeArray0 = new JSType[2];
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      // Undeclared exception!
      try { 
        typeValidator0.expectCanOverride(nodeTraversal0, (Node) null, functionType0, functionType1, "", jSType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0, (ScopeCreator) null);
      typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, functionType0);
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, objectType0);
      assertTrue(objectType0.canBeCalled());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
      UnknownType unknownType0 = (UnknownType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      JSType[] jSTypeArray0 = new JSType[8];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) unknownType0, jSTypeArray0);
      typeValidator0.expectSuperType(nodeTraversal0, node0, unknownType0, functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(noObjectType0, noObjectType0);
      Denormalize.StripConstantAnnotations denormalize_StripConstantAnnotations0 = new Denormalize.StripConstantAnnotations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize_StripConstantAnnotations0);
      // Undeclared exception!
      try { 
        typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      typeValidator0.expectCanCast(nodeTraversal0, (Node) null, jSType0, jSType0);
      assertFalse(jSType0.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multsmaps$CustomSetMultimap", "com.google.common.collet.Multsmaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
      UnknownType unknownType0 = (UnknownType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSTypeNative jSTypeNative1 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative1);
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
      typeValidator0.expectCanCast(nodeTraversal0, node0, unknownType0, functionType0);
      assertTrue(unknownType0.hasCachedValues());
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      JSType[] jSTypeArray0 = new JSType[2];
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0);
      typeValidator0.expectCanCast(nodeTraversal0, (Node) null, functionType0, functionType1);
      assertTrue(functionType1.isObject());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      Scope.Var scope_Var0 = mock(Scope.Var.class, new ViolatedAssumptionAnswer());
      doReturn((Scope) null).when(scope_Var0).getScope();
      doReturn(jSType0).when(scope_Var0).getType();
      // Undeclared exception!
      try { 
        typeValidator0.expectUndeclaredVariable("Unknown class name", (CompilerInput) null, node0, node0, scope_Var0, "Unknown class name", jSType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      Scope.Var scope_Var0 = mock(Scope.Var.class, new ViolatedAssumptionAnswer());
      doReturn((JSType) null).when(scope_Var0).getType();
      doReturn((String) null).when(scope_Var0).toString();
      Scope.Var scope_Var1 = typeValidator0.expectUndeclaredVariable("com.google.common.collet.Multimaps$CustomSetMultimap", (CompilerInput) null, node0, node0, scope_Var0, "com.google.javascript.jscomp.TypeValidator$TypeMismatch", jSType0);
      assertFalse(scope_Var1.isGlobal());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      InlineProperties inlineProperties0 = new InlineProperties(compiler0);
      InlineProperties.ReplaceCandidates inlineProperties_ReplaceCandidates0 = inlineProperties0.new ReplaceCandidates();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inlineProperties_ReplaceCandidates0, (ScopeCreator) null);
      typeValidator0.expectAllInterfaceProperties(nodeTraversal0, node0, functionType0);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, false, jSTypeArray0);
      boolean boolean0 = typeValidator0.expectCanAssignTo((NodeTraversal) null, node0, functionType0, jSTypeArray0[0], "Not declared as a constructor");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      String[] stringArray0 = new String[5];
      JSError jSError0 = JSError.make("{o4j/joX~Bg", 47, 55, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(jSError0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSError jSError0 = JSError.make("GA>]2/(}pnw~", 1544, 8, compiler0.MOTION_ITERATIONS_ERROR, (String[]) null);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      JSError jSError0 = JSError.make("GA>]2/(}pnw~", 1544, 8, compiler0.MOTION_ITERATIONS_ERROR, (String[]) null);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(noObjectType0, noObjectType0, jSError0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(jSType0, noObjectType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      JSType jSType1 = modificationVisitor0.caseNoObjectType();
      JSError jSError0 = JSError.make("Not declared as a type name", 2, 4066, compiler0.MOTION_ITERATIONS_ERROR, (String[]) null);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType1, jSType1, jSError0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.common.collet.Multimaps$CustomSetMultimap", "com.google.common.collet.Multimaps$CustomSetMultimap");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      JSType jSType1 = modificationVisitor0.caseNoObjectType();
      JSError jSError0 = JSError.make("GA>]2/(}pnw~", 1544, 8, compiler0.MOTION_ITERATIONS_ERROR, (String[]) null);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType1, jSError0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(jSType1, jSType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
      assertTrue(boolean0);
  }
}
