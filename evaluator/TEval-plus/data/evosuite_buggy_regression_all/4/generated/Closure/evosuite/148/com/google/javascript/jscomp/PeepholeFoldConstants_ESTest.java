/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:23:29 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(2.147483647E9);
      Node node1 = new Node(26, node0, node0, 7, 41);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = new Node(32, node0, node0, 5, (-1));
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(33, 33, 33);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = new Node(36, node0, node0, 2100, 21);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(37, 15, 2048);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-257.3867542));
      Node node1 = Node.newNumber((double) 5);
      Node node2 = new Node(14, node0, node1, 39, 94);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(2.147483647E9);
      Node node1 = Node.newNumber((-936.2625128929761), (-667), 15);
      Node node2 = new Node(9, node0, node1, 10, 14);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(14, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-926.7484520553198));
      Node node1 = new Node(28);
      Node node2 = new Node(10, node1, node0, 22, 6);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-2.147483648E9));
      Node node1 = Node.newNumber((double) 18);
      Node node2 = new Node(11, node1, node0, 1, 83);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-2694.914972098229));
      Node node1 = Node.newNumber((double) 20, 4095, 43);
      Node node2 = new Node(12, node0, node1, 1, 46);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = Node.newNumber((double) 1, 50, 2);
      Node node2 = new Node(13, node0, node0, node1, 22, 5);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber((double) (-2));
      Node node2 = new Node(15, node1, node0, 17, 3);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-3352.178882587742));
      Node node1 = Node.newNumber(32.0);
      Node node2 = new Node(17, node1, node0, (-2847), 29);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = Node.newNumber((-926.7484520553198));
      Node node1 = Node.newNumber((double) 50);
      Node node2 = new Node(18, node0, node1, node1, node1, 9, 17);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = new Node(14);
      Node node2 = new Node(19, node1, node0, (-565), 32768);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-2.147483648E9));
      Node node1 = Node.newNumber((double) 26);
      Node node2 = new Node(20, node0, node1, 16, 4095);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-932.7132378165978));
      Node node1 = Node.newNumber((double) 34, 0, 40);
      Node node2 = new Node(21, node0, node1, 17, 19);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-922.6215246125195));
      Node node1 = Node.newNumber((double) 35);
      Node node2 = new Node(22, node1, node0, 17, 3);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(46);
      Node node1 = new Node(98);
      Node node2 = new Node(24, node1, node0, 38, 98);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-2243), (-2243), (-2243));
      Node node1 = Node.newNumber((double) 29);
      Node node2 = new Node(25, node1, node0, 7, 94);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(94, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-2440.4138795528183));
      Node node1 = new Node((-2));
      Node node2 = new Node(28, node0, node1, 10, 85);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(2.147483647E9);
      Node node1 = new Node(46, 2, 4);
      Node node2 = new Node(30, node0, node1, (-22), (-2455));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber((double) 1);
      Node node2 = new Node(31, node1, node0, 2, 9);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(31, node3.getType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber((double) 16, 28, 540);
      Node node2 = new Node(33, node0, node1, (-2064), (-56));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-926.7));
      Node node1 = new Node(94, 3786, 15);
      Node node2 = new Node(34, node1, node0, 1769, 3131);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(34, node3.getType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = new Node(44);
      Node node2 = new Node(35, node1, node0, 37, 28);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(7, Node.LOCAL_PROP);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(798.63874);
      Node node1 = Node.newNumber((-934.1725325815));
      Node node2 = new Node(36, node0, node1, 5, (-1));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(36, node3.getType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(2.147483647E9);
      Node node1 = new Node(46, 2, 4);
      Node node2 = new Node(38, node0, node1, 21, 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = new Node(30);
      Node node2 = new Node(39, node1, node0, 5068, 0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-2.147483625771518E9));
      Node node1 = new Node((-1), 42, 4095);
      Node node2 = new Node(40, node1, node0, (-1310), (-1320));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(40, node3.getType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber(9.007199254740992E15, 4095, 34);
      Node node2 = new Node(41, node0, node1, 12, (-496));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = new Node(30);
      Node node2 = new Node(42, node1, node0, 0, 44);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1);
      Node node1 = new Node(4095);
      Node node2 = new Node(43, node1, node0, 11, 47);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-2.147483648E9));
      Node node1 = new Node((-1), 42, 4095);
      Node node2 = new Node(45, node1, node0, 2, 4);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-932.7132378165978));
      Node node1 = Node.newNumber((-2.147483648E9));
      Node node2 = new Node(46, node0, node1, 2, 28);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(1884.826591);
      Node node1 = Node.newNumber((-3352.178882587742));
      Node node2 = new Node(47, node1, node0, (-60), 94);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber((double) 14);
      Node node2 = new Node(48, node0, node1, 4095, 915);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(48, node3.getType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-2.147483625771518E9));
      Node node1 = new Node((-1), 42, 4095);
      Node node2 = new Node(49, node0, node1, 2, 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-937.9563244166425));
      Node node1 = Node.newNumber((double) 19);
      Node node2 = new Node(50, node1, node0, 25, 47);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(50, node3.getType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-932.7132378165978));
      Node node1 = new Node(44, 9, 19);
      Node node2 = new Node(52, node0, node1, 1, 30);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(2.147483647E9);
      Node node1 = new Node(46, 2, 4);
      Node node2 = new Node(54, node0, node1, 21, 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-2414.634242414134));
      Node node1 = new Node(695);
      Node node2 = new Node(57, node0, node1, 97, 47);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-922.6215246125195));
      Node node1 = Node.newNumber((double) 35);
      Node node2 = new Node(62, node1, node0, 17, 3);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = Node.newNumber((-2414.634242414134));
      Node node2 = new Node(64, node0, node1, 30, 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-2.147483625771518E9));
      Node node1 = new Node((-1), 42, 4095);
      Node node2 = new Node(66, node0, node1, 2, 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = Node.newNumber((double) 22, 25, 2);
      Node node2 = new Node(69, node0, node1, 12, 4095);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4095, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = Node.newNumber((double) 22, 25, 2);
      Node node2 = new Node(70, node0, node1, (-234), 13);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-2414.634242414134));
      Node node1 = new Node((-2));
      Node node2 = new Node(71, node1, node0, 37, (-86));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-2414.634242414134));
      Node node1 = new Node(18);
      Node node2 = new Node(76, node0, node1, 7, 115);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(115, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = new Node(4);
      Node node2 = new Node(78, node0, node1, 2, 14);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = Node.newNumber((double) 35);
      Node node2 = new Node(79, node1, node0, (-1), 3);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-926.7484520553198));
      Node node1 = Node.newNumber((double) 50);
      Node node2 = new Node(80, node1, node0, 7, 47);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-922.6215246125195));
      Node node1 = Node.newNumber((double) 35);
      Node node2 = new Node(81, node1, node0, 17, 3);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-2.147483648E9));
      Node node1 = Node.newNumber((double) 50, 8, 55296);
      Node node2 = new Node(82, node1, node0, (-4139), 26);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(82, node3.getType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[7];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(83, node1.getType());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-932.7132378165978));
      Node node1 = Node.newNumber(1435.5605062714844);
      Node node2 = new Node(86, node0, node1, 72, 324);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = new Node(15, (-1885), (-381));
      Node node2 = new Node(87, node0, node1, 40, 20);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY, 1, 37);
      Node node2 = new Node(88, node0, node1, 2743, 41);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-2.147483625771518E9));
      Node node1 = new Node((-1), 42, 4095);
      Node node2 = new Node(89, node1, node0, node0, 44, 4083);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = Node.newNumber((double) 35);
      Node node2 = new Node(90, node1, node0, 17, 3);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(17, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = Node.newNumber((double) 43);
      Node node2 = new Node(91, node1, node0, (-234), 1876);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(176.0);
      SyntheticAst syntheticAst0 = new SyntheticAst("nw06s");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(92, node1, node0, 2, 43);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = Node.newNumber((double) 22, 25, 2);
      Node node2 = new Node(93, node1, node0, 211, 46);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-1.0));
      Node node1 = Node.newNumber(9.996376688459305, 1428, 0);
      Node node2 = new Node(94, node1, node0, 13, (-689));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(94, node3.getType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-926.7484520553198));
      Node node1 = Node.newNumber((double) 6);
      Node node2 = new Node(95, node0, node1, node1, 1, 4);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = Node.newNumber((-2694.914972098229), 97, 2);
      Node node2 = new Node(97, node1, node0, node0, 32, 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-2414.634242414134));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node2 = new Node(98, node1, node0, 26, 89);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = new Node(13);
      Node node2 = new Node(99, node1, node0, 33, 1937);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1937, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString("nw06s");
      Node node2 = new Node(100, node0, node1, 3099, 540);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Node node0 = Node.newNumber(3366.4182626);
      Node node1 = Node.newNumber((double) 1, 55, 37);
      Node node2 = new Node(101, node0, node1, (-502), 1746);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = Node.newNumber((double) 22, 25, 2);
      Node node2 = new Node(0, node0, node1, 27, 21);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(32);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(46);
      Node node1 = new Node(32, node0, node0, 25, 9);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(32, node2.getType());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(46);
      Node node1 = Node.newNumber((double) 3, 33, 9);
      Node node2 = new Node(29, node0, node0);
      Node node3 = new Node(5, node1, node2, node1, node2, 13, 1);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(29, node4.getType());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(1.5);
      Node node1 = new Node(27, node0);
      node0.addChildAfter(node1, node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-932.7132378165978));
      Node node1 = new Node(46, node0, node0, node0, node0);
      Node node2 = new Node(44, 9, 19);
      Node node3 = new Node(52, node1, node2, 1, 30);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertTrue(node4.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(4071.789025882);
      Node node1 = Node.newNumber(6.0, 10, 10);
      Node node2 = new Node(100, node0, node1, (-1763), 4256);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(2.147483647E9);
      Node node1 = new Node(46, 2, 4);
      Node node2 = new Node(22, node0, node1, node1, 37, 1380);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = Node.newNumber((-934.1725325815));
      Node node2 = new Node(23, node0, node1, 5, (-1));
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      node0.setType(182);
      Node node1 = Node.newNumber((double) 47, 19, 11);
      Node node2 = new Node(11, node0, node1, 62, 88);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(50, Node.SUPPRESSIONS);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-2414.634242414134));
      Node node1 = new Node(695);
      Node node2 = new Node(11, node0, node1, 97, 47);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(2.147483647777994E9);
      Node node1 = Node.newNumber((-935.5956993858586), (-667), 15);
      Node node2 = new Node(9, node0, node1, 10, 14);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(2.1474836306053157E9);
      Node node1 = Node.newNumber((double) 16, (-667), 15);
      Node node2 = new Node(9, node0, node1, 10, 14);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(9, node3.getType());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-2.147483648E9));
      Node node1 = new Node((-1), 42, 4095);
      Node node2 = new Node(19, node0, node1, (-3608), 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(19, node3.getType());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-1204.080665698785));
      Node node1 = Node.newNumber((double) 35);
      Node node2 = new Node(19, node1, node0, 9, 43);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber(9.996376688459305);
      Node node1 = Node.newNumber((double) 30);
      Node node2 = new Node(20, node0, node1, 74, 34);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461));
      Node node1 = new Node(26, 4095, 45);
      Node node2 = new Node(17, node0, node1, 5, (-1));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-926.7484520553198));
      Node node1 = Node.newNumber((double) 50);
      node0.setType((-4662));
      Node node2 = new Node(14, node0, node1, 39, 94);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(94, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-2414.634242414134));
      Node node1 = new Node((-2));
      Node node2 = new Node(16, node0, node1, 22, 8);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(16, node3.getType());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = Node.newNumber((double) 22, 25, 2);
      Node node2 = new Node(16, node1, node0, 36, 25);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-922.6215246125195));
      Node node1 = Node.newNumber((double) 35);
      Node node2 = new Node(15, node1, node0, 17, 3);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = Node.newNumber((double) 42);
      Node node2 = new Node(17, node0, node1, 5, (-1));
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = Node.newNumber((double) 43);
      Node node2 = new Node(16, node0, node1, 36, 25);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = new Node(37, node0, node0, 5, (-1));
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertEquals(37, node2.getType());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-933.461483268292));
      Node node1 = Node.newNumber((double) 48);
      Node node2 = new Node(37, node0, node1, 5, (-1));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }
}
