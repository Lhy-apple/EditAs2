/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:15:39 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckAccidentalSemicolon;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.FindExportableNodes;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.UnreachableCodeElimination;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeCheck_ESTest extends TypeCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("nOdvn%:WJF$:");
      Node node1 = new Node(35, node0, node0, node0, 4, 8);
      typeCheck0.visit(nodeTraversal0, node1, (Node) null);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkRequires, compilerOptions0.checkUndefinedProperties);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      Node node0 = Node.newString("");
      Node node1 = new Node(49, node0, node0, node0, 6, 4095);
      typeCheck0.processForTesting(node0, node0);
      // Undeclared exception!
      try { 
        typeCheck0.process(node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(47, node0, node0, node0, 49, 4);
      // Undeclared exception!
      try { 
        typeCheck0.processForTesting((Node) null, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      Node node0 = Node.newString("");
      Node node1 = new Node(49, node0, node0, node0, 6, 4095);
      typeCheck0.processForTesting(node0, node0);
      // Undeclared exception!
      try { 
        typeCheck0.process(node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      Node node0 = Node.newString("");
      Node node1 = new Node(49, node0, node0, node0, 6, 4095);
      typeCheck0.processForTesting(node0, node0);
      // Undeclared exception!
      try { 
        typeCheck0.processForTesting(node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      // Undeclared exception!
      try { 
        typeCheck0.processForTesting(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(118, node0, node0, node0, 18, 73);
      boolean boolean0 = typeCheck0.shouldTraverse(nodeTraversal0, node1, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("enum element {0} already defined");
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(1, Node.SPECIALCALL_EVAL);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      Node node0 = compiler0.parseTestCode("Vm");
      Node node1 = new Node((-1), node0, node0, node0, 30, (-3527));
      typeCheck0.processForTesting(node0, node0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("a 4]F|ZUp");
      Node node1 = new Node(4, node0, node0, node0, 15, 634);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(7, node0, node0, node0, 1110, 10);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(8, node0, node0, node0, 47, (-2443));
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(10, node0, node0, node0, 14, 0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.checkRequires);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, checkAccidentalSemicolon0);
      Node node0 = Node.newString("p!C");
      Node node1 = new Node(11, node0, node0, node0, 173, 4);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(12, node0, node0, node0, 14, (-1640));
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, (CodingConvention) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(13);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(14, node0, node0, node0, 1110, 16);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(31, Node.SKIP_INDEXES_PROP);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(15, node0, node0, 5, 830);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(15, node1.getType());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.checkRequires);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      Node node0 = Node.newString("");
      Node node1 = new Node(16, node0, node0, node0, 135, 1);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.checkRequires);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      Node node0 = Node.newString("");
      Node node1 = new Node(17, node0, node0, node0, 125, 132);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(18, node0, node0, node0, 109, 4);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(19, node0, node0, node0, 1273, 28);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.checkRequires);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      Node node0 = compiler0.parseTestCode("9>bHT/BJ");
      Node node1 = new Node(20, node0, node0, node0, 0, 77);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = Node.newString("boolean");
      Node node1 = new Node(21, node0, node0, node0, 2, 133);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(35, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("enum element {0} already defined");
      Node node1 = new Node(23, node0, node0, node0, 152, 10);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(26, Node.DIRECTCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(25, node0, node0, node0, 9, 1);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(26, node0, node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, (CodingConvention) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      Node node0 = compiler0.parseTestCode("e )%cp");
      Node node1 = new Node(27, node0, node0, node0, 15, 2);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("nOdvn%:WJF$:");
      Node node1 = new Node(28, 10, (-1497));
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("nOdvn%:WJF$:");
      Node node1 = new Node(29, node0, node0, node0, (-3), 37);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(32, node0, node0, node0, 9, (-47));
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(36, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("nOdvn%:WJF$:");
      Node node1 = new Node(34, node0, node0, node0, 1073741824, 45);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(36, node0, node0, node0, (-3520), 23);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, (CodingConvention) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(139);
      Node node1 = new Node(37, node0, node0, node0, 6, 27);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = Node.newNumber(1871.05);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(1, Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("/ 4]F|ZUp");
      Node node1 = new Node(41, node0, node0, node0, 15, 634);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(36, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(42, node0, node0, node0, 1810, 19);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("nOdvn%:WJF$:");
      Node node1 = new Node(43, node0, node0, node0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(44, node0, node0, node0, 23, 15);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(45, node0, node0, node0, 21, 2);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.checkMissingReturn);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(46, node0, node0, node0, 39, 4);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(47, node0, node0, node0, 49, 4);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(20, Node.FINALLY_PROP);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = Node.newString("");
      Node node1 = new Node(49, node0, node0, node0, 6, 4095);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(31, Node.SKIP_INDEXES_PROP);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("enum element {0} already defined");
      Node node1 = new Node(50, node0, node0, node0, (-2), 1);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = Node.newNumber(1619.613, 52, 142);
      Node node1 = new Node(52, node0, node0, node0, node0, (-79), 38);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(57);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("nOdvn%:WJF$:");
      Node node1 = new Node(60, node0, node0, node0, 4, 8);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      Node node0 = Node.newString("37NMiE='");
      Node node1 = new Node(65, node0, node0, node0, 23, 28);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(67, node0, node0, node0, 1462, 30);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(68, node0, node0, node0, 23, 15);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = Node.newString("");
      Node node1 = Node.newString(73, "SLN>97m,");
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("nOdvn%:WJF$:");
      Node node1 = new Node(77, node0, node0, node0, 4, 8);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.checkGlobalThisLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      Node node0 = Node.newString("AND");
      Node node1 = new Node(91, node0, node0, node0, 48, 13);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(99, node0, node0, node0, 77, 151);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = Node.newNumber(1871.05);
      Node node1 = new Node(101, node0, node0, node0, 17, 15);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(102, node0, node0, node0, 23, 15);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.reportMissingOverride);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(107, node0, node0, node0, 125, 0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(108, node0, node0, node0, 26, 108);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(24, Node.LASTUSE_PROP);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.checkMissingReturn);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      Node node0 = Node.newString("AND");
      Node node1 = new Node(109, node0, node0, node0, 124, 10);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node node1 = new Node(110, node0, node0, node0, 1, 1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(0, node0.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("nOdvn%:WJF$:");
      Node node1 = new Node(111, node0, node0, node0, 38, 9);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(24, Node.LASTUSE_PROP);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = compiler0.parseTestCode("}IDaqS0){(H");
      Node node1 = new Node(113, node0, node0, node0, (-6), 108);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertFalse(node1.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(114, node0, node0, node0, 23, 15);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(83, node0.getType());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(118, node0, node0, node0, 18, 73);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SCRIPT 1 [sourcename: java.lang.String@0000000816] [synthetic: 1] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(119, node0, node0, node0, 21, 2);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(24, Node.LASTUSE_PROP);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.checkRequires);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, checkAccidentalSemicolon0);
      Node node0 = new Node(120);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.checkRequires);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      Node node0 = Node.newString("");
      Node node1 = new Node(121, node0, node0, node0, 4095, 117);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0, (ScopeCreator) null);
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      Node node0 = compiler0.parseTestCode("");
      Node node1 = new Node(122, node0, node0, node0, 39, 2);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(23, Node.VARIABLE_PROP);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = Node.newString("");
      Node node1 = new Node(124, node0, node0, node0, (-3776), 32);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      Node node0 = Node.newString("quoted");
      Node node1 = new Node(126, 41, 5207);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(0, Node.BOTH);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(127, node0, node0, node0, (-2752), 3);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(129, node0, node0, node0, 23, 15);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = new Node(131);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.aggressiveVarCheck);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      Node node0 = Node.newString("AND");
      Node node1 = new Node(134, node0, node0, node0, 48, 13);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(136, node0, node0, node0, 43, 132);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.checkUnreachableCode);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      Node node0 = Node.newString(137, "D;et^tZ.7/,I-TE:;Qk");
      typeCheck0.visit(nodeTraversal0, node0, (Node) null);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(139);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      Node node0 = compiler0.parseTestCode("e )%cp");
      Node node1 = new Node(140, node0, node0, node0, 498, 2);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.checkRequires);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      Node node0 = compiler0.parseTestCode("9>bi/BJ");
      Node node1 = new Node(141, node0, node0, node0, 0, 77);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("?H;");
      Node node1 = new Node(147, node0, node0, node0, 1379, 115);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(15, Node.CASEARRAY_PROP);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(148);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(20, Node.FINALLY_PROP);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.checkMissingGetCssNameLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      Node node0 = compiler0.parseTestCode("#/8yV~");
      Node node1 = new Node(149, node0, node0, node0, 20, 4555);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.checkUndefinedProperties);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      Node node0 = Node.newString("// Input %num%");
      Node node1 = new Node(150, node0, node0, node0, 1561, 31);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node node1 = new Node(151, node0, node0, node0, (-1), 46);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 151
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(152, nodeArray0);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(22, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(105, node0, node0, node0, 149, (-2));
      typeCheck0.visit(nodeTraversal0, node0, node1);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.checkUndefinedProperties);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      Node node0 = compiler0.parseTestCode("");
      Node node1 = Node.newString("com.google.javascript.jscomp.Compiler$5");
      Node node2 = new Node(33, node0, node0, node1, 20, 951);
      typeCheck0.visit(nodeTraversal0, node2, node1);
      typeCheck0.visit(nodeTraversal0, node2, node2);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      Stack<JSType> stack0 = new Stack<JSType>();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(31, node0, node0, node0, 200000, 1);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("nOdvn%:WJF$:");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      TypeCheck typeCheck1 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, (Scope) null, typedScopeCreator0, compilerOptions0.checkProvides, compilerOptions0.brokenClosureRequiresLevel);
      Node node1 = new Node(1, node0, node0, node0, 1, 83);
      typeCheck1.visit(nodeTraversal0, node1, node0);
      assertEquals(3, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(105, (-1179), (-1179));
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.checkFunctions);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      Node node0 = Node.newString("quoted");
      Node node1 = new Node(120, node0, node0, node0, 8, 17);
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node1, node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("/ 4]F|ZUp");
      Node node1 = new Node(118, node0, node0, node0, 1359, 73);
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("");
      Node node1 = Node.newString("");
      Node node2 = new Node(118, node0, node0, node1, 18, 73);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node2, node2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SCRIPT 1 [sourcename: java.lang.String@0000000817] [synthetic: 1] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      Node node0 = compiler0.parseTestCode("e )%cp");
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node node2 = new Node(30, node1, node0, node0, 15, 2);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      typeCheck0.visit(nodeTraversal0, node2, node2);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node1 = new Node(24, node0, node0, node0, 1, 30);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(24, Node.LASTUSE_PROP);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = compiler0.parseTestCode("nOdvn%:WJF$:");
      Node node1 = new Node(22, node0, node0, node0, 10, 152);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      double double0 = typeCheck0.getTypedPercent();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.getErrorManager();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      double double0 = typeCheck0.getTypedPercent();
      assertEquals(0.0, double0, 0.01);
  }
}
