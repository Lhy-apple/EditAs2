/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:21:05 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PrepareAst;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceInformationAnnotator;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.TemplateType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeValidator_ESTest extends TypeValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode(">~n#5_,plX2p&X.'o");
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator(">~n#5_,plX2p&X.'o", true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) functionType0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, functionType0, objectType0, node0, "Named type with empty name component");
      assertTrue(objectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode(">~n#5_,plX2p&X.'o");
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator(">~n#5_,plX2p&X.'o", true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.expectValidTypeofName(nodeTraversal0, (Node) null, "Not declared as a type name");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("", true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      typeValidator0.expectActualObject(nodeTraversal0, node0, jSType0, "Object#Key");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      Iterable<TypeValidator.TypeMismatch> iterable0 = typeValidator0.getMismatches();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("", true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      JSError jSError0 = nodeTraversal0.makeError(node0, compiler0.OPTIMIZE_LOOP_ERROR, (String[]) null);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch((JSType) null, (JSType) null, jSError0);
      String string0 = typeValidator_TypeMismatch0.toString();
      assertEquals("(null, null)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode(">~n#5_,plX2p&X.'o");
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator(">~n#5_,plX2p&X.'o", true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, (Node) null, functionType0, "Not declared as a constructor");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      typeValidator0.expectActualObject(nodeTraversal0, (Node) null, templateType0, "Named type with empty name component");
      assertFalse(templateType0.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode(">~n#5_,plX2p&X.'o");
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator(">~n#5_,plX2p&X.'o", false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.expectAnyObject(nodeTraversal0, node0, functionType0, "Unknown class name");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      // Undeclared exception!
      try { 
        typeValidator0.expectAnyObject((NodeTraversal) null, node0, jSType0, "Cn$fTT4VBL!`m7e19-=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("|");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("|", false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      NoType noType0 = (NoType)jSTypeRegistry0.createUnionType(jSTypeArray0);
      typeValidator0.expectAnyObject(nodeTraversal0, node0, noType0, "|");
      assertTrue(noType0.hasCachedValues());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode(">~n#5_,plX2p&X.'o");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("r", true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      typeValidator0.expectString(nodeTraversal0, (Node) null, noObjectType0, "Named type with empty name component");
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      PrepareAst.PrepareAnnotations prepareAst_PrepareAnnotations0 = new PrepareAst.PrepareAnnotations();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, prepareAst_PrepareAnnotations0);
      typeValidator0.expectString(nodeTraversal0, node0, functionType0, "eYCeqRv=-82-cdH");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("com.google.javascript.jscomp.TypeValidator", false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      typeValidator0.expectNumber(nodeTraversal0, node0, jSType0, "z]8[2.5[-Vm!|es");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode(">~n#5_,plX2p&X.'o");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("r", true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      typeValidator0.expectNumber(nodeTraversal0, node0, functionType0, "YP>{s7m");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("k<o");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("k<o", false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType0, "'nP*Keo5");
      assertTrue(jSType0.isNullable());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("", false);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0, syntacticScopeCreator0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType0, "Named type with empty name component");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("com.google.javascript.jscomp.TypeValidator", false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, jSType0, "com.google.javascript.jscomp.TypeValidator");
      assertFalse(node0.isVoid());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("", true);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0, syntacticScopeCreator0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, jSType0, "Unknown class name");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode(">~n#5_,plX2p&X.'o");
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("r", true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectStringOrNumber(nodeTraversal0, (Node) null, functionType0, "Not declared as a constructor");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("k<o");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("k<o", false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, "Not declared as a constructor", jSType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode(">~n#5_,plX2p&X.'o");
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator(">~n#5_,plX2p&X.'o", true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, (Node) null, functionType0, "Not declared as a constructor", functionType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode(">~n#5_,plX2p&X.'o");
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator(">~n#5_,plX2p&X.'o", true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, noObjectType0, functionType0);
      assertTrue(noObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("", false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, noObjectType0, jSType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("LBPw86i");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, jSType0, noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("k<o");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("k<o", false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, jSType0, node0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("", false);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0, syntacticScopeCreator0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("%s,%d,%d,%d,%d,%d\n", node0, (ObjectType) null);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, objectType0, jSType0, node0, "Object#Key");
      assertTrue(boolean0);
      assertFalse(objectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode(">~n#5_,plX2p&X.'o");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator(">~n#5_,plX2p&X.'o", true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType0, functionType0, "Object#Element");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("com.google.javascript.jscomp.TypeValidator", false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, noObjectType0, "JSC_ILLEGAL_PROPERTY_ACCESS");
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode(">~n#5_,plX2p&X.'o");
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator(">~n#5_,plX2p&X.'o", true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, functionType0, functionType0, (Node) null, 303);
      assertFalse(node0.isFunction());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode(">~n#5_,plX2p&X.'o");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("r", true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.javascript.rhino.head.JavaAdapter", (Node) null, functionType0);
      // Undeclared exception!
      try { 
        typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, (Node) null, enumType0, functionType0, (Node) null, (-997));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("kBiO", node0, templateType0);
      typeValidator0.expectCanOverride(nodeTraversal0, node0, enumType0, enumType0, "", enumType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("", true);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0, syntacticScopeCreator0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("%s,%d,%d,%d,%d,%d\n", node0, (ObjectType) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, objectType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      typeValidator0.expectCanOverride(nodeTraversal0, node0, objectType0, enumElementType0, ";vCG1Y.0c", enumType0);
      assertTrue(objectType0.hasCachedValues());
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode(">~n#5_,plX2p&X.'o");
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator(">~n#5_,plX2p&X.'o", true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      // Undeclared exception!
      try { 
        typeValidator0.expectSuperType(nodeTraversal0, (Node) null, functionType0, functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("LBPw86i");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.expectSuperType((NodeTraversal) null, node0, templateType0, templateType0);
      assertEquals(53, Node.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      PrepareAst.PrepareAnnotations prepareAst_PrepareAnnotations0 = new PrepareAst.PrepareAnnotations();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, prepareAst_PrepareAnnotations0);
      typeValidator0.expectCanCast(nodeTraversal0, node0, noObjectType0, functionType0);
      assertTrue(noObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("uCBq`\"");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("(", false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", (Node) null, jSType0);
      typeValidator0.expectCanCast(nodeTraversal0, (Node) null, jSType0, enumType0);
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("k<o");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      SyntheticAst syntheticAst0 = new SyntheticAst("Object#Element");
      CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, "Named type with empty name component", false);
      // Undeclared exception!
      try { 
        typeValidator0.expectUndeclaredVariable("0=d)0=[", compilerInput0, node0, node0, (Scope.Var) null, "ZotOc++d`x#:'E-WZI", jSType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode(">~n#5_,plX2p&X.'o");
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator(">~n#5_,plX2p&X.'o", false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.expectAllInterfaceProperties(nodeTraversal0, node0, functionType0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      String string0 = typeValidator0.getReadableJSTypeName(node0, false);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("(", false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      typeValidator0.setShouldReport(false);
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, functionType0, "Object#Element");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("", false);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0, syntacticScopeCreator0);
      JSError jSError0 = nodeTraversal0.makeError(node0, compiler0.MOTION_ITERATIONS_ERROR, (String[]) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("%s,%d,%d,%d,%d,%d\n", node0, (ObjectType) null);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(objectType0, objectType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("", false);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0, syntacticScopeCreator0);
      JSError jSError0 = nodeTraversal0.makeError(node0, compiler0.MOTION_ITERATIONS_ERROR, (String[]) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("%s,%d,%d,%d,%d,%d\n", node0, (ObjectType) null);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(objectType0, objectType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch0);
      assertTrue(boolean0);
  }
}
