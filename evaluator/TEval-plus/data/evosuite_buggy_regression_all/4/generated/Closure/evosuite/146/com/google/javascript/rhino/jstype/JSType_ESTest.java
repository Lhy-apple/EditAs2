/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:23:49 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[4];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) booleanType0, jSTypeArray0);
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderEquality(functionType0);
      boolean boolean0 = jSType_TypePair0.typeB.isResolved();
      assertTrue(functionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      JSType.TypePair jSType_TypePair0 = templateType0.getTypesUnderEquality(allType0);
      boolean boolean0 = jSType_TypePair0.typeA.isStringValueType();
      assertFalse(templateType0.isEmptyType());
      assertFalse(templateType0.isResolved());
      assertFalse(boolean0);
      assertFalse(templateType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType jSType0 = noType0.unboxesTo();
      assertNull(jSType0);
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "Unknown class name");
      enumElementType0.findPropertyType("Not declared as a constructor");
      assertFalse(enumElementType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      String string0 = allType0.toDebugHashCodeString();
      assertEquals("{1}", string0);
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      boolean boolean0 = allType0.isRegexpType();
      assertFalse(allType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        allType0.isString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      boolean boolean0 = allType0.isDateType();
      assertFalse(boolean0);
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "V");
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, functionPrototypeType0);
      boolean boolean0 = arrowType0.matchesObjectContext();
      assertFalse(arrowType0.isEmptyType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderEquality(objectType0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, jSType_TypePair0.typeB);
      boolean boolean0 = arrowType0.matchesStringContext();
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      booleanType0.canTestForEqualityWith(allType0);
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      boolean boolean0 = allType0.isConstructor();
      assertFalse(boolean0);
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      boolean boolean0 = allType0.isArrayType();
      assertFalse(boolean0);
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderShallowEquality(booleanType0);
      boolean boolean0 = jSType_TypePair0.typeA.isBooleanValueType();
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      boolean boolean0 = booleanType0.canBeCalled();
      assertFalse(boolean0);
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        allType0.isNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      boolean boolean0 = noType0.isTemplateType();
      assertFalse(boolean0);
      assertFalse(noType0.isResolved());
      assertTrue(noType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)booleanType0.autoboxesTo();
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, instanceObjectType0);
      boolean boolean0 = proxyObjectType0.isOrdinaryFunction();
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, recordType0, recordType0);
      boolean boolean0 = parameterizedType0.isNamedType();
      assertFalse(boolean0);
      assertFalse(parameterizedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ObjectType objectType0 = stringType0.dereference();
      assertFalse(objectType0.isResolved());
      assertNotNull(objectType0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      booleanType0.matchesInt32Context();
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "JV");
      boolean boolean0 = templateType0.isInterface();
      assertFalse(boolean0);
      assertFalse(templateType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      boolean boolean0 = booleanType0.isInstanceType();
      assertFalse(booleanType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      NoType noType0 = (NoType)errorFunctionType0.getGreatestSubtype(booleanType0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noType0);
      boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(boolean0);
      assertTrue(proxyObjectType0.isConstructor());
      assertTrue(noType0.isEmptyType());
      assertFalse(proxyObjectType0.hasReferenceName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      boolean boolean0 = allType0.isTheObjectType();
      assertFalse(boolean0);
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      functionPrototypeType0.getTypesUnderShallowEquality(errorFunctionType0);
      assertFalse(functionPrototypeType0.isResolved());
      assertFalse(functionPrototypeType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      boolean boolean0 = allType0.matchesUint32Context();
      assertFalse(boolean0);
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", (-1967), (-1967));
      boolean boolean0 = namedType0.isEnumType();
      assertFalse(boolean0);
      assertFalse(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      boolean boolean0 = allType0.isNumberValueType();
      assertFalse(allType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      EmptyScope emptyScope0 = new EmptyScope();
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", booleanType0);
      assertFalse(enumType0.isResolved());
      
      enumType0.forceResolve(simpleErrorReporter0, emptyScope0);
      assertTrue(enumType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      allType0.forgiveUnknownNames();
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      booleanType0.clearResolved();
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", booleanType0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
      boolean boolean0 = parameterizedType0.isFunctionPrototypeType();
      assertFalse(parameterizedType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderEquality(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(jSType_TypePair0.typeB);
      ((UnionType) jSType0).toString();
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      NullType nullType0 = new NullType(jSTypeRegistry0);
      FunctionType functionType0 = errorFunctionType0.cloneWithNewReturnType(nullType0, false);
      JSType.TypePair jSType_TypePair0 = functionType0.getTypesUnderShallowEquality(errorFunctionType0);
      jSType_TypePair0.typeB.getTypesUnderEquality(jSType_TypePair0.typeA);
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Not declared as a constructor", "Unknown class name", 0, 0);
      JSType jSType1 = booleanType0.getGreatestSubtype(jSType0);
      assertFalse(jSType1.isResolved());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      NullType nullType0 = new NullType(jSTypeRegistry0);
      FunctionType functionType0 = errorFunctionType0.cloneWithNewReturnType(nullType0, false);
      JSType.TypePair jSType_TypePair0 = functionType0.getTypesUnderShallowEquality(errorFunctionType0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(jSType_TypePair0.typeA);
      functionType0.getTypesUnderInequality(jSType0);
      assertTrue(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType((JSTypeRegistry) null, (FunctionType) null, (ObjectType) null, true);
      boolean boolean0 = JSType.isEquivalent(functionPrototypeType0, (JSType) null);
      assertFalse(functionPrototypeType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      boolean boolean0 = JSType.isEquivalent(allType0, allType0);
      assertFalse(allType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      boolean boolean0 = booleanType0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createOptionalNullableType(booleanType0);
      boolean boolean0 = unionType0.contains(booleanType0);
      assertFalse(unionType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      booleanType0.findPropertyType("Unknown class name");
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = booleanType0.autoboxesTo();
      boolean boolean0 = jSType0.canAssignTo(booleanType0);
      assertFalse(boolean0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      boolean boolean0 = booleanType0.canAssignTo(allType0);
      assertTrue(boolean0);
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      allType0.dereference();
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderEquality(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      
      JSType.TypePair jSType_TypePair1 = errorFunctionType0.getTypesUnderShallowEquality(booleanType0);
      jSType_TypePair0.typeB.getTypesUnderInequality(jSType_TypePair1.typeB);
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      booleanType0.getTypesUnderInequality(templateType0);
      assertFalse(templateType0.isResolved());
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "");
      booleanType0.getTypesUnderEquality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      JSType jSType0 = noObjectType0.getLeastSupertype(booleanType0);
      booleanType0.testForEquality(jSType0);
      assertFalse(jSType0.isResolved());
      assertTrue(noObjectType0.isEmptyType());
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      JSType jSType0 = recordType0.getLeastSupertype(booleanType0);
      booleanType0.testForEquality(jSType0);
      assertFalse(jSType0.isResolved());
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      boolean boolean0 = booleanType0.canTestForShallowEqualityWith(allType0);
      assertTrue(boolean0);
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      boolean boolean0 = allType0.canTestForShallowEqualityWith(booleanType0);
      assertTrue(boolean0);
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = booleanType0.autoboxesTo();
      boolean boolean0 = jSType0.canTestForShallowEqualityWith(booleanType0);
      assertFalse(boolean0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(numberType0);
      JSType jSType1 = numberType0.getLeastSupertype(jSType0);
      assertSame(jSType1, jSType0);
      assertFalse(jSType1.isResolved());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(booleanType0, "Named type with empty name component");
      JSType jSType1 = booleanType0.getLeastSupertype(jSType0);
      assertFalse(jSType1.isResolved());
      assertTrue(jSType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      JSType jSType0 = JSType.getLeastSupertype((JSType) allType0, (JSType) allType0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      JSType jSType0 = booleanType0.getGreatestSubtype(recordType0);
      assertTrue(jSType0.isEmptyType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      JSType jSType0 = booleanType0.getGreatestSubtype(noObjectType0);
      assertFalse(jSType0.isResolved());
      assertFalse(noObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      JSType jSType0 = booleanType0.getGreatestSubtype(allType0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      JSType jSType0 = JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
      assertSame(jSType0, unknownType0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      JSType jSType0 = booleanType0.getGreatestSubtype(booleanType0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(booleanType0);
      jSType0.getTypesUnderShallowEquality(booleanType0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(booleanType0);
      BooleanType booleanType1 = new BooleanType(jSTypeRegistry0);
      JSType jSType1 = booleanType1.getGreatestSubtype(jSType0);
      assertTrue(jSType1.isEmptyType());
      assertFalse(jSType1.isResolved());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = booleanType0.autoboxesTo();
      JSType jSType1 = booleanType0.getGreatestSubtype(jSType0);
      assertTrue(jSType1.isEmptyType());
      assertFalse(jSType1.isResolved());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType jSType0 = objectType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      JSType jSType0 = booleanType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(booleanType0);
      booleanType0.getTypesUnderEquality(jSType0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNullType());
      assertFalse(booleanType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.getTypesUnderInequality(noType0);
      assertFalse(noType0.isResolved());
      assertTrue(noType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(booleanType0);
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderShallowInequality(jSType0);
      jSType0.getTypesUnderShallowInequality(jSType_TypePair0.typeB);
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      JSType.TypePair jSType_TypePair0 = recordType0.getTypesUnderShallowEquality(templateType0);
      boolean boolean0 = jSType_TypePair0.typeB.differsFrom(jSType_TypePair0.typeA);
      assertFalse(recordType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      boolean boolean0 = booleanType0.differsFrom(unknownType0);
      assertFalse(unknownType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      boolean boolean0 = booleanType0.differsFrom(allType0);
      assertTrue(boolean0);
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      boolean boolean0 = allType0.differsFrom(allType0);
      assertFalse(boolean0);
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
      JSType.TypePair jSType_TypePair0 = templateType0.getTypesUnderShallowEquality(booleanType0);
      boolean boolean0 = JSType.isSubtype((JSType) templateType0, jSType_TypePair0.typeA);
      assertFalse(templateType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      EmptyScope emptyScope0 = new EmptyScope();
      JSType.safeResolve(errorFunctionType0, simpleErrorReporter0, emptyScope0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("IEA676(cms8kF$;9Ic", (Node) null);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("dK", functionType0);
      // Undeclared exception!
      try { 
        functionType0.setPrototypeBasedOn(enumType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
