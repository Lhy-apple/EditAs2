/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:11:12 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CodePrinter;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.rhino.Node;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CodePrinter_ESTest extends CodePrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setOutputTypes(true);
      String string0 = codePrinter_Builder1.build();
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = new Node(51, 51, 51);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      codePrinter_Builder0.setTagAsStrict(true);
      // Undeclared exception!
      try { 
        codePrinter_Builder0.build();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 51
         // IN 51
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = new Node(4);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      codePrinter_Builder0.setPrettyPrint(true);
      String string0 = codePrinter_Builder0.build();
      assertEquals("return;\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setPreferLineBreakAtEndOfFile(true);
      String string0 = codePrinter_Builder1.build();
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder((Node) null);
      Charset charset0 = Charset.defaultCharset();
      CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setOutputCharset(charset0);
      assertSame(codePrinter_Builder1, codePrinter_Builder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = new Node(44);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setLineLengthThreshold((-577));
      String string0 = codePrinter_Builder1.build();
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Node node0 = new Node(44);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      node0.setSourceFileForTesting("~y?r^S[E5'P9");
      SourceMap sourceMap0 = mock(SourceMap.class, new ViolatedAssumptionAnswer());
      CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setSourceMap(sourceMap0);
      String string0 = codePrinter_Builder1.build();
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      SourceMap sourceMap0 = mock(SourceMap.class, new ViolatedAssumptionAnswer());
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      codePrinter_Builder0.setSourceMapDetailLevel(sourceMap_DetailLevel0);
      node0.setSourceFileForTesting("~y?r^S[E5'P9");
      codePrinter_Builder0.setSourceMap(sourceMap0);
      String string0 = codePrinter_Builder0.build();
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      Node node1 = new Node(49, node0, 15, 52);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setPreferLineBreakAtEndOfFile(true);
      CodePrinter.Builder codePrinter_Builder2 = codePrinter_Builder1.setLineLengthThreshold(2);
      String string0 = codePrinter_Builder2.build();
      assertEquals("throw true; ;\n", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      Node node1 = new Node(49, node0, 15, 52);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      codePrinter_Builder0.setPreferLineBreakAtEndOfFile(true);
      codePrinter_Builder0.setLineLengthThreshold(4);
      SourceMap sourceMap0 = mock(SourceMap.class, new ViolatedAssumptionAnswer());
      codePrinter_Builder0.setSourceMap(sourceMap0);
      String string0 = codePrinter_Builder0.build();
      assertEquals("throw true; ;\n", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      Node node1 = new Node(49, node0, 15, 52);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      codePrinter_Builder0.setPreferLineBreakAtEndOfFile(true);
      codePrinter_Builder0.setLineLengthThreshold(4);
      SourceMap sourceMap0 = mock(SourceMap.class, new ViolatedAssumptionAnswer());
      node1.setSourceFileForTesting("~pixT8G");
      codePrinter_Builder0.setSourceMap(sourceMap0);
      String string0 = codePrinter_Builder0.build();
      assertEquals("throw true; ;\n", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = new Node(4);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      codePrinter_Builder0.setPrettyPrint(true);
      codePrinter_Builder0.setLineLengthThreshold(4);
      String string0 = codePrinter_Builder0.build();
      assertEquals("return;\n", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = new Node(23);
      Node node1 = new Node(29, node0, 4095, 36);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      codePrinter_Builder0.setPrettyPrint(true);
      // Undeclared exception!
      try { 
        codePrinter_Builder0.build();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 23
         // MUL
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      Node node1 = new Node(49, node0, 15, 52);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      codePrinter_Builder0.setLineBreak(true);
      String string0 = codePrinter_Builder0.build();
      assertEquals("throw true;", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Node node0 = new Node(44);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      codePrinter_Builder0.setPreferLineBreakAtEndOfFile(true);
      codePrinter_Builder0.setLineLengthThreshold(2);
      String string0 = codePrinter_Builder0.build();
      assertEquals("true;\n", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder((Node) null);
      // Undeclared exception!
      try { 
        codePrinter_Builder0.setSourceMapDetailLevel((SourceMap.DetailLevel) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder((Node) null);
      // Undeclared exception!
      try { 
        codePrinter_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot build without root node being specified
         //
         verifyException("com.google.javascript.jscomp.CodePrinter$Builder", e);
      }
  }
}
