/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:22:56 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.FunctionNode;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "R");
      assertEquals(122, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node(37);
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionObjectCall(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.containsCall(node0);
      assertFalse(boolean0);
      assertEquals(122, node0.getType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(node0);
      assertFalse(boolean0);
      assertEquals(122, node0.getType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString("xh{c", 108, 124);
      boolean boolean0 = NodeUtil.containsTypeInOuterScope(node0, 38);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isNodeTypeReferenced(node0, 1);
      assertFalse(boolean0);
      assertEquals(122, node0.getType());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, (-1677));
      assertEquals(0, int0);
      assertEquals(122, node0.getType());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newString((-3740), "*=", 95, (-3740));
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("9x:adfFo", 0, 0);
      int int0 = NodeUtil.getNameReferenceCount(node0, "9x:adfFo");
      assertEquals(1, int0);
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 0);
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(99);
      boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node(114, 22, 114);
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
      assertEquals(130, node1.getType());
      assertEquals(114, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("", 101, 98);
      // Undeclared exception!
      try { 
        NodeUtil.getBooleanValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-literal value: NAME  101
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(122, node0.getType());
      
      boolean boolean0 = NodeUtil.getBooleanValue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newNumber((double) 10);
      boolean boolean0 = NodeUtil.getBooleanValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString(">=");
      boolean boolean0 = NodeUtil.getBooleanValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(99);
      // Undeclared exception!
      try { 
        NodeUtil.getBooleanValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-literal value: COLON
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 309);
      boolean boolean0 = NodeUtil.getBooleanValue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("Infinity", 1567, 1567);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals(1567, node0.getLineno());
      assertEquals("Infinity", string0);
      assertEquals(1567, node0.getCharno());
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 0);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString("Jd.xSE");
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("Jd.xSE", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("undefined", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      String string0 = NodeUtil.getStringValue(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newNumber(12287.663704880988, 20, 49);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("12287.663704880988", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("9xadfFo", 0, 0);
      Node node1 = new Node(30, node0, 7, 24);
      String string0 = NodeUtil.getFunctionName(node1, node1);
      assertNotNull(string0);
      assertEquals(38, node0.getType());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals("9xadfFo", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("REFERENCE_ERROR_FUNCTION_TYPE", 12288, 823);
      Node node1 = NodeUtil.newQualifiedNameNode("", 507, 20);
      Node node2 = new Node(34, node0, node0, node0);
      node2.addChildrenToFront(node1);
      Node node3 = Node.newString(20, "/|FVz[~&LP");
      String string0 = NodeUtil.getFunctionName(node2, node3);
      assertNull(string0);
      assertEquals(12288, node0.getLineno());
      assertTrue(node0.isUnscopedQualifiedName());
      assertEquals(823, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node((-204), 3530, 91);
      Node node1 = new Node(29, node0, node0, node0);
      boolean boolean0 = NodeUtil.isImmutableValue(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("9x:adfFo", 0, 0);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertEquals(0, node0.getCharno());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(boolean0);
      assertEquals(0, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newNumber((double) 12288, 91, 91);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newString("Jd.xSE");
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node(44, (-707), 135);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("undefined", 2, 27);
      boolean boolean0 = NodeUtil.isLiteralValue(node0);
      assertTrue(boolean0);
      assertEquals(2, node0.getLineno());
      assertEquals(27, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(10);
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newString(12, " d");
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(14, 1578, 121);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = new Node(16, node0, (-2757), 130);
      Locale locale0 = new Locale(" of ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newString(19, "rH) ^C4L'Nidx", 5, 15);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Node node1 = new Node(20, node0, node0, node0, node0, (-3), 1);
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(21, 3, 46);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(22);
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString(24, "rH) ^C4L'Nidx", 17, 12);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = new Node(25);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 0);
      Node node1 = new Node(26, node0, 2, 2);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(27);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Expected CALL node, got ", "9xadfFo", 634, 49);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Expected CALL node, got ", namedType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Set<String> set0 = enumElementType0.getPropertyNames();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node(28, (-3), 35);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(29, (-2148), 48);
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString(31, "ah;7%b:~mgij(jA/_9");
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      node0.setType(32);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newString(3038, "/d&yjh .+`W", 3038, 3038);
      Node node1 = NodeUtil.newQualifiedNameNode("/d&yjh .+`W", node0, "/d&yjh .+`W");
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("REFERENCE_ERROR_FUNCTION_TYPE", 12288, 823);
      Node node1 = new Node(34, node0, node0, node0);
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
      assertEquals(12288, node0.getLineno());
      assertEquals(823, node0.getCharno());
      assertEquals(38, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Node node0 = new Node(35, 135, 2856);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      Node node1 = NodeUtil.newName("N0O", node0, "N0O");
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
      assertFalse(boolean0);
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString(42, "if", 39, 33);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(44);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString((-3740), "xSE", 2759, (-3740));
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(14);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(17);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(18);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(19);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(20);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(22);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(25);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(26);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(29);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newNumber((-550.566083), 4, 974);
      Node node1 = new Node(31, node0, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(32);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(34);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = new Node(35, 135, 2856);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(36);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(39);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(40);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(43);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(45, 19, 1);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(46);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(48);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(49);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(52);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node(55, 55, 55);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(60);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(61);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(62);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(67);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(70);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node(75);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(77);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(78);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(79, 79, 79);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(81);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(82);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(83);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(85);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(86);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(87);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(88, 1488, 537);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(89);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(90);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newString(91, "");
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(93);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(94);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(95);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(97);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = new Node(99);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(102);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(103);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node(104);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(106);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(107);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString(109, "cJkS;(x{[JjZT<@");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node(111);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(112);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = new Node(113);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node(114, 22, 114);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(115);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(116);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(117);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = new Node((-1394), 88, 22);
      node0.setType(119);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(120);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(121);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = new Node((-2119));
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode(";nqS5)+iC]C*^<-]", 1635, 1356);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertEquals(1356, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertEquals(1635, node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node(44, 44, 44);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = new Node(49, 121, 126);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(98);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      Node node1 = new Node(101, node0, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newString("QTG<%Y<%");
      Node node1 = NodeUtil.newVarNode("L/", node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertEquals(118, node1.getType());
      assertFalse(node0.hasChildren());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(126, (-1), (-29));
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = new Node(127);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString(91, "");
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected NEW node, got ASSIGN_RSH
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected CALL node, got HOOK
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString(91, "");
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newString("<unknown=");
      Node node1 = new Node(31, node0, node0, node0, 1, 3381);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("xh{c", 101, 12277);
      Node node1 = new Node(37, node0, node0, node0, 17, 24);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertEquals(4095, node0.getCharno());
      assertEquals(101, node0.getLineno());
      assertTrue(boolean0);
      assertTrue(node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("+{/KGL", 3505, 2899);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertEquals(2899, node0.getCharno());
      assertEquals(3505, node0.getLineno());
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = new Node(49, 98, 98);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      node0.setType(32);
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      Node node1 = NodeUtil.newName("N0O", node0, "N0O");
      Node node2 = new Node(1638, node1);
      boolean boolean0 = NodeUtil.canBeSideEffected(node2);
      assertTrue(boolean0);
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = NodeUtil.precedence(4);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(681);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=681> (type 681)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for goto (type 5)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ifeq (type 6)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ifne (type 7)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setname (type 8)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = NodeUtil.precedence(9);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = NodeUtil.precedence(10);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = NodeUtil.precedence(11);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = NodeUtil.precedence(12);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = NodeUtil.precedence(13);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = NodeUtil.precedence(14);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = NodeUtil.precedence(15);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = NodeUtil.precedence(16);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = NodeUtil.precedence(17);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = NodeUtil.precedence(18);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = NodeUtil.precedence(19);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int int0 = NodeUtil.precedence(20);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = NodeUtil.precedence(21);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = NodeUtil.precedence(22);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int int0 = NodeUtil.precedence(23);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = NodeUtil.precedence(24);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = NodeUtil.precedence(25);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = NodeUtil.precedence(26);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = NodeUtil.precedence(27);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = NodeUtil.precedence(28);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int int0 = NodeUtil.precedence(29);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = NodeUtil.precedence(30);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = NodeUtil.precedence(31);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = NodeUtil.precedence(32);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setprop (type 34)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int int0 = NodeUtil.precedence(35);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = NodeUtil.precedence(37);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = NodeUtil.precedence(38);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = NodeUtil.precedence(39);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = NodeUtil.precedence(40);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = NodeUtil.precedence(41);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = NodeUtil.precedence(42);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = NodeUtil.precedence(43);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = NodeUtil.precedence(45);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int int0 = NodeUtil.precedence(46);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = NodeUtil.precedence(47);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for bindname (type 48)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for throw (type 49)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(54);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for getvar (type 54)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(62);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=62> (type 62)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(70);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=70> (type 70)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(71);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=71> (type 71)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=74> (type 74)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(76);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=76> (type 76)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(77);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for try (type 77)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(79);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lb (type 79)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(80);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rb (type 80)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(81);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lc (type 81)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rc (type 82)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rp (type 84)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      int int0 = NodeUtil.precedence(85);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = NodeUtil.precedence(87);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int int0 = NodeUtil.precedence(89);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = NodeUtil.precedence(90);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = NodeUtil.precedence(91);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int int0 = NodeUtil.precedence(95);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = NodeUtil.precedence(98);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(99);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for colon (type 99)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int int0 = NodeUtil.precedence(100);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = NodeUtil.precedence(101);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = NodeUtil.precedence(102);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      int int0 = NodeUtil.precedence(103);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(107);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for import (type 107)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(109);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for else (type 109)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(111);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for case (type 111)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for while (type 113)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for do (type 114)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(115);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for for (type 115)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for break (type 116)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for continue (type 117)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(118);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for var (type 118)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for with (type 119)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for catch (type 120)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(121);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for finally (type 121)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int int0 = NodeUtil.precedence(122);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative((-2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(100);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(101);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = Node.newString("Array");
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = new Node(95, 10, 113);
      int int0 = NodeUtil.getOpFromAssignmentOp(node0);
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("REFERENCE_ERROR_FUNCTION_TYPE", 12288, 823);
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
      assertEquals(823, node0.getCharno());
      assertTrue(node0.isQualifiedName());
      assertEquals(12288, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isGet(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode(">sgwz=>.Vq:S6aIe2", 40, (-171));
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertEquals(33, node0.getType());
      assertNull(node1);
      assertTrue(node0.isUnscopedQualifiedName());
      assertTrue(node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isNew(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newString("NV", (-4079), 110);
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("9x:adfFo", 0, 0);
      // Undeclared exception!
      try { 
        NodeUtil.isVarDeclaration(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("9x:adfFo", 0, 0);
      Node node1 = new Node((-1), node0, node0, node0);
      assertEquals(38, node0.getType());
      
      NodeUtil.getAssignedValue(node0);
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = new Node(110, 110, 110);
      boolean boolean0 = NodeUtil.isString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = Node.newString("AW*VM;sTw$", 55, 55);
      boolean boolean0 = NodeUtil.isString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = new Node(75);
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = new Node(97);
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.isExprCall(node1);
      assertEquals(130, node1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = new Node(114, 22, 114);
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = new Node((-1394), 88, 22);
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = new Node(114, 22, 114);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("&&", 98, 18);
      NodeUtil.getLoopCodeBlock(node0);
      assertEquals(98, node0.getLineno());
      assertEquals(18, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = new Node(101, 104, 80);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("yAA=1H/WDm", linkedList0, node0, 18, 43);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(functionNode0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = new Node(101, 101, 4);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // AND 101 does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newString(109, "cJkS;(x{[JjZT<@");
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ELSE cJkS;(x{[JjZT<@ does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = new Node(110, (-2591), (-2591));
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SWITCH does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = new Node(114, 22, 114);
      Node node1 = NodeUtil.getConditionExpression(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = Node.newString("NV", (-4079), 110);
      Node node1 = new Node(132, node0);
      NodeUtil.removeChild(node1, node0);
      assertEquals(5, Node.FUNCTION_PROP);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = new Node(60);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: ENUM_ID of ENUM_ID
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newNumber((double) 113);
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionAnonymous(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = NodeUtil.newVarNode("&%}LSncQXH[69.Yp", node0);
      assertEquals(118, node1.getType());
      
      boolean boolean0 = NodeUtil.isFunctionAnonymous(node0);
      assertTrue(boolean0);
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("REFERENCE_ERROR_FUNCTION_TYPE", 12288, 823);
      Node node1 = NodeUtil.newName("", node0);
      assertNotSame(node1, node0);
      
      boolean boolean0 = NodeUtil.isReferenceName(node1);
      assertFalse(boolean0);
      assertEquals(12288, node1.getLineno());
      assertEquals(823, node1.getCharno());
      assertTrue(node1.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(3997, nodeArray0, 3997, 3997);
      Node node1 = NodeUtil.newName("]q^3`XhF_F)", node0, "mmYGq]8I[Y,7E");
      node0.addChildAfter(node1, node1);
      boolean boolean0 = NodeUtil.isReferenceName(node1);
      assertEquals(3997, node1.getCharno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = Node.newString(31, "ah;7%b:~mgij(jA/_9");
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = new Node((-707), 44, (-707));
      boolean boolean0 = NodeUtil.isCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("H]=}N9un:3yvmGQE9P", linkedList0, node0, 1637, 1);
      boolean boolean0 = NodeUtil.isFunction(functionNode0);
      assertEquals(1, functionNode0.getCharno());
      assertTrue(boolean0);
      assertEquals("H]=}N9un:3yvmGQE9P", functionNode0.getFunctionName());
      assertEquals(1637, functionNode0.getLineno());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = NodeUtil.isThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = Node.newString("@KdxO&e5>", 4095, 118);
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isAnonymousFunction(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = Node.newString(118, "xh{c", 118, 118);
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = Node.newNumber(4924.6671609);
      Node node1 = new Node(40, 27, 45);
      boolean boolean0 = NodeUtil.isObjectLitKey(node1, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = NodeUtil.opToStr(9);
      assertEquals("|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = NodeUtil.opToStr(111);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = NodeUtil.opToStr(10);
      assertEquals("^", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = NodeUtil.opToStr(11);
      assertEquals("&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = NodeUtil.opToStr(12);
      assertNotNull(string0);
      assertEquals("==", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = NodeUtil.opToStr(13);
      assertEquals("!=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = NodeUtil.opToStr(14);
      assertNotNull(string0);
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = NodeUtil.opToStr(15);
      assertEquals("<=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = NodeUtil.opToStr(16);
      assertNotNull(string0);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = NodeUtil.opToStr(17);
      assertEquals(">=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = NodeUtil.opToStr(18);
      assertNotNull(string0);
      assertEquals("<<", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = NodeUtil.opToStr(19);
      assertNotNull(string0);
      assertEquals(">>", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = NodeUtil.opToStr(20);
      assertNotNull(string0);
      assertEquals(">>>", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = NodeUtil.opToStr(21);
      assertNotNull(string0);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = NodeUtil.opToStr(22);
      assertNotNull(string0);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = NodeUtil.opToStr(23);
      assertEquals("*", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = NodeUtil.opToStr(24);
      assertNotNull(string0);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = NodeUtil.opToStr(25);
      assertEquals("%", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = NodeUtil.opToStr(27);
      assertNotNull(string0);
      assertEquals("~", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = NodeUtil.opToStr(28);
      assertNotNull(string0);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = NodeUtil.opToStr(29);
      assertNotNull(string0);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = NodeUtil.opToStr(30);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = NodeUtil.opToStr(31);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = NodeUtil.opToStr(32);
      assertEquals("typeof", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = NodeUtil.opToStr(33);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = NodeUtil.opToStr(34);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = NodeUtil.opToStr(35);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = NodeUtil.opToStr(36);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = NodeUtil.opToStr(37);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = NodeUtil.opToStr(38);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = NodeUtil.opToStr(39);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = NodeUtil.opToStr(40);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = NodeUtil.opToStr(41);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = NodeUtil.opToStr(42);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = NodeUtil.opToStr(43);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = NodeUtil.opToStr(44);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = NodeUtil.opToStr(45);
      assertEquals("===", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = NodeUtil.opToStr(46);
      assertEquals("!==", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = NodeUtil.opToStr(47);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = NodeUtil.opToStr(48);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = NodeUtil.opToStr(49);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = NodeUtil.opToStr(56);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = NodeUtil.opToStr(59);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = NodeUtil.opToStr(61);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = NodeUtil.opToStr(63);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = NodeUtil.opToStr(65);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = NodeUtil.opToStr(67);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = NodeUtil.opToStr(73);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = NodeUtil.opToStr(75);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = NodeUtil.opToStr(77);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = NodeUtil.opToStr(79);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = NodeUtil.opToStr(80);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = NodeUtil.opToStr(81);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = NodeUtil.opToStr(82);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = NodeUtil.opToStr(83);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = NodeUtil.opToStr(84);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = NodeUtil.opToStr(85);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = NodeUtil.opToStr(86);
      assertNotNull(string0);
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = NodeUtil.opToStr(87);
      assertNotNull(string0);
      assertEquals("|=", string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = NodeUtil.opToStr(88);
      assertEquals("^=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = NodeUtil.opToStr(89);
      assertEquals("&=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = NodeUtil.opToStr(90);
      assertEquals("<<=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = NodeUtil.opToStr(91);
      assertNotNull(string0);
      assertEquals(">>=", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = NodeUtil.opToStr(92);
      assertEquals(">>>=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = NodeUtil.opToStr(93);
      assertNotNull(string0);
      assertEquals("+=", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = NodeUtil.opToStr(94);
      assertNotNull(string0);
      assertEquals("-=", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = NodeUtil.opToStr(95);
      assertNotNull(string0);
      assertEquals("*=", string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = NodeUtil.opToStr(96);
      assertNotNull(string0);
      assertEquals("/=", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = NodeUtil.opToStr(97);
      assertEquals("%=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = NodeUtil.opToStr(98);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = NodeUtil.opToStr(99);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = NodeUtil.opToStr(100);
      assertNotNull(string0);
      assertEquals("||", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(101);
      assertEquals("&&", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = NodeUtil.opToStr(102);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = NodeUtil.opToStr(103);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = NodeUtil.opToStr(105);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = NodeUtil.opToStr(106);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = NodeUtil.opToStr(107);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = NodeUtil.opToStr(108);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = NodeUtil.opToStr(110);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = NodeUtil.opToStr(112);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = NodeUtil.opToStr(113);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = NodeUtil.opToStr(114);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = NodeUtil.opToStr(116);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = NodeUtil.opToStr(117);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = NodeUtil.opToStr(120);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = NodeUtil.opToStr(121);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = NodeUtil.opToStr(122);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(3530);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3530
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = Node.newString((-3740), "xSE", 2759, (-3740));
      Node node1 = NodeUtil.newVarNode("xSE", node0);
      // Undeclared exception!
      try { 
        NodeUtil.redeclareVarsInsideBranch(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(5, Node.FUNCTION_PROP);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("9xadfFo", 0, 0);
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList1);
      linkedList0.add(node0);
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode("&l#;tj?e[K6ZA", linkedList0, node0, 523, 43);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("com.google.common.base.CharMatcher$LookupTable", 30, 17);
      assertEquals(17, node0.getCharno());
      assertEquals(30, node0.getLineno());
      assertEquals(33, node0.getType());
      assertTrue(node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("/d&yjh .+`W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("ZD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("$'x=CxA(v8H:zo!S(", 98, 98);
      NodeUtil.getVarsDeclaredInBranch(node0);
      assertEquals(98, node0.getLineno());
      assertEquals(98, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("9xadfFo", 0, 0);
      Node node1 = new Node(30, node0, 7, 24);
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("9x:adfFo", 0, 0);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("Not declared as a constructor", (Node) null);
      assertNotNull(node0);
      assertEquals(118, node0.getType());
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Node node0 = Node.newString("", (-1277), 3038);
      Node node1 = NodeUtil.newName("", node0);
      int int0 = NodeUtil.getNameReferenceCount(node1, "+{/KGL");
      assertEquals(38, node1.getType());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Node node0 = new Node(101, 104, 80);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("yAA=1H/WDm", linkedList0, node0, 18, 43);
      NodeUtil.getVarsDeclaredInBranch(functionNode0);
      assertEquals(43, functionNode0.getCharno());
      assertEquals(18, functionNode0.getLineno());
      assertEquals("yAA=1H/WDm", functionNode0.getFunctionName());
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      Node node1 = NodeUtil.newName("R", node0);
      boolean boolean0 = NodeUtil.isNameReferenced(node1, "R");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node node0 = Node.newString("xh{c");
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1);
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = new Node(114, 22, 114);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = Node.newNumber(4924.6671609);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = Node.newString(1605, "com.google.javascript.jscomp.NodeUtil$1");
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("N0O", linkedList0, node0, (-1142), (-1));
      Node node1 = NodeUtil.getFnParameters(functionNode0);
      assertEquals(83, node1.getType());
      assertEquals("N0O", functionNode0.getFunctionName());
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 309);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 309);
      Node node1 = new Node(16, node0, node0);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
  }
}
