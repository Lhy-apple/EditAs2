/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:24:24 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Position;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.rhino.Node;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SourceMap_ESTest extends SourceMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SourceMap sourceMap0 = new SourceMap();
      MockFileWriter mockFileWriter0 = new MockFileWriter("[");
      // Undeclared exception!
      try { 
        sourceMap0.appendTo(mockFileWriter0, "[");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SourceMap sourceMap0 = new SourceMap();
      sourceMap0.setStartingPosition(23, 23);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SourceMap sourceMap0 = new SourceMap();
      sourceMap0.reset();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Position position0 = new Position(4, 11);
      StringWriter stringWriter0 = new StringWriter();
      SourceMap.Mapping sourceMap_Mapping0 = new SourceMap.Mapping();
      sourceMap_Mapping0.originalPosition = position0;
      sourceMap_Mapping0.appendTo(stringWriter0);
      assertEquals("[null,4,11]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Position position0 = new Position(4, 11);
      StringWriter stringWriter0 = new StringWriter();
      SourceMap.Mapping sourceMap_Mapping0 = new SourceMap.Mapping();
      sourceMap_Mapping0.originalName = "n#xH";
      sourceMap_Mapping0.originalPosition = position0;
      sourceMap_Mapping0.appendTo(stringWriter0);
      assertEquals("[null,4,11,n#xH]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Position position0 = new Position(23, 2);
      SourceMap sourceMap0 = new SourceMap();
      sourceMap0.addMapping(node0, position0, position0);
      assertEquals(5, Node.FUNCTION_PROP);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SourceMap sourceMap0 = new SourceMap();
      sourceMap0.setWrapperPrefix("v6??\"Ad`h4Rb,9(");
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SourceMap sourceMap0 = new SourceMap();
      sourceMap0.setWrapperPrefix("\n");
  }
}
