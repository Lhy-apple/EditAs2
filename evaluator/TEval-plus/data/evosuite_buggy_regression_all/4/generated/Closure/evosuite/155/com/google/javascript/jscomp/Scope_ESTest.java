/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:25:43 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticSlot;
import java.io.File;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Scope_ESTest extends Scope_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-559), (-559));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "", (-31), 4);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Not declared as a constructor", "Unknown class name");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, functionType0, compilerInput0, false);
      boolean boolean0 = scope_Var0.isLocal();
      assertFalse(scope_Var0.isTypeInferred());
      assertFalse(boolean0);
      assertEquals("Not declared as a constructor", scope_Var0.getInputName());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-559), (-559));
      Scope scope0 = new Scope(node0, (ObjectType) null);
      MockFile mockFile0 = new MockFile("<6s{", "{zkTu(V53RWb)Z");
      Charset charset0 = Charset.defaultCharset();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, charset0);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      Scope.Var scope_Var0 = scope0.declare("F\"A.TUov@", node0, (JSType) null, compilerInput0, true);
      boolean boolean0 = scope_Var0.isGlobal();
      assertTrue(scope_Var0.isTypeInferred());
      assertTrue(boolean0);
      assertFalse(scope_Var0.isDefine());
      assertEquals("/data/lhy/TEval-plus/<6s{/{zkTu(V53RWb)Z", scope_Var0.getInputName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-559), (-559));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "", (-31), 4);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      MockFile mockFile0 = new MockFile("g", "Not declared as a type name");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, (Charset) null);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, functionType0, compilerInput0, false);
      scope_Var0.getJSDocInfo();
      assertFalse(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
      assertEquals("/data/lhy/TEval-plus/g/Not declared as a type name", scope_Var0.getInputName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-559), (-559));
      Scope scope0 = new Scope(node0, (ObjectType) null);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      Scope.Var scope_Var0 = scope0.declare("F\"A.TUov@", node0, (JSType) null, compilerInput0, true);
      String string0 = scope_Var0.getName();
      assertEquals("", scope_Var0.getInputName());
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.6557753512952), (-559), (-559));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "@_TqV", (-31), 4);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Not declared as a constructor", "Unknown class name");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, jSType0, compilerInput0);
      Node node1 = scope_Var0.getNameNode();
      assertFalse(scope_Var0.isDefine());
      assertNotNull(node1);
      assertTrue(scope_Var0.isTypeInferred());
      assertEquals("Not declared as a constructor", scope_Var0.getInputName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-565), 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType jSType0 = jSTypeRegistry0.createNamedType("E)O7g`=l= T", "", 4, 1);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      MockFile mockFile0 = new MockFile("Not declared as a constructor", "Not declared as a constructor");
      Charset charset0 = Charset.defaultCharset();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, charset0);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, functionType0, compilerInput0, false);
      scope_Var0.getScope();
      assertFalse(scope_Var0.isDefine());
      assertEquals("/data/lhy/TEval-plus/Not declared as a constructor/Not declared as a constructor", scope_Var0.getInputName());
      assertFalse(scope_Var0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-559), (-559));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "", (-31), 4);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      MockFile mockFile0 = new MockFile("g", "Not declared as a type name");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, (Charset) null);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, functionType0, compilerInput0, false);
      scope_Var0.getType();
      assertFalse(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
      assertEquals("/data/lhy/TEval-plus/g/Not declared as a type name", scope_Var0.getInputName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Node node0 = new Node((-565), (-565), (-565));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("enterwith", "", 0, 4);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, jSType0, (CompilerInput) null);
      assertTrue(scope_Var0.isTypeInferred());
      
      scope_Var0.setType(functionType0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-565), 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType jSType0 = jSTypeRegistry0.createNamedType("E)O7g`=l= T", "", 4, 1);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      MockFile mockFile0 = new MockFile("Not declared as a constructor", "Not declared as a constructor");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, (Charset) null);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope", node0, jSType0, compilerInput0, false);
      boolean boolean0 = scope_Var0.isDefine();
      assertFalse(boolean0);
      assertEquals("/data/lhy/TEval-plus/Not declared as a constructor/Not declared as a constructor", scope_Var0.getInputName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType jSType0 = jSTypeRegistry0.createNamedType("E)O7g`=l= T", "E)O7g`=l= T", 4, 1);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Not declared as a constructor", "E)O7g`=l= T");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, jSType0, compilerInput0, false);
      // Undeclared exception!
      try { 
        scope_Var0.isBleedingFunction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-559), (-559));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      MockFile mockFile0 = new MockFile("Unknown class name");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, (Charset) null);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, functionType0, compilerInput0, false);
      String string0 = scope_Var0.toString();
      assertEquals("Unknown class name", scope_Var0.getInputName());
      assertEquals("Scope.Var Not declared as a constructor", string0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("msg.in.after.for.name");
      defaultPassConfig0.regenerateGlobalTypedScope(compiler0, node0);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-559), (-559));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "", (-31), 4);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      boolean boolean0 = scope0.isBottom();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-565), 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType jSType0 = jSTypeRegistry0.createNamedType("E)O7g`=l= T", "", 4, 1);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      Node node1 = scope0.getRootNode();
      assertEquals(6, Node.TEMP_PROP);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Node node0 = new Node((-565), (-565), (-565));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Not declared as a type name", "'=c)[}fW*Y", (-1), 29);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      int int0 = scope0.getDepth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-559), (-559));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "", 15, 4);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      int int0 = scope0.getVarCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-565), 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "", 4, 1);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      FunctionType functionType1 = (FunctionType)scope0.getTypeOfThis();
      assertEquals(0, functionType1.getMaxArguments());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-559), 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "", 4, 0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      StaticSlot<JSType> staticSlot0 = scope0.getOwnSlot("");
      assertNull(staticSlot0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-559), (-559));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) linkedList0);
      Scope scope0 = new Scope(node0, functionType0);
      JSModule jSModule0 = new JSModule("");
      CompilerInput compilerInput0 = jSModule0.getByName("Scope.Var ");
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", (Node) null, functionType0, compilerInput0);
      // Undeclared exception!
      try { 
        scope_Var0.getInitialValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Scope$Var", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-565), (-565));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "", 4, 1);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, functionType0, (CompilerInput) null, true);
      boolean boolean0 = scope_Var0.isExtern();
      assertFalse(scope_Var0.isDefine());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("E)O7g`=l= T", "E)O7g`=l= T", 4, 1);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Not declared as a constructor", "E)O7g`=l= T");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, jSType0, compilerInput0, true);
      boolean boolean0 = scope_Var0.isExtern();
      assertTrue(boolean0);
      assertFalse(scope_Var0.isDefine());
      assertEquals("Not declared as a constructor", scope_Var0.getInputName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType jSType0 = jSTypeRegistry0.createNamedType("E)O7g`=l= T", "E)O7g`=l= T", 4, 1);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Not declared as a constructor", "E)O7g`=l= T");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, jSType0, compilerInput0, false);
      boolean boolean0 = scope_Var0.isExtern();
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("E)O7g`=l= T", "p(;", 35, 49);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope((Node) null, functionType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", (Node) null, functionType0, compilerInput0, true);
      boolean boolean0 = scope_Var0.isConst();
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Node node0 = new Node((-565), (-565), (-565));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Not declared as a type name", "'=c)[}fW*Y", (-1), 29);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("OhkGlZ'6al;G#", "Named type with empty name component");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, functionType0, compilerInput0);
      boolean boolean0 = scope_Var0.isConst();
      assertFalse(boolean0);
      assertFalse(scope_Var0.isDefine());
      assertEquals("OhkGlZ'6al;G#", scope_Var0.getInputName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Node node0 = new Node((-565), (-565), (-565));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Not declared as a type name", "'=c)[}fW*Y", (-1), 29);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      Node node1 = new Node(86, node0, node0, node0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("OhkGlZ'6al;G#", "Named type with empty name component");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, functionType0, compilerInput0);
      Node node2 = scope_Var0.getInitialValue();
      assertFalse(scope_Var0.isDefine());
      assertEquals("OhkGlZ'6al;G#", scope_Var0.getInputName());
      assertNotNull(node2);
      assertEquals(0, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Node node0 = new Node((-565), (-565), (-565));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Not declared as a type name", "'=c)[}fW*Y", (-1), 29);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      Node node1 = new Node(118, node0, node0, node0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Not declared as a type name");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, functionType0, compilerInput0);
      Node node2 = scope_Var0.getInitialValue();
      assertEquals("Not declared as a type name", scope_Var0.getInputName());
      assertFalse(scope_Var0.isDefine());
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.6557753512952), (-559), (-559));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "@_TqV", (-31), 4);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      Node node1 = new Node(8, node0, node0, node0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Not declared as a constructor", "Unknown class name");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, jSType0, compilerInput0);
      Node node2 = scope_Var0.getInitialValue();
      assertEquals("Not declared as a constructor", scope_Var0.getInputName());
      assertNull(node2);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-565), 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType jSType0 = jSTypeRegistry0.createNamedType("E)O7g`=l= T", "z!b5@", 33, (-47));
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", jSType0);
      Scope scope0 = new Scope(node0, enumType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Unknown class name", "Unknown class name");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, (JSType) null, compilerInput0, false);
      scope_Var0.resolveType((ErrorReporter) null);
      assertEquals("Unknown class name", scope_Var0.getInputName());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Node node0 = new Node((-565), (-565), (-565));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Not declared as a type name", "'=c)[}fW*Y", (-1), 29);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("OhkGlZ'6al;G#", "Named type with empty name component");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, functionType0, compilerInput0);
      String string0 = scope_Var0.getInputName();
      assertFalse(scope_Var0.isDefine());
      assertEquals("OhkGlZ'6al;G#", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Node node0 = new Node((-565), (-565), (-565));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("enterwith", "", 0, 4);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, jSType0, (CompilerInput) null);
      String string0 = scope_Var0.getInputName();
      assertFalse(scope_Var0.isDefine());
      assertEquals("<non-file>", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Node node0 = new Node((-565), (-565), (-565));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Not declared as a type name", "'=c)[}fW*Y", (-1), 29);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("OhkGlZ'6al;G#", "Named type with empty name component");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, functionType0, compilerInput0);
      boolean boolean0 = scope_Var0.isNoShadow();
      assertFalse(boolean0);
      assertEquals("OhkGlZ'6al;G#", scope_Var0.getInputName());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Node node0 = new Node((-565), (-565), (-565));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Not declared as a type name", "'=c)[}fW*Y", (-1), 29);
      ObjectType objectType0 = ObjectType.cast(jSType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, node0);
      Scope scope0 = new Scope(node0, objectType0);
      node0.addSuppression("Not declared as a type name");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("x", "Not declared as a type name");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, functionType0, compilerInput0);
      boolean boolean0 = scope_Var0.isNoShadow();
      assertEquals("x", scope_Var0.getInputName());
      assertFalse(boolean0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Node node0 = new Node((-565), (-565), (-565));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Not declared as a type name", "'=c)[}fW*Y", (-1), 29);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Not declared as a type name");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, functionType0, compilerInput0);
      boolean boolean0 = scope_Var0.equals(scope_Var0);
      assertEquals("Not declared as a type name", scope_Var0.getInputName());
      assertFalse(scope_Var0.isDefine());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Node node0 = new Node((-565), (-565), (-565));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Not declared as a type name", "'=c)[}fW*Y", (-1), 29);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("OhkGlZ'6al;G#", "Named type with empty name component");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, functionType0, compilerInput0);
      boolean boolean0 = scope_Var0.equals(functionType0);
      assertEquals("OhkGlZ'6al;G#", scope_Var0.getInputName());
      assertFalse(boolean0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Node node0 = new Node((-565), (-565), (-565));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Not declared as a type name", "'=c)[}fW*Y", (-1), 29);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Not declared as a type name");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, functionType0, compilerInput0);
      Scope.Var scope_Var1 = scope0.declare("Not declared as a constructor", (Node) null, jSType0, compilerInput0, true);
      boolean boolean0 = scope_Var0.equals(scope_Var1);
      assertEquals("Not declared as a type name", scope_Var1.getInputName());
      assertFalse(boolean0);
      assertFalse(scope_Var1.isDefine());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("E)O7g`=l= T", "E)O7g`=l= T", 4, 1);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      Scope scope1 = null;
      try {
        scope1 = new Scope(scope0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-559), (-559));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "", (-31), 4);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      Node node1 = new Node(1, node0);
      Scope scope1 = new Scope(scope0, node1);
      Scope scope2 = scope1.getGlobalScope();
      assertFalse(scope2.isLocal());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Node node0 = new Node((-565), (-565), (-565));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "", (-31), 4);
      Stack<JSType> stack0 = new Stack<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) stack0);
      Scope scope0 = new Scope(node0, functionType0);
      MockFile mockFile0 = new MockFile("WWE,6_}rG*uy$3F53", "])n");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, (Charset) null);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      // Undeclared exception!
      try { 
        scope0.declare((String) null, node0, jSType0, compilerInput0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-565), 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType jSType0 = jSTypeRegistry0.createNamedType("E)O7g`=l= T", "", 4, 1);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Not declared as a constructor", "");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      // Undeclared exception!
      try { 
        scope0.declare("", node0, jSType0, compilerInput0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-559), (-559));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "", 1, 4);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Not declared as a constructor", "Unknown class name");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      scope0.declare("Named type with empty name component", node0, functionType0, compilerInput0, false);
      // Undeclared exception!
      try { 
        scope0.declare("Named type with empty name component", node0, jSType0, compilerInput0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-559), (-559));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "", (-31), 4);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      Scope scope1 = new Scope(node0, functionType0);
      MockFile mockFile0 = new MockFile("Kh_z#w_W@#", "");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, (Charset) null);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, functionType0, compilerInput0, false);
      // Undeclared exception!
      try { 
        scope1.undeclare(scope_Var0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType jSType0 = jSTypeRegistry0.createNamedType("E)O7g`=l= T", "E)O7g`=l= T", 4, 1);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Not declared as a constructor", "E)O7g`=l= T");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, jSType0, compilerInput0, false);
      scope0.undeclare(scope_Var0);
      // Undeclared exception!
      try { 
        scope0.undeclare(scope_Var0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-559), (-559));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "", 15, 4);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Not declared as a constructor", "Unknown class name");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      scope0.declare("Not declared as a constructor", node0, functionType0, compilerInput0, true);
      Scope.Var scope_Var0 = scope0.getVar("Not declared as a constructor");
      assertNotNull(scope_Var0);
      assertFalse(scope_Var0.isDefine());
      assertEquals("Not declared as a constructor", scope_Var0.getInputName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Node node0 = new Node((-565), (-565), (-565));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("enterwith", "", 0, 4);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      Node node1 = new Node(1, node0);
      Scope scope1 = new Scope(scope0, node1);
      Scope.Var scope_Var0 = scope1.declare("Not declared as a constructor", node1, functionType0, (CompilerInput) null, true);
      // Undeclared exception!
      try { 
        scope_Var0.resolveType((ErrorReporter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.NamedType", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.6557753512952), (-559), (-559));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "@_TqV", (-31), 4);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Not declared as a constructor", "Unknown class name");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, jSType0, compilerInput0);
      assertEquals("Not declared as a constructor", scope_Var0.getInputName());
      assertFalse(scope_Var0.isDefine());
      
      boolean boolean0 = scope0.isDeclared("Not declared as a constructor", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.6557753512952), (-559), (-559));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "@_TqV", (-31), 4);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      Node node1 = new Node(8, node0, node0, node0);
      Scope scope1 = new Scope(scope0, node1);
      boolean boolean0 = scope1.isDeclared("6RWs@9", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Node node0 = new Node((-565), (-565), (-565));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Not declared as a type name", "'=c)[}fW*Y", (-1), 29);
      ObjectType objectType0 = ObjectType.cast(jSType0);
      Scope scope0 = new Scope(node0, objectType0);
      Node node1 = new Node(36, node0);
      Scope scope1 = new Scope(scope0, node1);
      boolean boolean0 = scope1.isDeclared("4Yx9c?54|v[f", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Node node0 = Node.newNumber((-2832.395105897229), (-559), (-559));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "", (-31), 4);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      Scope scope0 = new Scope(node0, functionType0);
      Node node1 = new Node(1, node0);
      Scope scope1 = new Scope(scope0, node1);
      boolean boolean0 = scope1.isLocal();
      assertTrue(boolean0);
  }
}
