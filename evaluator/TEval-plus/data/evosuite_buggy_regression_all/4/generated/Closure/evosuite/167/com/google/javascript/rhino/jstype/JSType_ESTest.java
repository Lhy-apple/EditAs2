/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:26:49 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "Unknown class name");
      errorFunctionType0.getTypesUnderShallowEquality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "sR:F$87Obdh]m");
      NamedType namedType0 = (NamedType)jSTypeRegistry0.createNamedType("Named type with empty name component", "Not declared as a constructor", 1, 0);
      JSType.TypePair jSType_TypePair0 = namedType0.getTypesUnderShallowEquality(errorFunctionType0);
      Node node0 = new Node(0, 0, 0);
      namedType0.defineSynthesizedProperty("Not declared as a constructor", jSType_TypePair0.typeA, node0);
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isResolved());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      boolean boolean0 = noObjectType0.isStringValueType();
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(boolean0);
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      JSType jSType0 = errorFunctionType0.unboxesTo();
      assertNull(jSType0);
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      ObjectType objectType0 = nullType0.dereference();
      assertFalse(nullType0.isNoType());
      assertNotNull(objectType0);
      assertFalse(nullType0.isNoObjectType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.TOP_LEVEL_PROTOTYPE;
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      prototypeObjectType0.getJSDocInfo();
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isResolved());
      assertTrue(prototypeObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      String string0 = noResolvedType0.toDebugHashCodeString();
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals("function (this:me, {8}): me", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isRegexpType();
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isAllType());
      assertFalse(boolean0);
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = stringType0.collapseUnion();
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.TOP_LEVEL_PROTOTYPE;
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      boolean boolean0 = prototypeObjectType0.isString();
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(boolean0);
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertTrue(prototypeObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isDateType();
      assertFalse(boolean0);
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(voidType0);
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoType());
      
      jSType0.getTypesUnderShallowInequality(jSType0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noType0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, jSType0);
      String string0 = indexedType0.toAnnotationString();
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(jSType0.isNoObjectType());
      assertEquals("?", string0);
      assertFalse(indexedType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType.toMaybeParameterizedType((JSType) booleanType0);
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(jSType0);
      boolean boolean0 = jSType_TypePair0.typeA.isNullable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noType0);
      boolean boolean0 = noType0.canTestForEqualityWith(jSType0);
      assertTrue(noType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "Named type with empty name component");
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumElementType0, enumElementType0);
      boolean boolean0 = parameterizedType0.isConstructor();
      assertFalse(boolean0);
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(enumElementType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      boolean boolean0 = errorFunctionType0.isArrayType();
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(boolean0);
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "is_dispatcher");
      // Undeclared exception!
      try { 
        templateType0.setValidator((Predicate<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      boolean boolean0 = errorFunctionType0.isBooleanValueType();
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      boolean boolean0 = jSType0.canBeCalled();
      assertFalse(boolean0);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
      boolean boolean0 = jSType0.hasDisplayName();
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
      boolean boolean0 = jSType0.isNumber();
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isOrdinaryFunction();
      assertFalse(voidType0.isResolved());
      assertFalse(boolean0);
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noResolvedType0, "Unknown class name");
      JSType.TypePair jSType_TypePair0 = enumElementType0.getTypesUnderShallowInequality(voidType0);
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNullType());
      
      boolean boolean0 = jSType_TypePair0.typeA.isNamedType();
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "Unknown class name");
      enumElementType0.matchConstraint(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.matchesInt32Context();
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      JSType jSType1 = jSTypeRegistry0.createOptionalNullableType(jSType0);
      boolean boolean0 = jSType1.isInterface();
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isInstanceType();
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isResolved());
      assertFalse(boolean0);
      assertFalse(voidType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
      boolean boolean0 = indexedType0.isCheckedUnknownType();
      assertFalse(indexedType0.isResolved());
      assertFalse(boolean0);
      assertFalse(indexedType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isTheObjectType();
      assertFalse(boolean0);
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ")EoJtT%n!V]Y^TtT");
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      JSType.TypePair jSType_TypePair0 = unknownType0.getTypesUnderEquality(errorFunctionType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType_TypePair0.typeA, "Not declared as a constructor");
      enumElementType0.matchesUint32Context();
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject((ObjectType) null, (ObjectType) null);
      boolean boolean0 = objectType0.isEnumType();
      assertTrue(objectType0.hasCachedValues());
      assertFalse(boolean0);
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ")EoJtT%n!V]Y^TtT");
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      JSType.TypePair jSType_TypePair0 = unknownType0.getTypesUnderEquality(errorFunctionType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType_TypePair0.typeA, "Not declared as a constructor");
      boolean boolean0 = enumElementType0.isNumberValueType();
      assertFalse(enumElementType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      noResolvedType0.forceResolve((ErrorReporter) null, instanceObjectType0);
      assertTrue(noResolvedType0.isResolved());
      assertFalse(instanceObjectType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.clearResolved();
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      JSType jSType1 = jSTypeRegistry0.createOptionalNullableType(jSType0);
      boolean boolean0 = jSType1.isFunctionPrototypeType();
      assertFalse(jSType1.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(voidType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "Named type with empty name component");
      String string0 = enumElementType0.toStringHelper(true);
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNoObjectType());
      assertEquals("(null|undefined)", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{");
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, true);
      boolean boolean0 = instanceObjectType0.hasDisplayName();
      assertTrue(boolean0);
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, true);
      boolean boolean0 = instanceObjectType0.hasDisplayName();
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(boolean0);
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(voidType0);
      assertTrue(boolean0);
      assertFalse(noResolvedType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ")EoJtT%n!V]Y^TtT");
      ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(errorFunctionType1);
      assertFalse(errorFunctionType1.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, (JSType) null);
      boolean boolean0 = indexedType0.isGlobalThisType();
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(indexedType0.isNoObjectType());
      assertTrue(indexedType0.isFunctionType());
      assertFalse(indexedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
      assertNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      JSType.toMaybeTemplateType((JSType) errorFunctionType0);
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      nullType0.getLeastSupertype(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isNominalConstructor();
      assertFalse(boolean0);
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Unknown class name", (Node) null);
      boolean boolean0 = functionType0.isNominalConstructor();
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, voidType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      errorFunctionType0.testForEquality(proxyObjectType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noType0, noType0);
      parameterizedType0.getTypesUnderShallowEquality(noType0);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      JSType.isEquivalent(instanceObjectType0, instanceObjectType0);
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ")EoJtT%n!V]Y^TtT");
      boolean boolean0 = errorFunctionType0.equals(simpleErrorReporter0);
      assertFalse(boolean0);
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ")EoJtT%n!V]Y^TtT");
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      JSType.TypePair jSType_TypePair0 = unknownType0.getTypesUnderEquality(errorFunctionType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType_TypePair0.typeA, "Not declared as a constructor");
      jSType_TypePair0.typeB.equals(enumElementType0);
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      nullType0.findPropertyType("\"8uJ");
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(stringType0);
      jSType0.findPropertyType("");
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      
      boolean boolean0 = jSType0.canAssignTo(errorFunctionType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ObjectType objectType0 = stringType0.dereference();
      assertFalse(objectType0.isResolved());
      assertTrue(objectType0.hasCachedValues());
      assertNotNull(objectType0);
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.ALL_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      stringType0.testForEqualityHelper(stringType0, jSType0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      errorFunctionType0.getTypesUnderInequality(unknownType0);
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      indexedType0.getTypesUnderEquality(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", (Node) null, jSType0);
      enumType0.testForEqualityHelper(unknownType0, jSType0);
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getTypesUnderInequality(voidType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
      noType0.getTypesUnderInequality(indexedType0);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
      voidType0.getTypesUnderEquality(jSType0);
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(voidType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(voidType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Named type with empty name component");
      jSType0.testForEquality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(voidType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(voidType0);
      jSType0.testForEquality(jSType0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isUnionType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      boolean boolean0 = nullType0.canTestForShallowEqualityWith(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noType0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "r8P1V`afsPc#");
      boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(indexedType0);
      assertTrue(noType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ")EoJtT%n!V]Y^TtT");
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      JSType.TypePair jSType_TypePair0 = unknownType0.getTypesUnderEquality(errorFunctionType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType_TypePair0.typeA, "Not declared as a constructor");
      boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(jSType_TypePair0.typeA);
      assertTrue(enumElementType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Named type with empty name component");
      boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(errorFunctionType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      JSType jSType1 = jSTypeRegistry0.createOptionalNullableType(jSType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      JSType jSType2 = errorFunctionType0.getLeastSupertype(jSType1);
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(jSType2.isUnionType());
      assertFalse(jSType2.isResolved());
      assertFalse(jSType2.isNoObjectType());
      assertNotSame(jSType2, jSType1);
      assertFalse(jSType2.equals((Object)jSType1));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noType0);
      JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderEquality(noType0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, jSType0);
      indexedType0.getLeastSupertype(jSType_TypePair0.typeB);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noType0);
      jSType0.getTypesUnderShallowEquality(jSType0);
      assertFalse(noType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "Unknown class name");
      errorFunctionType0.getTypesUnderInequality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      JSType jSType1 = jSTypeRegistry0.createOptionalNullableType(jSType0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      nullType0.getTypesUnderShallowEquality(jSType1);
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNoObjectType());
      assertTrue(jSType1.isUnionType());
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "uG\"|C}");
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(recordType0);
      assertTrue(recordType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      AllType allType0 = new AllType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType.getGreatestSubtype((JSType) allType0, (JSType) noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      JSType.filterNoResolvedType(jSType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noType0);
      JSType jSType1 = jSType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType1.isResolved());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = stringType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "sR:F$87Obdh]m");
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      
      jSType0.getTypesUnderEquality(errorFunctionType0);
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.differsFrom(voidType0);
      assertFalse(voidType0.isNoObjectType());
      assertTrue(boolean0);
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      boolean boolean0 = noType0.differsFrom(unknownType0);
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(boolean0);
      assertFalse(unknownType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      boolean boolean0 = noType0.differsFrom(noType0);
      assertFalse(noType0.isResolved());
      assertFalse(boolean0);
      assertFalse(noType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ")EoJtT%n!V]Y^TtT");
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      JSType.TypePair jSType_TypePair0 = unknownType0.getTypesUnderEquality(errorFunctionType0);
      boolean boolean0 = jSType_TypePair0.typeB.canAssignTo(unknownType0);
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(unknownType0.isResolved());
      assertTrue(boolean0);
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      errorFunctionType0.setInstanceType((ObjectType) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType.safeResolve(errorFunctionType0, simpleErrorReporter0, errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isResolved());
  }
}
