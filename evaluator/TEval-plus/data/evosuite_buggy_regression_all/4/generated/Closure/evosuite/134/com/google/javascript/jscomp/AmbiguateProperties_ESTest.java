/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:21:59 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AmbiguateProperties;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.ScriptOrFnNode;
import java.io.DataOutputStream;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AmbiguateProperties_ESTest extends AmbiguateProperties_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AmbiguateProperties ambiguateProperties0 = new AmbiguateProperties(compiler0, (char[]) null);
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode("com.google.javascript.jscomp.InstrumentFunctions$RemoveCallback");
      ambiguateProperties0.process(scriptOrFnNode0, scriptOrFnNode0);
      assertNull(scriptOrFnNode0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("?L@");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      char[] charArray0 = new char[6];
      AmbiguateProperties ambiguateProperties0 = new AmbiguateProperties(compiler0, charArray0);
      Map<String, String> map0 = ambiguateProperties0.getRenamingMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AmbiguateProperties ambiguateProperties0 = new AmbiguateProperties(compiler0, (char[]) null);
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.InstrumentFunctions$RemoveCallback");
      Node node1 = Node.newString(6, "com.google.javascript.jscomp.InstrumentFunctions$RemoveCallback", 35, 37);
      ambiguateProperties0.process(node1, node0);
      ambiguateProperties0.process(node1, node0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AmbiguateProperties ambiguateProperties0 = new AmbiguateProperties(compiler0, (char[]) null);
      Node node0 = Node.newString("getInstance", 64, 64);
      Node node1 = new Node(64, node0);
      // Undeclared exception!
      try { 
        ambiguateProperties0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AmbiguateProperties ambiguateProperties0 = new AmbiguateProperties(compiler0, (char[]) null);
      Node node0 = Node.newString(64, "]zW6");
      ambiguateProperties0.process(node0, node0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AmbiguateProperties ambiguateProperties0 = new AmbiguateProperties(compiler0, (char[]) null);
      Node node0 = Node.newString((-2620), "", (-2620), (-2620));
      Node node1 = new Node(64, node0);
      // Undeclared exception!
      try { 
        ambiguateProperties0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AmbiguateProperties ambiguateProperties0 = new AmbiguateProperties(compiler0, (char[]) null);
      Node node0 = Node.newString((-2609), "|=Gz", (-2609), (-2609));
      Node node1 = new Node(64, node0);
      // Undeclared exception!
      try { 
        ambiguateProperties0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AmbiguateProperties ambiguateProperties0 = new AmbiguateProperties(compiler0, (char[]) null);
      Node node0 = Node.newString((-2609), "|", (-2609), (-2609));
      Node node1 = new Node(35, node0);
      ambiguateProperties0.process(node0, node1);
      assertEquals(21, Node.LOCALCOUNT_PROP);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[8];
      AmbiguateProperties ambiguateProperties0 = new AmbiguateProperties(compiler0, charArray0);
      Node node0 = Node.newString(35, "s!/ys<[Yw}W+=Sm");
      Node node1 = Node.newString("JSAbstractCompiler", 21, 42);
      node0.addChildrenToFront(node1);
      ambiguateProperties0.process(node1, node0);
      assertFalse(node1.wasEmptyNode());
  }
}
