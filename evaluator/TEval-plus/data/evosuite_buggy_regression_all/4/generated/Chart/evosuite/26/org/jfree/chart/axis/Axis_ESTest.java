/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:15:44 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.DirectColorModel;
import java.awt.image.LookupOp;
import java.awt.image.Raster;
import java.awt.image.RescaleOp;
import java.awt.image.SampleModel;
import java.awt.image.ShortLookupTable;
import java.awt.image.SinglePixelPackedSampleModel;
import java.awt.image.WritableRaster;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.JRadioButton;
import javax.swing.JTabbedPane;
import javax.swing.JTree;
import javax.swing.plaf.multi.MultiTabbedPaneUI;
import javax.swing.plaf.synth.SynthViewportUI;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.needle.ArrowNeedle;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setAxisLineVisible(true);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D1.equals(categoryAxis3D0);
      assertEquals(2.0F, categoryAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D1.isTickLabelsVisible());
      assertFalse(categoryAxis3D1.isTickMarksVisible());
      assertTrue(boolean0);
      assertTrue(categoryAxis3D1.isVisible());
      assertEquals(0.0, categoryAxis3D1.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Sn:OL/$iokGVILA*o.");
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      boolean boolean0 = periodAxis0.hasListener(defaultTableXYDataset0);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(boolean0);
      
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertTrue(categoryAxis3D0.isVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setAxisLineVisible(false);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D0.equals(categoryAxis3D1);
      assertFalse(categoryAxis3D0.isAxisLineVisible());
      assertFalse(boolean0);
      
      categoryAxis3D1.getTickLabelFont((Comparable) true);
      assertFalse(categoryAxis3D1.equals((Object)categoryAxis3D0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("LX3");
      categoryAxis3D0.setAxisLineVisible(true);
      CompassPlot compassPlot0 = new CompassPlot();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      categoryAxis3D0.setLabelFont(compassPlot0.DEFAULT_LABEL_FONT);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("LX3");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      BasicStroke basicStroke0 = (BasicStroke)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_STROKE;
      categoryAxis3D0.setAxisLineStroke(basicStroke0);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D((String) null);
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "LY:");
      cyclicNumberAxis0.getAdvanceLinePaint();
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      
      Color color0 = (Color)cyclicNumberAxis0.getLabelPaint();
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0, color0.getGreen());
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("LY:");
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      extendedCategoryAxis0.equals(defaultTableXYDataset0);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D("xzI+@N/ q^c{:62`1+0");
      categoryAxis3D1.setAxisLineVisible(true);
      CategoryAxis3D categoryAxis3D2 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D0.equals(categoryAxis3D1);
      assertEquals(0.0, categoryAxis3D1.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.equals((Object)categoryAxis3D2));
      assertTrue(categoryAxis3D1.isTickLabelsVisible());
      assertTrue(categoryAxis3D1.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis3D1.isTickMarksVisible());
      assertTrue(categoryAxis3D1.isVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      categoryAxis3D1.setAxisLinePaint(categoryAxis3D0.DEFAULT_TICK_MARK_PAINT);
      categoryAxis3D0.setTickMarkInsideLength(2.0F);
      CategoryAxis3D categoryAxis3D2 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D2.equals(categoryAxis3D0);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setAxisLineVisible(true);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      assertEquals(0.0, categoryAxis3D1.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D1.equals((Object)categoryAxis3D0));
      assertTrue(categoryAxis3D1.isTickLabelsVisible());
      assertTrue(categoryAxis3D1.isVisible());
      assertFalse(categoryAxis3D1.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D1.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabelURL("");
      CategoryAxis3D categoryAxis3D1 = (CategoryAxis3D)categoryAxis3D0.clone();
      assertTrue(categoryAxis3D1.isVisible());
      assertFalse(categoryAxis3D1.isTickMarksVisible());
      assertTrue(categoryAxis3D1.isTickLabelsVisible());
      assertNotSame(categoryAxis3D1, categoryAxis3D0);
      assertEquals(2.0F, categoryAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D1.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D1.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setAxisLineVisible(true);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      jFreeChart0.createBufferedImage(30, 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(2, ThermometerPlot.CRITICAL);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("oWTZ%");
      periodAxis0.setLabel("Pa/DVY:L%wy:qmQs");
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      periodAxis0.hasListener(defaultTableXYDataset0);
      boolean boolean0 = periodAxis0.hasListener(defaultTableXYDataset0);
      assertEquals("Pa/DVY:L%wy:qmQs", periodAxis0.getLabel());
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("oWTZ%");
      boolean boolean1 = logarithmicAxis0.getExpTickLabelsFlag();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      rectangle2D_Float0.getBounds2D();
      categoryAxis3D0.setLabel("");
      categoryAxis3D0.setLabelURL("C5lG");
      CompassPlot compassPlot0 = new CompassPlot();
      // Undeclared exception!
      try { 
        compassPlot0.setSeriesNeedle(1201);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised type.
         //
         verifyException("org.jfree.chart.plot.CompassPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "Null 'paint' argument.";
      Minute minute0 = new Minute();
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'paint' argument.", minute0, minute0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.removeAnnotations();
      minute0.previous();
      stackedXYAreaRenderer0.getShapeStroke();
      // Undeclared exception!
      try { 
        periodAxis0.setAxisLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setAxisLineVisible(true);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.renderer.xy.StackedXYBarRenderer", categoryAxis3D0.DEFAULT_TICK_LABEL_FONT, fastScatterPlot0, false);
      jFreeChart0.createBufferedImage(10, 10);
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      categoryAxis3D0.removeChangeListener(waferMapPlot0);
      categoryAxis3D0.setLabelURL("Null 'state' argument.");
      categoryAxis3D0.setTickLabelPaint(waferMapPlot0.DEFAULT_CROSSHAIR_PAINT);
      categoryAxis3D0.setLabelPaint(waferMapPlot0.DEFAULT_GRIDLINE_PAINT);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis3D0);
      BasicStroke basicStroke0 = (BasicStroke)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_STROKE;
      BasicStroke basicStroke1 = (BasicStroke)Axis.DEFAULT_TICK_MARK_STROKE;
      basicStroke1.getDashArray();
      categoryAxis3D0.setAxisLineStroke(basicStroke0);
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.05, ringPlot0.getLabelLinkMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Plot plot0 = combinedRangeCategoryPlot0.getRootPlot();
      categoryAxis3D0.removeChangeListener(plot0);
      categoryAxis3D0.setAxisLineVisible(true);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setAxisLineVisible(true);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      assertTrue(categoryAxis3D1.equals((Object)categoryAxis3D0));
      
      Color color0 = (Color)SymbolAxis.DEFAULT_GRID_BAND_PAINT;
      categoryAxis3D1.setTickMarkPaint(color0);
      boolean boolean0 = categoryAxis3D1.equals(categoryAxis3D0);
      assertFalse(categoryAxis3D1.equals((Object)categoryAxis3D0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicStroke basicStroke0 = (BasicStroke)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_STROKE;
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("umVIs*;49M9q8");
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      RingPlot ringPlot0 = new RingPlot();
      CategoryAxis3D categoryAxis3D2 = new CategoryAxis3D();
      categoryAxis3D2.setTickLabelInsets(ringPlot0.DEFAULT_INSETS);
      assertFalse(categoryAxis3D2.equals((Object)categoryAxis3D1));
      
      categoryAxis3D2.setTickLabelPaint(categoryAxis3D0.DEFAULT_AXIS_LINE_PAINT);
      assertFalse(categoryAxis3D0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setAxisLineVisible(true);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ThermometerPlot thermometerPlot1 = new ThermometerPlot();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      assertTrue(categoryAxis3D1.isVisible());
      assertEquals(0.0, categoryAxis3D1.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D1.equals((Object)categoryAxis3D0));
      assertEquals(2.0F, categoryAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis3D1.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D1.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      StyleContext styleContext0 = new StyleContext();
      simpleAttributeSet0.getAttribute(categoryAxis3D0);
      Color color0 = styleContext0.getBackground(simpleAttributeSet0);
      categoryAxis3D0.setTickLabelPaint(color0);
      assertTrue(categoryAxis3D0.isVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      Color color0 = styleContext0.getBackground(simpleAttributeSet0);
      categoryAxis3D0.setLabelPaint(color0);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis3D0);
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.2, ringPlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Stroke stroke0 = combinedDomainXYPlot0.getDomainCrosshairStroke();
      categoryAxis3D0.setTickMarkStroke(stroke0);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      styleContext0.getBackground(simpleAttributeSet0);
      categoryAxis3D0.setTickLabelPaint(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis3D0);
      categoryAxis3D0.getMaximumCategoryLabelWidthRatio();
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabel("");
      categoryAxis3D0.setAxisLineVisible(true);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      assertEquals(0.0F, categoryAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D1.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D1.isVisible());
      assertFalse(categoryAxis3D1.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis3D1.equals((Object)categoryAxis3D0));
      assertTrue(categoryAxis3D1.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      categoryAxis3D0.setTickLabelPaint(categoryAxis3D1.DEFAULT_AXIS_LINE_PAINT);
      assertFalse(categoryAxis3D1.equals((Object)categoryAxis3D0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("LoClpD`");
      // Undeclared exception!
      try { 
        logarithmicAxis0.setTickLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "x@e!A");
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      cyclicNumberAxis0.setTickLabelPaint(systemColor0);
      cyclicNumberAxis0.setVisible(false);
      cyclicNumberAxis0.getCycleBound();
      cyclicNumberAxis0.calculateLowestVisibleTickValue();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("3sULrbvP;{1U]");
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Second second0 = new Second(mockDate0, zoneInfo0);
      PeriodAxis periodAxis0 = new PeriodAxis("3'V[A(<$!", second0, second0);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(periodAxis0);
      categoryAxis3D0.notifyListeners(axisChangeEvent0);
      BasicStroke basicStroke0 = (BasicStroke)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_STROKE;
      BasicStroke basicStroke1 = new BasicStroke();
      basicStroke1.getDashArray();
      categoryAxis3D0.setAxisLineStroke(periodAxis0.DEFAULT_AXIS_LINE_STROKE);
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      SynthViewportUI synthViewportUI0 = new SynthViewportUI();
      categoryAxis3D0.setLabelAngle(0.0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.0F);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      boolean boolean0 = ValueAxis.DEFAULT_AUTO_RANGE;
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setAxisLineVisible(true);
      Font font0 = categoryAxis3D0.DEFAULT_AXIS_LABEL_FONT.deriveFont((-1994091956));
      categoryAxis3D0.setLabelFont(font0);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D0.equals(categoryAxis3D1);
      assertTrue(boolean0);
      assertTrue(categoryAxis3D1.isVisible());
      assertEquals(0.0, categoryAxis3D1.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis3D1.isTickMarksVisible());
      assertTrue(categoryAxis3D1.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("oWTZ%");
      logarithmicAxis0.setTickMarksVisible(true);
      logarithmicAxis0.setTickMarkOutsideLength(1431.3433F);
      assertEquals(1431.3433F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Sn:OL/$iokGVILA*o.");
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Sn:OL/$iokGVILA*o.");
      categoryAxis3D0.setTickLabelFont(periodAxis0.DEFAULT_TICK_LABEL_FONT);
      categoryAxis3D0.setAxisLineVisible(false);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      assertTrue(categoryAxis3D1.isAxisLineVisible());
      
      categoryAxis3D0.equals((Object) null);
      assertFalse(categoryAxis3D0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("oWTZ%");
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      periodAxis0.hasListener(defaultTableXYDataset0);
      periodAxis0.hasListener(defaultTableXYDataset0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("oWTZ%");
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("oWTZ%");
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer((Integer) null, (Integer) 500);
      waferMapRenderer0.getPlot();
      categoryAxis3D0.removeChangeListener((AxisChangeListener) null);
      categoryAxis3D0.setTickMarkStroke(logarithmicAxis0.DEFAULT_TICK_MARK_STROKE);
      BasicStroke basicStroke0 = (BasicStroke)Axis.DEFAULT_AXIS_LINE_STROKE;
      BasicStroke basicStroke1 = (BasicStroke)Axis.DEFAULT_TICK_MARK_STROKE;
      basicStroke1.getDashArray();
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      BasicStroke basicStroke0 = (BasicStroke)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_STROKE;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("umVIs*;49M9q8");
      logarithmicAxis0.setTickLabelFont(categoryAxis3D0.DEFAULT_AXIS_LABEL_FONT);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logarithmicAxis0);
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.2, ringPlot0.getMaximumLabelWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setVisible(true);
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      StyleContext styleContext0 = new StyleContext();
      Color color0 = styleContext0.getBackground(simpleAttributeSet0);
      categoryAxis3D0.setTickLabelPaint(color0);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis3D0);
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      
      DateAxis dateAxis0 = new DateAxis((String) null);
      DateTickUnit dateTickUnit0 = DateAxis.DEFAULT_DATE_TICK_UNIT;
      dateAxis0.calculateLowestVisibleTickValue(dateTickUnit0);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      BasicStroke basicStroke0 = (BasicStroke)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_STROKE;
      categoryAxis3D0.setAxisLineStroke(basicStroke0);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D("umVIs*;49M9q8");
      categoryAxis3D1.getCategoryLabelPositions();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("umVIs*;49M9q8");
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabelInsets(extendedCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      BasicStroke basicStroke0 = (BasicStroke)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_STROKE;
      categoryAxis3D0.setAxisLineStroke(basicStroke0);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D("org.jfree.chart.needle.MeterNeedle");
      categoryAxis3D0.getCategoryLabelPositions();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("<t;|n[^/[7");
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabelInsets(categoryAxis3D1.DEFAULT_TICK_LABEL_INSETS);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(categoryAxis3D1.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("XM$872seewpWR>ki");
      logarithmicAxis0.setLabelToolTip("XM$872seewpWR>ki");
      logarithmicAxis0.getExpTickLabelsFlag();
      logarithmicAxis0.makeTickLabel(0.0, false);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      BasicStroke basicStroke0 = (BasicStroke)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_STROKE;
      categoryAxis3D0.setAxisLineStroke(basicStroke0);
      categoryAxis3D0.setAxisLineVisible(false);
      basicStroke0.getDashArray();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D("umVIs*;49M9q8");
      categoryAxis3D0.equals(categoryAxis3D1);
      BasicStroke basicStroke1 = (BasicStroke)Axis.DEFAULT_AXIS_LINE_STROKE;
      BasicStroke basicStroke2 = (BasicStroke)Axis.DEFAULT_AXIS_LINE_STROKE;
      basicStroke0.getDashArray();
      categoryAxis3D1.setAxisLineStroke(categoryAxis3D0.DEFAULT_TICK_MARK_STROKE);
      RingPlot ringPlot0 = new RingPlot();
      categoryAxis3D1.setTickLabelInsets(categoryAxis3D0.DEFAULT_TICK_LABEL_INSETS);
      assertFalse(categoryAxis3D0.isAxisLineVisible());
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("x@e!A");
      logarithmicAxis0.setLog10TickLabelsFlag(true);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      StyleContext styleContext0 = new StyleContext();
      styleContext0.getBackground(simpleAttributeSet0);
      BasicStroke basicStroke0 = new BasicStroke(0.0F);
      basicStroke0.getDashArray();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D("Pa/DVY:L%wy:qmQs");
      categoryAxis3D1.setAxisLineStroke(categoryAxis3D0.DEFAULT_TICK_MARK_STROKE);
      RingPlot ringPlot0 = new RingPlot();
      categoryAxis3D1.getLabelToolTip();
      SynthViewportUI synthViewportUI0 = new SynthViewportUI();
      CategoryAxis3D categoryAxis3D2 = new CategoryAxis3D();
      categoryAxis3D2.equals(ringPlot0);
      assertFalse(categoryAxis3D2.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D2.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D2.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D2.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D2.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D2.isTickLabelsVisible());
      assertTrue(categoryAxis3D2.isVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setAxisLineVisible(true);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      int int0 = 583;
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(true);
      arrowNeedle0.getOutlinePaint();
      // Undeclared exception!
      try { 
        categoryAxis3D1.setTickMarkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("LX3");
      categoryAxis3D0.setAxisLineVisible(true);
      CompassPlot compassPlot0 = new CompassPlot();
      categoryAxis3D0.setTickMarksVisible(false);
      Rectangle rectangle0 = new Rectangle();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      categoryAxis3D0.setLabelFont(compassPlot0.DEFAULT_LABEL_FONT);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D("LX3");
      categoryAxis3D0.setMaximumCategoryLabelWidthRatio(1.0F);
      // Undeclared exception!
      try { 
        categoryAxis3D0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      categoryAxis3D1.setFixedDimension(0.2);
      categoryAxis3D1.setAxisLinePaint(categoryAxis3D0.DEFAULT_TICK_MARK_PAINT);
      CategoryAxis3D categoryAxis3D2 = new CategoryAxis3D();
      categoryAxis3D2.equals(categoryAxis3D0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.05);
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      compassPlot0.getLabelFont();
      // Undeclared exception!
      try { 
        categoryAxis3D0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.getLabelURL();
      categoryAxis0.setCategoryMargin((-1166.0064));
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(6.0, (String) null);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      BasicStroke basicStroke0 = (BasicStroke)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_STROKE;
      categoryAxis3D0.setAxisLineStroke(basicStroke0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      categoryAxis3D0.setTickLabelsVisible(false);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D((String) null);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      categoryAxis3D0.equals(thermometerPlot0);
      CategoryLabelPositions.createUpRotationLabelPositions(0.2);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      RingPlot ringPlot0 = new RingPlot();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      Color color0 = styleContext0.getBackground(simpleAttributeSet0);
      categoryAxis3D0.setTickLabelPaint(color0);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        categoryAxis3D1.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      categoryAxis3D1.setTickLabelsVisible(true);
      categoryAxis3D1.setAxisLinePaint(categoryAxis3D0.DEFAULT_TICK_MARK_PAINT);
      CategoryAxis3D categoryAxis3D2 = new CategoryAxis3D();
      categoryAxis3D2.equals(categoryAxis3D0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Stroke stroke0 = combinedDomainXYPlot0.getDomainCrosshairStroke();
      categoryAxis3D0.setTickMarkStroke(stroke0);
      NumberAxis numberAxis0 = new NumberAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("x@e!A", categoryAxis3D0.DEFAULT_TICK_LABEL_FONT, combinedDomainXYPlot1, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 10;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2.0F;
      floatArray0[3] = (float) 10;
      floatArray0[4] = 1.0F;
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      jFreeChart0.createBufferedImage(10, 1633);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D("org.jfree.chart.renderer.xy.StackedXYBarRenderer");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 0.05, (String) null);
      cyclicNumberAxis0.getAdvanceLineStroke();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis3D1);
      categoryAxis3D1.getMaximumCategoryLabelWidthRatio();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      BasicStroke basicStroke0 = (BasicStroke)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_STROKE;
      basicStroke0.getDashArray();
      categoryAxis3D0.setAxisLineStroke(basicStroke0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      SynthViewportUI synthViewportUI0 = new SynthViewportUI();
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D2 = new CategoryAxis3D((String) null);
      categoryAxis3D2.equals(categoryAxis3D0);
      CategoryLabelPositions categoryLabelPositions0 = CategoryLabelPositions.DOWN_90;
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "\\7u`=20\"iaG(~";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("\u0007u`=20\"iaG(~");
      int int0 = (-1879048189);
      // Undeclared exception!
      try { 
        subCategoryAxis0.setTickMarkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      StyleContext.getDefaultStyleContext();
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      categoryAxis3D0.getCategoryLabelPositions();
      String string0 = "";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        dateAxis0.setLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      BasicStroke basicStroke0 = (BasicStroke)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_STROKE;
      categoryAxis3D0.setAxisLineStroke(basicStroke0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      categoryAxis3D0.setCategoryMargin(10);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D((String) null);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      categoryAxis3D0.equals(thermometerPlot0);
      categoryAxis3D1.getCategoryLabelPositions();
      RingPlot ringPlot0 = new RingPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      RingPlot ringPlot1 = new RingPlot();
      categoryAxis3D1.setLabel((String) null);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Stroke stroke0 = combinedDomainXYPlot0.getDomainCrosshairStroke();
      categoryAxis3D0.setTickMarkStroke(stroke0);
      NumberAxis numberAxis0 = new NumberAxis("uii");
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("x@e!A", categoryAxis3D0.DEFAULT_TICK_LABEL_FONT, combinedDomainXYPlot1, true);
      jFreeChart0.getRenderingHints();
      SynthViewportUI synthViewportUI0 = new SynthViewportUI();
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D2 = new CategoryAxis3D("x@e!A");
      CategoryAxis3D categoryAxis3D3 = new CategoryAxis3D((String) null);
      categoryAxis3D3.equals(categoryAxis3D0);
      categoryAxis3D2.equals("uii");
      CategoryLabelPositions categoryLabelPositions0 = CategoryLabelPositions.DOWN_90;
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      categoryAxis3D0.setAxisLineVisible(true);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      categoryAxis3D1.setLabelAngle(2.0F);
      categoryAxis3D0.equals(categoryAxis3D1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      categoryAxis3D1.getCategoryLabelPositions();
      CategoryAxis3D categoryAxis3D2 = new CategoryAxis3D("A`Od\n");
      categoryAxis3D2.getMaximumCategoryLabelWidthRatio();
      Minute minute0 = new Minute();
      PeriodAxis periodAxis0 = new PeriodAxis("A`Od\n", minute0, minute0, minute0.DEFAULT_TIME_ZONE);
      // Undeclared exception!
      try { 
        periodAxis0.setFirst((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'first' argument.
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setAxisLineVisible(true);
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.r4nderer.xy.StackedXYBarRenderer");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      periodAxis0.hasListener(combinedRangeXYPlot0);
      boolean boolean0 = new Boolean(false);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart1 = new JFreeChart("org.jfree.chart.r4nderer.xy.StackedXYBarRenderer", categoryAxis3D0.DEFAULT_AXIS_LABEL_FONT, fastScatterPlot0, true);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      categoryAxis3D1.setAxisLinePaint(categoryAxis3D0.DEFAULT_TICK_MARK_PAINT);
      CategoryAxis3D categoryAxis3D2 = new CategoryAxis3D();
      categoryAxis3D2.equals(categoryAxis3D0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        categoryAxis3D0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      categoryAxis3D0.setAxisLinePaint(categoryAxis3D1.DEFAULT_AXIS_LABEL_PAINT);
      CategoryAxis3D categoryAxis3D2 = new CategoryAxis3D();
      categoryAxis3D0.equals(categoryAxis3D1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setAxisLineVisible(true);
      boolean boolean0 = ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION;
      // Undeclared exception!
      try { 
        categoryAxis3D0.setAxisLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }
}
