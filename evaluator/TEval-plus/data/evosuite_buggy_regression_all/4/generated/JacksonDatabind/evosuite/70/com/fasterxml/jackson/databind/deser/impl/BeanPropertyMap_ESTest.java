/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:45:44 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLDataException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransientException;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanPropertyMap_ESTest extends BeanPropertyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<CreatorProperty> arrayList0 = new ArrayList<CreatorProperty>();
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>(arrayList0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, false);
      SettableBeanProperty[] settableBeanPropertyArray0 = beanPropertyMap0.getPropertiesInInsertionOrder();
      assertEquals(0, settableBeanPropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayDeque0, true);
      int int0 = beanPropertyMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(false);
      assertNotSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, treeSet0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(false);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Error> class0 = Error.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, false);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 6, propertyName0, propertyMetadata0);
      beanPropertyMap0.withProperty(creatorProperty0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(set0);
      assertEquals(1, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = new PropertyName("\u0006<8y8&~6 4^5;:B", "8met^'w.P}_f");
      LongNode longNode0 = new LongNode((byte)61);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (byte)61, longNode0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);
      beanPropertyMap2.withProperty(creatorProperty0);
      BeanPropertyMap beanPropertyMap3 = new BeanPropertyMap(beanPropertyMap1, true);
      assertEquals(3, beanPropertyMap3.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = new PropertyName("\u0006<8y8&~6 4^5;:B", "8met^'w.P}_f");
      LongNode longNode0 = new LongNode((byte)24);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (byte)24, longNode0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);
      BeanPropertyMap beanPropertyMap3 = beanPropertyMap2.withProperty(creatorProperty0);
      beanPropertyMap3.withProperty(creatorProperty0);
      beanPropertyMap1.remove(creatorProperty0);
      assertEquals(4, beanPropertyMap0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      stack0.setSize(12);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, false);
      assertEquals(12, beanPropertyMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Error> class0 = Error.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, false);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-174), annotationMap0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);
      assertEquals(0, beanPropertyMap2.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Error> class0 = Error.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, false);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.assignIndexes();
      beanPropertyMap2.find(0);
      assertEquals(0, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, priorityQueue0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll((NameTransformer) null);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashSet<SettableBeanProperty> hashSet0 = new HashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(hashSet0, true);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Error> class0 = Error.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, false);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-196), (Object) null, propertyMetadata0);
      beanPropertyMap0.withProperty(creatorProperty0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer_Chained0);
      assertEquals(1, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      linkedHashSet0.add((SettableBeanProperty) null);
      NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained((NameTransformer) null, (NameTransformer) null);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer_Chained0);
      assertEquals(1, beanPropertyMap1.size());
      assertNotSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(linkedList0);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      linkedHashSet0.add((SettableBeanProperty) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Ob");
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(linkedList0);
      assertEquals(0, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Error> class0 = Error.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, false);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2928, (Object) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.replace(creatorProperty0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No entry '' found, can't replace
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Error> class0 = Error.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, false);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      beanPropertyMap1.replace(creatorProperty0);
      assertFalse(creatorProperty0.isRequired());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Error> class0 = Error.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, false);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      beanPropertyMap0.withProperty(creatorProperty0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find(3225);
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(vector0, true);
      // Undeclared exception!
      try { 
        beanPropertyMap0.find((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not pass null property name
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find("com.fasterxml.jackson.databind.deser.std.FromStringDeserializer$Std");
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Error> class0 = Error.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, false);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-177), (Object) null, propertyMetadata0);
      beanPropertyMap0.withProperty(creatorProperty0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find("");
      assertFalse(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Error> class0 = Error.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, false);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-160), (Object) null, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find("fF76p|t|(vk7#ZLf{e");
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Error> class0 = Error.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, true);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2928, (Object) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.remove(creatorProperty0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No entry '' found, can't remove
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, false);
      boolean boolean0 = beanPropertyMap0.findDeserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null, "Properties=[]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = new PropertyName("\u0006<8y8&~6 4^5;:B", "8met^'w.P}_f");
      LongNode longNode0 = new LongNode((byte)61);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (byte)61, longNode0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      beanPropertyMap1.withProperty(creatorProperty0);
      String string0 = beanPropertyMap1.toString();
      assertEquals("Properties=[\u0006<8y8&~6 4^5;:B([array type, component type: [simple type, class java.util.Locale$LanguageRange]]), \u0006<8y8&~6 4^5;:B([array type, component type: [simple type, class java.util.Locale$LanguageRange]])]", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename((SettableBeanProperty) null, (NameTransformer) null);
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Error> class0 = Error.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 889, (Object) null, propertyMetadata0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((JsonDeserializer) null).when(jsonDeserializer0).unwrappingDeserializer(any(com.fasterxml.jackson.databind.util.NameTransformer.class));
      CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedHashSet0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty1, nameTransformer0);
      assertFalse(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, true);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      SQLTransientException sQLTransientException0 = new SQLTransientException("1#A");
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLTransientException0, "1#A");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        beanPropertyMap0.wrapAndThrow(invocationTargetException0, propertyName0, "K~lbB>6-RDg(h~|p.$", defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 1#A (through reference chain: com.fasterxml.jackson.databind.PropertyName[\"K~lbB>6-RDg(h~|p.$\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.databind.ser.std.FileSerializer");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "com.fasterxml.jackson.databind.ser.std.FileSerializer", sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      MockError mockError0 = new MockError(sQLDataException0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.wrapAndThrow(mockError0, (Object) null, "qB[H2", (DeserializationContext) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.mappingException("dmr");
      try { 
        beanPropertyMap0.wrapAndThrow(jsonMappingException0, (Object) null, "dmr", (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // dmr (through reference chain: UNKNOWN[\"dmr\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = new Object();
      MockIOException mockIOException0 = new MockIOException();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      try { 
        beanPropertyMap0.wrapAndThrow(mockIOException0, object0, "' found, can't remove", defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashSet<SettableBeanProperty> hashSet0 = new HashSet<SettableBeanProperty>();
      MockIOException mockIOException0 = new MockIOException();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, hashSet0);
      try { 
        beanPropertyMap0.wrapAndThrow(mockIOException0, (Object) null, "com.fasterxml.jackson.databind.ser.std.FileSerializer", (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.wrapAndThrow((Throwable) null, (Object) null, "ssxzq33{l6;QE1zE2xp", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("h[_'(TbQ 4%\"vqL0-XX", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.wrapAndThrow(mockRuntimeException0, sQLNonTransientConnectionException0, "h[_'(TbQ 4%\"vqL0-XX", defaultDeserializationContext_Impl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      stack0.setSize(128);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<RuntimeException> class0 = RuntimeException.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, arrayType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jackson.databind.PropertyName", "com.fasterxml.jackson.databind.PropertyName");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), arrayType0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, false);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      beanPropertyMap1.remove(creatorProperty0);
      assertEquals(0, beanPropertyMap1.size());
  }
}
