/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:46:33 GMT 2023
 */

package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import java.io.PipedReader;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class POJOPropertyBuilder_ESTest extends POJOPropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("H?Wn", "H?Wn");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(propertyName0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(pipedReader0);
      // Undeclared exception!
      try { 
        objectMapper0.writeValueAsString(objectReader0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/JsonMappingException$Reference
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("H?Wn", "H?Wn");
      assertNotNull(propertyName0);
      assertTrue(propertyName0.hasNamespace());
      assertEquals("H?Wn", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("H?Wn", propertyName0.getSimpleName());
      
      POJOPropertyBuilder pOJOPropertyBuilder0 = null;
      try {
        pOJOPropertyBuilder0 = new POJOPropertyBuilder((POJOPropertyBuilder) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      assertNotNull(propertyName0);
      assertFalse(propertyName0.isEmpty());
      assertEquals("", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      
      POJOPropertyBuilder.Linked<AnnotatedConstructor> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<AnnotatedConstructor>((AnnotatedConstructor) null, (POJOPropertyBuilder.Linked<AnnotatedConstructor>) null, propertyName0, false, false, false);
      assertNotNull(pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertFalse(propertyName0.isEmpty());
      assertEquals("", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      
      POJOPropertyBuilder.MemberIterator<AnnotatedConstructor> pOJOPropertyBuilder_MemberIterator0 = new POJOPropertyBuilder.MemberIterator<AnnotatedConstructor>(pOJOPropertyBuilder_Linked0);
      assertNotNull(pOJOPropertyBuilder_MemberIterator0);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertFalse(propertyName0.isEmpty());
      assertEquals("", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(pOJOPropertyBuilder_MemberIterator0.hasNext());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      pOJOPropertyBuilder_MemberIterator0.forEachRemaining(consumer0);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertFalse(propertyName0.isEmpty());
      assertEquals("", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(pOJOPropertyBuilder_MemberIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      POJOPropertyBuilder.MemberIterator<AnnotatedConstructor> pOJOPropertyBuilder_MemberIterator0 = new POJOPropertyBuilder.MemberIterator<AnnotatedConstructor>((POJOPropertyBuilder.Linked<AnnotatedConstructor>) null);
      assertNotNull(pOJOPropertyBuilder_MemberIterator0);
      assertFalse(pOJOPropertyBuilder_MemberIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        pOJOPropertyBuilder_MemberIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$MemberIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      POJOPropertyBuilder.MemberIterator<AnnotatedMethod> pOJOPropertyBuilder_MemberIterator0 = new POJOPropertyBuilder.MemberIterator<AnnotatedMethod>((POJOPropertyBuilder.Linked<AnnotatedMethod>) null);
      assertNotNull(pOJOPropertyBuilder_MemberIterator0);
      assertFalse(pOJOPropertyBuilder_MemberIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        pOJOPropertyBuilder_MemberIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$MemberIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonProperty.Access jsonProperty_Access0 = JsonProperty.Access.READ_WRITE;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      assertNotNull(propertyName0);
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertEquals("", propertyName0.getSimpleName());
      
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked0 = null;
      try {
        pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<JsonProperty.Access>(jsonProperty_Access0, (POJOPropertyBuilder.Linked<JsonProperty.Access>) null, propertyName0, true, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not pass true for 'explName' if name is null/empty
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonProperty.Access jsonProperty_Access0 = JsonProperty.Access.READ_WRITE;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      assertNotNull(propertyName0);
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      
      PropertyName propertyName1 = propertyName0.withNamespace("BbOaRY");
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertNotNull(propertyName1);
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName1.isEmpty());
      assertFalse(propertyName1.hasSimpleName());
      assertEquals("", propertyName1.getSimpleName());
      assertTrue(propertyName1.hasNamespace());
      assertEquals("BbOaRY", propertyName1.getNamespace());
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(propertyName1, propertyName0);
      
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<JsonProperty.Access>(jsonProperty_Access0, (POJOPropertyBuilder.Linked<JsonProperty.Access>) null, propertyName1, true, true, true);
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertNotNull(pOJOPropertyBuilder_Linked0);
      assertTrue(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName1.isEmpty());
      assertFalse(propertyName1.hasSimpleName());
      assertEquals("", propertyName1.getSimpleName());
      assertTrue(propertyName1.hasNamespace());
      assertEquals("BbOaRY", propertyName1.getNamespace());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("H?Wn", "-La}=M");
      assertNotNull(propertyName0);
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("H?Wn", propertyName0.getSimpleName());
      assertEquals("-La}=M", propertyName0.getNamespace());
      
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<String>("H?Wn", (POJOPropertyBuilder.Linked<String>) null, propertyName0, true, true, false);
      assertNotNull(pOJOPropertyBuilder_Linked0);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("H?Wn", propertyName0.getSimpleName());
      assertEquals("-La}=M", propertyName0.getNamespace());
      
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.append(pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked1.equals((Object)pOJOPropertyBuilder_Linked0));
      assertNotNull(pOJOPropertyBuilder_Linked1);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked1.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("H?Wn", propertyName0.getSimpleName());
      assertEquals("-La}=M", propertyName0.getNamespace());
      assertNotSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked1);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.withoutNext();
      assertFalse(pOJOPropertyBuilder_Linked0.equals((Object)pOJOPropertyBuilder_Linked1));
      assertFalse(pOJOPropertyBuilder_Linked1.equals((Object)pOJOPropertyBuilder_Linked0));
      assertFalse(pOJOPropertyBuilder_Linked2.equals((Object)pOJOPropertyBuilder_Linked1));
      assertFalse(pOJOPropertyBuilder_Linked2.equals((Object)pOJOPropertyBuilder_Linked0));
      assertNotNull(pOJOPropertyBuilder_Linked2);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked1.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked2.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked2.isVisible);
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("H?Wn", propertyName0.getSimpleName());
      assertEquals("-La}=M", propertyName0.getNamespace());
      assertNotSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked1);
      assertNotSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked2);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked2);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      assertNotNull(propertyName0);
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertEquals("", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      
      POJOPropertyBuilder.Linked<AnnotatedConstructor> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<AnnotatedConstructor>((AnnotatedConstructor) null, (POJOPropertyBuilder.Linked<AnnotatedConstructor>) null, propertyName0, false, false, false);
      assertNotNull(pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertEquals("", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      
      POJOPropertyBuilder.Linked<AnnotatedConstructor> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withoutNext();
      assertNotNull(pOJOPropertyBuilder_Linked1);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked1.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertEquals("", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked1);
      assertSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      assertNotNull(propertyName0);
      assertFalse(propertyName0.isEmpty());
      assertEquals("", propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      
      POJOPropertyBuilder.Linked<AnnotatedConstructor> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<AnnotatedConstructor>((AnnotatedConstructor) null, (POJOPropertyBuilder.Linked<AnnotatedConstructor>) null, propertyName0, false, false, false);
      assertNotNull(pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertFalse(propertyName0.isEmpty());
      assertEquals("", propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      
      POJOPropertyBuilder.Linked<AnnotatedConstructor> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withValue((AnnotatedConstructor) null);
      assertNotNull(pOJOPropertyBuilder_Linked1);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked1.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertFalse(propertyName0.isEmpty());
      assertEquals("", propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked1);
      assertSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("H?Wn", "-La}=M");
      assertNotNull(propertyName0);
      assertEquals("-La}=M", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("H?Wn", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<String>("H?Wn", (POJOPropertyBuilder.Linked<String>) null, propertyName0, true, true, true);
      assertNotNull(pOJOPropertyBuilder_Linked0);
      assertTrue(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertEquals("-La}=M", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("H?Wn", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.append(pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked1.equals((Object)pOJOPropertyBuilder_Linked0));
      assertNotNull(pOJOPropertyBuilder_Linked1);
      assertTrue(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked1.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertEquals("-La}=M", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("H?Wn", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertNotSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked1);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.withoutIgnored();
      assertFalse(pOJOPropertyBuilder_Linked0.equals((Object)pOJOPropertyBuilder_Linked1));
      assertFalse(pOJOPropertyBuilder_Linked1.equals((Object)pOJOPropertyBuilder_Linked0));
      assertNull(pOJOPropertyBuilder_Linked2);
      assertTrue(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked1.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertEquals("-La}=M", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("H?Wn", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertNotSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked1);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("H?Wn", "-La}=M");
      assertNotNull(propertyName0);
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("H?Wn", propertyName0.getSimpleName());
      assertEquals("-La}=M", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<String>("H?Wn", (POJOPropertyBuilder.Linked<String>) null, propertyName0, true, true, false);
      assertNotNull(pOJOPropertyBuilder_Linked0);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("H?Wn", propertyName0.getSimpleName());
      assertEquals("-La}=M", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.append(pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked1.equals((Object)pOJOPropertyBuilder_Linked0));
      assertNotNull(pOJOPropertyBuilder_Linked1);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked1.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("H?Wn", propertyName0.getSimpleName());
      assertEquals("-La}=M", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertNotSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked1);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.withoutIgnored();
      assertFalse(pOJOPropertyBuilder_Linked0.equals((Object)pOJOPropertyBuilder_Linked1));
      assertFalse(pOJOPropertyBuilder_Linked1.equals((Object)pOJOPropertyBuilder_Linked0));
      assertFalse(pOJOPropertyBuilder_Linked2.equals((Object)pOJOPropertyBuilder_Linked0));
      assertNotNull(pOJOPropertyBuilder_Linked2);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked1.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked2.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked2.isVisible);
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("H?Wn", propertyName0.getSimpleName());
      assertEquals("-La}=M", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertNotSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked2);
      assertNotSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked1);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      assertSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked2);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked0);
      assertSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      assertNotNull(propertyName0);
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getNamespace());
      
      POJOPropertyBuilder.Linked<AnnotatedConstructor> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<AnnotatedConstructor>((AnnotatedConstructor) null, (POJOPropertyBuilder.Linked<AnnotatedConstructor>) null, propertyName0, false, false, false);
      assertNotNull(pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getNamespace());
      
      POJOPropertyBuilder.Linked<AnnotatedConstructor> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withoutNonVisible();
      assertNull(pOJOPropertyBuilder_Linked1);
      assertFalse(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonProperty.Access jsonProperty_Access0 = JsonProperty.Access.READ_WRITE;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      assertNotNull(propertyName0);
      assertNull(propertyName0.getNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<JsonProperty.Access>(jsonProperty_Access0, (POJOPropertyBuilder.Linked<JsonProperty.Access>) null, propertyName0, false, true, false);
      assertNotNull(pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertNull(propertyName0.getNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.append(pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked1.equals((Object)pOJOPropertyBuilder_Linked0));
      assertNotNull(pOJOPropertyBuilder_Linked1);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked1.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertNull(propertyName0.getNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertNotSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked1);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.append(pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked0.equals((Object)pOJOPropertyBuilder_Linked1));
      assertFalse(pOJOPropertyBuilder_Linked1.equals((Object)pOJOPropertyBuilder_Linked0));
      assertFalse(pOJOPropertyBuilder_Linked2.equals((Object)pOJOPropertyBuilder_Linked0));
      assertFalse(pOJOPropertyBuilder_Linked2.equals((Object)pOJOPropertyBuilder_Linked1));
      assertNotNull(pOJOPropertyBuilder_Linked2);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked1.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked2.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked2.isVisible);
      assertNull(propertyName0.getNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertNotSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked1);
      assertNotSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked2);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked2);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked0);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Boolean boolean0 = new Boolean("jM");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      PropertyName propertyName0 = new PropertyName("sAl'3/Fpblw%#>T", "sAl'3/Fpblw%#>T");
      assertNotNull(propertyName0);
      assertEquals("sAl'3/Fpblw%#>T", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("sAl'3/Fpblw%#>T", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      
      POJOPropertyBuilder.Linked<Boolean> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Boolean>(boolean0, (POJOPropertyBuilder.Linked<Boolean>) null, propertyName0, true, true, true);
      assertNotNull(pOJOPropertyBuilder_Linked0);
      assertTrue(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertEquals("sAl'3/Fpblw%#>T", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("sAl'3/Fpblw%#>T", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      
      POJOPropertyBuilder.Linked<Boolean> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.append(pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked1.equals((Object)pOJOPropertyBuilder_Linked0));
      assertNotNull(pOJOPropertyBuilder_Linked1);
      assertTrue(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked1.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertEquals("sAl'3/Fpblw%#>T", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("sAl'3/Fpblw%#>T", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertNotSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked1);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      
      POJOPropertyBuilder.Linked<Boolean> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.trimByVisibility();
      assertFalse(pOJOPropertyBuilder_Linked0.equals((Object)pOJOPropertyBuilder_Linked1));
      assertFalse(pOJOPropertyBuilder_Linked1.equals((Object)pOJOPropertyBuilder_Linked0));
      assertFalse(pOJOPropertyBuilder_Linked2.equals((Object)pOJOPropertyBuilder_Linked0));
      assertNotNull(pOJOPropertyBuilder_Linked2);
      assertTrue(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked1.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked2.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked2.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
      assertEquals("sAl'3/Fpblw%#>T", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("sAl'3/Fpblw%#>T", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertNotSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked1);
      assertNotSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked2);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      assertSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked2);
      assertSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonProperty.Access jsonProperty_Access0 = JsonProperty.Access.READ_WRITE;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      assertNotNull(propertyName0);
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<JsonProperty.Access>(jsonProperty_Access0, (POJOPropertyBuilder.Linked<JsonProperty.Access>) null, propertyName0, false, true, false);
      assertNotNull(pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      
      POJOPropertyBuilder.Linked<JsonProperty.Access> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.append(pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked1.equals((Object)pOJOPropertyBuilder_Linked0));
      assertNotNull(pOJOPropertyBuilder_Linked1);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked1.isVisible);
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertNotSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked1);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      
      String string0 = pOJOPropertyBuilder_Linked1.toString();
      assertFalse(pOJOPropertyBuilder_Linked0.equals((Object)pOJOPropertyBuilder_Linked1));
      assertFalse(pOJOPropertyBuilder_Linked1.equals((Object)pOJOPropertyBuilder_Linked0));
      assertNotNull(string0);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked1.isVisible);
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertNotSame(pOJOPropertyBuilder_Linked0, pOJOPropertyBuilder_Linked1);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
  }
}
