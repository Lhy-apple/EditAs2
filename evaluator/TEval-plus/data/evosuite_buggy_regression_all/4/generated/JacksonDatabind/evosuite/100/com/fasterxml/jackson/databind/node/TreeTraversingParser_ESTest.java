/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:48:21 GMT 2023
 */

package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TreeTraversingParser_ESTest extends TreeTraversingParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      treeTraversingParser0.setCodec(objectMapper0);
      assertFalse(treeTraversingParser0.canParseAsync());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(131.018541);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0, objectMapper0);
      Version version0 = treeTraversingParser0.version();
      assertFalse(version0.isUnknownVersion());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MissingNode missingNode0 = MissingNode.getInstance();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      try { 
        treeTraversingParser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (NOT_AVAILABLE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      try { 
        treeTraversingParser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_TRUE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      try { 
        treeTraversingParser0.readValueAs(class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `java.util.Locale$LanguageRange` out of START_ARRAY token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = TextNode.valueOf("");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      boolean boolean0 = treeTraversingParser0.hasTextCharacters();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getTextLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      JsonNode jsonNode0 = objectReader0.createObjectNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(jsonNode0, objectReader0);
      int int0 = treeTraversingParser0.getTextOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
      POJONode pOJONode0 = new POJONode(treeTraversingParser0);
      try { 
        objectMapper0.writeValueAsString(pOJONode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.lang.NullPointerException) (through reference chain: com.fasterxml.jackson.databind.node.TreeTraversingParser[\"textCharacters\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      try { 
        treeTraversingParser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (NOT_AVAILABLE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      Object object0 = treeTraversingParser0.getCurrentValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MissingNode missingNode0 = new MissingNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
      try { 
        treeTraversingParser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (NOT_AVAILABLE) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LongNode longNode0 = new LongNode(32L);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      long long0 = treeTraversingParser0.getLongValue();
      assertEquals(32L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short)2248);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      double double0 = treeTraversingParser0.getDoubleValue();
      assertEquals(2248.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      ObjectNode objectNode0 = arrayNode0.addObject();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0, objectMapper0);
      treeTraversingParser0.close();
      treeTraversingParser0.close();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      arrayNode0.addObject();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.nextToken();
      assertTrue(treeTraversingParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      ObjectNode objectNode0 = arrayNode0.addObject();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextFieldName();
      objectNode0.with((String) null);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getText();
      assertEquals(JsonToken.FIELD_NAME, treeTraversingParser0.currentToken());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0._startContainer = true;
      treeTraversingParser0.nextFieldName();
      assertTrue(treeTraversingParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextTextValue();
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getText();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      POJONode pOJONode0 = new POJONode("i{wSntsLBM?vf8rMU");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getText();
      assertEquals(12, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
      JsonParser jsonParser0 = treeTraversingParser0.skipChildren();
      assertEquals(0, jsonParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      arrayNode0.addObject();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.skipChildren();
      assertEquals(JsonToken.END_OBJECT, treeTraversingParser0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.skipChildren();
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((short) (-1));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      String string0 = treeTraversingParser0.getCurrentName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.getCurrentName();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(bigIntegerNode0);
      treeTraversingParser0.close();
      treeTraversingParser0.overrideCurrentName("auza r Gb(x~N]&");
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.overrideCurrentName("4.cvMbBMy:(8n?y!d`");
      assertFalse(treeTraversingParser0.hasTextCharacters());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BinaryNode binaryNode0 = BinaryNode.valueOf(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.getText();
      assertTrue(treeTraversingParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextNode textNode0 = TextNode.valueOf("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider");
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getText();
      assertEquals(6, treeTraversingParser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short) (-12));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.getText();
      assertTrue(treeTraversingParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getValueAsString();
      assertTrue(treeTraversingParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.getText();
      assertEquals(9, treeTraversingParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short)2248);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      JsonParser.NumberType jsonParser_NumberType0 = treeTraversingParser0.getNumberType();
      assertEquals(JsonParser.NumberType.INT, jsonParser_NumberType0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
      treeTraversingParser0.close();
      treeTraversingParser0.getEmbeddedObject();
      assertTrue(treeTraversingParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BinaryNode binaryNode0 = BinaryNode.valueOf(byteArray0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(binaryNode0);
      treeTraversingParser0.nextFieldName();
      treeTraversingParser0.getValueAsBoolean(true);
      assertTrue(treeTraversingParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      ObjectNode objectNode0 = arrayNode0.addObject();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(objectNode0, objectMapper0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RawValue rawValue0 = new RawValue("");
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ValueNode valueNode0 = jsonNodeFactory0.rawValueNode(rawValue0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(valueNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertSame(rawValue0, object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      Object object0 = treeTraversingParser0.getEmbeddedObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((short) (-1));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(numericNode0);
      treeTraversingParser0.close();
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertTrue(treeTraversingParser0.isClosed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ShortNode shortNode0 = ShortNode.valueOf((short) (-7));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
      boolean boolean0 = treeTraversingParser0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0, objectMapper0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object object0 = new Object();
      POJONode pOJONode0 = new POJONode(object0);
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
      byte[] byteArray0 = treeTraversingParser0.getBinaryValue();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      int int0 = treeTraversingParser0.readBinaryValue((OutputStream) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      TextNode textNode0 = TextNode.EMPTY_STRING_NODE;
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(textNode0);
      try { 
        treeTraversingParser0.readBinaryValue((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.close();
      try { 
        treeTraversingParser0.getShortValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(booleanNode0);
      treeTraversingParser0.nextToken();
      treeTraversingParser0.nextToken();
      try { 
        treeTraversingParser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, cannot use numeric value accessors
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }
}
