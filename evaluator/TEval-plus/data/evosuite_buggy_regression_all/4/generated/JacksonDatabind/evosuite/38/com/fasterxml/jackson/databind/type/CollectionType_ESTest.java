/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:40:29 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionType_ESTest extends CollectionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Stack> class0 = Stack.class;
      Class<Integer> class1 = Integer.TYPE;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      Class<String> class2 = String.class;
      JavaType javaType0 = collectionType0._narrow(class2);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
      Object object0 = new Object();
      CollectionType collectionType1 = collectionType0.withValueHandler(object0);
      assertFalse(collectionType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0);
      CollectionType collectionType0 = new CollectionType(referenceType0, referenceType0);
      String string0 = collectionType0.toString();
      assertEquals("[collection type; class java.lang.Integer, contains [reference type, class java.lang.Integer<java.lang.Object<[simple type, class java.lang.Object]>]]", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
      CollectionType collectionType1 = collectionType0.withContentValueHandler((Object) null);
      assertFalse(collectionType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
      CollectionType collectionType1 = collectionType0.withTypeHandler("com.fasterxml.jackson.databind.introspect.ObjectIdInfo");
      assertFalse(collectionType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(collectionType0);
      assertFalse(collectionType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      JavaType javaType1 = collectionType1.withContentType(javaType0);
      assertNotSame(javaType1, collectionType1);
      assertTrue(javaType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionType collectionType0 = new CollectionType(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType javaType0 = collectionType0.withContentType(resolvedRecursiveType0);
      assertSame(javaType0, collectionType0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      CollectionType collectionType2 = collectionType1.withStaticTyping();
      assertTrue(collectionType2.useStaticType());
      assertFalse(collectionType0.useStaticType());
  }
}
