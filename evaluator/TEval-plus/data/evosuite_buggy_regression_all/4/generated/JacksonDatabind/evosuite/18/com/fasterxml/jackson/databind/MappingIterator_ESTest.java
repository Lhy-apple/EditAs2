/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:39:49 GMT 2023
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MappingIterator_ESTest extends MappingIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(bigIntegerNode0);
      Class<Integer> class0 = Integer.class;
      MappingIterator<Integer> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
      Integer integer0 = mappingIterator0.next();
      assertNotNull(integer0);
      
      boolean boolean0 = mappingIterator0.hasNext();
      assertFalse(boolean0);
      assertFalse(jsonParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MappingIterator<MissingNode> mappingIterator0 = MappingIterator.emptyIterator();
      // Undeclared exception!
      try { 
        mappingIterator0._handleIOException((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeFactory.unknownType();
      MissingNode missingNode0 = MissingNode.getInstance();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MappingIterator<RoundingMode> mappingIterator0 = MappingIterator.emptyIterator();
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(missingNode0);
      MappingIterator<Boolean> mappingIterator1 = new MappingIterator<Boolean>(javaType0, jsonParser0, defaultDeserializationContext_Impl0, (JsonDeserializer<?>) null, true, mappingIterator0);
      // Undeclared exception!
      try { 
        mappingIterator1.readAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MappingIterator<MissingNode> mappingIterator0 = MappingIterator.emptyIterator();
      JsonParser jsonParser0 = mappingIterator0.getParser();
      assertNull(jsonParser0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MappingIterator<MissingNode> mappingIterator0 = MappingIterator.emptyIterator();
      // Undeclared exception!
      try { 
        mappingIterator0.getCurrentLocation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MappingIterator<MissingNode> mappingIterator0 = MappingIterator.emptyIterator();
      // Undeclared exception!
      try { 
        mappingIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = objectNode0.putArray(";v6R");
      JsonParser jsonParser0 = arrayNode0.traverse();
      MappingIterator<ObjectReader> mappingIterator0 = objectMapper0.readValues(jsonParser0, (ResolvedType) javaType0);
      FormatSchema formatSchema0 = mappingIterator0.getParserSchema();
      assertNull(formatSchema0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MappingIterator<MissingNode> mappingIterator0 = MappingIterator.emptyIterator();
      // Undeclared exception!
      try { 
        mappingIterator0._handleMappingException((JsonMappingException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MappingIterator<LinkedList<String>> mappingIterator0 = new MappingIterator<LinkedList<String>>(javaType0, (JsonParser) null, defaultDeserializationContext_Impl0, (JsonDeserializer<?>) null, true, (Object) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MappingIterator<MissingNode> mappingIterator0 = MappingIterator.emptyIterator();
      mappingIterator0.close();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeFactory.unknownType();
      MissingNode missingNode0 = MissingNode.getInstance();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MappingIterator<RoundingMode> mappingIterator0 = MappingIterator.emptyIterator();
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(missingNode0);
      MappingIterator<Boolean> mappingIterator1 = new MappingIterator<Boolean>(javaType0, jsonParser0, defaultDeserializationContext_Impl0, (JsonDeserializer<?>) null, true, mappingIterator0);
      mappingIterator1.close();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(bigIntegerNode0);
      Class<Integer> class0 = Integer.class;
      MappingIterator<Integer> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
      mappingIterator0.hasNextValue();
      boolean boolean0 = mappingIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      MissingNode missingNode0 = MissingNode.getInstance();
      MappingIterator<RoundingMode> mappingIterator0 = MappingIterator.emptyIterator();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(missingNode0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(mappingIterator0);
      MappingIterator<Object> mappingIterator1 = objectReader0._bindAndReadValues(jsonParser0, (Object) objectMapper0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      mappingIterator1.readAll((List<Object>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(jsonParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MappingIterator<MissingNode> mappingIterator0 = MappingIterator.emptyIterator();
      // Undeclared exception!
      try { 
        mappingIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MappingIterator<RoundingMode> mappingIterator0 = MappingIterator.emptyIterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = mappingIterator0.readAll((List<Object>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeFactory.unknownType();
      MissingNode missingNode0 = MissingNode.getInstance();
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(missingNode0);
      MappingIterator<MissingNode> mappingIterator0 = objectMapper0.readValues(jsonParser0, javaType0);
      Vector<Object> vector0 = new Vector<Object>();
      try { 
        mappingIterator0.readAll((List<Object>) vector0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not deserialize instance of java.lang.Object out of NOT_AVAILABLE token
         //  at [Source: java.lang.String@0000000201; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }
}
