/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:41:13 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.ArrayDeque;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReferenceType_ESTest extends ReferenceType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, javaType0, object0, javaType0, true);
      Class<Integer> class1 = Integer.class;
      MapType mapType0 = MapType.construct(class1, referenceType0, referenceType0);
      StringBuilder stringBuilder0 = new StringBuilder();
      mapType0.getGenericSignature(stringBuilder0);
      assertEquals("Ljava/lang/Integer<Ljava/lang/Object<Ljava/lang/Object;;Ljava/lang/Object<Ljava/lang/Object;;>;", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, javaType0, object0, javaType0, true);
      JavaType javaType1 = referenceType0.getReferencedType();
      assertFalse(javaType1.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayDeque> class1 = ArrayDeque.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) collectionType0, (Object) "^~'oJJX*'A!g8vvTO8P", (Object) typeFactory0);
      boolean boolean0 = referenceType0.isReferenceType();
      assertTrue(boolean0);
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = new SimpleType(class1);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, "Can not update Map.Entry values", "Can not update Map.Entry values", false);
      String string0 = referenceType0.getTypeName();
      assertEquals("[reference type, class java.lang.String<java.lang.Integer<[simple type, class java.lang.Integer]>]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) class0);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      referenceType0.getErasedSignature(stringBuilder0);
      assertEquals("Ljava/lang/Object;", stringBuilder0.toString());
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayDeque> class1 = ArrayDeque.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) collectionType0, (Object) "^~'oJJX*'A!g8vvTO8P", (Object) typeFactory0);
      referenceType0.getParameterSource();
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = new SimpleType(class1);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, "Can not update Map.Entry values", "Can not update Map.Entry values", false);
      JavaType javaType0 = referenceType0._narrow(class1);
      assertFalse(javaType0.equals((Object)referenceType0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, javaType0, object0, javaType0, true);
      int int0 = referenceType0.containedTypeCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = new SimpleType(class1);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, "Can not update Map.Entry values", "Can not update Map.Entry values", false);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(referenceType0);
      assertNotSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, javaType0, object0, javaType0, true);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(javaType0);
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, javaType0, object0, javaType0, true);
      Integer integer0 = new Integer((-44));
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(integer0);
      assertNotSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) null);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler((Object) null);
      assertSame(referenceType1, referenceType0);
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, javaType0, object0, javaType0, true);
      ReferenceType referenceType1 = referenceType0.withValueHandler(class0);
      assertNotSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) collectionType0, (Object) collectionType0, (Object) class0);
      ReferenceType referenceType1 = referenceType0.withValueHandler((Object) null);
      assertFalse(referenceType1.useStaticType());
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, javaType0, object0, javaType0, true);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(class0);
      assertNotSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, (Object) null, simpleType0, true);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = new SimpleType(class1);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, "Can not update Map.Entry values", "Can not update Map.Entry values", false);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      assertTrue(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, javaType0, object0, javaType0, true);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, javaType0, object0, javaType0, true);
      JavaType javaType1 = referenceType0.containedType(2486);
      assertNull(javaType1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) "", (Object) "T");
      JavaType javaType0 = referenceType0.containedType(0);
      assertNotNull(javaType0);
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) class0);
      String string0 = referenceType0.containedTypeName((-2631));
      assertFalse(referenceType0.useStaticType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) class0, (Object) class0);
      String string0 = referenceType0.containedTypeName(0);
      assertEquals("T", string0);
      assertNotNull(string0);
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, javaType0, object0, javaType0, true);
      boolean boolean0 = referenceType0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, javaType0, object0, javaType0, true);
      boolean boolean0 = referenceType0.equals(referenceType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      MapLikeType mapLikeType0 = new MapLikeType(class0, simpleType0, simpleType0, class0, class0, true);
      Object object0 = new Object();
      ArrayType arrayType0 = ArrayType.construct(mapLikeType0, object0, (Object) null);
      Integer integer0 = new Integer(1980);
      ReferenceType referenceType0 = new ReferenceType(class0, arrayType0, integer0, object0, false);
      boolean boolean0 = referenceType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = new SimpleType(class1);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, "Can not update Map.Entry values", "Can not update Map.Entry values", false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class2 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class2, class2);
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) mapLikeType0, (Object) "^~'oJJX*'A!g8vvTO8P");
      boolean boolean0 = referenceType1.equals(referenceType0);
      assertTrue(boolean0);
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = new SimpleType(class1);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, "Can not update Map.Entry values", "Can not update Map.Entry values", false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class2 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class2, class2);
      ReferenceType referenceType1 = new ReferenceType(class2, mapLikeType0, class1, "@u.w->", false);
      boolean boolean0 = referenceType1.equals(referenceType0);
      assertFalse(boolean0);
  }
}
