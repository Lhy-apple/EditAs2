/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:40:31 GMT 2023
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.SimpleTimeZone;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenBuffer_ESTest extends TokenBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0._tokenTypes = 415L;
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      Integer integer0 = new Integer(16);
      tokenBuffer_Segment0.append(41, jsonToken0, (Object) tokenBuffer0, (Object) integer0);
      tokenBuffer0._appendRaw(16, tokenBuffer_Segment0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.append(16, jsonToken0);
      assertNotNull(tokenBuffer_Segment2);
      
      tokenBuffer0._appendRaw(14, jsonToken0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      tokenBuffer_Segment0.append(538, jsonToken0, (Object) null, (Object) jsonToken0, (Object) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CUSTOM;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndObject();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer_Segment0.append(16, jsonToken0, (Object) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.close();
      tokenBuffer_Parser0.getText();
      assertTrue(tokenBuffer_Parser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Long long0 = new Long((-264L));
      tokenBuffer0._append(jsonToken0, long0);
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JsonParser jsonParser0 = null;
      TokenBuffer tokenBuffer0 = null;
      try {
        tokenBuffer0 = new TokenBuffer((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      boolean boolean0 = true;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
      ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "Internal error: entry should be a Number, but is of type ");
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, true);
      tokenBuffer0.writeObject("Internal error: entry should be a Number, but is of type ");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4931), "Internal error: entry should be a Number, but is of type ");
      objectMapper2.setTimeZone(simpleTimeZone0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      objectMapper2.reader(jsonNodeFactory0);
      tokenBuffer0.writeNumber((-1146.728F));
      tokenBuffer0.version();
      byte[] byteArray0 = new byte[0];
      int int0 = 0;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawUTF8String(byteArray0, 3, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      // Undeclared exception!
      try { 
        tokenBuffer0._reportUnsupportedOperation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeStringField("V]QGGZcl~v(2r(|", "");
      tokenBuffer0.writeNumberField("wz$$XK7", Float.NaN);
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertFalse(tokenBuffer_Segment0.hasIds());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeObjectField("", "");
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer0._appendRaw(16, tokenBuffer_Segment0);
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-54);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawUTF8String(byteArray0, (-939), 2950);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNumberField((String) null, 0.0);
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(JsonToken.FIELD_NAME, jsonToken0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer0._appendRaw(16, tokenBuffer_Segment0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      String string0 = tokenBuffer0.toString();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals("[TokenBuffer: ]", string0);
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.getTextCharacters();
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer_Segment0.next();
      tokenBuffer_Segment0._next = null;
      tokenBuffer0._appendRaw(16, tokenBuffer_Segment0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      int int0 = tokenBuffer0.getFeatureMask();
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.setCodec((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      boolean boolean0 = false;
      String string0 = "";
      char char0 = 'c';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "US-ASCII", true, 'c', (-2378));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 8)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.negate();
      tokenBuffer0.writeNumber(bigInteger0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer1, true);
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer1.serialize(tokenBuffer2);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      try { 
        tokenBuffer_Parser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer_Segment0.hasIds();
      Double double0 = new Double(3588);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3588, jsonToken0, (Object) double0);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      Byte byte0 = new Byte((byte) (-87));
      tokenBuffer_Segment1.appendRaw(2988, 2988, (Object) jsonTypeInfo_Id0, (Object) jsonToken0, (Object) byte0);
      tokenBuffer_Segment1.hasIds();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeEndObject();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(117, jsonToken0, (Object) null, (Object) null, (Object) null);
      tokenBuffer_Segment0._next = tokenBuffer_Segment1;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getEmbeddedObject();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      tokenBuffer_Parser0.close();
      assertTrue(tokenBuffer_Parser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.writeNumber((short)423);
      SerializedString serializedString0 = new SerializedString("");
      tokenBuffer0.writeObject(serializedString0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.close();
      tokenBuffer0.writeEndObject();
      assertTrue(tokenBuffer0.isClosed());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeBoolean(true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer0.writeEndArray();
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      JsonToken jsonToken1 = JsonToken.END_OBJECT;
      Float float0 = new Float((-1558.9567F));
      tokenBuffer_Segment0.append(1, jsonToken1, (Object) jsonToken0, (Object) float0);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
      tokenBuffer_Segment0.append((-3157), jsonToken0);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.close();
      tokenBuffer0.writeEndObject();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.writeStartObject();
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer0.writeNumberField("com.fasterxml.jackson.annotation.ObjectIdGenerators$Base", 0L);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getValueAsString();
      tokenBuffer_Parser0.close();
      assertTrue(tokenBuffer_Parser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper3 = objectMapper2.addHandler(deserializationProblemHandler0);
      ObjectMapper objectMapper4 = objectMapper3.setInjectableValues((InjectableValues) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      objectMapper1.isEnabled(deserializationFeature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper4);
      tokenBuffer0.flush();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer_Segment0.next();
      tokenBuffer0._last = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeNumber(69L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      int int0 = (-3157);
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer_Parser0.getObjectId();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.appendRaw((-3157), (-3157), (Object) null, (Object) tokenBuffer_Parser0, (Object) jsonTypeInfo_Id0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3157
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      Integer integer0 = new Integer((-758));
      SerializedString serializedString0 = new SerializedString("Unrecognized value type for VALUE_NUMBER_FLOAT: ");
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0._next;
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment0._next;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, false);
      tokenBuffer_Parser0.hasTextCharacters();
      PropertyNamingStrategy.PascalCaseStrategy propertyNamingStrategy_PascalCaseStrategy0 = new PropertyNamingStrategy.PascalCaseStrategy();
      objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_PascalCaseStrategy0);
      // Undeclared exception!
      try { 
        tokenBuffer0._reportUnsupportedOperation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper2.reader(class0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      boolean boolean0 = tokenBuffer0.canWriteObjectId();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = (PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy)PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES;
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      ArrayList<Module> arrayList0 = new ArrayList<Module>();
      PriorityQueue<Module> priorityQueue0 = new PriorityQueue<Module>(arrayList0);
      ObjectMapper objectMapper3 = objectMapper2.registerModules((Iterable<Module>) priorityQueue0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, false);
      tokenBuffer0.writeStartArray();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.firstToken();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getTextCharacters();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNumber(bigDecimal0);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNumberField("", 40);
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(JsonToken.FIELD_NAME, jsonToken0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      tokenBuffer0.writeNumber(bigDecimal0);
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer tokenBuffer3 = tokenBuffer0.append(tokenBuffer2);
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer3.firstToken());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      PropertyNamingStrategy.PascalCaseStrategy propertyNamingStrategy_PascalCaseStrategy0 = new PropertyNamingStrategy.PascalCaseStrategy();
      ObjectMapper objectMapper3 = objectMapper2.setPropertyNamingStrategy(propertyNamingStrategy_PascalCaseStrategy0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      int int0 = 3;
      tokenBuffer0.toString();
      BigDecimal bigDecimal0 = new BigDecimal(3);
      tokenBuffer0.writeNumber(bigDecimal0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, false);
      tokenBuffer_Parser0.isClosed();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, false);
      Class<BigDecimal> class0 = BigDecimal.class;
      try { 
        tokenBuffer_Parser1.readValueAs(class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      mapperFeatureArray0[0] = mapperFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeEndArray();
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer0.asParser((JsonParser) tokenBuffer_Parser0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      boolean boolean0 = true;
      boolean boolean1 = true;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.nextToken();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer1._generatorFeatures = 5;
      try { 
        tokenBuffer_Parser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      tokenBuffer0.enable(jsonGenerator_Feature0);
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.getCodec();
      try { 
        tokenBuffer_Parser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      Short short0 = new Short((short)1745);
      tokenBuffer_Segment0.appendRaw(1851, 1851, (Object) short0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.close();
      assertTrue(tokenBuffer_Parser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectCodec objectCodec0 = null;
      Double double0 = new Double(1.0);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeString(charArray0, (-4316), 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectReader objectReader0 = objectMapper0.reader(javaType0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.WRAP_EXCEPTIONS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature1, deserializationFeatureArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader2, true);
      String string0 = tokenBuffer0.toString();
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals("[TokenBuffer: ]", string0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer1.writeNumber(bigDecimal0);
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      String string0 = tokenBuffer2.toString();
      assertEquals("[TokenBuffer: VALUE_NUMBER_FLOAT]", string0);
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer2.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectCodec objectCodec0 = null;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.getObjectId();
      tokenBuffer_Parser0.getText();
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.serialize((JsonGenerator) null);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)6;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeUTF8String(byteArray0, 67, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.overrideCurrentName("Internal error: entry shoul@ be a Number, but Es of type ");
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NAME;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(306, jsonToken0, (Object) jsonToken0, (Object) jsonTypeInfo_Id0, (Object) null);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken0, (Object) tokenBuffer_Segment0, (Object) null);
      assertNotNull(tokenBuffer_Segment2);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[9];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      serializationFeatureArray0[7] = serializationFeature0;
      serializationFeatureArray0[8] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(treeMap0);
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper3, true, true);
      ObjectReader objectReader0 = objectMapper1.reader((JavaType) null);
      tokenBuffer_Parser0.setCodec(objectReader0);
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonGenerator jsonGenerator0 = tokenBuffer0.useDefaultPrettyPrinter();
      assertEquals(79, jsonGenerator0.getFeatureMask());
      assertTrue(jsonGenerator0.canWriteObjectId());
      assertTrue(jsonGenerator0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeTypeId("qIGJP7?2zmHq");
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(2593, jsonToken0);
      assertNotNull(tokenBuffer_Segment1);
      
      boolean boolean0 = tokenBuffer_Parser0.canReadTypeId();
      assertTrue(boolean0);
      
      SerializedString serializedString0 = new SerializedString("K'J)O!oBE,6t}0`;CU");
      tokenBuffer_Parser0.getEmbeddedObject();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
      SerializedString serializedString1 = new SerializedString(" parameters, was given ");
      SerializedString serializedString2 = new SerializedString("qIGJP7?2zmHq");
      tokenBuffer0.writeString((SerializableString) serializedString1);
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      tokenBuffer_Segment0._nativeIds = treeMap0;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.getObjectId();
      tokenBuffer_Parser0.getText();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.canWriteTypeId();
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      DoubleNode doubleNode0 = DoubleNode.valueOf(833.35112);
      BigDecimal bigDecimal0 = doubleNode0.decimalValue();
      tokenBuffer_Segment0.appendRaw(77, (-1315), (Object) bigDecimal0);
      BigDecimal bigDecimal1 = new BigDecimal((double) 77);
      bigDecimal0.remainder(bigDecimal1);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getText();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.canWriteTypeId();
      tokenBuffer_Parser0.getValueAsInt(16);
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw(charArray0, (-2380), 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      SimpleModule simpleModule0 = new SimpleModule("<?");
      tokenBuffer_Segment0.append(808, jsonToken0, (Object) simpleModule0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      SerializedString serializedString0 = new SerializedString("<?");
      SerializedString serializedString1 = new SerializedString("com.fasterxml.jackson.databind.SerializerProvider");
      tokenBuffer0.writeString((SerializableString) serializedString0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_GETTERS;
      mapperFeatureArray0[1] = mapperFeature1;
      ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
      objectMapper1.setSerializerProvider((DefaultSerializerProvider) null);
      AnnotationIntrospector.nopInstance();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertTrue(boolean0);
      
      SerializedString serializedString0 = new SerializedString("JSON");
      tokenBuffer0.writeString((SerializableString) serializedString0);
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      int int0 = tokenBuffer_Segment0.rawType(220);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.canWriteTypeId();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      // Undeclared exception!
      try { 
        tokenBuffer0.deserialize(readerBasedJsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[9];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON");
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      serializationFeatureArray0[7] = serializationFeature0;
      serializationFeatureArray0[8] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(treeMap0);
      objectMapper1.setInjectableValues(injectableValues_Std0);
      ObjectReader objectReader0 = objectMapper1.reader((JavaType) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonGenerator jsonGenerator0 = tokenBuffer0.useDefaultPrettyPrinter();
      assertEquals(79, jsonGenerator0.getFeatureMask());
      assertTrue(jsonGenerator0.canWriteObjectId());
      assertTrue(jsonGenerator0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer_Segment0.append((-3157), jsonToken0);
      tokenBuffer_Parser0.nextLongValue(1371L);
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (START_ARRAY) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      assertFalse(jsonParser0.canReadObjectId());
      
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      mapperFeatureArray0[0] = mapperFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      tokenBuffer0.writeEndArray();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      tokenBuffer_Segment0.append((-6), jsonToken0);
      tokenBuffer_Parser1.canReadTypeId();
      SerializedString serializedString0 = new SerializedString("");
      tokenBuffer_Segment0.append(16, jsonToken0, (Object) tokenBuffer0, (Object) objectMapper1, (Object) serializedString0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      Short short0 = new Short((short)59);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      tokenBuffer0.writeTree(valueNode0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(tokenBuffer_Parser0, tokenBuffer_Parser0);
      JsonLocation jsonLocation0 = jsonParserSequence0.getCurrentLocation();
      tokenBuffer_Parser0.setLocation(jsonLocation0);
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer_Segment0.append((-3157), jsonToken0);
      try { 
        tokenBuffer_Parser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      ObjectReader objectReader1 = objectReader0.withValueToUpdate((Object) null);
      ObjectReader[] objectReaderArray0 = new ObjectReader[3];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader1;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectReader objectReader2 = objectMapper0.reader(jsonNodeFactory0);
      objectReaderArray0[2] = objectReader2;
      ObjectReader objectReader3 = objectReader1.withFormatDetection(objectReaderArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader3, true);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[9];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON");
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      serializationFeatureArray0[7] = serializationFeature0;
      serializationFeatureArray0[8] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(treeMap0);
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      objectMapper2.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      ObjectReader objectReader0 = objectMapper1.reader((JavaType) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.useDefaultPrettyPrinter();
      int int0 = tokenBuffer_Segment0.rawType((-1));
      assertEquals(0, int0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      tokenBuffer1._append(jsonToken0);
      tokenBuffer0.getOutputContext();
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(0, jsonToken0);
      assertNull(tokenBuffer_Segment1);
      
      tokenBuffer0._appendRaw(0, jsonToken0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0.writeObjectId((Object) null);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.close();
      assertTrue(tokenBuffer_Parser0.isClosed());
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[7];
      MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_CREATORS;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.USE_GETTERS_AS_SETTERS;
      mapperFeatureArray0[4] = mapperFeature4;
      MapperFeature mapperFeature5 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      mapperFeatureArray0[5] = mapperFeature5;
      MapperFeature mapperFeature6 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      mapperFeatureArray0[6] = mapperFeature6;
      ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
      ObjectReader objectReader0 = objectMapper1.reader((ContextAttributes) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      jsonGeneratorDelegate0.getSchema();
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      tokenBuffer0.writeNumber(83L);
      objectReader1.isEnabled(jsonParser_Feature0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectReader1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      tokenBuffer1.isEnabled(jsonGenerator_Feature0);
      SerializedString serializedString0 = new SerializedString("Internal error: entry should be a Number, but is of type ");
      tokenBuffer0.writeString((SerializableString) serializedString0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer1._first;
      tokenBuffer_Segment0.appendRaw(12, (-71), (Object) mapperFeature4, (Object) jsonGeneratorDelegate0, (Object) mapperFeature1);
      assertTrue(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectReader1, false, false);
      tokenBuffer_Parser0.getParsingContext();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      tokenBuffer_Segment0.append(3, jsonToken0);
      tokenBuffer_Segment0._next = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.setFeatureMask(3);
      tokenBuffer_Parser0.getInputSource();
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(3211.5620444694, mathContext0);
      tokenBuffer_Segment0.appendRaw(3, 1541, (Object) tokenBuffer_Parser0, (Object) null, (Object) bigDecimal0);
      tokenBuffer_Parser0.getEmbeddedObject();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      tokenBuffer_Parser0.close();
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw(')');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.writeNumberField("com.fasterxml.jackson.core.base.GeneratorBase", (-2991.389F));
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      tokenBuffer0.disable(jsonGenerator_Feature0);
      assertEquals(77, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0, deserializationFeatureArray0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper2, true, false);
      tokenBuffer_Parser0.getTextOffset();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2, true);
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue(charArray0, 16, 6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getEmbeddedObject();
      tokenBuffer_Parser0.getEmbeddedObject();
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      tokenBuffer_Segment0._nativeIds = treeMap0;
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = false;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeEndArray();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      tokenBuffer_Segment0.append(2593, jsonToken0);
      tokenBuffer_Parser0.canReadTypeId();
      SerializedString serializedString0 = new SerializedString("K'J)O!oBE,6t}0`;CU");
      tokenBuffer_Parser0.getEmbeddedObject();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "JSON");
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[9];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON");
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      serializationFeatureArray0[7] = serializationFeature0;
      serializationFeatureArray0[8] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(treeMap0);
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      objectMapper2.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      ObjectReader objectReader0 = objectMapper1.reader((JavaType) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      boolean boolean0 = tokenBuffer0.isClosed();
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(boolean0);
      assertTrue(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeNumber(bigInteger1);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      tokenBuffer0.writeNumber(bigDecimal0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer0.writeString((String) null);
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("", (-1345), (-1345));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      Base64Variant base64Variant0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)125;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeBinary((Base64Variant) null, byteArray0, (int) (byte) (-1), (-2894));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_GETTERS;
      mapperFeatureArray0[1] = mapperFeature1;
      ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
      objectMapper1.setSerializerProvider((DefaultSerializerProvider) null);
      AnnotationIntrospector.nopInstance();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(boolean0);
      assertTrue(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.firstToken();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Double double0 = new Double(9.223372036854776E18);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(1745, 1745, (Object) double0);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(348, jsonToken0, (Object) jsonTypeInfo_Id0);
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment2._next;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeEndObject();
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer_Segment0.hasIds();
      Double double0 = new Double(16);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) double0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, false, false);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      Byte byte0 = new Byte((byte) (-87));
      tokenBuffer_Parser0.nextToken();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertEquals(79, tokenBuffer1.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      
      Double double0 = new Double(3588);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.negate();
      tokenBuffer0.writeNumber(bigInteger0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DqZ/j.o;*87");
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeNumber("Unrecognized value type for VALUE_NUMBER_FLOAT: ");
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      int int0 = 3126;
      tokenBuffer_Segment0.append((-6), jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, true, true);
      tokenBuffer_Parser0.canReadTypeId();
      SerializedString serializedString0 = new SerializedString(") not numeric, can not use numeric value accessors");
      JsonToken jsonToken1 = JsonToken.VALUE_NUMBER_FLOAT;
      Object object0 = tokenBuffer0._objectId;
      tokenBuffer_Segment0.append(3126, jsonToken1, (Object) null, (Object) null, (Object) tokenBuffer_Segment0);
      tokenBuffer_Parser0.peekNextToken();
      tokenBuffer_Parser0.getTextCharacters();
      try { 
        tokenBuffer_Parser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      boolean boolean0 = true;
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      // Undeclared exception!
      try { 
        tokenBuffer_Segment1.append((-2042), jsonToken0, (Object) null, (Object) ".4OW>>TLcgp`<Vp", (Object) tokenBuffer_Segment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      Long long0 = new Long(8);
      tokenBuffer_Segment0.append(8, jsonToken0, (Object) null, (Object) null, (Object) long0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.close();
      assertTrue(tokenBuffer_Parser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      tokenBuffer_Segment0.append(0, jsonToken0);
      tokenBuffer0._appendRaw(0, jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.nextLongValue((-926L));
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (START_OBJECT) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.disable(jsonParser_Feature0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      mapperFeatureArray0[0] = mapperFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser2);
      tokenBuffer0.writeEndArray();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append((-6), jsonToken0);
      assertNull(tokenBuffer_Segment1);
      
      boolean boolean0 = tokenBuffer_Parser2.canReadTypeId();
      assertFalse(boolean0);
      
      SerializedString serializedString0 = new SerializedString("");
      tokenBuffer0.firstToken();
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      tokenBuffer_Parser1.version();
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser1.peekNextToken());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeNumber(bigInteger0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=m");
      tokenBuffer1.writeNumber(bigDecimal0);
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer1.firstToken());
      
      String string0 = tokenBuffer2.toString();
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals("[TokenBuffer: VALUE_NUMBER_INT, VALUE_NUMBER_FLOAT]", string0);
      assertTrue(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      assertFalse(jsonParser0.canReadObjectId());
      assertTrue(jsonParser0.canReadTypeId());
      
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      mapperFeatureArray0[0] = mapperFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      tokenBuffer0.writeEndArray();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      tokenBuffer_Segment0.append((-6), jsonToken0);
      tokenBuffer_Parser1.canReadTypeId();
      SerializedString serializedString0 = new SerializedString("");
      tokenBuffer_Segment0.append(16, jsonToken0, (Object) tokenBuffer0, (Object) objectMapper1, (Object) serializedString0);
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: END_ARRAY]", string0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      dupDetector0.child();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer_Parser0.nextLongValue(16);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[8];
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.DEFAULT_VIEW_INCLUSION;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.AUTO_DETECT_FIELDS;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.AUTO_DETECT_FIELDS;
      mapperFeatureArray0[4] = mapperFeature4;
      MapperFeature mapperFeature5 = MapperFeature.AUTO_DETECT_GETTERS;
      mapperFeatureArray0[5] = mapperFeature5;
      MapperFeature mapperFeature6 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      mapperFeatureArray0[6] = mapperFeature6;
      MapperFeature mapperFeature7 = MapperFeature.USE_GETTERS_AS_SETTERS;
      mapperFeatureArray0[7] = mapperFeature7;
      ObjectMapper objectMapper2 = objectMapper1.enable(mapperFeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("Internal error: should never end up through this code path", 560, 560);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.serialize((JsonGenerator) null);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      int int0 = tokenBuffer_Parser1.getTextLength();
      assertEquals(0, int0);
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.nextLongValue(1371L);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      BigInteger bigInteger0 = BigInteger.TEN;
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer1.writeNumber(bigInteger0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "DqZ/j.o;*87";
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRawValue(", setter(s): ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      assertTrue(jsonParser0.canReadTypeId());
      
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      mapperFeatureArray0[0] = mapperFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      tokenBuffer0.writeEndArray();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      tokenBuffer_Segment0.append((-6), jsonToken0);
      tokenBuffer_Parser1.canReadTypeId();
      SerializedString serializedString0 = new SerializedString("");
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: END_ARRAY]", string0);
      
      tokenBuffer0.canWriteBinaryNatively();
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser1.peekNextToken());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.setFeatureMask(16);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonToken jsonToken1 = JsonToken.END_OBJECT;
      Long long0 = new Long((-2504L));
      tokenBuffer_Segment0.append(0, jsonToken1, (Object) jsonToken1, (Object) tokenBuffer0, (Object) long0);
      tokenBuffer_Segment0.append(0, jsonToken0);
      tokenBuffer0._appendRaw(0, jsonToken0);
      SerializedString serializedString0 = new SerializedString("");
      JsonToken jsonToken2 = JsonToken.VALUE_NULL;
      Long long1 = new Long((-569L));
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer_Segment0.append(0, jsonToken2, (Object) long1, (Object) bigInteger0, (Object) long1);
      tokenBuffer0.toString();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      PropertyNamingStrategy.PascalCaseStrategy propertyNamingStrategy_PascalCaseStrategy0 = new PropertyNamingStrategy.PascalCaseStrategy();
      BigDecimal bigDecimal0 = new BigDecimal(3);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, false);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.getTextCharacters();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, true);
      tokenBuffer0.writeString((SerializableString) null);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "mm:'7@Z|f-");
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper3, true, true);
      tokenBuffer_Parser0.nextToken();
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Byte byte0 = new Byte((byte) (-87));
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(2966, (int) (byte) (-87), (Object) "NaN", (Object) byte0, (Object) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.nextToken();
      tokenBuffer_Parser0.peekNextToken();
      tokenBuffer_Segment1.hasIds();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0);
      // Undeclared exception!
      try { 
        tokenBuffer2.copyCurrentStructure(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      tokenBuffer_Segment0.append(0, jsonToken0);
      tokenBuffer0._appendRaw(0, jsonToken0);
      tokenBuffer0.writeBoolean(false);
      System.setCurrentTimeMillis(16);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer_Segment0.hasIds();
      Double double0 = new Double(3588);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3588, jsonToken0, (Object) double0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, false);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      Byte byte0 = new Byte((byte) (-87));
      tokenBuffer_Parser0.nextToken();
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeBooleanField("", false);
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: FIELD_NAME(), VALUE_FALSE]", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.overrideCurrentName("Internal error: entry shoul@ be a Number, but Es of type ");
      try { 
        tokenBuffer_Parser0.getBinaryValue((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer_Segment0.hasIds();
      Double double0 = new Double(3588);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3588, jsonToken0, (Object) double0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1qGh31y7");
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      Byte byte0 = new Byte((byte) (-87));
      tokenBuffer_Segment1.appendRaw(220, 220, (Object) jsonTypeInfo_Id0, (Object) jsonToken0, (Object) byte0);
      tokenBuffer_Parser0.nextToken();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer1.writeTypeId((Object) null);
      tokenBuffer1.copyCurrentStructure(tokenBuffer_Parser0);
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Double double0 = new Double(1.0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(1447, jsonToken0, (Object) double0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, false);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer_Parser0.nextValue();
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.firstToken();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.close();
      tokenBuffer_Parser0.nextToken();
      assertTrue(tokenBuffer_Parser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.hasIds();
      ObjectCodec objectCodec0 = null;
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      Byte byte0 = new Byte((byte) (-87));
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      jsonGeneratorDelegate0.writeNumber((float) (byte) (-87));
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer_Segment0.hasIds();
      Double double0 = new Double(16);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) double0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, false, false);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      Byte byte0 = new Byte((byte) (-87));
      tokenBuffer_Parser0.nextToken();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer_Segment0.hasIds();
      Double double0 = new Double(3588);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3588, jsonToken0, (Object) double0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, false);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      Byte byte0 = new Byte((byte) (-87));
      tokenBuffer_Segment1.appendRaw(220, 220, (Object) jsonTypeInfo_Id0, (Object) jsonToken0, (Object) byte0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DqZ/j.o;*87");
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeNumber((BigDecimal) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0.append(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getEmbeddedObject();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, true);
      tokenBuffer_Parser1.close();
      tokenBuffer_Parser1.overrideCurrentName("");
      tokenBuffer_Parser1.peekNextToken();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer_Segment0.hasIds();
      Double double0 = new Double(16);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) double0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, false);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      Byte byte0 = new Byte((byte) (-87));
      tokenBuffer_Segment1.appendRaw(220, 220, (Object) jsonTypeInfo_Id0, (Object) jsonToken0, (Object) byte0);
      tokenBuffer_Parser0.nextToken();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer1.writeNumberField("`JMG/0GuFj=N[pwi{%", 0.0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer1, true);
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer1.serialize(tokenBuffer2);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.peekNextToken();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_COMMENTS;
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = 'S';
      charArray0[2] = '9';
      charArray0[3] = 'q';
      charArray0[4] = '\\';
      charArray0[5] = ' ';
      charArray0[6] = 'p';
      jsonFactory1.createParser(charArray0, (-2310), (-2310));
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature1);
      PipedReader pipedReader0 = new PipedReader();
      JsonParser jsonParser0 = jsonFactory2.createParser((Reader) pipedReader0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.writeNumber((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.negate();
      tokenBuffer0.writeNumber(bigInteger0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DqZ/j.o;*87");
      tokenBuffer1.writeNumber(16);
      tokenBuffer0.writeNumber(bigDecimal0);
      tokenBuffer0.append(tokenBuffer1);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Double double0 = new Double(1.0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      tokenBuffer_Segment0.append(1447, jsonToken0, (Object) double0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, true);
      IntNode intNode0 = new IntNode(48);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 48, 15);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1447);
      tokenBuffer_Segment1.next();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParser0, jsonParser0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParserSequence0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy();
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      ArrayNode arrayNode0 = objectMapper2.createArrayNode();
      Short short0 = new Short((short) (-605));
      ValueNode valueNode0 = arrayNode0.numberNode(short0);
      tokenBuffer0.writeTree(valueNode0);
      JsonGenerator jsonGenerator0 = tokenBuffer0.enable(jsonGenerator_Feature0);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.hasIds();
      Double double0 = new Double(3588);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      Byte byte0 = new Byte((byte) (-87));
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.appendRaw(16, (-2068), (Object) "=jcwKz^>$uB`N[", (Object) jsonTypeInfo_Id0, (Object) jsonTypeInfo_Id0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, (ObjectCodec) null, false, true);
      tokenBuffer_Parser0.nextToken();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "=jcwKz^>$uB`N[");
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone(simpleTimeZone0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      objectMapper3.setSerializationInclusion(jsonInclude_Include0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer_Segment0.hasIds();
      Double double0 = new Double(3588);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3588, jsonToken0, (Object) double0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, false);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      Byte byte0 = new Byte((byte) (-87));
      tokenBuffer_Parser0.nextToken();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeBooleanField("", false);
      tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      tokenBuffer_Parser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer_Segment0.hasIds();
      Double double0 = new Double(3588);
      tokenBuffer_Segment0.append(3588, jsonToken0, (Object) double0);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      Byte byte0 = new Byte((byte) (-87));
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, (-2068), (Object) "=jcwKz^>$uB`N[", (Object) jsonTypeInfo_Id0, (Object) jsonTypeInfo_Id0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, false, true);
      tokenBuffer_Parser0.nextToken();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "=jcwKz^>$uB`N[");
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone(simpleTimeZone0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      objectMapper2.setSerializationInclusion(jsonInclude_Include0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer_Segment0.hasIds();
      Double double0 = new Double(3588);
      tokenBuffer_Segment0.append(3588, jsonToken0, (Object) double0);
      Double double1 = new Double(0.0);
      JsonToken jsonToken1 = JsonToken.VALUE_EMBEDDED_OBJECT;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken1, (Object) bigDecimal0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      Byte byte0 = new Byte((byte) (-87));
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, false);
      tokenBuffer_Parser1.nextToken();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeBooleanField("", false);
      tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser1);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      tokenBuffer_Parser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer_Segment0.hasIds();
      Double double0 = new Double(3588);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3588, jsonToken0, (Object) double0);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      Byte byte0 = new Byte((byte) (-87));
      Integer integer0 = new Integer((-468));
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(942, 942, (Object) integer0);
      JsonToken jsonToken1 = JsonToken.VALUE_TRUE;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      Float float0 = new Float((float) 3588);
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment2.append(942, jsonToken1, (Object) pushbackInputStream0, (Object) float0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment3, (ObjectCodec) null, false, false);
      JsonTypeInfo.Id jsonTypeInfo_Id1 = JsonTypeInfo.Id.NAME;
      Byte byte1 = new Byte((byte) (-87));
      tokenBuffer_Parser0.nextToken();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeBooleanField("", true);
      tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer_Segment0.hasIds();
      Double double0 = new Double(3588);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3588, jsonToken0, (Object) double0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, false);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      Byte byte0 = new Byte((byte) (-87));
      tokenBuffer_Parser0.nextToken();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeBooleanField("", false);
      tokenBuffer0.writeArrayFieldStart("");
      tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      tokenBuffer_Parser0.getTextLength();
      try { 
        tokenBuffer_Parser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (END_ARRAY) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000011; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer_Segment0.hasIds();
      Double double0 = new Double(16);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) double0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getValueAsInt();
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      Byte byte0 = new Byte((byte) (-87));
      tokenBuffer_Parser0.nextToken();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
      tokenBuffer0.writeNumberField("", 11);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.negate();
      tokenBuffer0.writeNumber(bigInteger1);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer1.writeNumberField("5Cr]7N", 0.0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer1, true);
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0.serialize(tokenBuffer2);
      TokenBuffer tokenBuffer3 = new TokenBuffer((ObjectCodec) null);
      // Undeclared exception!
      tokenBuffer1.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer_Segment0.hasIds();
      Double double0 = new Double(3588);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3588, jsonToken0, (Object) double0);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      Byte byte0 = new Byte((byte) (-87));
      Integer integer0 = new Integer((-468));
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(942, 942, (Object) integer0);
      JsonToken jsonToken1 = JsonToken.VALUE_TRUE;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      Float float0 = new Float((float) 3588);
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment2.append(942, jsonToken1, (Object) pushbackInputStream0, (Object) float0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment3, (ObjectCodec) null, false, false);
      JsonTypeInfo.Id jsonTypeInfo_Id1 = JsonTypeInfo.Id.NONE;
      Byte byte1 = new Byte((byte) (-87));
      tokenBuffer_Parser0.nextToken();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeBooleanField("", true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer_Segment0.hasIds();
      Double double0 = new Double(3588);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3588, jsonToken0, (Object) double0);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NONE;
      Byte byte0 = new Byte((byte) (-87));
      Integer integer0 = new Integer((-468));
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(942, 942, (Object) integer0);
      JsonToken jsonToken1 = JsonToken.VALUE_TRUE;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      Float float0 = new Float((float) 3588);
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment2.append(942, jsonToken1, (Object) pushbackInputStream0, (Object) float0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment3, (ObjectCodec) null, false, false);
      JsonTypeInfo.Id jsonTypeInfo_Id1 = JsonTypeInfo.Id.NONE;
      Byte byte1 = new Byte((byte) (-87));
      tokenBuffer_Parser0.nextToken();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.writeBooleanField("", true);
      tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      tokenBuffer_Parser0.getTextLength();
      tokenBuffer_Parser0.getTextCharacters();
  }
}
