/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:39:55 GMT 2023
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Converter;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDelegatingSerializer_ESTest extends StdDelegatingSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Converter<Object, CoreXMLSerializers.XMLGregorianCalendarSerializer> converter0 = (Converter<Object, CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(converter0).toString();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<Object, ?>) converter0);
      Converter<Object, ?> converter1 = stdDelegatingSerializer0.getConverter();
      assertNotNull(converter1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Converter<Integer, ObjectReader> converter0 = (Converter<Integer, ObjectReader>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(converter0).convert(anyInt());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0, jsonEncoding0);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.serializeWithType(stdDelegatingSerializer0, jsonGenerator0, defaultSerializerProvider_Impl0, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      Converter<Object, BeanSerializer> converter0 = (Converter<Object, BeanSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      JsonSerializer<DOMSerializer> jsonSerializer0 = (JsonSerializer<DOMSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonSerializer0).toString();
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0, mapLikeType0, jsonSerializer0);
      JsonSerializer<?> jsonSerializer1 = stdDelegatingSerializer0.getDelegatee();
      assertFalse(jsonSerializer1.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Converter<Integer, ObjectReader> converter0 = (Converter<Integer, ObjectReader>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(converter0).convert(anyInt());
      Class<Integer> class0 = Integer.class;
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<Integer, ?>) converter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Object) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Converter<ObjectReader, Object> converter0 = (Converter<ObjectReader, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Converter<Integer, MatchStrength> converter0 = (Converter<Integer, MatchStrength>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(converter0).convert(anyInt());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.isEmpty((Object) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Converter<Integer, ObjectReader> converter0 = (Converter<Integer, ObjectReader>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<Integer> class0 = Integer.class;
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<Integer, ?>) converter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Converter<Object, StdDelegatingSerializer> converter1 = (Converter<Object, StdDelegatingSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate(converter1, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      stdDelegatingSerializer1.resolve(defaultSerializerProvider_Impl0);
      assertFalse(stdDelegatingSerializer1.equals((Object)stdDelegatingSerializer0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Converter<Integer, Integer> converter0 = (Converter<Integer, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<Integer, ?>) converter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ObjectReader> class1 = ObjectReader.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate((Converter<Object, ?>) null, simpleType0, stdDelegatingSerializer0);
      stdDelegatingSerializer1.resolve(defaultSerializerProvider_Impl0);
      assertFalse(stdDelegatingSerializer1.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Converter<Integer, ObjectReader> converter0 = (Converter<Integer, ObjectReader>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<Integer> class0 = Integer.class;
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<Integer, ?>) converter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Converter<Object, StdDelegatingSerializer> converter1 = (Converter<Object, StdDelegatingSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate(converter1, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      JsonSerializer<?> jsonSerializer0 = stdDelegatingSerializer1.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
      assertSame(stdDelegatingSerializer1, jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Converter<Integer, ObjectReader> converter0 = (Converter<Integer, ObjectReader>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Converter<Object, String> converter1 = (Converter<Object, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate(converter1, simpleType0, (JsonSerializer<?>) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        stdDelegatingSerializer1.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ObjectReader> class0 = ObjectReader.class;
      Converter<ObjectReader, String> converter0 = (Converter<ObjectReader, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<ObjectReader, ?>) converter0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Converter<Object, StdDelegatingSerializer> converter1 = (Converter<Object, StdDelegatingSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer1 = new StdDelegatingSerializer(converter1, simpleType0, stdDelegatingSerializer0);
      // Undeclared exception!
      try { 
        stdDelegatingSerializer1.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<ObjectReader> class0 = ObjectReader.class;
      MatchStrength matchStrength0 = MatchStrength.WEAK_MATCH;
      Converter<ObjectReader, MatchStrength> converter0 = (Converter<ObjectReader, MatchStrength>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(converter0).convert(any(com.fasterxml.jackson.databind.ObjectReader.class));
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<ObjectReader, ?>) converter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.serialize((Object) null, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Converter<Integer, ObjectReader> converter0 = (Converter<Integer, ObjectReader>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(converter0).convert(anyInt());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        stdDelegatingSerializer0.serialize(defaultSerializerProvider_Impl0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Converter<Integer, ObjectReader> converter0 = (Converter<Integer, ObjectReader>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(converter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ObjectReader> class0 = ObjectReader.class;
      Converter<ObjectReader, BeanSerializer> converter0 = (Converter<ObjectReader, BeanSerializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<ObjectReader, ?>) converter0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Converter<Object, MatchStrength> converter1 = (Converter<Object, MatchStrength>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate(converter1, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      JsonNode jsonNode0 = stdDelegatingSerializer1.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) simpleType0);
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Converter<Integer, String> converter0 = (Converter<Integer, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer(class0, (Converter<Integer, ?>) converter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<SimpleModule> class1 = SimpleModule.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      Converter<Object, ObjectReader> converter1 = (Converter<Object, ObjectReader>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingSerializer stdDelegatingSerializer1 = stdDelegatingSerializer0.withDelegate(converter1, simpleType0, stdDelegatingSerializer0);
      Class<Long> class2 = Long.TYPE;
      JsonNode jsonNode0 = stdDelegatingSerializer1.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class2, true);
      assertFalse(jsonNode0.isShort());
  }
}
