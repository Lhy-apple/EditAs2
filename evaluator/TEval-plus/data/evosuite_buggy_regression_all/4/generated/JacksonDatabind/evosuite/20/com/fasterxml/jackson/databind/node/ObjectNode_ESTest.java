/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:39:14 GMT 2023
 */

package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.OutputStream;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectNode_ESTest extends ObjectNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.with("2n[kV5O];|u=pwEtTV");
      ObjectNode objectNode2 = objectNode0.with("2n[kV5O];|u=pwEtTV");
      assertSame(objectNode2, objectNode1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      JsonNode jsonNode0 = objectNode0.putAll(objectNode0);
      assertNull(jsonNode0.numberType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Iterator<String> iterator0 = objectNode0.fieldNames();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.putNull("`=BSbzvhk`yG%rM'~");
      LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
      objectNode1.findParents("`=BSbzvhk`yG%rM'~", (List<JsonNode>) linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      JsonNode jsonNode0 = objectNode0._at(jsonPointer0);
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.removeAll();
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Iterator<JsonNode> iterator0 = objectNode0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      JsonNode jsonNode0 = objectNode0.without("TfL}M");
      assertFalse(jsonNode0.isBigInteger());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      JsonToken jsonToken0 = objectNode0.asToken();
      assertTrue(jsonToken0.isStructStart());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.putObject("wFd*%(5NyzvIxp");
      assertEquals(0, objectNode1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put(",", 4);
      assertNull(objectNode1.textValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      // Undeclared exception!
      try { 
        objectNode0.retain((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      HashMap<String, FloatNode> hashMap0 = new HashMap<String, FloatNode>();
      JsonNode jsonNode0 = objectNode0.putAll((Map<String, ? extends JsonNode>) hashMap0);
      assertFalse(jsonNode0.isBigDecimal());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.addObject();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ObjectNode objectNode1 = objectNode0.remove((Collection<String>) linkedHashSet0);
      assertSame(objectNode1, objectNode0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      JsonNode jsonNode0 = objectNode0.remove("5C(fCMafTvk^ug67j");
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      boolean boolean0 = objectNode0.hasNonNull(12);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put("FP}dJ%p<", 1L);
      assertEquals(1, objectNode1.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ObjectNode objectNode1 = objectNode0.retain((Collection<String>) treeSet0);
      assertFalse(objectNode1.booleanValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.put("j9!(IeWGlT@E", (-3498.49334563));
      assertFalse(objectNode1.isShort());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = objectNode0.withArray("s@");
      ObjectNode objectNode1 = arrayNode0.insertObject((-1798));
      boolean boolean0 = objectNode0.equals(objectNode1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ObjectNode objectNode1 = objectNode0.without((Collection<String>) set0);
      assertFalse(objectNode1.isInt());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      JsonNode jsonNode0 = objectNode0.path(573);
      assertEquals(0, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      JsonParser jsonParser0 = objectNode0.traverse();
      assertFalse(jsonParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectNode0.putArray("}");
      // Undeclared exception!
      try { 
        objectNode0.with("}");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Property '}' has value that is not of type ObjectNode (but com.fasterxml.jackson.databind.node.ArrayNode)
         //
         verifyException("com.fasterxml.jackson.databind.node.ObjectNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      objectNode0.withArray("s@");
      ObjectNode objectNode1 = objectNode0.deepCopy();
      assertEquals(1, objectNode1.size());
      assertNotSame(objectNode1, objectNode0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      JsonNode jsonNode0 = objectNode0.path("hkt!%\"f");
      assertEquals("", jsonNode0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectNode0.set("DefaultDeserializationContext sub-class not overriding copy()", objectNode0);
      JsonNode jsonNode0 = objectNode0.path("DefaultDeserializationContext sub-class not overriding copy()");
      assertNull(jsonNode0.textValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.with("2n[kV5O];|u=pwETV");
      assertEquals(0, objectNode1.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectNode0.withArray("uY{q_g");
      ArrayNode arrayNode0 = objectNode0.withArray("uY{q_g");
      assertFalse(arrayNode0.isDouble());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put((String) null, (short)1424);
      // Undeclared exception!
      try { 
        objectNode1.withArray((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Property 'null' has value that is not of type ArrayNode (but com.fasterxml.jackson.databind.node.ShortNode)
         //
         verifyException("com.fasterxml.jackson.databind.node.ObjectNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      objectNode0.withArray("s@");
      JsonNode jsonNode0 = objectNode0.findValue("obbK;.@r`Z?4x.9vN,,");
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = objectNode0.withArray("s@");
      ObjectNode objectNode1 = arrayNode0.insertObject((-1798));
      objectNode1.put("'!)b}s@`loa;1,${0", (Float) null);
      JsonNode jsonNode0 = objectNode0.findValue("'!)b}s@`loa;1,${0");
      assertFalse(jsonNode0.isBigInteger());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Double double0 = new Double(1570.029F);
      objectNode0.put("", double0);
      List<JsonNode> list0 = objectNode0.findValues("", (List<JsonNode>) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Double double0 = new Double(1570.029F);
      objectNode0.put("", double0);
      objectNode0.put("{}", (JsonNode) objectNode0);
      // Undeclared exception!
      objectNode0.findValues("", (List<JsonNode>) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectNode0.withArray("Could no Nesolve type");
      List<String> list0 = objectNode0.findValuesAsText("' has value that is not of type ObjectNode (but ");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Boolean boolean0 = Boolean.valueOf(false);
      objectNode0.put("EY5IQelj", boolean0);
      Stack<String> stack0 = new Stack<String>();
      objectNode0.findValuesAsText("EY5IQelj", (List<String>) stack0);
      assertFalse(stack0.isEmpty());
      assertEquals("[false]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectNode0.put("", 1570.029F);
      List<String> list0 = objectNode0.findValuesAsText("");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectNode0.withArray("Could no Nesolve type");
      ObjectNode objectNode1 = objectNode0.findParent("com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std");
      assertNull(objectNode1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = objectNode0.withArray("s@");
      ObjectNode objectNode1 = arrayNode0.insertObject((-1798));
      objectNode1.put("'!)b}s@`loa;1,${0", (Float) null);
      ObjectNode objectNode2 = objectNode0.findParent("'!)b}s@`loa;1,${0");
      assertNotNull(objectNode2);
      assertNotSame(objectNode2, objectNode0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectNode0.putArray("}");
      LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
      List<JsonNode> list0 = objectNode0.findParents("`=BSbzvhk`yG%rM'~", (List<JsonNode>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectNode0.withArray("TfL}M");
      List<JsonNode> list0 = objectNode0.findParents("TfL}M", (List<JsonNode>) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigIntegerNode0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, (OutputStream) null);
      objectNode0.serialize(uTF8JsonGenerator0, defaultSerializerProvider_Impl0);
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectNode0.withArray("TfL}M");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "R^fvrBI~8%\"BbY", true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<\"(fh0$xo:%T/N", true);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, mockFileOutputStream0, byteArray0, 17, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      objectNode0.serialize(uTF8JsonGenerator0, defaultSerializerProvider_Impl0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonNodeFactory0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      Class<TextNode> class0 = TextNode.class;
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(javaType0, (TypeIdResolver) null, "{", true, class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, class0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(false, "m", (Integer) 1, "m");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 3, (Object) null, propertyMetadata0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer((TypeIdResolver) null, creatorProperty0, "e(f97y|fU");
      // Undeclared exception!
      try { 
        objectNode0.serializeWithType(writerBasedJsonGenerator0, defaultSerializerProvider_Impl0, asExternalTypeSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonNodeFactory0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<TextNode> class0 = TextNode.class;
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(javaType0, (TypeIdResolver) null, "{", true, class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(false, "*m?Up5,", (Integer) 0, "{");
      BinaryNode binaryNode0 = BinaryNode.EMPTY_BINARY_NODE;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 3, binaryNode0, propertyMetadata0);
      AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer((TypeIdResolver) null, creatorProperty0, "Gc$?[Tpdjf%i|/x");
      ObjectNode objectNode1 = objectNode0._put("com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std", binaryNode0);
      // Undeclared exception!
      try { 
        objectNode1.serializeWithType(writerBasedJsonGenerator0, (SerializerProvider) null, asExternalTypeSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BinaryNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      JsonNode jsonNode0 = objectNode0.set("' has value that is not of type ArrayNode (but ", (JsonNode) null);
      assertFalse(jsonNode0.isFloatingPointNumber());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      HashMap<String, LongNode> hashMap0 = new HashMap<String, LongNode>();
      hashMap0.put("TfL}M", (LongNode) null);
      objectNode0.setAll((Map<String, ? extends JsonNode>) hashMap0);
      assertEquals(1, objectNode0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.putPOJO("not a valid representation: ", objectNode0);
      JsonNode jsonNode0 = objectNode1.setAll((Map<String, ? extends JsonNode>) hashMap0);
      assertFalse(jsonNode0.isInt());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      JsonNode jsonNode0 = objectNode0.replace("+c^=-/?(r?qJo:uz", objectNode0);
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      JsonNode jsonNode0 = objectNode0.replace("8eWbAVeE?62T:", (JsonNode) null);
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      JsonNode jsonNode0 = objectNode0.put("TfL}M", (JsonNode) null);
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Short short0 = new Short((short) (-27001));
      ObjectNode objectNode1 = objectNode0.put("com.fasterxml.jackson.databind.ser.std.ToStringSerializer", short0);
      assertEquals("", objectNode1.asText());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put("#2`%Kozq", (Short) null);
      assertFalse(objectNode1.isInt());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("GU", (Integer) null);
      assertSame(objectNode0, objectNode1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      Long long0 = new Long((-1L));
      ObjectNode objectNode1 = objectNode0.put("s@", long0);
      assertFalse(objectNode1.isInt());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put((String) null, (Long) null);
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      Float float0 = new Float((-1026.7099));
      ObjectNode objectNode1 = objectNode0.put(" has no default constructor; can not instantiate default bean value to support 'properties=JsonSerialize.Inclusion.NON_DEFAULT' annotation", float0);
      assertFalse(objectNode1.isBigInteger());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.insertObject(204);
      ObjectNode objectNode1 = objectNode0.put("<O;IA.EUw!", (Double) null);
      assertFalse(objectNode1.isLong());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      BigDecimal bigDecimal0 = objectNode0.decimalValue();
      ObjectNode objectNode1 = objectNode0.put("TfL}M", bigDecimal0);
      assertFalse(objectNode1.isInt());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("com.fasterxml.jackson.databind.util.BeanUtil", (BigDecimal) null);
      assertFalse(objectNode1.isDouble());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("GU", "GU");
      assertFalse(objectNode1.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put("+c^=-/?(r?qJo:uz", (String) null);
      assertSame(objectNode1, objectNode0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("{", (Boolean) null);
      assertSame(objectNode0, objectNode1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      byte[] byteArray0 = new byte[4];
      ObjectNode objectNode1 = objectNode0.put("EY5IQelj", byteArray0);
      assertSame(objectNode1, objectNode0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.put("s@", (byte[]) null);
      assertEquals("", objectNode1.asText());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      boolean boolean0 = objectNode0.equals(objectNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      boolean boolean0 = objectNode0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      boolean boolean0 = objectNode0.equals(priorityQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Integer integer0 = new Integer((-866));
      objectNode0.put("=P/13UU^:|", integer0);
      String string0 = objectNode0.toString();
      assertEquals("{\"=P/13UU^:|\":-866}", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put("=]'ss,5{H#'", false);
      objectNode1.withArray("TfL}M");
      String string0 = objectNode1.toString();
      assertEquals("{\"=]'ss,5{H#'\":false,\"TfL}M\":[]}", string0);
  }
}
