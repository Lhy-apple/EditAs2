/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:43:28 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionLikeType_ESTest extends CollectionLikeType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      boolean boolean0 = collectionLikeType0.isTrueCollectionType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      String string0 = collectionLikeType0.getErasedSignature();
      assertEquals("Lcom/fasterxml/jackson/databind/type/CollectionType;", string0);
      assertFalse(collectionLikeType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
      String string0 = collectionLikeType0.getTypeName();
      assertEquals("[collection-like type; class java.lang.Comparable, contains [simple type, class java.lang.Comparable]]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      Class<CollectionType> class0 = CollectionType.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler(class0);
      assertTrue(collectionLikeType1.hasHandlers());
      assertFalse(collectionLikeType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      collectionType0.getContentValueHandler();
      assertFalse(collectionType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
      collectionType0.getContentTypeHandler();
      assertFalse(collectionType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      SimpleType simpleType0 = new SimpleType(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      Class<MissingNode> class1 = MissingNode.class;
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaTypeArray0);
      JavaType javaType0 = collectionLikeType0.refine(class1, typeBindings0, simpleType0, javaTypeArray0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      boolean boolean0 = collectionType0.isCollectionLikeType();
      assertFalse(collectionType0.hasHandlers());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
      String string0 = collectionLikeType0.getGenericSignature();
      assertEquals("Ljava/lang/Comparable<Ljava/lang/Comparable;>;", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      boolean boolean0 = collectionType0.isContainerType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(class0);
      assertFalse(collectionLikeType1.useStaticType());
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withValueHandler(simpleType0);
      assertNotSame(collectionLikeType0, collectionLikeType1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      Class<CollectionType> class0 = CollectionType.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionLikeType collectionLikeType1 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) simpleType0);
      assertFalse(collectionLikeType1.useStaticType());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentValueHandler(simpleType0);
      assertFalse(collectionLikeType1.isArrayType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      JavaType javaType0 = collectionType0.getContentType();
      assertFalse(javaType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      Class<CollectionType> class0 = CollectionType.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      JavaType javaType0 = collectionLikeType0._narrow(class0);
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.equals((Object)collectionLikeType0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(1, collectionLikeType0.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionLikeType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      ReferenceType referenceType0 = new ReferenceType(collectionLikeType0, collectionType0);
      JavaType javaType0 = collectionLikeType0.withContentType(referenceType0);
      assertNotSame(javaType0, collectionLikeType0);
      assertFalse(javaType0.equals((Object)collectionLikeType0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      SimpleType simpleType0 = new SimpleType(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      JavaType javaType0 = collectionLikeType0.withContentType(simpleType0);
      assertSame(javaType0, collectionLikeType0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<MissingNode> class0 = MissingNode.class;
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(62, 62);
      TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withStaticTyping();
      assertTrue(collectionLikeType2.useStaticType());
      assertTrue(collectionLikeType2.equals((Object)collectionLikeType0));
      assertFalse(collectionLikeType2.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      Class<ArrayType> class0 = ArrayType.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      CollectionType collectionType1 = collectionType0.withValueHandler(simpleType0);
      boolean boolean0 = collectionType1.hasHandlers();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(typeFactory0);
      boolean boolean0 = collectionType1.hasHandlers();
      assertTrue(boolean0);
      assertFalse(collectionType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
      CollectionType collectionType0 = new CollectionType(collectionLikeType0, (JavaType) null);
      String string0 = collectionType0.buildCanonicalName();
      assertEquals("java.lang.Object", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      String string0 = collectionType0.buildCanonicalName();
      assertFalse(collectionType0.hasHandlers());
      assertEquals("java.util.LinkedList<java.util.LinkedList<java.lang.Object>>", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TypeFactory typeFactory0 = new TypeFactory((LRUMap<Object, JavaType>) null);
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionType collectionType1 = new CollectionType(collectionType0, collectionType0);
      boolean boolean0 = collectionType0.equals(collectionType1);
      assertFalse(boolean0);
      assertFalse(collectionType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      Class<MissingNode> class0 = MissingNode.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      boolean boolean0 = collectionLikeType0.equals((Object) null);
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      SimpleType simpleType0 = new SimpleType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class2, class1);
      boolean boolean0 = collectionType0.equals(simpleType0);
      assertFalse(boolean0);
      assertFalse(collectionType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      SimpleType simpleType0 = new SimpleType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) simpleType0);
      CollectionType collectionType1 = new CollectionType(simpleType0, collectionType0);
      boolean boolean0 = collectionType1.equals(collectionType0);
      assertFalse(collectionType0.hasHandlers());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TypeFactory typeFactory0 = new TypeFactory((LRUMap<Object, JavaType>) null);
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      boolean boolean0 = collectionType0.equals(collectionType1);
      assertFalse(collectionType1.hasHandlers());
      assertTrue(boolean0);
  }
}
