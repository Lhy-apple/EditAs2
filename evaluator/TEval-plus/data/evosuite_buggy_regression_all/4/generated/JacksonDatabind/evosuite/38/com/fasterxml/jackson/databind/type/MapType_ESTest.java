/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:40:39 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapType_ESTest extends MapType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Map> class0 = Map.class;
      Class<Integer> class1 = Integer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      SimpleType simpleType0 = new SimpleType(mapType0);
      MapType mapType1 = mapType0.withContentValueHandler(simpleType0);
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
      MapType mapType0 = new MapType(collectionLikeType0, collectionLikeType0, simpleType0);
      Class<String> class0 = String.class;
      JavaType javaType0 = mapType0._narrow(class0);
      assertFalse(javaType0.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<JsonParser.Feature> class1 = JsonParser.Feature.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      JavaType javaType0 = mapType0.refine(class1, typeBindings0, mapType0, javaTypeArray0);
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Integer> class1 = Integer.class;
      Class<String> class2 = String.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class2, javaTypeArray0);
      Class<Object> class3 = Object.class;
      JavaType[] javaTypeArray1 = new JavaType[0];
      MapType mapType1 = MapType.construct((Class<?>) class3, typeBindings0, (JavaType) mapType0, javaTypeArray1, (JavaType) mapType0, (JavaType) mapType0);
      Integer integer0 = new Integer(0);
      MapType mapType2 = mapType1.withKeyTypeHandler(integer0);
      assertFalse(mapType2.useStaticType());
      assertTrue(mapType2.equals((Object)mapType1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String> class0 = String.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) mapLikeType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) mapLikeType0, javaTypeArray0, (JavaType) mapLikeType0, javaTypeArray0[0]);
      MapType mapType1 = mapType0.withKeyValueHandler("");
      assertFalse(mapType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      MapType mapType0 = MapType.construct((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType1 = mapType0.withContentTypeHandler(class0);
      assertFalse(mapType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
      MapType mapType0 = new MapType(collectionLikeType0, collectionLikeType0, simpleType0);
      String string0 = mapType0.getTypeName();
      assertEquals("[map type; class long, [collection-like type; class long, contains [simple type, class long]] -> [simple type, class long]]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
      MapType mapType0 = new MapType(collectionLikeType0, collectionLikeType0, simpleType0);
      MapType mapType1 = mapType0.withStaticTyping();
      MapType mapType2 = mapType1.withStaticTyping();
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.useStaticType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
      MapType mapType0 = new MapType(collectionLikeType0, collectionLikeType0, simpleType0);
      JavaType javaType0 = mapType0.withContentType(collectionLikeType0);
      assertNotSame(javaType0, mapType0);
      assertFalse(javaType0.equals((Object)mapType0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
      MapType mapType0 = new MapType(collectionLikeType0, collectionLikeType0, simpleType0);
      JavaType javaType0 = mapType0.withContentType(simpleType0);
      assertSame(javaType0, mapType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
      MapType mapType0 = new MapType(simpleType0, collectionLikeType0, simpleType0);
      MapType mapType1 = mapType0.withKeyType(simpleType0);
      assertNotSame(mapType1, mapType0);
      assertFalse(mapType1.equals((Object)mapType0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
      MapType mapType0 = new MapType(collectionLikeType0, collectionLikeType0, simpleType0);
      MapType mapType1 = mapType0.withKeyType(collectionLikeType0);
      assertSame(mapType1, mapType0);
  }
}
