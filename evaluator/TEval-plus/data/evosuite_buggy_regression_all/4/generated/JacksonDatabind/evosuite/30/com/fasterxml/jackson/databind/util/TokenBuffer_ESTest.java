/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:43:42 GMT 2023
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.JsonReadContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.util.RawValue;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.net.URL;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenBuffer_ESTest extends TokenBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(248, jsonToken0);
      assertNotNull(tokenBuffer_Segment1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-5464));
      tokenBuffer0.writeTree(numericNode0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer_Segment1.findObjectId(16);
      tokenBuffer0.firstToken();
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000359; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((-1.0));
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(46, jsonToken0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotNull(tokenBuffer_Segment1);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      tokenBuffer_Segment1._next = tokenBuffer_Segment0;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.getText();
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue((String) null, 46, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue(charArray0, 46, 46);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, deserializationContext0);
      boolean boolean0 = tokenBuffer0.canWriteBinaryNatively();
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(boolean0);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      tokenBuffer_Segment0.findObjectId((-2672));
      TreeMap<Integer, Short> treeMap0 = new TreeMap<Integer, Short>();
      treeMap0.values();
      TreeMap<Integer, Object> treeMap1 = new TreeMap<Integer, Object>((Map<? extends Integer, ?>) treeMap0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      tokenBuffer0.writeBinary(byteArray0);
      arrayNode0.asDouble();
      tokenBuffer0.writeTree(arrayNode0);
      tokenBuffer_Segment1.findTypeId(16);
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment1.hasIds());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((double) 16);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      tokenBuffer0.writeObject(treeMap0);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TokenBuffer tokenBuffer0 = null;
      try {
        tokenBuffer0 = new TokenBuffer((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonParser jsonParser0 = tokenBuffer0.asParser();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      tokenBuffer_Segment0.append((-2224), jsonToken0, (Object) jsonToken0, (Object) null);
      assertTrue(tokenBuffer_Segment0.hasIds());
      
      Float float0 = new Float((double) 16);
      jsonParser0.overrideStdFeatures(65, 65);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      Version.unknownVersion();
      SerializedString serializedString0 = new SerializedString("ARRAY");
      tokenBuffer0.writeString((SerializableString) serializedString0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(248, jsonToken0);
      Float float0 = new Float((float) 16);
      tokenBuffer_Segment1.appendRaw(16, 248, (Object) jsonToken0, (Object) float0, (Object) float0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.firstToken();
      String string0 = tokenBuffer0.toString();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals("[TokenBuffer: ]", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonParser jsonParser0 = tokenBuffer0.asParser();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(81, jsonToken0, (Object) jsonToken0, (Object) null);
      assertNotNull(tokenBuffer_Segment1);
      
      Float float0 = new Float((double) 16);
      jsonParser0.overrideStdFeatures(65, 65);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((double) 16);
      tokenBuffer_Segment0.appendRaw(46, 297, (Object) tokenBuffer0);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      tokenBuffer_Segment0.append(46, jsonToken0);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      treeMap0.put((Integer) 16, tokenBuffer0);
      try { 
        tokenBuffer0.writeObject(treeMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loop has been executed more times than the allowed 10000 (through reference chain: java.util.TreeMap[\"16\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeObjectId(objectMapper0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      tokenBuffer0.writeNumber((-1.0));
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      Long long0 = new Long(27L);
      MapperFeature mapperFeature0 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      tokenBuffer0._appendRaw(2, mapperFeature0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper2 = objectMapper1.setFilterProvider(simpleFilterProvider0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      ObjectReader objectReader0 = objectMapper2.reader((InjectableValues) injectableValues_Std0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      deserializationFeatureArray0[3] = deserializationFeature3;
      DeserializationFeature deserializationFeature4 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      deserializationFeatureArray0[4] = deserializationFeature4;
      DeserializationFeature deserializationFeature5 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      deserializationFeatureArray0[5] = deserializationFeature5;
      ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader1, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)11;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeUTF8String(byteArray0, (byte)13, (-1509));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      Integer integer0 = new Integer(10);
      tokenBuffer0.writeObjectId(integer0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("ru K]cNlw .v\u0002,0", 10, 16);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.version();
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer_Segment1.findObjectId(16);
      tokenBuffer_Parser0.peekNextToken();
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000359; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.writeObject(mapperFeature0);
      tokenBuffer0.writeTree((TreeNode) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((-1.0));
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        tokenBuffer0.writeString(charArray0, 16, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer0.firstToken();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer0.writeNumber(bigInteger0);
      tokenBuffer0.writeNumber((-1.0));
      tokenBuffer0.close();
      JsonGenerator jsonGenerator0 = tokenBuffer0.overrideStdFeatures((-1577), (-1577));
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(248, jsonToken0);
      Float float0 = new Float((float) 16);
      tokenBuffer_Segment1.appendRaw(16, 248, (Object) jsonToken0, (Object) float0, (Object) float0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser0.getTextOffset();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      Float float1 = new Float((float) 248);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Float float2 = new Float((double) 0);
      treeMap0.put((Integer) 16, float1);
      tokenBuffer0.writeObject(float1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.nextFieldName();
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer_Parser0.getCurrentName();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.getValueAsLong();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser1.getTextCharacters();
      tokenBuffer_Parser1.getCurrentValue();
      tokenBuffer_Parser0.close();
      try { 
        tokenBuffer_Parser1.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000359; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(248, jsonToken0);
      Float float0 = new Float((float) 16);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(16, (-1), (Object) jsonToken0, (Object) float0, (Object) float0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser0.getTextOffset();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      Float float1 = new Float((float) 248);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      treeMap0.put((Integer) 16, serializedString0);
      tokenBuffer_Segment2._nativeIds = treeMap0;
      tokenBuffer0.writeObject(float1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      Class<Short> class0 = Short.class;
      tokenBuffer_Parser0.readValuesAs(class0);
      tokenBuffer0.disable(jsonGenerator_Feature0);
      tokenBuffer0.flush();
      tokenBuffer_Segment0.hasIds();
      tokenBuffer_Parser0.canReadObjectId();
      tokenBuffer_Parser0.getTypeId();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser1.getObjectId();
      tokenBuffer0._append(jsonToken0, (Object) null);
      tokenBuffer0.isClosed();
      tokenBuffer_Parser0.version();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      byte byte0 = (byte)40;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      tokenBuffer_Parser0.setFeatureMask((byte) (-21));
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, (DeserializationContext) null);
      // Undeclared exception!
      try { 
        tokenBuffer0.deserialize(tokenBuffer_Parser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonParser jsonParser0 = tokenBuffer0.asParser();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(102, jsonToken0, (Object) jsonToken0, (Object) null);
      Float float0 = new Float((double) 16);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(102, 102, (Object) float0);
      tokenBuffer_Segment2._tokenTypes = 9223372036854775807L;
      CharsToNameCanonicalizer.createRoot();
      jsonParser0.getObjectId();
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue(", can not serialize", (Object) jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std1);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.hasIds();
      tokenBuffer_Segment0.findTypeId(340);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((double) 16);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      tokenBuffer_Segment0.append(46, jsonToken0);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      treeMap0.put((Integer) 16, tokenBuffer0);
      try { 
        tokenBuffer0.writeObject(treeMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loop has been executed more times than the allowed 10000 (through reference chain: java.util.TreeMap[\"16\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((double) 16);
      TreeMap<Integer, Short> treeMap0 = new TreeMap<Integer, Short>();
      treeMap0.values();
      TreeMap<Integer, Object> treeMap1 = new TreeMap<Integer, Object>((Map<? extends Integer, ?>) treeMap0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.version();
      JsonNodeFactory.withExactBigDecimals(false);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0);
      arrayNode1.asDouble();
      tokenBuffer0.writeTree(arrayNode1);
      tokenBuffer_Parser0.close();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0.writeObject(serializedString0);
      tokenBuffer0.writeRawValue("");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = tokenBuffer0.disable(jsonGenerator_Feature0);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeNumber((-1.0));
      tokenBuffer0.writeNumber((-1992.9F));
      MockRandom mockRandom0 = new MockRandom(2222L);
      BigInteger bigInteger0 = new BigInteger(1171, mockRandom0);
      tokenBuffer0.writeNumber(bigInteger0);
      bigInteger0.bitCount();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer0.firstToken();
      System.setCurrentTimeMillis(2222L);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      tokenBuffer_Segment0.append(46, jsonToken0);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      treeMap0.put((Integer) 16, tokenBuffer0);
      try { 
        tokenBuffer0.writeObject(treeMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loop has been executed more times than the allowed 10000 (through reference chain: java.util.TreeMap[\"16\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader1 = objectReader0.with(jsonNodeFactory0);
      Class<Float> class0 = Float.class;
      ObjectReader objectReader2 = objectReader1.withView(class0);
      Locale locale0 = Locale.GERMAN;
      ObjectReader objectReader3 = objectReader2.with(locale0);
      objectReader2.withFormatDetection((DataFormatReaders) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader3, true);
      tokenBuffer0.useDefaultPrettyPrinter();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((double) 16);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      tokenBuffer_Segment0.append(46, jsonToken0);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      treeMap0.put((Integer) 16, tokenBuffer0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((double) 16);
      TreeMap<Integer, Short> treeMap0 = new TreeMap<Integer, Short>();
      TreeMap<Integer, Short> treeMap1 = new TreeMap<Integer, Short>((SortedMap<Integer, ? extends Short>) treeMap0);
      treeMap1.values();
      TreeMap<Integer, BigDecimal> treeMap2 = new TreeMap<Integer, BigDecimal>();
      TreeMap<Integer, Object> treeMap3 = new TreeMap<Integer, Object>((Map<? extends Integer, ?>) treeMap2);
      tokenBuffer0._appendRaw(16, (Object) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      tokenBuffer0.writeObjectId((Object) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      tokenBuffer0.writeNumber((double) 16);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer0.serialize(tokenBuffer1);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.overrideCurrentName("gGi8O;Kk ^s`iSS");
      tokenBuffer_Parser0.getCurrentName();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      tokenBuffer0.writeNumber(0.0);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0._next;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.getValueAsLong();
      tokenBuffer_Parser0.getTextCharacters();
      tokenBuffer_Parser0.getEmbeddedObject();
      tokenBuffer_Parser0.close();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      tokenBuffer_Segment0.append(3, jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, false);
      tokenBuffer_Parser0.overrideCurrentName("");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.nextFieldName();
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer_Parser0.getCurrentName();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      tokenBuffer_Parser0.getText();
      tokenBuffer_Parser0.getValueAsLong();
      tokenBuffer_Parser0.getTextCharacters();
      tokenBuffer_Parser0.overrideCurrentName("/u0^JoXmp#P&+@A;H:");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.version();
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer_Segment1.findObjectId(16);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      Integer integer0 = new Integer(16);
      treeMap0.put(integer0, tokenBuffer_Parser0);
      try { 
        tokenBuffer0.writeObject(tokenBuffer_Parser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000359; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((double) 16);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      tokenBuffer_Segment0.append(46, jsonToken0);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = '?';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw(charArray0, 17, 1618);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(tokenBuffer0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes((CharacterEscapes) null);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-67);
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer1.writeTypeId(bigInteger0);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      tokenBuffer1._append(jsonToken0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.getSchema();
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      ObjectReader objectReader2 = objectReader1.without(jsonParser_Feature1);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader2, true);
      tokenBuffer0.getCodec();
      System.setCurrentTimeMillis(9223372036854775807L);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((-1.0));
      int int0 = 46;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(46, jsonToken0);
      tokenBuffer_Segment1._next = tokenBuffer_Segment0;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser0.nextFieldName();
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_TRUE) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000359; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      tokenBuffer_Segment0.append(3, jsonToken0);
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeNumber(bigInteger0);
      bigInteger0.bitCount();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer0.serialize(tokenBuffer1);
      tokenBuffer1.firstToken();
      tokenBuffer1.writeNumber(bigInteger0);
      tokenBuffer1.toString();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.version();
      SerializedString serializedString0 = new SerializedString("ARRAY");
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.asDouble();
      tokenBuffer0.writeTree(arrayNode0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)79;
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer_Segment0.findObjectId((-4287));
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      tokenBuffer_Parser0.getTextCharacters();
      tokenBuffer_Parser0.overrideCurrentName("JSON");
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)13;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawUTF8String(byteArray0, (byte)73, 2336);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(248, jsonToken0);
      Float float0 = new Float((float) 16);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(16, 248, (Object) jsonToken0, (Object) float0, (Object) float0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser0.getTextOffset();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      Float float1 = new Float((float) 248);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Float float2 = new Float((double) 0);
      SerializedString serializedString1 = new SerializedString("H1I_#n0?^??}j");
      tokenBuffer_Segment2.appendRaw(100, 16, (Object) serializedString1);
      tokenBuffer_Segment2.appendRaw(2694, 2538, (Object) "H1I_#n0?^??}j");
      SerializedString serializedString2 = new SerializedString("H1I_#n0?^??}j");
      tokenBuffer0.writeString((SerializableString) serializedString2);
      tokenBuffer0.writeNumber((short) (-2396));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ") not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary");
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      try { 
        tokenBuffer_Parser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000359; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      boolean boolean0 = true;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.version();
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser1.getText();
      tokenBuffer_Parser1.getCurrentName();
      Float float0 = new Float((float) (-1351));
      // Undeclared exception!
      try { 
        tokenBuffer_Segment1.appendRaw((-1351), 16, (Object) jsonGenerator_Feature0, (Object) tokenBuffer0, (Object) float0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1351
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper1 = new ObjectMapper();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber(0.0);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      tokenBuffer_Segment0.append((-1248), jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, false, false);
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.getValueAsLong();
      tokenBuffer_Parser0.getTextCharacters();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, false);
      tokenBuffer_Parser1.close();
      try { 
        tokenBuffer_Parser1.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000359; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeNumber((-1.0));
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("(above ", 15, 15);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      JsonReadContext jsonReadContext0 = tokenBuffer_Parser0._parsingContext;
      JsonLocation jsonLocation0 = jsonReadContext0.getStartLocation("[typeId=");
      tokenBuffer_Parser0.setLocation(jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue(", can not serialize", (Object) jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std1);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      SerializedString serializedString0 = new SerializedString("additio6al deserialiZer definitions");
      Class<Double> class0 = Double.TYPE;
      injectableValues_Std1.addValue((Class<?>) class0, (Object) serializedString0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer1._first;
      tokenBuffer_Segment0.hasIds();
      tokenBuffer0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ") not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary");
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(16, 41);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.writeNumberField("Mi`8S^", 0L);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      tokenBuffer1.version();
      SerializedString serializedString0 = new SerializedString("JSON");
      jsonParser0.overrideCurrentName("Mi`8S^");
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonParser jsonParser0 = tokenBuffer0.asParser();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((-1803.3117));
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.nextFieldName();
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer_Parser0.getCurrentName();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      tokenBuffer_Parser0.getText();
      jsonParser0.getValueAsLong();
      tokenBuffer_Parser0.getTextCharacters();
      RawValue rawValue0 = new RawValue(tokenBuffer_Segment0, true);
      tokenBuffer0.writeObject("java.lang.Double@0000000008");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.close();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ") not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary");
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.setHighestNonEscapedChar(79);
      tokenBuffer0.version();
      SerializedString serializedString0 = new SerializedString("j&,nR`r5io#t.@a5xpV");
      tokenBuffer0.writeString((SerializableString) serializedString0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, tokenBuffer_Parser0, true);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer_Segment0.findObjectId((-2638));
      tokenBuffer_Parser0.peekNextToken();
      tokenBuffer1.setCodec(objectMapper0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((double) 16);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(478, jsonToken0, (Object) mapperFeature0, (Object) jsonToken0, (Object) jsonToken0);
      tokenBuffer_Segment1.append(16, jsonToken0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
      tokenBuffer_Segment2.hasIds();
      tokenBuffer_Segment1.findTypeId(478);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonParser_Feature0, true);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper3.reader(jsonNodeFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.canWriteTypeId();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.version();
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer_Segment1.findObjectId(16);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(1337);
      MathContext mathContext0 = MathContext.DECIMAL64;
      bigDecimal0.divide(bigDecimal1, mathContext0);
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      tokenBuffer0.writeNumber(bigDecimal2);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRawValue("JSON", 40, 1337);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((double) 16);
      TreeMap<Integer, Object> treeMap0 = tokenBuffer_Segment0._nativeIds;
      tokenBuffer0.writeObject((Object) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((double) 16);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      tokenBuffer_Segment0.append(2998, jsonToken0);
      TreeMap<Integer, Object> treeMap1 = new TreeMap<Integer, Object>();
      treeMap0.put((Integer) 16, tokenBuffer_Parser0);
      tokenBuffer1.writeObject("0");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      tokenBuffer0.writeNumber(0.0);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      tokenBuffer_Segment0.append(209, jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer0.writeNumber(65599);
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.getValueAsLong();
      tokenBuffer0.writeString((String) null);
      tokenBuffer_Parser0.getTextCharacters();
      tokenBuffer_Parser0.close();
      tokenBuffer0._appendRaw(16, (Object) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeNumber((-1.0));
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("(above ", (-1379), 12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ") not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary");
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(16, 41);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.version();
      SerializedString serializedString0 = new SerializedString("j&,nR`r5io#t.@a5xpV");
      tokenBuffer0.writeString((SerializableString) serializedString0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Object object0 = tokenBuffer0._typeId;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16777215, jsonToken0, (Object) null);
      tokenBuffer_Segment1.findObjectId(3);
      tokenBuffer0.firstToken();
      tokenBuffer_Parser0.hasTextCharacters();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0);
      Float float0 = new Float((float) 16);
      tokenBuffer_Segment1.appendRaw(16, 16, (Object) jsonToken0, (Object) float0, (Object) float0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Float float1 = new Float((double) 336);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.version();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.with(beanDeserializerFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        tokenBuffer0.append((TokenBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((double) 16);
      TreeMap<Integer, Short> treeMap0 = new TreeMap<Integer, Short>();
      TreeMap<Integer, Short> treeMap1 = new TreeMap<Integer, Short>((SortedMap<Integer, ? extends Short>) treeMap0);
      treeMap1.values();
      TreeMap<Integer, BigDecimal> treeMap2 = new TreeMap<Integer, BigDecimal>();
      TreeMap<Integer, Object> treeMap3 = new TreeMap<Integer, Object>((Map<? extends Integer, ?>) treeMap2);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.version();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      JsonNodeFactory jsonNodeFactory1 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory1);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.asDouble();
      tokenBuffer0.writeTree(arrayNode0);
      tokenBuffer_Parser0.close();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.append(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((-1.0));
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      tokenBuffer0.enable(jsonGenerator_Feature0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(46, jsonToken0);
      tokenBuffer_Segment1._next = tokenBuffer_Segment0;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Segment1.appendRaw(60, 46, (Object) null);
      tokenBuffer_Parser0._segmentPtr = 16;
      tokenBuffer_Parser0.nextFieldName();
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer_Parser0.getCurrentName();
      tokenBuffer_Segment1.findObjectId(46);
      tokenBuffer0.firstToken();
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000359; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((-1.0));
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      SerializedString serializedString0 = new SerializedString("additio6al deserialiZer definitions");
      Class<Double> class0 = Double.TYPE;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      tokenBuffer0.append(tokenBuffer1);
      Double double0 = new Double((-1.0));
      injectableValues_Std0.addValue((Class<?>) class0, (Object) double0);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer1._first;
      tokenBuffer_Segment1.hasIds();
      tokenBuffer0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((-1.0));
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(46, jsonToken0);
      tokenBuffer_Segment1._next = tokenBuffer_Segment0;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser0._segmentPtr = 16;
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.getValueAsLong();
      tokenBuffer_Parser0.getTextCharacters();
      tokenBuffer_Parser0.close();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper2, true, true);
      tokenBuffer_Parser0.setCodec(objectMapper1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue(", can not serialize", (Object) jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std1);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      tokenBuffer0._appendRaw(340, (Object) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      tokenBuffer0.writeNumber(0.0);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      tokenBuffer_Segment0.append(209, jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.getValueAsLong();
      tokenBuffer_Parser0.close();
      tokenBuffer_Parser0.getDecimalValue();
      tokenBuffer_Parser0.close();
      tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((-1.0));
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.nextFieldName();
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer_Parser0.getCurrentName();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      tokenBuffer_Parser0.getText();
      tokenBuffer_Parser0.getValueAsLong();
      tokenBuffer_Parser0.getTextCharacters();
      RawValue rawValue0 = new RawValue(tokenBuffer_Parser0, false);
      tokenBuffer0.writeObject(rawValue0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0);
      Float float0 = new Float((float) 16);
      tokenBuffer_Segment1.appendRaw(16, 16, (Object) jsonToken0, (Object) float0, (Object) float0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Float float1 = new Float((double) 336);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(16, 16);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      Version.unknownVersion();
      tokenBuffer_Parser0.getValueAsInt();
      tokenBuffer_Parser0.nextBooleanValue();
      tokenBuffer0.close();
      SerializedString serializedString0 = new SerializedString("8");
      tokenBuffer0.writeString((SerializableString) serializedString0);
      JsonGenerator jsonGenerator0 = tokenBuffer0.overrideStdFeatures(336, 336);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser1.nextToken();
      tokenBuffer_Parser0.peekNextToken();
      // Undeclared exception!
      try { 
        jsonGenerator0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0);
      Float float0 = new Float((float) 16);
      RawValue rawValue0 = new RawValue((SerializableString) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Float float1 = new Float((double) 336);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(16, 0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer_Parser0.version();
      tokenBuffer0.close();
      SerializedString serializedString0 = new SerializedString("8");
      tokenBuffer0.writeString((SerializableString) null);
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000359; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((-1.0));
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.getValueAsString();
      BigInteger bigInteger0 = BigInteger.ZERO;
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      tokenBuffer0._append(jsonToken0, (Object) null);
      tokenBuffer_Parser0.getTextLength();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser1.nextToken();
      tokenBuffer_Parser1.peekNextToken();
      tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser1);
      tokenBuffer_Parser0.close();
      tokenBuffer_Parser1.getEmbeddedObject();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON");
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.version();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      JsonNodeFactory jsonNodeFactory1 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext0);
      tokenBuffer0.writeTree(arrayNode0);
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      PipedReader pipedReader0 = new PipedReader(2189);
      JsonParser jsonParser0 = jsonFactory2.createParser((Reader) pipedReader0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((double) 16);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.nextBooleanValue();
      tokenBuffer1.close();
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.asQuotedChars();
      tokenBuffer1.writeString((SerializableString) serializedString0);
      tokenBuffer_Parser0.getIntValue();
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.createParser("Rdb");
      tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
      tokenBuffer0.serialize(tokenBuffer1);
      tokenBuffer0.firstToken();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      objectMapper0.addHandler((DeserializationProblemHandler) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.asParser();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      tokenBuffer_Segment1.append(16, jsonToken0, (Object) jsonToken0, (Object) mapperFeature0);
      Float float0 = new Float(368.2423244);
      Object object0 = tokenBuffer0._typeId;
      NullNode nullNode0 = NullNode.instance;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      NullNode nullNode1 = jsonNodeFactory0.nullNode();
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) nullNode0, (Object) float0, (Object) nullNode1);
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment1.appendRaw(16, 16, (Object) null);
      Double double0 = new Double(16);
      tokenBuffer_Segment3.append(16, jsonToken0);
      TokenBuffer.Segment tokenBuffer_Segment4 = tokenBuffer_Segment2.appendRaw(16, 3, (Object) double0);
      tokenBuffer_Segment4.findTypeId(1);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.version();
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer_Segment1.findObjectId(16);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(1337);
      MathContext mathContext0 = MathContext.DECIMAL64;
      bigDecimal0.divide(bigDecimal1, mathContext0);
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      tokenBuffer0.writeNumber(bigDecimal2);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.asParser((JsonParser) tokenBuffer_Parser0);
      tokenBuffer_Segment0.rawType(16);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)79;
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
      tokenBuffer_Segment2.findObjectId(16);
      tokenBuffer0.firstToken();
      tokenBuffer0.writeBoolean(false);
      tokenBuffer0.writeNumber("");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)79;
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
      tokenBuffer_Segment2.findObjectId(16);
      tokenBuffer0.firstToken();
      tokenBuffer_Segment0.findTypeId(16);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw('b');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      byte[] byteArray0 = new byte[1];
      tokenBuffer_Parser0._closed = true;
      byteArray0[0] = (byte)79;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer_Segment0.findObjectId((byte)79);
      tokenBuffer_Parser0.peekNextToken();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer0.writeNumber((-1.0));
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(46, jsonToken0);
      tokenBuffer_Segment1._next = tokenBuffer_Segment0;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser0._segmentPtr = 16;
      tokenBuffer_Parser0.nextFieldName();
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer_Parser0.getCurrentName();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      tokenBuffer_Parser0.getText();
      tokenBuffer_Parser0.getValueAsLong();
      tokenBuffer_Parser0.getTextCharacters();
      tokenBuffer_Parser0.close();
      tokenBuffer_Parser0.nextToken();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((-1.0));
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(46, jsonToken0);
      tokenBuffer_Segment1._next = tokenBuffer_Segment0;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser0.getCurrentName();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      tokenBuffer_Parser0.getText();
      tokenBuffer_Parser0.getValueAsLong();
      tokenBuffer_Parser0.getTextCharacters();
      tokenBuffer_Parser0.close();
      tokenBuffer0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((-1.0));
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.nextFieldName();
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer_Parser0.getCurrentName();
      tokenBuffer_Segment0.findObjectId(46);
      tokenBuffer0.firstToken();
      tokenBuffer_Parser0.getNumberType();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(248, jsonToken0);
      Float float0 = new Float((float) 16);
      tokenBuffer_Segment1.appendRaw(16, 248, (Object) jsonToken0, (Object) float0, (Object) float0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser0.getTextOffset();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      Float float1 = new Float((float) 248);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      treeMap0.navigableKeySet();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      treeMap0.put((Integer) 16, float1);
      tokenBuffer0.writeObject(float1);
      BigInteger bigInteger0 = BigInteger.ONE;
      JsonToken jsonToken1 = JsonToken.START_OBJECT;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0._append(jsonToken1, serializedString1);
      tokenBuffer_Parser0.getTextLength();
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("[TokenBuffer: ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.version();
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      tokenBuffer_Segment1.findObjectId(16);
      BigDecimal bigDecimal0 = new BigDecimal(16);
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      tokenBuffer0.writeNumber((BigDecimal) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRawValue("JSON", 40, 3049);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.writeObject(mapperFeature0);
      tokenBuffer1.writeRawValue("com.fasterxml.jackson.databind.KeyDeserializer");
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer1.writeNumber(bigInteger0);
      tokenBuffer1.serialize(tokenBuffer0);
      tokenBuffer0.firstToken();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeObject(mapperFeature0);
      tokenBuffer0.writeRawValue("com.fasterxml.jackson.databind.KeyDeserializer");
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((-1.0));
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer_Segment0.append(1, jsonToken0, (Object) null, (Object) bigInteger0);
      JsonToken jsonToken1 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(46, jsonToken1);
      tokenBuffer_Segment1._next = tokenBuffer_Segment0;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser0._segmentPtr = 16;
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Segment1._tokenTypes = 0L;
      BigInteger bigInteger1 = BigInteger.ZERO;
      tokenBuffer_Parser0.getCurrentName();
      tokenBuffer_Segment1.findObjectId(46);
      tokenBuffer0.firstToken();
      tokenBuffer_Parser0.getNumberType();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonParser jsonParser0 = tokenBuffer0.asParser();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      jsonParser0.getTextOffset();
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      Float float0 = new Float((float) 0);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      treeMap0.tailMap((Integer) 16);
      Float float1 = new Float((-1.0));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      treeMap0.put((Integer) 16, bigDecimal0);
      tokenBuffer1.writeObject(bigDecimal0);
      BigInteger bigInteger0 = BigInteger.ONE;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer1._append(jsonToken0, bigDecimal0);
      jsonParser0.getTextLength();
      tokenBuffer1.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer0.writeNumber((double) 16);
      tokenBuffer0.close();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getValueAsInt(16);
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000359; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      MissingNode missingNode0 = MissingNode.getInstance();
      RawValue rawValue0 = new RawValue(missingNode0);
      Byte byte0 = new Byte((byte) (-99));
      Float float0 = new Float((float) 16);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(872, 872, (Object) rawValue0, (Object) byte0, (Object) float0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Integer> class0 = Integer.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      ObjectReader objectReader1 = objectReader0.withView(class0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectReader1, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeBinary((Base64Variant) null, (InputStream) sequenceInputStream0, (-1140));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      Float float0 = new Float(1386.6F);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Float float1 = new Float((-589.2904830902752));
      Integer integer0 = new Integer(16);
      BigInteger bigInteger0 = BigInteger.ZERO;
      treeMap0.put(integer0, bigInteger0);
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer2.writeObject(tokenBuffer1);
      BigInteger bigInteger1 = BigInteger.ONE;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer2._append(jsonToken0, tokenBuffer1);
      tokenBuffer_Parser0.getTextLength();
      tokenBuffer_Segment0.rawType(0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((double) 16);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(478, jsonToken0, (Object) mapperFeature0, (Object) jsonToken0, (Object) jsonToken0);
      tokenBuffer_Segment1.append(16, jsonToken0);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      treeMap0.put((Integer) 16, tokenBuffer0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.writeObject(mapperFeature0);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
      tokenBuffer_Segment1.hasIds();
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment1._next;
      tokenBuffer_Segment3.findTypeId(47);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0);
      Float float0 = new Float((float) 16);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0._next;
      ObjectMapper objectMapper0 = new ObjectMapper();
      Float float1 = new Float((double) 336);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(16, 16);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      Version.unknownVersion();
      tokenBuffer_Parser0.getValueAsInt();
      String string0 = "8";
      tokenBuffer_Parser0.nextBooleanValue();
      tokenBuffer0.close();
      SerializedString serializedString0 = new SerializedString("8");
      tokenBuffer0.writeString((SerializableString) serializedString0);
      tokenBuffer0.overrideStdFeatures(336, 336);
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(209, jsonToken0);
      Float float0 = new Float((float) 16);
      tokenBuffer_Segment1.appendRaw(16, 209, (Object) jsonToken0, (Object) float0, (Object) float0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, false);
      tokenBuffer_Parser0.getTextOffset();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      Float float1 = new Float((float) 16);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Float float2 = new Float((double) 0);
      tokenBuffer_Parser0.getTypeId();
      tokenBuffer0.writeObject(float1);
      BigInteger bigInteger0 = BigInteger.ONE;
      JsonToken jsonToken1 = JsonToken.START_OBJECT;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0._append(jsonToken1, serializedString1);
      tokenBuffer_Parser0.getTextLength();
      tokenBuffer_Parser0.nextToken();
      tokenBuffer_Parser0.peekNextToken();
      tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
      tokenBuffer_Parser0.close();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0);
      Float float0 = new Float((float) 16);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(16, 16, (Object) jsonToken0, (Object) float0, (Object) float0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonToken jsonToken1 = JsonToken.FIELD_NAME;
      tokenBuffer_Segment2.append(16, jsonToken1);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, true, true);
      tokenBuffer_Parser0.nextFieldName();
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer_Parser0.getCurrentName();
      tokenBuffer_Segment2.findObjectId(16);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext0);
      tokenBuffer0.firstToken();
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000359; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("JSON", (Object) jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std1);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      tokenBuffer0._appendRaw(340, (Object) null);
      IntNode intNode0 = new IntNode(340);
      BigInteger bigInteger0 = intNode0.bigIntegerValue();
      tokenBuffer0.writeNumber(bigInteger0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(1431, (-1099));
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      tokenBuffer0.serialize(tokenBuffer1);
      tokenBuffer0.firstToken();
      tokenBuffer_Parser0.getText();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      boolean boolean0 = false;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      PipedInputStream pipedInputStream0 = new PipedInputStream(209);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      BigInteger bigInteger0 = null;
      tokenBuffer1.writeNumber((BigInteger) null);
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRawValue((String) null, 16, 2250);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0);
      Float float0 = new Float((float) 16);
      tokenBuffer_Segment1.appendRaw(16, 16, (Object) jsonToken0, (Object) float0, (Object) float0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      int int0 = 336;
      Float float1 = new Float((double) 336);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(16, 16);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer_Parser0.nextToken();
      jsonParser0.getText();
      Version.unknownVersion();
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0.getValueAsInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((-1.0));
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      try { 
        tokenBuffer_Parser0.getBinaryValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary
         //  at [Source: java.lang.String@0000000359; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      tokenBuffer_Segment0.append(16, jsonToken0);
      Float float0 = new Float(378.0633F);
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_CREATORS;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer_Segment0.appendRaw(9, (-3013), (Object) mapperFeature0, (Object) jsonToken0, (Object) serializedString0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, true);
      tokenBuffer_Parser0.getTextOffset();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      Float float1 = new Float((float) 16);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Float float2 = new Float(2.147483647E9);
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0.getTypeId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((-1.0));
      int int0 = 46;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(46, jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser0._segmentPtr = 16;
      tokenBuffer_Parser0.nextFieldName();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, tokenBuffer_Segment0, true);
      int int1 = 16;
      URL uRL0 = MockURL.getHttpExample();
      try { 
        MockURL.openStream(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(209, jsonToken0);
      Float float0 = new Float((float) 16);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(16, 209, (Object) jsonToken0, (Object) float0, (Object) float0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, false);
      tokenBuffer_Parser0.getTextOffset();
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      Float float1 = new Float((float) 16);
      TreeMap<Integer, Object> treeMap0 = tokenBuffer_Segment1._nativeIds;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonToken jsonToken1 = JsonToken.VALUE_NUMBER_FLOAT;
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment0.append(46, jsonToken1);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment3, objectMapper0, true, true);
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, true, false);
      tokenBuffer_Parser2.nextFieldName();
      try { 
        tokenBuffer_Parser2.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (START_OBJECT) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000359; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((-1.0));
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      LongNode longNode0 = new LongNode(0L);
      BigInteger bigInteger0 = longNode0.bigIntegerValue();
      tokenBuffer_Segment0.append(1, jsonToken0, (Object) objectMapper0, (Object) bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      tokenBuffer_Segment0.append(1, jsonToken0, (Object) null, (Object) bigInteger1);
      JsonToken jsonToken1 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(46, jsonToken1);
      tokenBuffer_Segment1._next = tokenBuffer_Segment0;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser0._segmentPtr = 16;
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Segment1._tokenTypes = 0L;
      BigInteger bigInteger2 = BigInteger.ZERO;
      tokenBuffer_Parser0.getCurrentName();
      tokenBuffer_Segment1.findObjectId(46);
      tokenBuffer0.firstToken();
      tokenBuffer_Parser0.getNumberType();
      tokenBuffer_Parser0.getNumberType();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((double) 16);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Long long0 = new Long(46);
      ValueNode valueNode0 = arrayNode0.numberNode(long0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(valueNode0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      tokenBuffer1.writeNumber(Float.NEGATIVE_INFINITY);
      MockRandom mockRandom0 = new MockRandom(46);
      BigInteger bigInteger0 = new BigInteger(14, mockRandom0);
      tokenBuffer0.writeNumber(bigInteger0);
      bigInteger0.bitCount();
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      tokenBuffer1.serialize(tokenBuffer2);
      tokenBuffer1.firstToken();
      System.setCurrentTimeMillis(16);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumber((double) 16);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16777215, jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.getBigIntegerValue();
      tokenBuffer_Parser0.getText();
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRawValue((String) null, 46, (-1437));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeObjectId(objectMapper0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      tokenBuffer0.writeNumber((-1.0));
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      JsonGenerator jsonGenerator0 = tokenBuffer1.setFeatureMask(362);
      tokenBuffer0.serialize(tokenBuffer1);
      tokenBuffer1.firstToken();
      tokenBuffer1.toString();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer1._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      PropertyNamingStrategy.LowerCaseStrategy propertyNamingStrategy_LowerCaseStrategy0 = (PropertyNamingStrategy.LowerCaseStrategy)PropertyNamingStrategy.LOWER_CASE;
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseStrategy0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2);
      tokenBuffer0.writeNumber(Double.NEGATIVE_INFINITY);
      MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
      tokenBuffer0.writeObjectId(mapperFeature0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      tokenBuffer0.writeNumber((-400.343448133));
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1);
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      PropertyNamingStrategy.LowerCaseStrategy propertyNamingStrategy_LowerCaseStrategy0 = new PropertyNamingStrategy.LowerCaseStrategy();
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseStrategy0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2);
      tokenBuffer0.writeNumber(Double.NEGATIVE_INFINITY);
      tokenBuffer0.toString();
      TokenBuffer.Segment tokenBuffer_Segment0 = null;
      boolean boolean0 = true;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper2, true, true);
      tokenBuffer_Parser0.nextBooleanValue();
      tokenBuffer0.close();
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000359; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.writeObject(mapperFeature0);
      tokenBuffer1.writeRawValue("com.fasterxml.jackson.databind.KeyDeserializer");
      tokenBuffer1.serialize(tokenBuffer0);
      Float float0 = new Float((-1552.9));
      tokenBuffer0.writeObjectField("com.fasterxml.jackson.databind.KeyDeserializer", float0);
      tokenBuffer0.firstToken();
      tokenBuffer0.toString();
      tokenBuffer1.serialize(tokenBuffer0);
  }
}
