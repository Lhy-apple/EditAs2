/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:03:09 GMT 2023
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.AttributedCharacterIterator;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, " ^Z", 1, 1, 1, 1, 1, 1, 1, 1, 1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
      MockDate mockDate0 = new MockDate(1, 2, 0);
      StringBuffer stringBuffer0 = new StringBuffer(" ^Z");
      fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      assertEquals(" ^Z12:00:00 AM GMT+00:00", stringBuffer0.toString());
      assertEquals(24, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "nwHQpP");
      Locale locale0 = Locale.US;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.format((-2907L));
      assertEquals("Wednesday, December 31, 1969", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("[hk");
      assertEquals(9, fastDateFormat0.getMaxLengthEstimate());
      
      String string0 = fastDateFormat0.format((-1186L));
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("[1123", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.getPattern();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("^Z'");
      try { 
        fastDateFormat0.parseObject("^Z'");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.getLocale();
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1554, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1554
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      
      fastDateFormat0.toString();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(87, 87, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 87
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(8, (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 8
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 2, 0, 2);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertEquals("Thursday, March 2, 0002 12:02:00 AM GMT", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("ZZFo:0Qi3]6", (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertNotNull(fastDateFormat0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      assertFalse(boolean0);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("MMM d, yyyy h:mm:ss a", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(28, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      
      Long long0 = new Long((-777L));
      assertEquals((-777L), (long)long0);
      assertNotNull(long0);
      
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(17, attributedCharacterIterator0.getEndIndex());
      assertEquals(17, attributedCharacterIterator0.getRunLimit());
      assertNotNull(attributedCharacterIterator0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy/MM/dd");
      assertEquals("yyyy/MM/dd", fastDateFormat0.getPattern());
      assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertNotNull(fastDateFormat0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      
      String string0 = fastDateFormat0.format((-1L));
      assertEquals("1969/12/31", string0);
      assertEquals("yyyy/MM/dd", fastDateFormat0.getPattern());
      assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertNotNull(string0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
      assertEquals(26, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat1.getPattern());
      assertNotNull(fastDateFormat1);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotSame(fastDateFormat1, fastDateFormat0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = new Locale("AtA;,,RIad&nn>IU");
      assertEquals("", locale0.getVariant());
      assertEquals("ata;,,riad&nn>iu", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ata;,,riad&nn>iu", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("AtA;,,RIad&nn>IU", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("B<}kx:lX~<j\"K|KPc>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("GEWy5)C-`E/ .1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("dD5]|ZXL-J}pW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("H' h 'mm z");
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("H' h 'mm z", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("ZEIM-]q:lY2y C)X%5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Js[-XV=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(".Kx~XB<DAs_\u0006~|Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("L]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("No date time pattern for locale: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("7]s=W|O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("*F@P1c$0]:wn%LtqC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("MQa<h}F%;$JA'2K*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("KR5[Qbm\"83O?c`Iwg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Sv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("TqSG/pbbkr$C655kR`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("UoRiUM(u9y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("VWi+-<SE1}f/7_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("2Y^DzE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(".bRY6~Wp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("yc?^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("eK|[R&4;0 o8#{(v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("frOA%/,5xljm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("gZ'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(" ^iHV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("jpM\"SFSpwhe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("ZE-M-]l:lY2/ C3X%5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("<null>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("*h4.(pwxz}*c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("^qe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("HriAjHfbmz~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("FastDateFormat[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("um')q&b`JJGnG0}^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("^w;k");
      assertEquals("^w;k", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
      assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(fastDateFormat0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(" ^Z'");
      assertEquals(" ^Z'", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(fastDateFormat0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockDate0);
      assertEquals(" ^Z'", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(7, attributedCharacterIterator0.getRunLimit());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(7, attributedCharacterIterator0.getEndIndex());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertNotNull(attributedCharacterIterator0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 2, 3, 2, 0);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = fastDateFormat0.format((Object) mockGregorianCalendar0);
      assertEquals("3:02:00 AM GMT", string0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=2,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(string0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'");
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("'", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      
      // Undeclared exception!
      try { 
        fastDateFormat0.formatToCharacterIterator("'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(" ^Z'");
      assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(" ^Z'", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      
      boolean boolean0 = fastDateFormat0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(" ^Z'", fastDateFormat0.getPattern());
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(" ^Z'");
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(" ^Z'", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      
      Locale locale0 = new Locale("B,|_@", "B,|_@");
      assertEquals("b,|_@", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("b,|_@_B,|_@", locale0.toString());
      assertEquals("B,|_@", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(" ^Z'", locale0);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertEquals("b,|_@", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("b,|_@_B,|_@", locale0.toString());
      assertEquals("B,|_@", locale0.getCountry());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(" ^Z'", fastDateFormat1.getPattern());
      assertEquals(7, fastDateFormat1.getMaxLengthEstimate());
      assertNotNull(fastDateFormat1);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(boolean0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(" ^Z'", fastDateFormat0.getPattern());
      assertEquals("b,|_@", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("b,|_@_B,|_@", locale0.toString());
      assertEquals("B,|_@", locale0.getCountry());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(" ^Z'", fastDateFormat1.getPattern());
      assertEquals(7, fastDateFormat1.getMaxLengthEstimate());
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertEquals("MMM d, yyyy", fastDateFormat1.getPattern());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(14, fastDateFormat1.getMaxLengthEstimate());
      assertNotNull(fastDateFormat1);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      
      boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(boolean0);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("MMM d, yyyy", fastDateFormat1.getPattern());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(14, fastDateFormat1.getMaxLengthEstimate());
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
      assertTrue(boolean0);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      
      String string0 = fastDateFormat0.format((long) 0);
      assertEquals("12:00:00 AM GMT", string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertNotNull(string0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertNotNull(fastDateFormat0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 3);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat1.getPattern());
      assertNotNull(fastDateFormat1);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      
      boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(boolean0);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat1.getPattern());
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("ZD");
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(9, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("ZD", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      
      String string0 = fastDateFormat0.format((-3071L));
      assertEquals("+0000365", string0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(9, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("ZD", fastDateFormat0.getPattern());
      assertNotNull(string0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(fastDateFormat0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      
      MockDate mockDate0 = new MockDate((-1102), 0, 0);
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = new StringBuffer(1);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("Sun Dec 31 00:00:00 GMT 797", mockDate0.toString());
      assertEquals(41, stringBuffer0.length());
      assertEquals("Sunday, December 31, 0797 12:00:00 AM GMT", stringBuffer0.toString());
      assertEquals(41, stringBuffer1.length());
      assertEquals("Sunday, December 31, 0797 12:00:00 AM GMT", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("[hk");
      assertEquals("[hk", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(9, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      
      String string0 = fastDateFormat0.format((long) 3);
      assertEquals("[1224", string0);
      assertEquals("[hk", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(9, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(string0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, " ^Z", 1, 1, 1, 1, 1, 1, 1, 1, 1);
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(" ^Z", simpleTimeZone0.getID());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(1, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id= ^Z,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(" ^Z", simpleTimeZone0.getID());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(1, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id= ^Z,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      
      MockDate mockDate0 = new MockDate((-4209), 1, 60000);
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = new StringBuffer(" ^Z");
      assertEquals(" ^Z", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(" ^Z", simpleTimeZone0.getID());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(1, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id= ^Z,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("Sun May 10 00:00:00 GMT 2146", mockDate0.toString());
      assertEquals(24, stringBuffer0.length());
      assertEquals(" ^Z12:00:00 AM GMT+00:00", stringBuffer0.toString());
      assertEquals(24, stringBuffer1.length());
      assertEquals(" ^Z12:00:00 AM GMT+00:00", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(" ^Z'");
      assertEquals(" ^Z'", fastDateFormat0.getPattern());
      assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3929), "a]kKgb5rc%");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("a]kKgb5rc%", simpleTimeZone0.getID());
      assertEquals((-3929), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=a]kKgb5rc%,offset=-3929,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertEquals(" ^-0000", string0);
      assertEquals(" ^Z'", fastDateFormat0.getPattern());
      assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("a]kKgb5rc%", simpleTimeZone0.getID());
      assertEquals((-3929), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=a]kKgb5rc%,offset=-3929,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=a]kKgb5rc%,offset=-3929,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=17,MILLISECOND=391,ZONE_OFFSET=-3929,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(string0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
  }
}
