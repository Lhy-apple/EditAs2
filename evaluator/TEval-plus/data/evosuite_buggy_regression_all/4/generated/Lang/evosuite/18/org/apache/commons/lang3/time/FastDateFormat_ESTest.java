/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:02:52 GMT 2023
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.AttributedCharacterIterator;
import java.text.FieldPosition;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-966), 1, 0, 2, 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals("January 31, 0967 2:00:00 AM GMT", stringBuffer0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-92649391200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=967,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy/MM/dd H:mm:ss", (TimeZone) null, locale0);
      assertEquals(2, FastDateFormat.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.getPattern();
      assertEquals("M/d/yy h:mm a", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("MMM d,yyyy@:m:ss a ");
      ParsePosition parsePosition0 = new ParsePosition(105);
      fastDateFormat0.parseObject("org.apache.commons.lang3.time.FastDateFormat$StringLiteral", parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.getLocale();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, locale0);
      assertEquals(3, FastDateFormat.SHORT);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.toString();
      assertEquals("FastDateFormat[M/d/yy h:mm a]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Long long0 = new Long((-1525L));
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
      assertEquals(17, attributedCharacterIterator0.getRunLimit());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      String string0 = fastDateFormat0.format((long) 0);
      assertEquals("Thursday, January 1, 1970", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 1, locale0);
      assertEquals(44, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.getTimeZone();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      fastDateFormat0.hashCode();
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(227, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 227
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(45, timeZone0, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 45
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertEquals("2/14/14 8:21 PM", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "org.apache.commons.lang3.time.FastDateFormat$StringLiteral");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("MMM d,yyyy@:m:ss a ", (TimeZone) simpleTimeZone0);
      assertEquals(1, FastDateFormat.LONG);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2845, ")!<aHnq 7");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(2845, 2845, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2845
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-4389), (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -4389
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-772), "yyy2\u5E74'M'\u6708'd'\u65E5 a'}'m'\u5206''\u79D2' z");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k =,'RZ(,Pc", (TimeZone) simpleTimeZone0);
      String string0 = fastDateFormat0.format(0L);
      assertEquals("23 =,RZ(,Pc", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yy/MM/dd H:mm");
      String string0 = fastDateFormat0.format((long) 2);
      assertEquals("70/01/01 0:00", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FastDateFormat.getInstance("2A!]+1(F");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FastDateFormat.getInstance("[Z8<B$w0VCXUw.");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FastDateFormat.getInstance("Cz7jF");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FastDateFormat.getInstance("D^DW^??blONxKB,q;");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FastDateFormat.getInstance("_FE~.\"vp");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FastDateFormat.getInstance("`Gv%/");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FastDateFormat.getInstance("Ey*I~WUg");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FastDateFormat.getInstance("Jy");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FastDateFormat.getInstance("KHR2o5+OTp_");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FastDateFormat.getInstance(";Ld4o-");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FastDateFormat.getInstance("N.Xb46d<FpX-tvwm");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FastDateFormat.getInstance("OhJOZG");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FastDateFormat.getInstance("MPW`d, y$yy h:mm`ss  z");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FastDateFormat.getInstance("Q,Lh\"aP[v3");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FastDateFormat.getInstance("SlW3nN0x");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FastDateFormat.getInstance("The validated array contains null element at index: %d");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FastDateFormat.getInstance("Unknown class: ");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FastDateFormat.getInstance("`[Z8<$*VCXi-Uw.");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FastDateFormat.getInstance("ww.X<w}js#&|2lt$Ey");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FastDateFormat.getInstance("ym^@~Wd5YL:30\"Q`VC");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FastDateFormat.getInstance("Mc@Src-6\"sfFG5r");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastDateFormat.getInstance("^]#7k@%eD8KQt?sc");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FastDateFormat.getInstance("8\"\"ak(Ef_,");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FastDateFormat.getInstance("gQ");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FastDateFormat.getInstance("hqm=hi7hCRETV~YM<");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FastDateFormat.getInstance("^4!i410{y|SNj-}[B");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FastDateFormat.getInstance("Z}j~Q5p<OP");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FastDateFormat.getInstance("k0+9ncg[&P=QS");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TimeZoneNameRule");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FastDateFormat.getInstance("8/p]");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FastDateFormat.getInstance(";rO|o ^[ i");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FastDateFormat.getInstance(".t78x8oBr*");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FastDateFormat.getInstance("uA!]+1(F");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FastDateFormat.getInstance(" &^x");
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate(2);
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockDate0);
      assertEquals(15, attributedCharacterIterator0.getEndIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.formatToCharacterIterator((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.formatToCharacterIterator(fastDateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.apache.commons.lang3.time.FastDateFormat
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("MMM d,yyyy@:m:ss a ");
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      boolean boolean0 = fastDateFormat0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0);
      fastDateFormat0.equals(fastDateFormat1);
      assertEquals("h:mm:ss a z", fastDateFormat1.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("MMM d,yyyy@:m:ss a ");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "org.apache.commons.lang3.time.FastDateFormat$StringLiteral");
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("MMM d,yyyy@:m:ss a ", (TimeZone) simpleTimeZone0);
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition((-2038));
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("*S", locale0);
      fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
      assertEquals("*320", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 0, 2, 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals("January 31, 0001 2:00:00 AM GMT", stringBuffer0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62164792800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1475, "MM d:yyyy@:m:sA a");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k =,'RZ(,Pc", (TimeZone) simpleTimeZone0);
      String string0 = fastDateFormat0.format((long) 2);
      assertEquals("24 =,RZ(,Pc", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "M/d/yy h:mm a", 3, 1, 3, 1, 2, 0, 2, 1, 0, 1, 1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDateFormat0.format((long) 2, stringBuffer0);
      assertEquals("12:00:00 AM GMT+00:00", stringBuffer0.toString());
      assertEquals(21, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "M/d/yy h:mm a", 3, 1, 3, 1, 2, 0, 2, 1, 0, 1, 1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(107, 3, 2);
      fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      assertEquals("12:00:00 AM GMT+00:00", stringBuffer0.toString());
      assertEquals(21, stringBuffer0.length());
  }
}
