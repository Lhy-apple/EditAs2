/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:06:22 GMT 2023
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Entities_ESTest extends Entities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.unescape(">1D!a-j&NuH&$;0.-");
      assertEquals(">1D!a-j&NuH&$;0.-", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.escape("A~E<< YF4e\"e");
      assertEquals("A~E&lt;&lt; YF4e&quot;e", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      Entities.fillWithHtml40Entities(entities0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("|c(A](3|zKq", 141);
      int int0 = entities_BinaryEntityMap0.value("|c(A](3|zKq");
      assertEquals(141, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      int int0 = entities_TreeEntityMap0.value("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.unescape("A~E&lt;&lt; YF4e&quot;e");
      assertEquals("A~E<< YF4e\"e", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      entities_HashEntityMap0.add("|c(A](3|zKq", (-1));
      int int0 = entities_HashEntityMap0.value("|c(A](3|zKq");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      String string0 = entities0.HTML32.entityName(4584);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(1798);
      entities_ArrayEntityMap0.size = 1798;
      entities_ArrayEntityMap0.add("B6Bp", 145);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(141);
      entities_BinaryEntityMap0.add("PS_|", 141);
      int int0 = entities_BinaryEntityMap0.value("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("|c(A](3|zKq", 141);
      entities_BinaryEntityMap0.add(".*:_/", (-1));
      entities_BinaryEntityMap0.add("|c(A](3|zKq", 141);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add(".*:_/", (-1));
      entities_BinaryEntityMap0.add("|c(A](3|zKq", 141);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("187", 5427);
      String string0 = entities_BinaryEntityMap0.name(5427);
      assertEquals("187", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Entities entities0 = Entities.XML;
      entities0.escape((Writer) stringWriter0, "A~E<< YF4e\"e");
      assertEquals("A~E&lt;&lt; YF4e&quot;e", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.unescape("org.apache.commons.lang.IntHashMap");
      assertEquals("org.apache.commons.lang.IntHashMap", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.unescape("&q9X8g?J\"6BL");
      assertEquals("&q9X8g?J\"6BL", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      String string0 = entities0.unescape("&;");
      assertEquals("&;", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Entities entities0 = Entities.XML;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "A~E&lt;&lt; YF4e&quot;e");
      assertEquals("A~E<< YF4e\"e", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Entities entities0 = Entities.XML;
      entities0.unescape((Writer) stringWriter0, "A~E<< YF4e\"e");
      assertEquals("A~E<< YF4e\"e", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "[K&@ggbmu&$;&U");
      assertEquals("[K&@ggbmu&$;&U", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Entities entities0 = new Entities();
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "[>Ea(Pu&;,0k");
      assertEquals("[>Ea(Pu&;,0k", stringWriter0.toString());
  }
}
