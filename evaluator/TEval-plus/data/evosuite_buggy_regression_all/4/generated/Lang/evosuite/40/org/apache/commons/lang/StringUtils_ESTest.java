/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:05:07 GMT 2023
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import org.apache.commons.lang.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("G", '`');
      String string1 = StringUtils.leftPad(string0, 8198);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = StringUtils.replaceOnce(" ", " ", " ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Searchand Replace array lengts don't match: ", "match: don't lengts array Replace Searchand");
      assertEquals("Searchand Replace array lengts don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ", 1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = StringUtils.rightPad(":&f@C6uk@AFa", 19);
      assertEquals(":&f@C6uk@AFa       ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.strip(" ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("54#", "54#");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Cannot pad a negative amount: ", 'n');
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ", 1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Cannot get the toString of a null identity", "Cannot get the toString of a null identity", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.startsWithAny("b$$cfj-3?cj", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.replaceEach("?", (String[]) null, (String[]) null);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = StringUtils.replace("dH]", "", "M1PXF/");
      assertEquals("dH]", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.center(",6P8", 1509);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("The character ", " ");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("The character ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: The character 
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("IFqYY,r", "IFqYY,r");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("............................................................................................................................................................................................");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("1-,EjDfk^u\"c\";Q@BUn");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.trimToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.trimToNull("IFWY,r");
      assertNotNull(string0);
      assertEquals("IFWY,r", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("The vFaacteMr ");
      assertEquals("The vFaacteMr", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.stripToNull("3wx8*s,bd]2m?-_,`");
      assertEquals("3wx8*s,bd]2m?-_,`", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("The char,ct2r ");
      assertEquals("The char,ct2r", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripStart(" is not in the range '0' - '9'", "");
      assertEquals(" is not in the range '0' - '9'", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.strip(", Length: ", ", Length: ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "IFWY,r");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.stripEnd("g$[u|AMZUz", "");
      assertEquals("g$[u|AMZUz", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.stripEnd("VKq=JEe8Ytbn`(", "VKq=JEe8Ytbn`(");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "\\u00";
      String string1 = StringUtils.abbreviate(string0, 18, 4);
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string1);
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "org.apache.commons.lang.ObjectUtils");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = StringUtils.equals("org.apache.commons.lang.ArrayUtils", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("array element array element array element array element orray element a", "K*npe|n&&=M`Uwl~&,v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "bcg#CgbC(UA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = StringUtils.indexOf("f|ccEr4eSj6EjqNBHJD", '>');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, 'D');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.indexOf("?4YA{%$", '&', 11);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, '`', (-992));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.indexOf("", "8eqcyTWI4nRc&lL9M3");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.indexOf("*o oiqav1\ty[2eppe{", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, (String) null, 30);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("t]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.d", "t]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.d", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("The character ", (String) null, 30);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("6hp7[qsccti[", ")Y-bc--;+i7;au4", (-2082));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("fG}S*f8pL>$", "", 77);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("fG}H*fpL>q$", "fG}H*fpL>q$", 30);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int int0 = StringUtils.indexOf(stringArray0[0], "', has a length less than 2", 545);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = StringUtils.center("oA{X22$wGFe;8", 3890, "");
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf("nv4%", string0, 5898);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.indexOf("", (String) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.indexOf("d;)ODSO/y2Gb", "", 8192);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.indexOf("SoSfn4GjCioL%", "", (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("K*npe|n&&=M`Uwl~&,v", 'S');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", '~');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("Array element ", ']', (-4686));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", '4', (int) '4');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "Index: ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Minimum abbreviation width with offset is 7", "va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs va8w'_T^}$I vs  vs ", ", Length: 0");
      int int0 = StringUtils.lastIndexOf(string0, "Minimum bbre,i tioneidtheithoffeti7");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("ueiw)k4v80", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "\u0002ouirr;qsl<(k9", 20);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", (String) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf(", Length: 0", "org.apache.commons.lang.charutils", 32);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = StringUtils.contains(")DH}#,?1Rg%", 'Q');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, 'E');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("8eqcyTWI4nRc&lL9M3", 'n');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, "Y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("zbx[_?*xqm<fwmy)<", " ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("org.apache.commons.lang.ObjectUtils", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("lD", "lD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("The character must not be null", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny("", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("xQT><s", "xQT><s");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny("K", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("a~q@%lpw7iro@", "u");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("                                                                                                 ", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((String) null, "$'\"Pp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny("|.;4Z$DZMv", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("", "j+4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("7OBMvqama<dF>;g_o+", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("lD", "lD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsAny("fG}SjVf8pLZ", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny(")4w45bV|Kgsf5e_", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAnyBut("", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut("The character ", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly(",5", ",5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("!B2sL>^[nrA", "(S?'AG5,K3v");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("y8\"~[[7s>Pp", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("Cannot pad a negative amount: ", "Cannot pad a negative amount: ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("org.apache.commons.lang.StringUtil", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsOnly((String) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = StringUtils.containsOnly("", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("Y", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("M10IJ8|y<,}a/it(wZC", "org.apache.commons.lang.CharUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((String) null, "*XoOE0&`o(g<]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("org.apache.commons.lang.stringutils", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((String) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("a<SsKeV`zhhJq&l7", "a<SsKeV`zhhJq&l7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsNone("Klxnkv.8)nYu", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((String) null, "E.P+T:i*)b|=W]|W");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("54#", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("54#", "54#");
      int int0 = StringUtils.indexOfAny("org.apache.commons.lang.ObjectUtils", stringArray0);
      assertEquals(0, int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Y";
      int int0 = StringUtils.indexOfAny("3<`gsG,y4iRRz)GIT", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\u0002ouirr;qsl<(k9");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "}<TB+]NBh");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("HD", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.defaultString("(]:", " is not in the range '0' - '9'");
      assertEquals("(]:", string0);
      
      int int0 = StringUtils.lastIndexOfAny(string0, (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("/h<pHw.F~+[-~PY!9fO", "aR'V%6_\"^Z9wO");
      int int0 = StringUtils.lastIndexOfAny("tl^SH?7(<T", stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[7];
      int int0 = StringUtils.lastIndexOfAny("h", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.substring("Search and Replace array lengths don't match: ", (-2414));
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 13);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.substring("t", 10);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.substring("VKq=JEe8Ytbn`(", 1, 1);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (-1), 2630);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.substring("S+", (-1636), (-1636));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.substring("", 1547, 1547);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.left("Caot pad a negative amout: ", (-726));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 4096);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.left("+", 10);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.rightPad("fG}SjVf8pLZ", 8208, 'H');
      String string1 = StringUtils.left(string0, 'H');
      assertNotNull(string1);
      assertEquals("fG}SjVf8pLZHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", string1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.right("*cxQT<s", 5);
      assertEquals("xQT<s", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.right((String) null, (-992));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.right("(i.", (-2585));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.right("+", 'u');
      assertNotNull(string0);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.mid("8@203%", 53, '%');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 8192, 8192);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.mid("D(\"Vt|sl5.=3O", (-2473), (-1075));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.mid("QeGkP&W7>0\"T:tI|atk", (-5899), 2233);
      assertEquals("QeGkP&W7>0\"T:tI|atk", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.mid("h20cdTt98^I\"PIk$", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Y", "Y");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substringBefore("o", (String) null);
      assertEquals("o", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.substringBefore("{LW:pl$4tPt.vsme8:", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.substringBefore("^yOL", "03\">,_]6");
      assertEquals("^yOL", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substringAfter("T*dhe charaJter ", "T*dhe charaJter ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.substringAfter(" is less than 0: ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.substringAfter("The character", "The character ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Search and Replace array lengths don't match:", "Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match:", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("k", (String) null);
      assertEquals("k", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("gwsU1+CBq}`jy!OA", "gwsU1+CBq}`jy!OA");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("t", "t");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("+^a,y)7\"nw{oti7.=m", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("K*npe|n&&=M`Uwl~&,v", "3Wx8*S,Bd]2m?-_,`");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Cannot pad a negative amount: ", "u");
      assertEquals("nt: ", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.difference("S", "{}");
      String string1 = StringUtils.substringBetween("efR^U>UA", (String) null, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.substringBetween("an,>fXKt-l,,#O_ ", "$+dLlA<?>0U_<xj2", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.substringBetween("+", "tp<ba@e");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.substringBetween("54#", "54#");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "', is neither of type Map.Entry nor an Array", "M'");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("<g", "<g", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("The character ", " ", " ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("~4#", "G ", "G ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("...", "..", "..");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang.StringUtils", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Cannot get th toString of a null idntity", "");
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'N');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'k');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("CmIP5", 'C');
      assertNotNull(string0);
      assertEquals("mIP5", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("Searchand Replace array lengts don't match: ", ' ');
      assertEquals("match: don't lengts array Replace Searchand", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null, 940);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.leftPad("+", 8192, (String) null);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, (String) null, 112);
      assertNotNull(stringArray0);
      assertEquals(112, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Q|q@^OGhm0]m}}+z< ", " ", 1163);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("P", "P");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(", Length: 0", ", Length: 0");
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("M$l*PCT\"", "M$l*PCT\"", 2);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(":#'odXEc^QkBJOz");
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The Array must not be null");
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("mlC2+UMBtNF@=");
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'm');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'e', (-1), 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String string0 = StringUtils.join(objectArray0, '`');
      assertEquals("````", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, ">R&zhtWfTP3}Dya");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, ", Length: ", 97, (-2031));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "sosfn4gjc~iol%ace array lengths don't match: ", 64, 1564);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\u0002ouirr;qsl<(k9");
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string0);
      assertEquals("\u0002ouirr;qsl<(k9", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, '^');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '4');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "Md.9_Ilu/2v}J2Pf");
      linkedList0.add((Object) " is not in the range '0' - '9'");
      String string0 = StringUtils.join((Collection<?>) linkedList0, '}');
      assertEquals("Md.9_Ilu/2v}J2Pf} is not in the range '0' - '9'", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StringUtils.upperCase((String) null);
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string0 = StringUtils.join(iterator0, '`');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, ", Length: ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("TVt6t4zao3j");
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, (String) null);
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("TVt6t4zao3j");
      linkedList0.addFirst("TVt6t4zao3j");
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, (String) null);
      assertTrue(listIterator0.hasPrevious());
      assertEquals("TVt6t4zao3jTVt6t4zao3j", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("r=1M'b-");
      linkedList0.add((String) null);
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      String string0 = StringUtils.join(iterator0, "UTG_6]uWXlDc%r*");
      assertEquals("UTG_6]uWXlDc%r*r=1M'b-", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      linkedList0.addFirst(";Z>2xfba%F>Rb");
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "'Rm%w'zddoo,KmGMTq=");
      assertFalse(listIterator0.hasNext());
      assertEquals(";Z>2xfba%F>Rb'Rm%w'zddoo,KmGMTq=", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.join((Collection<?>) null, '\u001E');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = StringUtils.join((Collection<?>) linkedList0, "D(\"Vt|sl5.=3O");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.join((Collection<?>) null, "5?0{m7lG|*fI*EM.");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("a<SsKeV`zhhJq&l7");
      assertEquals("a<SsKeV`zhhJq&l7", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(" vs ");
      assertEquals("vs", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.removeStart("p4A", "p4A^");
      assertEquals("p4A", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.removeStart("54#", "");
      assertEquals("54#", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.removeStart("org.apache.commons.lang.StringUtils", "org.apache.commons.lang.StringUtils");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("an,", (String) null);
      assertNotNull(string0);
      assertEquals("an,", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("The character", "The character ");
      assertEquals("The character", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.repeat("K,Qp10jF7^u'\"J=3N", "K,Qp10jF7^u'\"J=3N", (int) 'm');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.repeat("VKq=JEe8Ytbn`(", "", 1);
      assertEquals("VKq=JEe8Ytbn`(", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.removeEnd("54#", "Mgi@K4?Z*.S`n#&");
      assertEquals("54#", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("{}", (String) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("s ", "s ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.remove("iB", "iB");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.remove("............................................................................................................................................................................................", "");
      assertEquals("............................................................................................................................................................................................", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.remove("", 'B');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.remove("8@03%", '%');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.remove("` Length: 0", 'M');
      assertEquals("` Length: 0", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.replace("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.replace("org.apache.commons.lang.StringUtils", "org.apache.commons.lang.StringUtils", (String) null);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.replace("DsX^%4Gbc)[WQqf~j'Q", "\u0002ouirr;qsl<(k9", "\u0002ouirr;qsl<(k9", 0);
      assertEquals("DsX^%4Gbc)[WQqf~j'Q", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.replace("'QH!O`+[0tjImV&TdR", "K", "'QH!O`+[0tjImV&TdR", 277);
      assertEquals("'QH!O`+[0tjImV&TdR", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.replace("|[]nqnjyvDgF,R/17d", "|[]nqnjyvDgF,R/17d", "|[]nqnjyvDgF,R/17d", (int) 'm');
      assertEquals("|[]nqnjyvDgF,R/17d", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly(" ", (String[]) null, (String[]) null);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("K", stringArray0, stringArray0);
      assertEquals("K", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEachRepeatedly("xDZLox/1P`wE", stringArray0, (String[]) null);
      assertEquals("xDZLox/1P`wE", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = "\\u00";
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[0];
      String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray1);
      assertEquals("\\u00", string1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = new String[1];
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(" ", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 2 vs 1
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[1];
      stringArray1[0] = " vs ";
      String string0 = StringUtils.replaceEachRepeatedly(" vs ", stringArray1, stringArray0);
      assertEquals(" vs ", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("#pB", "uo0tx0inBx0*");
      String string0 = StringUtils.replaceEachRepeatedly("uo0tx0inBx0*", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("uo0tx0inBx0*", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = " ";
      stringArray0[1] = ", Length: ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(", Length: ", stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "?";
      stringArray0[1] = "-L!;i";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "-L!;i";
      stringArray1[1] = "Oi*P:Ct<`0={<ly";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("-L!;i", stringArray0, stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Cannot get the toString of a null identity", " ");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Cannot get the toString of a null identity", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: Cannot get the toString of a null identity
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(p?]Xt";
      stringArray0[1] = " ";
      stringArray0[2] = "s";
      stringArray0[3] = " ";
      stringArray0[4] = " vs ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(" vs ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0:  vs 
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.replaceChars("A4n", 's', 's');
      assertNotNull(string0);
      assertEquals("A4n", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'f', 'f');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.replaceChars("k| 5BH", (String) null, "k| 5BH");
      assertEquals("k| 5BH", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.replaceChars("?]Xt", "s/2", stringArray0[1]);
      assertEquals("?]Xt", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.overlay("=2-5 $tn8ts", "=2-5 $tn8ts", (-3549), (-3549));
      assertNotNull(string0);
      assertEquals("=2-5 $tn8ts=2-5 $tn8ts", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "", 0, 11);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.overlay("the f,kvon{o>r", (String) null, 57, (-1599));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.overlay("B", "B", '\\', 54);
      assertEquals("BB", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.chomp("$)|$\"dzOF%I72D)");
      assertEquals("$)|$\"dzOF%I72D)", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.chomp(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.chomp("Y", "Y");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.chomp("kqf}", (String) null);
      assertNotNull(string0);
      assertEquals("kqf}", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.chomp(" \"", "an~,,z%!pStxau?g+1");
      assertEquals(" \"", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.chop("The character ");
      assertEquals("The character", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.chop("K");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.repeat("b$$cfj-3?cj", (-992));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.repeat("", 16);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.repeat("G", 8198);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.repeat("", 4089);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.repeat("iB", 30);
      assertNotNull(string0);
      assertEquals("iBiBiBiBiBiBiBiBiBiBiBiBiBiBiBiBiBiBiBiBiBiBiBiBiBiBiBiBiBiB", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, (String) null, 13);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.repeat("K*npe|n&&=M`Uwl~&,v", (String) null, 4096);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, (-2031), '&');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.rightPad("K*npe|n&&=M`Uwl~&,", 0, 'S');
      assertEquals("K*npe|n&&=M`Uwl~&,", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 57, "an,");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.rightPad("8x", (-1), (String) null);
      assertEquals("8x", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.center("6@@T/%", 7, "6@@T/%");
      assertEquals("6@@T/%6", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.center("DsX^%4Gbc)[WQqf~j'Q", 57, "DsX^%4Gbc)[WQqf~j'Q");
      assertEquals("DsX^%4Gbc)[WQqf~j'QDsX^%4Gbc)[WQqf~j'QDsX^%4Gbc)[WQqf~j'Q", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (int) '{', '{');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.leftPad("Search and Replace array lengths don't match: ", (-2414), ';');
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-177), "K");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.center("0", 4, "Knpe&<-Jom.YY1p");
      assertEquals("0K", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      int int0 = StringUtils.length("DsX^%4Gbc)[WQqf~j'Q");
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      int int0 = StringUtils.length((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-668), 'm');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.center("        ", (-2058), ')');
      assertEquals("        ", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.center(" ", 1, ',');
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 256, "Ph|[T I>");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.center("Th Sting mst not be empty", (-8), "Th Sting mst not be empty");
      assertEquals("Th Sting mst not be empty", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.center("Th Sting must not be empty", 7, "Th Sting must not be empty");
      assertEquals("Th Sting must not be empty", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.upperCase(" vs ");
      assertEquals(" VS ", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.upperCase("PI+?6H7q", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("vk9vi\"h.");
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.lowerCase("54#");
      assertEquals("54#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Locale locale0 = Locale.US;
      String string0 = StringUtils.lowerCase("G?w", locale0);
      assertEquals("g?w", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.capitalize("The character ");
      assertEquals("The character ", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("L-^xW[2W");
      assertEquals("l-^xW[2W", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = StringUtils.swapCase("MATCH: DON'T LENGTHS ARRAY rEPLACE AND sEARCH");
      assertEquals("match: don't lengths array Replace and Search", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      int int0 = StringUtils.countMatches("", "4_nU/dQ9Jy,@ztQ7)us4_n4_nU/dQ9Jy,@ztQ7)us4_nU/dQ9Jy,@ztQ7)us4_nU");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      int int0 = StringUtils.countMatches("7#~qX8CW", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      int int0 = StringUtils.countMatches("iB", "iB");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("fG}S*f8pL>$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace(" org.apache.c");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("cannot get the tostring of a null identity");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("0i9\">,_\"6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("Q");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("A~Q@%LPW7IRo`@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("Strings must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("Strings must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("N}`&g|qJ*_ED}luD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("03\">,_]6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("7#~qX8CW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("                                                                                   XNQ8}m6*,i@gk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("ter ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("u");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("oA{X22$wGFe;8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("M");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = StringUtils.defaultString("Cannot pad a negative amount: ");
      assertEquals("Cannot pad a negative amount: ", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("Minimum abbreviation widtO is 4", "Minimum abbreviation widtO is 4");
      assertEquals("Minimum abbreviation widtO is 4", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = StringUtils.reverse("If?(f");
      assertEquals("f(?fI", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'I');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 1028, 475);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" ", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.abbreviate("t]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.d", 57, 57);
      assertEquals("...&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.dt]u&2zy.d...", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("The Character must not be null", 1107, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = StringUtils.abbreviate("~$hd0;Dj{(XyolK&X", 14, 14);
      assertEquals("...Dj{(XyolK&X", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = StringUtils.difference("S", (String) null);
      assertEquals("S", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = StringUtils.difference("8D*0+Qv;", "8D*0+Qv;");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String) null, " vs ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("0:m@G?Kif", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("ebm04=}$|KcG7IO'?", "ebm04=}$|KcG7IO'?");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = StringUtils.difference("The Array must not be null", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(", length: ", "u");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(", length: ", string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("54#", "54#");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "The character must not be null";
      stringArray0[1] = "The character must not be null";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("The character must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "IFWY,";
      stringArray0[1] = "IFWY,r";
      stringArray0[2] = "IFWY,r";
      stringArray0[3] = "IFWY,";
      stringArray0[4] = "IFWY,";
      stringArray0[5] = "IFWY,r";
      stringArray0[6] = "IFWY,r";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("54#", "54#");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " is not in the range '0' - '9'";
      stringArray0[1] = "    ";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "1,27sb");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("+(<", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("Minimum abbreviation with is 4", "Minimum abbreviation with is 4");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("        ", "");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance(")DH}#,?1Rg%", "k");
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, "fG}S*f8pL>$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.startsWithAny("Index: ", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "b$$cfj-3?cj";
      boolean boolean0 = StringUtils.startsWithAny("b$$cfj-3?cj", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, "ai*ENl7M,h-j=8rU,D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("N", "an,");
      assertFalse(boolean0);
  }
}
