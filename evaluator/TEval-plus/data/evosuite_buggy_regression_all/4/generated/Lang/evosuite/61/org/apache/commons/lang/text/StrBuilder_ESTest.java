/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:05:53 GMT 2023
 */

package org.apache.commons.lang.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StrBuilder_ESTest extends StrBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("M}$O");
      StrBuilder strBuilder1 = strBuilder0.deleteAll("M}$O");
      assertEquals(36, strBuilder1.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null);
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      strBuilder0.replaceAll(strMatcher0, "(VG>%9H");
      StrBuilder strBuilder1 = new StrBuilder("JVC3UJ 2-V");
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
      assertEquals(10, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      strBuilder0.setNewLineText(",}2v");
      strBuilder0.appendNewLine();
      assertEquals(8, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer");
      int int0 = strBuilder0.capacity();
      assertEquals(91, int0);
      assertEquals(59, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.getNewLineText();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(36, strBuilder0.capacity());
      assertEquals(44, int0);
      assertEquals(4, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      int int0 = strBuilder0.indexOf('&');
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Solaris");
      Writer writer0 = strBuilder0.asWriter();
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        writer0.write(charArray0, 0, (-780));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -780
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.substring((-1525));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1525
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F=\">;I`b");
      int int0 = strBuilder0.lastIndexOf('|');
      assertEquals((-1), int0);
      assertEquals(40, strBuilder0.capacity());
      assertEquals(8, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Windows NT");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals("Windows NT", string0);
      assertNotNull(string0);
      assertEquals(42, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      strBuilder0.appendFixedWidthPadLeft(73, 49, 'B');
      assertEquals(53, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((StrMatcher) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      int int0 = strBuilder0.indexOf("KOj,B<Sp+A05Wop");
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(":@)+8*}S1Qq");
      strBuilder0.append(39);
      assertEquals(14, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.append(1L);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      StrBuilder strBuilder1 = strBuilder0.deleteAll(strMatcher0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      strBuilder0.asTokenizer();
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) null, 1134, 'd');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(232, (long) 232);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 232
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(48, 48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 48
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, 0.0F);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(235, 0.0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 235
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer");
      int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      assertEquals(91, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(59, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.reset("TJh44,q");
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "TJh44,q");
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(27, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      // Undeclared exception!
      try { 
        strBuilder0.insert(2744, 'r');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2744
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.close();
      assertEquals(1, strBuilder0.length());
      assertEquals(33, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.mark((-179));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((-19));
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.append((CharSequence) "");
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[1];
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[0];
      strBuilder_StrBuilderWriter0.write(charArray0, 0, 0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("HP-UX", 0, 2);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AIX");
      StrBuilder strBuilder1 = strBuilder0.setNullText("AIX");
      Object[] objectArray0 = new Object[3];
      strBuilder1.appendWithSeparators(objectArray0, "AIX");
      assertEquals(18, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      assertEquals(4, strBuilder0.size());
      
      strBuilder0.setLength(0);
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-1519));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1519
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.setLength(897);
      strBuilder0.midString((-2870), 897);
      assertEquals(897, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(24, strBuilder0.length());
      assertFalse(boolean0);
      assertEquals(56, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.isEmpty();
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-1525));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1525
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.charAt(750);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 750
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-2648), '');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2648
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(1618, 'N');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1618
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      StrBuilder strBuilder1 = strBuilder0.setCharAt(0, '');
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-776));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -776
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(424);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 424
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder1.deleteCharAt(0);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Windows NT");
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'W', 'i', 'n', 'd', 'o', 'w', 's', ' ', 'N', 'T'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.toCharArray();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Solaris");
      char[] charArray0 = strBuilder0.toCharArray(2, 528);
      assertEquals(39, strBuilder0.capacity());
      assertArrayEquals(new char[] {'l', 'a', 'r', 'i', 's'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%q]4jHTtVOArr%:2");
      char[] charArray0 = strBuilder0.toCharArray(0, 0);
      assertEquals(0, charArray0.length);
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F=\">;I`b");
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertEquals(40, strBuilder0.capacity());
      assertArrayEquals(new char[] {'F', '=', '\"', '>', ';', 'I', '`', 'b'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[5];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(607.6858);
      char[] charArray0 = new char[5];
      strBuilder0.getChars(charArray0);
      assertEquals(8, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[4];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-2268), 114, (char[]) null, (-2268));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2268
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(479, (-1029), charArray0, 114);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1029
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(118, 3837, charArray0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3837
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(607.6858);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(5244, 5, charArray0, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null);
      assertEquals(34, strBuilder1.capacity());
      assertEquals(2, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((String) null, 0, 0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("HP-UX", (-225), 1514);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("HP-UX", 35, 35);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      // Undeclared exception!
      try { 
        strBuilder0.append(",}2v", 2, (-525));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("org.apache.commons.lang.text.StrMatcher$NoMatcher", 0, 593);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("HP-UX", 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("X+7{A*csIj#8/\"~gM;");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "StrTokenizer[not tokenized yet]");
      strBuilder0.append(stringBuffer0, 4, 4);
      assertEquals(22, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F=\">;I`b");
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, 32, 856);
      assertEquals(8, strBuilder1.length());
      assertEquals(40, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "5O");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(897);
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 897, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Solaris");
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, (-4197));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(897);
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "5O");
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      strBuilder0.append(strBuilder0);
      assertEquals(8, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2109);
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertEquals(2109, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 10, 79);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{");
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null, (-1081), 1661);
      assertEquals(33, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, (-1), 1381);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      Object[] objectArray0 = new Object[2];
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      objectArray0[0] = (Object) strBuilder_StrBuilderTokenizer0;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "");
      // Undeclared exception!
      try { 
        strBuilder1.append(strBuilder0, 10, 79);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 0, (-807));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      Object[] objectArray0 = new Object[2];
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      objectArray0[0] = (Object) strBuilder_StrBuilderTokenizer0;
      objectArray0[1] = (Object) "M}$O";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "");
      strBuilder1.append(strBuilder0, 10, 79);
      assertEquals(180, strBuilder0.capacity());
      assertEquals(180, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, 0, 0);
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("1.1");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((char[]) null);
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((char[]) null, 1390, 1390);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, (-19), (-19));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -19
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[0];
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 1028, 895);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 895
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 0, 97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 97
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("s?^");
      char[] charArray0 = new char[20];
      charArray0[0] = 'Z';
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "s?^");
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(35, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(false);
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(true);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, ",}2v");
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Solaris");
      Object[] objectArray0 = new Object[7];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, (String) null);
      assertEquals(39, strBuilder1.capacity());
      assertEquals(7, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) null, "HP-UX");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Windows NT");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "Windows NT");
      assertEquals(42, strBuilder1.capacity());
      assertEquals(10, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("]JFf_V");
      strBuilder0.appendWithSeparators((Collection) linkedList0, (String) null);
      assertEquals(29, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      StrBuilder strBuilder0 = new StrBuilder();
      linkedList0.add("");
      strBuilder0.appendWithSeparators((Collection) linkedList0, "dvDb@YfvZ");
      assertEquals(63, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) null, "Md");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, (String) null);
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(34, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Windows NT");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "end < start");
      assertEquals(1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(75, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      StrBuilder strBuilder1 = strBuilder0.appendPadding((-2145), '\\');
      assertEquals(34, strBuilder1.capacity());
      assertEquals(2, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendPadding(137, '}');
      assertEquals(137, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "</\u0004G-SbAJ&R&]R", (-2052), ')');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((Object) null, 2168, '-');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1989));
      strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, 9, 'y');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) null, (-3278), 'E');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      strBuilder0.appendFixedWidthPadRight((Object) "zh+tTM0{[L4 L", 9, ')');
      strBuilder0.delete(9, 9);
      assertEquals(13, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      // Undeclared exception!
      try { 
        strBuilder0.insert(3467, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3467
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Windows NT");
      StrBuilder strBuilder1 = strBuilder0.insert(0, (char[]) null);
      assertEquals(42, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Windows NT");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.insert(2, charArray0, 2, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 2
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Windows NT");
      StrBuilder strBuilder1 = strBuilder0.insert(0, (char[]) null, 48, 48);
      assertEquals(42, strBuilder1.capacity());
      assertEquals(10, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, (-2236), 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -2236
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(", Length: 0");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, (-1841));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1841
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(", Length: 0");
      char[] charArray0 = new char[22];
      strBuilder0.insert(0, charArray0, 0, 7);
      assertEquals(18, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, 27);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 27
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      char[] charArray0 = new char[1];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(2, strBuilder1.size());
      assertEquals(34, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer");
      strBuilder0.insert(4, true);
      assertEquals(63, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(1, strBuilder0.length());
      
      strBuilder1.trim();
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{");
      strBuilder0.deleteAll('{');
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Solaris");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer0, 647, 'D');
      strBuilder1.deleteAll('D');
      assertEquals(654, strBuilder0.capacity());
      assertEquals(77, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{");
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('%');
      assertEquals(1, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) strBuilder_StrBuilderReader0;
      strBuilder0.appendWithSeparators(objectArray0, "}c9*G+D[fY\"es B_sbU");
      strBuilder0.deleteFirst('c');
      assertEquals(67, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      strBuilder0.deleteFirst("AI");
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(44);
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("AI");
      assertEquals(44, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replace(0, 117, (String) null);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.replace(0, 0, "^P8");
      assertEquals(3, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.replaceAll('R', 'R');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Solaris");
      StrBuilder strBuilder1 = strBuilder0.replaceAll('r', 'D');
      assertEquals(7, strBuilder1.length());
      assertEquals(39, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("A`");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('=', '=');
      assertEquals(2, strBuilder1.length());
      assertEquals(34, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((Object) strBuilder0);
      strBuilder1.replaceFirst('X', '?');
      assertEquals(50, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Solaris");
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher((char[]) null);
      StrBuilder strBuilder1 = strBuilder0.append((Object) strMatcher0);
      strBuilder1.replaceFirst('M', '[');
      assertEquals(67, strBuilder0.size());
      assertEquals(67, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.replaceAll(".j1*[", (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(", Length: 0");
      strBuilder0.replaceAll(", Length: 0", "r_q=J$a8<YAkbUsw");
      assertEquals(16, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("{", "{");
      assertEquals(33, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, "5O");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("6&-j-f|0o#5", "StrTokenizer[not tokenized yet]");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      strBuilder0.replaceFirst("AI", (String) null);
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Solaris");
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      strBuilder0.deleteFirst(strMatcher0);
      assertEquals(6, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("&@BS:4`gH>D");
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{");
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertFalse(strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      assertEquals(16, strBuilder0.length());
      
      strBuilder0.trim();
      assertEquals(15, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.startsWith("");
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{");
      boolean boolean0 = strBuilder0.startsWith((String) null);
      assertFalse(boolean0);
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{");
      boolean boolean0 = strBuilder0.startsWith("2}Pi0Eo");
      assertEquals(1, strBuilder0.length());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{");
      strBuilder0.appendFixedWidthPadRight((int) 'v', (int) 'v', 'r');
      boolean boolean0 = strBuilder0.startsWith("2}Pi0Eo");
      assertEquals(119, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F=\">;I`b");
      boolean boolean0 = strBuilder0.startsWith("F=\">;I`b");
      assertEquals(40, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{");
      boolean boolean0 = strBuilder0.endsWith("");
      assertEquals(33, strBuilder0.capacity());
      assertTrue(boolean0);
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F=\">;I`b");
      boolean boolean0 = strBuilder0.endsWith("F=\">;I`b");
      assertTrue(boolean0);
      assertEquals(40, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.endsWith("end < start");
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F=\">;I`b");
      StringBuffer stringBuffer0 = new StringBuffer(32);
      stringBuffer0.appendCodePoint(32);
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      boolean boolean0 = strBuilder1.endsWith("F=\">;I`b");
      assertEquals(9, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.leftString(7);
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      strBuilder0.leftString((-2889));
      assertEquals(4, strBuilder0.length());
      assertEquals(36, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Bg{eznHk1%4Is(");
      String string0 = strBuilder0.leftString(7);
      assertEquals("Bg{eznH", string0);
      assertEquals(14, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.rightString(668);
      assertEquals("", string0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.rightString((-1497));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer");
      String string0 = strBuilder0.rightString(57);
      assertEquals(91, strBuilder0.capacity());
      assertEquals("g.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.midString((-2870), 897);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.midString(2511, (-2870));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setLength(897);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder1.insert(32, (Object) strBuilder_StrBuilderTokenizer0);
      strBuilder0.midString((-2870), 897);
      assertEquals(967, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{");
      boolean boolean0 = strBuilder0.contains('t');
      assertEquals(33, strBuilder0.capacity());
      assertFalse(boolean0);
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "");
      boolean boolean0 = strBuilder0.contains('@');
      assertEquals(29, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Solaris");
      boolean boolean0 = strBuilder0.contains("'/-y%}$/*");
      assertEquals(7, strBuilder0.length());
      assertFalse(boolean0);
      assertEquals(39, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.insert(0, false);
      boolean boolean0 = strBuilder0.contains("");
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      boolean boolean0 = strBuilder0.contains((StrMatcher) null);
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[2];
      strBuilder0.insert(0, charArray0);
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharSetMatcher0);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F=\">;I`b");
      int int0 = strBuilder0.indexOf('3', (-1));
      assertEquals((-1), int0);
      assertEquals(8, strBuilder0.length());
      assertEquals(40, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Windows NT");
      int int0 = strBuilder0.indexOf((String) null, (-1442));
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("M}$O");
      StrBuilder strBuilder1 = strBuilder0.replaceAll("Wm", "org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer");
      assertEquals(36, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      int int0 = strBuilder0.indexOf(strMatcher0, (-1689));
      assertEquals(10, int0);
      assertEquals(24, strBuilder0.size());
      assertEquals(56, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Windows NT");
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      boolean boolean0 = strBuilder0.contains(strMatcher0);
      assertFalse(boolean0);
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf('t', 97);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{");
      int int0 = strBuilder0.lastIndexOf("{", 669);
      assertEquals(33, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      int int0 = strBuilder0.lastIndexOf((String) null, (-1765));
      assertEquals((-1), int0);
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf("end < start", 2);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(607.6858);
      int int0 = strBuilder0.lastIndexOf("", 32);
      assertEquals(8, strBuilder0.size());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append((-533.8009F));
      int int0 = strBuilder0.lastIndexOf(",$Z,?40fz4}FvSW)", 5);
      assertEquals(9, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      int int0 = strBuilder0.lastIndexOf("AI", 669);
      assertEquals(34, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{ryI }R%`6:BZ%`");
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("{ryI }R%`6:BZ%`");
      int int0 = strBuilder0.lastIndexOf(strMatcher0, 0);
      assertEquals((-1), int0);
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(947);
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      int int0 = strBuilder0.lastIndexOf(strMatcher0, 947);
      assertEquals(947, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      int int0 = strBuilder1.lastIndexOf(strMatcher0);
      assertEquals(1, strBuilder0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      StrBuilder strBuilder1 = new StrBuilder("M}$O");
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
      assertFalse(boolean0);
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder0);
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      StrBuilder strBuilder1 = new StrBuilder("M}$O");
      Object[] objectArray0 = new Object[2];
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      objectArray0[0] = (Object) strBuilder_StrBuilderTokenizer0;
      strBuilder1.appendWithSeparators(objectArray0, "");
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
      assertEquals(74, strBuilder1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Windows NT");
      StrBuilder strBuilder1 = new StrBuilder("Windows NT");
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(42, strBuilder1.capacity());
      assertEquals(10, strBuilder1.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      StrBuilder strBuilder1 = new StrBuilder("(VG>%9H");
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(39, strBuilder1.capacity());
      assertEquals(7, strBuilder1.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      StrBuilder strBuilder1 = new StrBuilder("[u");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
      StrBuilder strBuilder2 = strBuilder1.replaceAll(strMatcher0, "[u");
      boolean boolean0 = strBuilder0.equals(strBuilder2);
      assertFalse(boolean0);
      assertEquals(2, strBuilder2.size());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("W`AI");
      StrBuilder strBuilder1 = new StrBuilder("W`AI");
      boolean boolean0 = strBuilder1.equals(strBuilder0);
      assertEquals(4, strBuilder1.length());
      assertTrue(boolean0);
      assertEquals(36, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.setLength(83);
      strBuilder1.hashCode();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(83, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.replace(27, 27, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      // Undeclared exception!
      try { 
        strBuilder0.validateIndex((-2145));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2145
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(", Length: 0");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder_StrBuilderTokenizer0.reset("Ee=");
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertEquals("Ee=", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, (-702), (-702));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(",}2v");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, (-2880));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 3, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 2, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      char[] charArray0 = new char[1];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
      assertEquals(0, int0);
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AI");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      CharBuffer charBuffer0 = CharBuffer.allocate(100);
      int int0 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertEquals(98, charBuffer0.length());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.skip(0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip(19L);
      assertEquals(0, strBuilder0.size());
      assertEquals(0L, long0);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      Reader reader0 = strBuilder0.asReader();
      long long0 = reader0.skip((-129L));
      assertEquals(0L, long0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }
}
