/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:01:31 GMT 2023
 */

package org.apache.commons.lang3.text.translate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang3.text.translate.NumericEntityUnescaper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumericEntityUnescaper_ESTest extends NumericEntityUnescaper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write("&^\"&#61G~$U;b");
      numericEntityUnescaper0.translate((CharSequence) stringBuffer0, (Writer) stringWriter0);
      assertEquals("&^\"&#61G~$U;b&^\"&#61G~$U;b", stringBuffer0.toString());
      assertEquals("&^\"&#61G~$U;b&^\"&#61G~$U;b", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write("E&#");
      stringWriter0.write(88);
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      // Undeclared exception!
      try { 
        numericEntityUnescaper0.translate((CharSequence) stringBuffer0, (Writer) stringWriter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write("E&#");
      stringWriter0.write(120);
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      stringWriter0.write("C0AD;{");
      numericEntityUnescaper0.translate((CharSequence) stringBuffer0, (Writer) stringWriter0);
      assertEquals("E&#xC0AD;{E\uC0AD{", stringBuffer0.toString());
      assertEquals("E&#xC0AD;{E\uC0AD{", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write("E$&#");
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      stringWriter0.write("03;{");
      numericEntityUnescaper0.translate((CharSequence) stringBuffer0, (Writer) stringWriter0);
      assertEquals("E$&#03;{E$\u0003{", stringBuffer0.toString());
      assertEquals("E$&#03;{E$\u0003{", stringWriter0.toString());
  }
}
