/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:58:21 GMT 2023
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreOperationCompare_ESTest extends CoreOperationCompare_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commonsWjxpath.ri.compiler.CoreOperationEqual@F000000004 = org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      QName qName0 = new QName("org.apache.commonsWjxpath.ri.compiler.CoreOperationEqual@F000000004 = org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003", "org.apache.commonsWjxpath.ri.compiler.CoreOperationEqual@F000000004 = org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commonsWjxpath.ri.compiler.CoreOperationEqual@F000000004 = org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) qName0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, coreOperationEqual0);
      SelfContext selfContext0 = new SelfContext(initialContext0, nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext(selfContext0, nodeNameTest0);
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      boolean boolean0 = nameAttributeTest0.equal(attributeContext0, coreOperationUnion0, coreOperationUnion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QName qName0 = new QName("org.apache.commonsWjxpath.ri.comgiler.CoreOperationEqual@F000000004 = org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003", "org.apache.commonsWjxpath.ri.comgiler.CoreOperationEqual@F000000004 = org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) qName0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      VariableReference variableReference0 = new VariableReference(qName0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, variableReference0);
      NamespaceContext namespaceContext0 = new NamespaceContext(initialContext0, nodeNameTest0);
      boolean boolean0 = nameAttributeTest0.equal(namespaceContext0, variableReference0, variableReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commonsWjxpath.ri.compiler.CoreOperationEqual@F000000004 = org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      QName qName0 = new QName("org.apache.commonsWjxpath.ri.compiler.CoreOperationEqual@F000000004 = org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003", "org.apache.commonsWjxpath.ri.compiler.CoreOperationEqual@F000000004 = org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commonsWjxpath.ri.compiler.CoreOperationEqual@F000000004 = org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) qName0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      SelfContext selfContext0 = new SelfContext(initialContext0, nodeNameTest0);
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationEqual0);
      Boolean boolean0 = (Boolean)coreOperationNotEqual0.computeValue(selfContext0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commonsWjxpath.ri.compiler.CoreOperationEqual@F000000004 = org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      QName qName0 = new QName("org.apache.commonsWjxpath.ri.compiler.CoreOperationEqual@F000000004 = org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003", "org.apache.commonsWjxpath.ri.compiler.CoreOperationEqual@F000000004 = org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) qName0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, coreOperationEqual0);
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      boolean boolean0 = nameAttributeTest0.equal(initialContext0, constant0, coreOperationUnion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Long long0 = new Long(1490L);
      Constant constant0 = new Constant(long0);
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      boolean boolean0 = nameAttributeTest0.contains(iterator0, "+$Sg; S]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant constant0 = new Constant("namespace");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      QName qName0 = new QName("!=");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) qName0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      RootContext rootContext0 = initialContext0.getRootContext();
      InitialContext initialContext1 = (InitialContext)rootContext0.getAbsoluteRootContext();
      boolean boolean0 = coreOperationEqual0.findMatch(initialContext1, initialContext0);
      assertEquals(1, initialContext0.getPosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant constant0 = new Constant("namespace");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      QName qName0 = new QName("!=");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) qName0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      RootContext rootContext0 = initialContext0.getRootContext();
      InitialContext initialContext1 = (InitialContext)rootContext0.getAbsoluteRootContext();
      initialContext1.getNodeSet();
      boolean boolean0 = coreOperationEqual0.findMatch(initialContext1, initialContext0);
      assertEquals(2, initialContext0.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      QName qName0 = new QName("y:IuMAtK", "y:IuMAtK");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      // Undeclared exception!
      try { 
        nameAttributeTest0.equal(variablePointer0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: y:IuMAtK:y:IuMAtK
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant constant0 = new Constant("namespace");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationLessThan0);
      QName qName0 = new QName("namespace");
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      Locale locale0 = Locale.ITALY;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "namespace", locale0);
      // Undeclared exception!
      try { 
        coreOperationEqual0.equal(nodePointer0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'namespace'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, coreOperationNotEqual0);
      Boolean boolean0 = Boolean.valueOf(false);
      boolean boolean1 = coreOperationNotEqual0.equal(boolean0, coreOperationMultiply0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-93));
      Constant constant0 = new Constant(byte0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      Boolean boolean0 = Boolean.TRUE;
      boolean boolean1 = coreOperationEqual0.equal(constant0, boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      boolean boolean0 = coreOperationNotEqual0.equal(coreOperationAdd0, coreOperationNotEqual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Long long0 = new Long((-5458090052309483570L));
      Constant constant0 = new Constant(long0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      boolean boolean0 = nameAttributeTest0.equal(constant0, long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      boolean boolean0 = coreOperationNotEqual0.equal("!=", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      boolean boolean0 = coreOperationNotEqual0.equal(coreOperationNotEqual0, "5sk^_17)/H.+m+L+ib");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, coreOperationNotEqual0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, coreOperationMultiply0);
      boolean boolean0 = nameAttributeTest0.equal((Object) null, coreOperationMultiply0);
      assertFalse(boolean0);
  }
}
