/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:58:03 GMT 2023
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.Locale;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Expression_ESTest extends Expression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(58, (Expression[]) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      Iterator iterator0 = coreOperationNotEqual0.iterate((EvalContext) null);
      Locale locale0 = Locale.CANADA_FRENCH;
      Expression.PointerIterator expression_PointerIterator0 = new Expression.PointerIterator(iterator0, (QName) null, locale0);
      // Undeclared exception!
      try { 
        expression_PointerIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Expression$PointerIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(48, (Expression[]) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      Iterator iterator0 = coreOperationNotEqual0.iterate((EvalContext) null);
      Locale locale0 = new Locale("Cannot access property: ", "Cannot access property: ");
      QName qName0 = new QName("Cannot access property: ", "Cannot access property: ");
      Expression.PointerIterator expression_PointerIterator0 = new Expression.PointerIterator(iterator0, qName0, locale0);
      boolean boolean0 = expression_PointerIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.Expression$ValueIterator");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      ChildContext childContext0 = new ChildContext(attributeContext0, processingInstructionTest0, false, false);
      Expression.ValueIterator expression_ValueIterator0 = new Expression.ValueIterator(childContext0);
      // Undeclared exception!
      try { 
        expression_ValueIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Expression$ValueIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Expression.ValueIterator expression_ValueIterator0 = new Expression.ValueIterator((Iterator) null);
      // Undeclared exception!
      try { 
        expression_ValueIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Expression$ValueIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(48, (Expression[]) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      boolean boolean0 = coreOperationNotEqual0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Constant constant0 = new Constant("loo{u1qU9PEI");
      // Undeclared exception!
      try { 
        constant0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Expression", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Iterator iterator0 = constant0.iteratePointers((EvalContext) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(48, (Expression[]) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      Iterator iterator0 = coreOperationNotEqual0.iterate((EvalContext) null);
      QName qName0 = new QName(".");
      Locale locale0 = new Locale(".", "/Y[R|cg");
      Expression.PointerIterator expression_PointerIterator0 = new Expression.PointerIterator(iterator0, qName0, locale0);
      Expression.ValueIterator expression_ValueIterator0 = new Expression.ValueIterator(expression_PointerIterator0);
      Object object0 = expression_ValueIterator0.next();
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(48, (Expression[]) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      Iterator iterator0 = coreOperationNotEqual0.iterate((EvalContext) null);
      Locale locale0 = new Locale("/a$notccessproperty[ ", "/a$notccessproperty[ ");
      QName qName0 = new QName("YK", "/a$notccessproperty[ ");
      Expression.PointerIterator expression_PointerIterator0 = new Expression.PointerIterator(iterator0, qName0, locale0);
      Expression.PointerIterator expression_PointerIterator1 = new Expression.PointerIterator(expression_PointerIterator0, (QName) null, locale0);
      BeanPointer beanPointer0 = (BeanPointer)expression_PointerIterator1.next();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      Iterator iterator0 = coreOperationNotEqual0.iterate((EvalContext) null);
      Expression.ValueIterator expression_ValueIterator0 = new Expression.ValueIterator(iterator0);
      Object object0 = expression_ValueIterator0.next();
      assertEquals(false, object0);
  }
}
