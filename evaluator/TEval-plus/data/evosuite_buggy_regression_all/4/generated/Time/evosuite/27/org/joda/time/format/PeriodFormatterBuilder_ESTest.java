/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:22:47 GMT 2023
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Hours;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeriodFormatterBuilder_ESTest extends PeriodFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("om)\"xzmbov8", "om)\"xzmbov8");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength((-214805112));
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No field to apply suffix to");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      StringBuffer stringBuffer0 = new StringBuffer(1291);
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, 1291);
      assertEquals("No field to apply suffix toNo field to apply suffix to", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No field to apply suffix to");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      StringWriter stringWriter0 = new StringWriter();
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) stringWriter0, 737);
      assertEquals("No field to apply suffix toNo field to apply suffix to", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("2ield must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"2ield must not be null\" is malformed at \"ield must not be null\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      periodFormatterBuilder0.appendSuffix("8%$_gy1 +", "8%$_gy1 +");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("8%$_gy1 +");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"8%$_gy1 +\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix("No field tx apply suffix to");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder2.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("/XX+]D5mN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"/XX+]D5mN\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      periodFormatterBuilder1.appendSuffix("2ield must not be null");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("1(lMQc{7t75,N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"1(lMQc{7t75,N\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.printZeroNever();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Locale locale0 = new Locale("IllegalArgumentException: ", "Values array must not be null");
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("4", "illegalargumentexception: ", (String[]) null, periodPrinter0, periodFormatterBuilder_Literal0, true, true);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("illegalargumentexception: ");
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      periodFormatterBuilder0.appendSuffix(".@<>$q");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("+C1dY9C8Za");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+C1dY9C8Za\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      periodFormatterBuilder1.appendSuffix(",F~=");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("3C^&J7rk%S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"3C^&J7rk%S\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("WgXl<s%GIN");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix("");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("2ield must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"2ield must not be null\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMonths();
      periodFormatterBuilder1.appendSuffix("2ange durati");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("0Z+SaW!!a8~58");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0Z+SaW!!a8~58\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix("]", "]ww@u5p$:\"m&prk");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"]\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("8%$_gy1 +tiNe.formaj.periodformatterbuilde]$compositeaffix");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Weeks weeks0 = Weeks.weeks(47);
      periodFormatter0.printTo((Writer) charArrayWriter0, (ReadablePeriod) weeks0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendSeparator("", "");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      String string0 = periodFormatter0.print(mutablePeriod0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[2];
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("org.joda.time.format.PeriodFormatterBuilder", "org.joda.time.format.PeriodFormatterBuilder", stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("vI<eg?=w]kd:QOY4", "vI<eg?=w]kd:QOY4");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.CANADA;
      StringBuffer stringBuffer0 = new StringBuffer("vI<eg?=w]kd:QOY4");
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("vI<eg?=w]kd:QOY4000", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral("");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("", "g.~~!^TPGC7o!^GAf$(");
      periodFormatterBuilder2.appendMonths();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder2.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("4126bj\rwc}Jf|-Xt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"4126bj\rwc}Jf|-Xt\" is malformed at \"bj\rwc}Jf|-Xt\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod(10, (-1455), 10, 44, (-1455), (-1455), 44, (-3630));
      Locale locale0 = Locale.CANADA;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "2";
      stringArray0[1] = "O5{_%tm]'10F";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("O5{_%tm]'10F", "g", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "O5{_%tm]'10F", (-1), locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      assertNull(periodPrinter0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) null);
      PeriodParser periodParser0 = periodFormatterBuilder0.toParser();
      assertNull(periodParser0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.clear();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer or parser supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("sS%W~ZT&2k?->4");
      periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("sS%W~ZT&2k?->4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"sS%W~ZT&2k?->4\" is too short
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendPrefix(">S>[ki$jTL<a}", "4~+N.7iq{<>HL");
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("4~+N.7iq{<>HL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"4~+N.7iq{<>HL\" is too short
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix("SXdi8AnYTqY", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendPrefix("WgXl<l%G>N", "WgXl<l%G>N");
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("WgXl<l%G>N", "WgXl<l%G>N");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("8%$_gy1 +", "8%$_gy1 +");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("=`CG6?O|KaGo6", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "4X.J8_qVNO5Cl0sv";
      stringArray0[1] = "4X.J8_qVNO5Cl0sv";
      stringArray0[2] = "4X.J8_qVNO5Cl0sv";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("4X.J8_qVNO5Cl0sv", "4X.J8_qVNO5Cl0sv", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Separator0, (PeriodParser) periodFormatterBuilder_Literal0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("TG.a+qT!3<duUmi'");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("8%$_gy1 +time.format.periodformatterbuilder$compositeaffix");
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("8%$_gy1 +time.format.periodformatterbuilder$compositeaffix");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparatorIfFieldsAfter((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator("p", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("");
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("l}oYqOE\"|m6IgM");
      periodFormatterBuilder1.appendMonths();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("l}oYqOE\"|m6IgM");
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(",s+=|^", ",s+=|^");
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparator(",s+=|^");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      periodFormatterBuilder0.append(periodFormatter0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.toFormatter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Builder has created neither a printer nor a parser
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodParser periodParser0 = periodFormatterBuilder0.toParser();
      assertFalse(periodParser0.equals((Object)periodFormatterBuilder_Composite0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("oCQ6P9", "", stringArray0, periodFormatterBuilder_Literal0, (PeriodParser) null, false, false);
      periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Separator0, (PeriodParser) null);
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertSame(periodPrinter0, periodFormatterBuilder_Separator0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("org.joda.time.format.DateTimeFormatterBuilder");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendWeeks();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder2.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-8\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder0.appendSuffix("No printer or parser supplied");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("4,|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"4,|\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("<!$7GUxx>+/3p1-TU");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("<!$7GUxx>+/3p1-TU", 15);
      assertEquals((-16), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No field to apply suffix to");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("org.joda.time.field.DecoratedDurationField", 3);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("FG!2w}c#re4dE$f");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("FG!2w}c#re4dE$f", 3);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("d");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan(" -2+A5@TC", 5);
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("<!$7GUxx>+/3p1-TU");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("Xu76ZV)q2G7{", 3);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("<!$7GUxx>+/3p1-TU");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("<!$7GUxx>+/3p1-TU", 3);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("<!$7GUxN+/3-T1U");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("@gt8i0\u0006f&s6[~T{x&", 3);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("/3I9Y");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("/3I9Y", 3);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.periodformatterbuilder$composit3affix", "d");
      int int0 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(1);
      assertEquals(58, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("/3I9Y", "/3I9Y");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroAlways();
      periodFormatterBuilder1.appendPrefix("/3I9Y", "/3I9Y");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendDays();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder3.toPrinter();
      Locale locale0 = Locale.KOREA;
      StringBuffer stringBuffer0 = new StringBuffer("/3I9Y");
      Years years0 = Years.ZERO;
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) years0, locale0);
      assertEquals(11, stringBuffer0.length());
      assertEquals("/3I9Y/3I9Y0", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("A.J4qRR /(o>0", "3");
      StringBuffer stringBuffer0 = new StringBuffer();
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 1);
      assertEquals(13, stringBuffer0.length());
      assertEquals("A.J4qRR /(o>0", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("Values array must not be null", "Values array must not be null");
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      Locale locale0 = new Locale("Values array must not be null", "Values array must not be null");
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("4", "values array must not be null", (String[]) null, periodPrinter0, periodFormatterBuilder_Literal0, true, true);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("values array must not be null");
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("A.J4qRR /(o>0", "3");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("yBR!Ex7CvwVQU");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      periodFormatterBuilder_PluralAffix0.printTo((Writer) outputStreamWriter0, 1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendSuffix("uCEaq2#Mk@|^8)Y", "'5x4uM-U^\"k");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-8\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("4~+N.7iq{<>HL", "4~+N.7iq{<>HL");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(37, 37, 37, false, 37, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"|\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.format.PeriodFormatterBuilder$Separator");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(244, 244, 244, true, 244, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(62035200000L, 62035200000L, periodType0);
      Locale locale0 = Locale.JAPAN;
      int int0 = periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, "org.joda.time.format.PeriodFormatterBuilder$Separator", (-516), locale0);
      assertEquals(515, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No fielto apply suffix to");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("No fielto apply suffix to", 45);
      assertEquals((-46), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder0.appendSuffix(")c>lh0frxe");
      periodFormatterBuilder0.appendSuffix(")c>lh0frxe");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod(")c>lh0frxe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \")c>lh0frxe\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("<!$$*pt0s^ijp1-tu");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1), (-1), (-1), false, (-1), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      Locale locale0 = Locale.CANADA_FRENCH;
      int int0 = periodFormatterBuilder_FieldFormatter0.countFieldsToPrint((ReadablePeriod) null, (-1), locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = Period.millis((-650));
      String string0 = period0.toString();
      assertEquals("PT0.650S", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("/3I9Y", "/3I9Y");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroAlways();
      periodFormatterBuilder1.appendPrefix("/3I9Y", "/3I9Y");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendDays();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder3.toPrinter();
      Hours hours0 = Hours.SEVEN;
      Weeks weeks0 = hours0.toStandardWeeks();
      Locale locale0 = Locale.KOREA;
      int int0 = periodPrinter0.calculatePrintedLength(weeks0, locale0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendYears();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertTrue(periodFormatter0.isPrinter());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Weeks weeks0 = Weeks.weeks(47);
      periodFormatter0.printTo((Writer) charArrayWriter0, (ReadablePeriod) weeks0);
      assertEquals(0, charArrayWriter0.size());
      assertTrue(periodFormatter0.isParser());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      String[] stringArray0 = new String[2];
      periodFormatterBuilder0.printZeroAlways();
      stringArray0[0] = "(;D8vPCt Q0swF";
      stringArray0[1] = "(;D8vPCt Q0swF";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("(;D8vPCt Q0swF", "(;D8vPCt Q0swF", stringArray0);
      periodFormatterBuilder2.appendYears();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((byte) (-102));
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (Chronology) iSOChronology0);
      Locale locale0 = Locale.CANADA_FRENCH;
      StringWriter stringWriter0 = new StringWriter();
      periodPrinter0.printTo((Writer) stringWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("0(;D8vPCt Q0swF0", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Locale locale0 = Locale.GERMANY;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("4", "\u5FB7\u6587", (String[]) null, periodPrinter0, periodFormatterBuilder_Literal0, true, true);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4");
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No field to apply suffix to");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Locale locale0 = Locale.PRC;
      StringWriter stringWriter0 = new StringWriter();
      Period period0 = Period.ZERO;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "No field to apply suffix to";
      stringArray0[1] = "No field to apply suffix to";
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-127), (-211), 2, true, 1, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("No field to apply suffix to", "e{?o;LD", stringArray0, periodPrinter0, periodFormatterBuilder_FieldFormatter0, true, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      periodFormatterBuilder_Separator1.printTo((Writer) stringWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("No field to apply suffix to0No field to apply suffix to", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(;D8vPCt Q0swF";
      stringArray0[1] = "(;D8vPCt Q0swF";
      periodFormatterBuilder1.appendSeparator("(;D8vPCt Q0swF", "(;D8vPCt Q0swF", stringArray0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis((byte) (-102));
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (Chronology) iSOChronology0);
      Locale locale0 = Locale.CANADA_FRENCH;
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "(;D8vPCt Q0swF", 3818, locale0);
      assertEquals((-3819), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "yw#h*";
      stringArray0[1] = "yw#h*";
      stringArray0[2] = "yw#h*";
      stringArray0[3] = "yw#h*";
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("yw#h*");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, false, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("yw#h*", "yw#h*", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, false);
      Days days0 = Days.ZERO;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      Locale locale0 = Locale.GERMANY;
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "a-2w\"+A YYjApG:h", 4, locale0);
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      PeriodType periodType0 = PeriodType.years();
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      // Undeclared exception!
      try { 
        periodFormatter1.parseMutablePeriod("2ange durati");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"2ange durati\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis();
      periodFormatterBuilder0.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix("");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("2ield must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"2ield must not be null\" is malformed at \"ield must not be null\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("-FY}QJ%0'A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-FY}QJ%0'A\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("+8sp93M #");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+8sp93M #\" is malformed at \"sp93M #\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.rejectSignedValues(true);
      periodFormatterBuilder0.appendSeconds();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-8\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("+/L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+/L\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod(",7@3~m+m4X0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \",7@3~m+m4X0\" is malformed at \"@3~m+m4X0\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod(".T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \".T\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendDays();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod(",F~=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \",F~=\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("4,|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"4,|\" is malformed at \"|\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod(",7355~m+mbU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \",7355~m+mbU\" is malformed at \"~m+mbU\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("<!$$*pt0s^ijp1-tu");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(81, (-1), 81, false, 81, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      Locale locale0 = Locale.JAPANESE;
      int int0 = periodFormatterBuilder_FieldFormatter0.parseInto((ReadWritablePeriod) null, "0hl5x@6~.&ysI", (-1), locale0);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("9223372036854775808");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9223372036\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      periodFormatterBuilder0.appendSeparator("vI<eg?=w]kdy:QOY4", "vI<eg?=w]kdy:QOY4");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.CANADA;
      StringBuffer stringBuffer0 = new StringBuffer();
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("0", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Years years0 = Years.THREE;
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("tGKc");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1747), 4, 4, true, (-1747), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      long long0 = periodFormatterBuilder_FieldFormatter0.getFieldValue(years0);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(;D8vPCt Q0swF";
      stringArray0[1] = "(;D8vPCt Q0swF";
      periodFormatterBuilder1.appendSeparator("(;D8vPCt Q0swF", "(;D8vPCt Q0swF", stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroIfSupported();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder3.toPrinter();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((byte) (-102));
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (Chronology) iSOChronology0);
      Locale locale0 = Locale.CANADA_FRENCH;
      int int0 = periodPrinter0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      periodFormatterBuilder0.appendSeparator("org.joda.time.format.PeriodFormatterBuilder", "org.joda.time.format.PeriodFormatterBuilder");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      periodFormatterBuilder1.appendYears();
      periodFormatterBuilder0.toFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("org.joda.time.format.PeriodFormatterBuilder");
      Years years0 = Years.ZERO;
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) years0, (Locale) null);
      assertEquals("org.joda.time.format.PeriodFormatterBuilder0", stringBuffer0.toString());
      assertEquals(44, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("org.joda.time.format.PeriodFormaUterBuilder", "org.joda.time.format.PeriodFormaUterBuilder");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroRarelyFirst();
      periodFormatterBuilder0.appendMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      Locale locale0 = Locale.TAIWAN;
      Period period0 = new Period(2592000000L);
      periodPrinter0.printTo((StringBuffer) null, (ReadablePeriod) period0, locale0);
      assertEquals("zho", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("org.joda.tie.format.PeriodFormaUterBuilder", "org.joda.tie.format.PeriodFormaUterBuilder");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroRarelyFirst();
      periodFormatterBuilder2.appendMillis();
      periodFormatterBuilder0.appendMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.UK;
      periodPrinter0.printTo((StringBuffer) null, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("GBR", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMonths();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("vI<eg?=w]kdy:QPOY4", "vI<eg?=w]kdy:QPOY4");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroRarelyFirst();
      periodFormatterBuilder1.appendMonths();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.CHINA;
      StringBuffer stringBuffer0 = new StringBuffer("vI<eg?=w]kdy:QPOY4");
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals(19, stringBuffer0.length());
      assertEquals("vI<eg?=w]kdy:QPOY40", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-2321), (-2321), (-2321), true, (-2321), (PeriodFormatterBuilder.FieldFormatter[]) null, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      Minutes minutes0 = Minutes.MIN_VALUE;
      long long0 = periodFormatterBuilder_FieldFormatter0.getFieldValue(minutes0);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      PeriodType periodType0 = PeriodType.millis();
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      // Undeclared exception!
      try { 
        periodFormatter1.parseMutablePeriod("M?1bCjr0<}BzMQ}K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"M?1bCjr0<}BzMQ}K\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMonths();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("4126bj\rwc}Jf|-Xt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"4126bj\rwc}Jf|-Xt\" is malformed at \"bj\rwc}Jf|-Xt\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod("-8");
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendDays();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("3C^&J7rk%S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"3C^&J7rk%S\" is malformed at \"C^&J7rk%S\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMinutes();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("3is[egc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"3is[egc\" is malformed at \"is[egc\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = null;
      try {
        periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Ma;q", (String) null, stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Prefix not followed by field", "Prefix not followed by field", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator1);
      Period period0 = Period.days(2147483645);
      String string0 = periodFormatter0.print(period0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendWeeks();
      periodFormatterBuilder0.appendSeparator("vI<eg?=w]kdy:QPOY4", "vI<eg?=w]kdy:QPOY4");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Months months0 = Months.TWO;
      Locale locale0 = Locale.FRENCH;
      int int0 = periodPrinter0.countFieldsToPrint(months0, (-1), locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("4~+N.7iq{<>HL");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.CHINA;
      StringBuffer stringBuffer0 = new StringBuffer("4~+N.7iq{<>HL");
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("dCW");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("4~+N.7iq{<>HL", "dCW", stringArray0, periodPrinter0, periodFormatterBuilder_Literal0, true, true);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      periodFormatterBuilder0.appendDays();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.CANADA_FRENCH;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("K5DRw$fj++9", "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, false);
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      int int0 = periodFormatterBuilder_Separator0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      String[] stringArray0 = new String[2];
      periodFormatterBuilder0.printZeroAlways();
      stringArray0[0] = "(;D8vPCt Q0swF";
      stringArray0[1] = "(;D8vPCt Q0swF";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("(;D8vPCt Q0swF", "(;D8vPCt Q0swF", stringArray0);
      periodFormatterBuilder2.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder3.toPrinter();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((byte) (-102));
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (Chronology) iSOChronology0);
      Locale locale0 = Locale.CANADA_FRENCH;
      int int0 = periodPrinter0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("2ange durati");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      Days days0 = Days.SEVEN;
      String string0 = periodFormatter0.print(days0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.CANADA;
      StringBuffer stringBuffer0 = new StringBuffer("8%$_gy1 +");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("S|y Ilq:>{-TX}", "8%$_gy1 +", (String[]) null, periodPrinter0, (PeriodParser) null, true, false);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.CHINA;
      StringBuffer stringBuffer0 = new StringBuffer("4~+N.7iq{<>HL");
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("dCW");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("4~+N.7iq{<>HL", "dCW", stringArray0, periodPrinter0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodPrinter0, periodFormatterBuilder_Literal0);
      periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("4~+N.7iq{<>HL0dCW0", stringBuffer0.toString());
      assertEquals(18, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator("/3I9Y", "/3I9Y");
      periodFormatterBuilder2.appendSeconds();
      periodFormatterBuilder1.appendDays();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Locale locale0 = Locale.US;
      MutablePeriod mutablePeriod0 = new MutablePeriod(45, 276, 45, 45, (-3077), 45, 45, (-1680));
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("43.320/3I9Y4545", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      Locale locale0 = Locale.GERMANY;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("4", "4", (String[]) null, periodPrinter0, periodFormatterBuilder_Literal0, true, false);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Chinesisch");
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("8%$_gy1 +");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder2.toFormatter();
      MockFileWriter mockFileWriter0 = new MockFileWriter("8%$_gy1 +");
      Period period0 = new Period(5L, (PeriodType) null, (Chronology) null);
      periodFormatter0.printTo((Writer) mockFileWriter0, (ReadablePeriod) period0);
      assertTrue(periodFormatter0.isParser());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      String[] stringArray0 = new String[2];
      periodFormatterBuilder0.printZeroAlways();
      stringArray0[0] = "(;D8vPCt Q0swF";
      stringArray0[1] = "(;D8vPCt Q0swF";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("(;D8vPCt Q0swF", "(;D8vPCt Q0swF", stringArray0);
      periodFormatterBuilder2.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder3.toPrinter();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((byte) (-102));
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (Chronology) iSOChronology0);
      Locale locale0 = Locale.CANADA_FRENCH;
      StringWriter stringWriter0 = new StringWriter();
      periodPrinter0.printTo((Writer) stringWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("0(;D8vPCt Q0swF00.000", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("^.", "h[vwSc<`Y;>!:9wuYYU", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("h[vwSc<`Y;>!:9wuYYU");
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      Locale locale0 = new Locale("Values array must not be null", "Values array must not be null");
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("$I]>$EIbmkH8", "values array must not be null", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, true);
      periodFormatterBuilder_Separator0.finish(periodPrinter0, periodFormatterBuilder_Literal0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ap&)W>");
      periodFormatterBuilder_Separator0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendSeparator("", "");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("3BS[>gc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"3BS[>gc\" is malformed at \"BS[>gc\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      periodFormatterBuilder1.appendSeparatorIfFieldsAfter("2ange durati");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("2ange durati");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"2ange durati\" is malformed at \"ange durati\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("8%$_gy1 +tiNe.formaj.periodformatterbuilde]$compositeaffix");
      periodFormatterBuilder0.appendYears();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("8%$_gy1 +tiNe.formaj.periodformatterbuilde]$compositeaffix");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"8%$_gy1 +tiNe.formaj.periodforma...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("5p^rV}u61F@7t1sU");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      String[] stringArray0 = new String[2];
      periodFormatterBuilder0.printZeroAlways();
      stringArray0[0] = "(;D8vPCt Q0swF";
      stringArray0[1] = "(;D8vPCt Q0swF";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("(;D8vPCt Q0swF", "(;D8vPCt Q0swF", stringArray0);
      periodFormatterBuilder2.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder3.toPrinter();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis((byte) (-102));
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (Chronology) iSOChronology0);
      Locale locale0 = Locale.CANADA_FRENCH;
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "(;D8vPCt Q0swF", 3818, locale0);
      assertEquals((-3819), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      periodFormatterBuilder1.append(periodFormatter0);
      PeriodFormatter periodFormatter1 = periodFormatterBuilder0.toFormatter();
      assertTrue(periodFormatter1.isParser());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) null);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter(">D,L`*:M*e#c/yN");
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
  }
}
