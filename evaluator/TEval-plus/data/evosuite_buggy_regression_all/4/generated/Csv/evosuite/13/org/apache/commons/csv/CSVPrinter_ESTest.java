/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:33:49 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.sql.DataTruncation;
import java.sql.ResultSet;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import java.util.Vector;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("'tHI*", false);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(mockFileWriter0, appendable0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) pipedWriter0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "format";
      stringArray0[1] = "9@`q37l}}s-";
      stringArray0[2] = "?aH-l6Ar[RPb@";
      stringArray0[3] = "8\"Ik5Yn";
      stringArray0[4] = "3DS(";
      stringArray0[5] = "f8P$p*";
      stringArray0[6] = "f61f\"F})F~^=4";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringWriter0);
      assertNotNull(cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "format";
      stringArray0[1] = "9@`q37l}}s-";
      stringArray0[2] = "?aH-l6Ar[RPb@";
      stringArray0[3] = "8\"Ik5Yn";
      stringArray0[4] = "3DS(";
      stringArray0[5] = "f8P$p*";
      stringArray0[6] = "f61f\"F})F~^=4";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringWriter0);
      assertNotNull(cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(4263);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(4263);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(pipedWriter0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(4263);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(">P8DgHh,*yix&&/D\"%:");
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      Object[] objectArray0 = new Object[7];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(168, charBuffer0.position());
      assertEquals(4095, charBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat0 = CSVFormat.newFormat('j');
      String string0 = cSVFormat0.format(objectArray0);
      assertEquals("jjj", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Character character0 = Character.valueOf('5');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) resultSet0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('j');
      Object object0 = new Object();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("out");
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      DataTruncation dataTruncation0 = new DataTruncation((-911), true, true, 122, 122);
      cSVPrinter0.printRecords((Iterable<?>) dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("out");
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      DataTruncation dataTruncation0 = new DataTruncation(122, false, false, 2595, 122);
      linkedHashSet0.add(dataTruncation0);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"R^%]SP?%=Hy90c]z]S");
      Object[] objectArray0 = new Object[7];
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("\"\"\"R^%]SP?%=Hy90c]z]S\",\"\"\"R^%]SP?%=Hy90c]z]S\",\"\"\"R^%]SP?%=Hy90c]z]S\",\"\"\"R^%]SP?%=Hy90c]z]S\",\"\"\"R^%]SP?%=Hy90c]z]S\",\"\"\"R^%]SP?%=Hy90c]z]S\",\"\"\"R^%]SP?%=Hy90c]z]S\"", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("4\"9");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[5];
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(40, charArrayWriter0.size());
      assertEquals("\"4\"\"9\"\r\n\"4\"\"9\"\r\n\"4\"\"9\"\r\n\"4\"\"9\"\r\n\"4\"\"9\"\r\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("[G.C'd(pQxMIt/SeY");
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[6];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"[G.C'd(pQxMIt/SeY\"\r\n\"[G.C'd(pQxMIt/SeY\"\r\n\"[G.C'd(pQxMIt/SeY\"\r\n\"[G.C'd(pQxMIt/SeY\"\r\n\"[G.C'd(pQxMIt/SeY\"\r\n\"[G.C'd(pQxMIt/SeY\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('n');
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) cSVFormat1;
      String string0 = cSVFormat1.format(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(5177);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpeuted Quote vale: ");
      Object[] objectArray0 = new Object[5];
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(135, charBuffer0.position());
      assertEquals(5042, charBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(4263);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('x');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);
      cSVPrinter0.printComment(">P8DgHh,*yix&&/D\"%:");
      assertEquals(4240, charBuffer0.remaining());
      assertEquals(4240, charBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\'');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printComment("\r\n");
      assertEquals("' \r\n' \r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Vector<MockFileWriter> vector0 = new Vector<MockFileWriter>();
      MockFileWriter mockFileWriter0 = new MockFileWriter(">P8DgHh,*yix&&/D\"%:", true);
      vector0.add(mockFileWriter0);
      PriorityQueue<MockFileWriter> priorityQueue0 = new PriorityQueue<MockFileWriter>(vector0);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue0);
      assertTrue(priorityQueue0.contains(mockFileWriter0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("out");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) linkedHashSet0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(pipedWriter0, cSVFormat0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      try { 
        cSVPrinter0.printRecords(resultSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
}
