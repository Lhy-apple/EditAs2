/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:29:58 GMT 2023
 */

package org.apache.commons.compress.changes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChangeSetPerformer_ESTest extends ChangeSetPerformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 903);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(bufferedInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)20);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(pipedOutputStream0);
      ChangeSetResults changeSetResults0 = changeSetPerformer0.perform(tarArchiveInputStream0, tarArchiveOutputStream0);
      assertNotNull(changeSetResults0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      PipedInputStream pipedInputStream0 = new PipedInputStream(894);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1180);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      changeSet0.deleteDir("");
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(zipArchiveInputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1180);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      ChangeSetResults changeSetResults0 = changeSetPerformer0.perform(jarArchiveInputStream0, tarArchiveOutputStream0);
      assertNotNull(changeSetResults0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      PipedInputStream pipedInputStream0 = new PipedInputStream(894);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1180);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("T.h\"Zw?", 0L);
      changeSet0.add((ArchiveEntry) arArchiveEntry0, (InputStream) bufferedInputStream0, false);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1180);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      try { 
        changeSetPerformer0.perform(zipArchiveInputStream0, tarArchiveOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
