/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:31:21 GMT 2023
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SevenZOutputFile_ESTest extends SevenZOutputFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = MockFile.createTempFile("S6Wt7G#o8S/ilJg>", "S6Wt7G#o8S/ilJg>");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(file0);
      SevenZMethod sevenZMethod0 = SevenZMethod.LZMA2;
      sevenZOutputFile0.setContentCompression(sevenZMethod0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Wt7nG#o8S/ilJg>");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      sevenZOutputFile0.close();
      sevenZOutputFile0.close();
      assertEquals(44L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = MockFile.createTempFile("S6Wt7G#o8S/ilJg>", "S6Wt7G#o8S/ilJg>");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(file0);
      sevenZOutputFile0.putArchiveEntry((ArchiveEntry) null);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.closeArchiveEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("bB0d", "bB0d");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      byte[] byteArray0 = new byte[0];
      sevenZOutputFile0.write(byteArray0, (-2101792505), (-2101792505));
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = MockFile.createTempFile("S6Wt7G#o8S/ilJg>", "S6Wt7G#o8S/ilJg>");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(file0);
      sevenZOutputFile0.close();
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("S6Wt7G#o8S/ilJg>", "S6Wt7G#o8S/ilJg>");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(file0);
      sevenZOutputFile0.write((-509));
      sevenZOutputFile0.write((-1071));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile("og.apahe.commons.compes.archivers.evenz.Sev2nutpqtFile$OutputStreamWrafper", "og.apahe.commons.compes.archivers.evenz.Sev2nutpqtFile$OutputStreamWrafper");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(file0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(file0, "og.apahe.commons.compes.archivers.evenz.Sev2nutpqtFile$OutputStreamWrafper");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      sevenZOutputFile0.write(byteArray0);
      sevenZOutputFile0.closeArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.close();
      assertEquals(747L, file0.length());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      try { 
        sevenZOutputFile0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apahe.commons.compes.archivers.sevenz.Sev2nutpqtFile$OutputStreamWrafper");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apahe.commons.compes.archivers.sevenz.Sev2nutpqtFile$OutputStreamWrafper");
      sevenZArchiveEntry0.setAntiItem(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.close();
      assertEquals(220L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apahe.commons.compes.archivers.sevenz.Sev2nutpqtFile$OutputStreamWrafper");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apahe.commons.compes.archivers.sevenz.Sev2nutpqtFile$OutputStreamWrafper");
      sevenZArchiveEntry0.setHasCreationDate(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.close();
      assertEquals(229L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apahe.commons.compes.archivers.sevenz.Sev2nutpqtFile$OutputStreamWrafper");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apahe.commons.compes.archivers.sevenz.Sev2nutpqtFile$OutputStreamWrafper");
      sevenZArchiveEntry0.setHasCreationDate(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apahe.commons.compes.archivers.sevenz.Sev2nutpqtFile$OutputStreamWrafper");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.close();
      assertEquals(392L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = MockFile.createTempFile("og.apahe.commons.compes.archivers.evenz.Sev2nutpqtFile$OutputStreamWrafper", "og.apahe.commons.compes.archivers.evenz.Sev2nutpqtFile$OutputStreamWrafper");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(file0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(file0, "og.apahe.commons.compes.archivers.evenz.Sev2nutpqtFile$OutputStreamWrafper");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZArchiveEntry0.setHasAccessDate(true);
      sevenZOutputFile0.close();
      assertEquals(225L, file0.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = MockFile.createTempFile("og.apahe.commons.compes.archivers.evenz.Sev2nutpqtFile$OutputStreamWrafper", "og.apahe.commons.compes.archivers.evenz.Sev2nutpqtFile$OutputStreamWrafper");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(file0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(file0, "og.apahe.commons.compes.archivers.evenz.Sev2nutpqtFile$OutputStreamWrafper");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(file0, "og.apahe.commons.compes.archivers.evenz.Sev2nutpqtFile$OutputStreamWrafper");
      sevenZArchiveEntry1.setHasAccessDate(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.close();
      assertEquals(384L, file0.length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("og.apahe.commons.compes.archivers.evenz.Sev2nutpqtFile$OutputStreamWrafper");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "og.apahe.commons.compes.archivers.evenz.Sev2nutpqtFile$OutputStreamWrafper");
      sevenZArchiveEntry0.setHasLastModifiedDate(false);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.close();
      assertEquals(201L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S6Wt7G#o8S/ilJg>", "S6Wt7G#o8S/ilJg>");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "S6Wt7G#o8S/ilJg>");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZArchiveEntry0.setHasWindowsAttributes(true);
      sevenZOutputFile0.close();
      assertEquals(104L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S6Wt7G#o8S/ilJg>", "S6Wt7G#o8S/ilJg>");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "S6Wt7G#o8S/ilJg>");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "");
      sevenZArchiveEntry1.setHasWindowsAttributes(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.close();
      assertEquals(115L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S6Wt7G#o8S/ilJg>", "S6Wt7G#o8S/ilJg>");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "S6Wt7G#o8S/ilJg>");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.close();
      assertEquals(351L, mockFile0.length());
  }
}
