/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 21:05:27 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli2.DisplaySetting;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.option.Switch;
import org.apache.commons.cli2.validation.ClassValidator;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.Validator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GroupImpl_ESTest extends GroupImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-1489), (-1489), false);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.option.Switch", "", (-884), 1901, '&', 'u', (Validator) null, "]^1Y8", linkedList0, 1901);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      ListIterator<Switch> listIterator0 = (ListIterator<Switch>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(listIterator0).hasNext();
      argumentImpl0.processValues(writeableCommandLineImpl0, listIterator0, groupImpl0);
      assertEquals((-1489), groupImpl0.getMinimum());
      assertEquals((-1489), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "/BA", "", 960, 960, false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "org.apache.commons.cli2.option.GroupImpl");
      assertEquals(960, groupImpl0.getMaximum());
      assertEquals("", groupImpl0.getDescription());
      assertEquals(960, groupImpl0.getMinimum());
      assertFalse(boolean0);
      assertEquals("/BA", groupImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", "8JGY.%zj1\"_Ki%8t", 2978, 2978, false);
      groupImpl0.getAnonymous();
      assertEquals(" (", groupImpl0.getPreferredName());
      assertEquals(2978, groupImpl0.getMaximum());
      assertEquals(2978, groupImpl0.getMinimum());
      assertEquals("8JGY.%zj1\"_Ki%8t", groupImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "/%k{o", "/%k{o", 0, 0, false);
      int int0 = groupImpl0.getMaximum();
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      ClassValidator classValidator0 = new ClassValidator();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.option.OptionImpl", "org.apache.commons.cli2.option.OptionImpl", 614, 614, '[', '9', classValidator0, "org.apache.commons.cli2.option.OptionImpl", linkedList0, 41);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      linkedList0.offer(sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 753, (-2718), false);
      groupImpl0.toString();
      assertEquals(0, linkedList0.size());
      assertTrue(groupImpl0.isRequired());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.option.GroupImpl", "org.apache.commons.cli2.option.GroupImpl", (-1384), (-4516), true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
      assertEquals((-1384), groupImpl0.getMinimum());
      assertFalse(boolean0);
      assertEquals((-4516), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      DateValidator dateValidator0 = new DateValidator();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("8JGY.%zj1\"_Ki%8t", "", 46, 46, 'O', '_', dateValidator0, "", linkedList0, 46);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '\\', '4', "", linkedList0);
      linkedList0.add((ArgumentImpl) sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "8JGY.%zj1\"_Ki%8t", "8JGY.%zj1\"_Ki%8t", 2978, 2978, false);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List list0 = groupImpl0.helpLines(2978, linkedHashSet0, comparator0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, list0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Argument.unexpected.value");
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "?", "?", 0, 0, false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
      ListIterator<GroupImpl> listIterator0 = linkedList1.listIterator();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(0, groupImpl0.getMaximum());
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "?", "?", 0, 0, false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("?").when(listIterator0).next();
      doReturn("?").when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals(0, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 1311, 1311, false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn((Object) null).when(listIterator0).next();
      doReturn((Object) null).when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(1311, groupImpl0.getMaximum());
      assertEquals(1311, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 1311, 1311, false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      linkedList0.add(groupImpl0);
      // Undeclared exception!
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption("*%<Uf", "org.apache.commons.cli2.option.GroupImpl", 753);
      LinkedList<PropertyOption> linkedList1 = new LinkedList<PropertyOption>();
      linkedList1.offer(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList1, "org.apache.commons.cli2.option.GroupImpl", (String) null, 0, 753, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      groupImpl0.validate(writeableCommandLineImpl0);
      assertTrue(linkedList1.contains(propertyOption0));
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "", 753, 753, false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option 
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "F9EL&T[}5x%", "F9EL&T[}5x%", (-1384), (-1384), false);
      StringBuffer stringBuffer0 = new StringBuffer();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      groupImpl0.appendUsage(stringBuffer0, (Set) linkedHashSet0, (Comparator) null, "F9EL&T[}5x%");
      assertEquals("F9EL&T[}5x%", stringBuffer0.toString());
      assertEquals((-1384), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      GroupImpl groupImpl0 = new GroupImpl(list0, (String) null, "", 1795, 0, true);
      Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      groupImpl0.appendUsage((StringBuffer) null, set0, comparator0);
      assertEquals(0, groupImpl0.getMaximum());
      assertTrue(groupImpl0.isRequired());
      assertEquals(1795, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption("*%<Uf", "org.apache.commons.cli2.option.GroupImpl", 753);
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      linkedList0.offer(propertyOption0);
      linkedList0.offer(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.option.GroupImpl", (String) null, 0, 753, true);
      String string0 = groupImpl0.toString();
      assertTrue(linkedList0.contains(propertyOption0));
      assertEquals("[org.apache.commons.cli2.option.GroupImpl (*%<Uf<property>=<value>|*%<Uf<property>=<value>)]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      LinkedList<SourceDestArgument> linkedList1 = new LinkedList<SourceDestArgument>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList1, "x", "?", (-1384), (-1384), false);
      linkedList0.add(groupImpl0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList0, "?", "", (-1384), (-1384), false);
      String string0 = groupImpl1.toString();
      assertEquals(1, linkedList0.size());
      assertEquals("[? ([x ()])]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, (-1346), (-2808), false);
      groupImpl0.findOption((String) null);
      assertEquals(1, linkedList0.size());
      assertEquals((-2808), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      DateValidator dateValidator0 = new DateValidator(dateFormat0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("DISPLAY_PARENT_CHILDREN", "DISPLAY_PARENT_CHILDREN", 960, 960, ',', '\'', dateValidator0, "DISPLAY_PARENT_CHILDREN", linkedList0, 0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "--", "", 960, 960, false);
      Command command0 = new Command("DISPLAY_PARENT_CHILDREN", "", linkedHashSet0, false, argumentImpl0, groupImpl0, 0);
      linkedList0.add(command0);
      Option option0 = groupImpl0.findOption("DISPLAY_PARENT_CHILDREN");
      assertEquals(960, groupImpl0.getMinimum());
      assertEquals(960, groupImpl0.getMaximum());
      assertEquals("", groupImpl0.getDescription());
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "bZ", "bZ", (-2706), (-2706), true);
      linkedList0.add(groupImpl0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList0, "", "", 966, 91, false);
      // Undeclared exception!
      groupImpl0.toString();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      DateValidator dateValidator0 = new DateValidator(dateFormat0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("DISPLAY_PARENT_CHILDREN", "DISPLAY_PARENT_CHILDREN", 960, 960, ',', '\'', dateValidator0, "DISPLAY_PARENT_CHILDREN", linkedList0, 0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "--", "", 960, 960, false);
      Command command0 = new Command("DISPLAY_PARENT_CHILDREN", "", linkedHashSet0, false, argumentImpl0, groupImpl0, 0);
      linkedList0.add(command0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      // Undeclared exception!
      try { 
        groupImpl0.defaults(writeableCommandLineImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.option.Switch", "", (-884), 1901, '&', 'u', (Validator) null, "]^1Y8", linkedList0, 1901);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      linkedList0.add(argumentImpl0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "Unexpected.token", 1901, 93, false);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertFalse(linkedList0.contains(argumentImpl0));
      assertEquals("Unexpected.token", groupImpl0.getDescription());
  }
}
