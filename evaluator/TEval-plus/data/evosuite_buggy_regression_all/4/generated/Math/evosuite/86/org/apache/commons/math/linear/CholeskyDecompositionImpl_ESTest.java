/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:14:30 GMT 2023
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.CholeskyDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.apache.commons.math.linear.RealVectorImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CholeskyDecompositionImpl_ESTest extends CholeskyDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(20, 20);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrixImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // not positive definite matrix
         //
         verifyException("org.apache.commons.math.linear.CholeskyDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-526.6788);
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, false);
      RealMatrix realMatrix0 = realVectorImpl0.outerProduct(doubleArray0);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrix0);
      choleskyDecompositionImpl0.getSolver();
      assertEquals(277390.55836944, choleskyDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrixImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 11x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.CholeskyDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(20, 20);
      RealMatrix realMatrix0 = realMatrixImpl0.scalarAdd(20);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrix0);
      assertEquals(1.0E-15, CholeskyDecompositionImpl.DEFAULT_RELATIVE_SYMMETRY_THRESHOLD, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-497.3013223797261);
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, true);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-497.3013223797261);
      doubleArray1[1] = (-497.3013223797261);
      RealMatrix realMatrix0 = realVectorImpl0.outerProduct(doubleArray1);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrix0, (-497.3013223797261), 825.6484257496165);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // not symmetric matrix
         //
         verifyException("org.apache.commons.math.linear.CholeskyDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-526.6788);
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, false);
      RealMatrix realMatrix0 = realVectorImpl0.outerProduct(doubleArray0);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrix0);
      choleskyDecompositionImpl0.getL();
      RealMatrix realMatrix1 = choleskyDecompositionImpl0.getL();
      assertNotNull(realMatrix1);
      assertEquals(526.6788, realMatrix1.getFrobeniusNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-526.6788);
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, false);
      RealMatrix realMatrix0 = realVectorImpl0.outerProduct(doubleArray0);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrix0);
      choleskyDecompositionImpl0.getLT();
      RealMatrix realMatrix1 = choleskyDecompositionImpl0.getL();
      assertEquals(526.6788, realMatrix1.getFrobeniusNorm(), 0.01);
      assertNotNull(realMatrix1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-526.6787882138261);
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, false);
      RealMatrix realMatrix0 = realVectorImpl0.outerProduct(doubleArray0);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrix0);
      double double0 = choleskyDecompositionImpl0.getDeterminant();
      assertEquals(277390.5459543843, double0, 0.01);
  }
}
