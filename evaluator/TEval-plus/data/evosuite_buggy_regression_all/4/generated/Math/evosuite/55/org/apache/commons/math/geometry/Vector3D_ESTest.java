/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:10:11 GMT 2023
 */

package org.apache.commons.math.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D.angle(vector3D0, vector3D0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2188.0, 2188.0);
      assertEquals(0.11815496083425656, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.9928941874934215, vector3D0.getZ(), 0.01);
      assertEquals(0.014161132441778286, vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.MINUS_K.add(Double.POSITIVE_INFINITY, vector3D0);
      assertTrue(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      double double0 = Vector3D.distanceInf(vector3D0, vector3D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D(544.4756404312, vector3D0, 544.4756404312, vector3D0, 544.4756404312, vector3D0);
      assertEquals(2668083.507206688, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      double double0 = Vector3D.distance1(vector3D0, vector3D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      double double0 = vector3D0.POSITIVE_INFINITY.getAlpha();
      assertEquals(0.7853981633974483, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = Vector3D.distance(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(7467370.681332909, 7467370.681332909, Double.NEGATIVE_INFINITY);
      String string0 = vector3D0.MINUS_I.toString();
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01);
      assertEquals(7467370.681332909, vector3D0.getY(), 0.01);
      assertEquals(7467370.681332909, vector3D0.getX(), 0.01);
      assertEquals("{-1; 0; 0}", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = vector3D0.add(vector3D0);
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01);
      assertFalse(boolean0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(2.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      double double0 = vector3D0.PLUS_I.getDelta();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.subtract(1146.472, vector3D0);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = vector3D0.POSITIVE_INFINITY.getNorm1();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D((-0.9232408815123284), vector3D0);
      assertEquals(0.8523737252956612, vector3D1.getNormSq(), 0.01);
      assertEquals(0.9232408815123284, vector3D1.getZ(), 0.01);
      assertEquals(-0.0, vector3D1.getX(), 0.01);
      assertEquals(-0.0, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      double double0 = vector3D0.getNormSq();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      double double0 = Vector3D.distanceSq(vector3D0, vector3D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(vector3D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01);
      assertTrue(vector3D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      double double0 = vector3D0.POSITIVE_INFINITY.getNormInf();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(324.82, vector3D0, 324.82, vector3D0);
      assertEquals(422032.1296, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(2308.480844, vector3D0, 2308.480844, vector3D0, 2308.480844, vector3D0, 2308.480844, vector3D0);
      assertEquals(8.526534091383925E7, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.normalize();
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertTrue(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      // Undeclared exception!
      try { 
        vector3D0.ZERO.normalize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();
      boolean boolean0 = vector3D1.isNaN();
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertTrue(boolean0);
      assertTrue(vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      // Undeclared exception!
      try { 
        vector3D0.ZERO.orthogonal();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2299.639, 2299.639, 324.82);
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals(324.82, vector3D0.getZ(), 0.01);
      assertEquals((-0.7071067811865476), vector3D1.getY(), 0.01);
      assertEquals(0.7071067811865476, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      // Undeclared exception!
      try { 
        Vector3D.angle(vector3D0, vector3D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      double double0 = Vector3D.angle(vector3D0, vector3D1);
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      vector3D0.NaN.hashCode();
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      boolean boolean0 = vector3D0.isInfinite();
      assertFalse(vector3D0.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2406.0534), Double.POSITIVE_INFINITY, Double.NaN);
      boolean boolean0 = vector3D0.isInfinite();
      assertEquals((-2406.0534), vector3D0.getX(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      boolean boolean0 = vector3D0.isInfinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, Double.POSITIVE_INFINITY, 1.0);
      boolean boolean0 = vector3D0.isInfinite();
      assertEquals(1.0, vector3D0.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getZ(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(7467370.681332909, 7467370.681332909, Double.NEGATIVE_INFINITY);
      boolean boolean0 = vector3D0.isInfinite();
      assertTrue(boolean0);
      assertEquals(7467370.681332909, vector3D0.getX(), 0.01);
      assertEquals(7467370.681332909, vector3D0.getY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = vector3D0.negate();
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertFalse(vector3D1.isNaN());
      assertTrue(boolean0);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals(-0.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      boolean boolean0 = vector3D0.equals(vector3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      boolean boolean0 = vector3D0.equals("{(NaN); (NaN); (NaN)}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.NaN;
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertTrue(vector3D1.isNaN());
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertFalse(boolean0);
      assertFalse(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = vector3D0.negate();
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertFalse(boolean0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertEquals(-0.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      vector3D0.ZERO.hashCode();
      assertFalse(vector3D0.isNaN());
  }
}
