/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:11:12 GMT 2023
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Log10;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.function.Ulp;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, 0.0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Ulp ulp0 = new Ulp();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(0, (UnivariateRealFunction) ulp0, (double) 0, (double) 0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.0E-6);
      Tanh tanh0 = new Tanh();
      double double0 = illinoisSolver0.solve(9, (UnivariateRealFunction) tanh0, 0.0, (double) 9, (double) 9);
      assertEquals(9.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(4141, 4141, 4141);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(4141, (UnivariateRealFunction) inverse0, (double) 4141, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, allowedSolution0);
      assertEquals(Double.POSITIVE_INFINITY, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2221, 2221, 2221);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(2221, (UnivariateRealFunction) inverse0, (-3285.75), (double) 2221, (double) 2221, allowedSolution0);
      assertEquals(2221.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2221.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2303, 2303, 2303);
      Ceil ceil0 = new Ceil();
      double double0 = regulaFalsiSolver0.solve(2303, (UnivariateRealFunction) ceil0, (-748.68038623), (double) 2303, (double) 2303, allowedSolution0);
      assertEquals(2303.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-0.5135789864598337), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2263, 2263, 2263);
      double double0 = regulaFalsiSolver0.solve(2263, (UnivariateRealFunction) inverse0, (-748.68038623), (double) 2263, (-748.68038623), allowedSolution0);
      assertEquals((-748.68038623), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-748.68038623), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(4123, (UnivariateRealFunction) inverse0, (-748.68038623), (double) 4123, (-748.68038623), allowedSolution0);
      assertEquals((-748.68038623), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.3989440773735474E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.0E-6);
      Inverse inverse0 = new Inverse();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(9, (UnivariateRealFunction) inverse0, (-1971.34976661), 181.974594, 181.974594);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (9) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Log10 log10_0 = new Log10();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(181.97, 181.97, 181.97);
      double double0 = illinoisSolver0.solve(2146395274, (UnivariateRealFunction) log10_0, 7.82596658687501E-4, 181.97, 181.97);
      assertEquals(181.97, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(105.33656647724628, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2247, 2247, 2247);
      double double0 = regulaFalsiSolver0.solve(2247, (UnivariateRealFunction) inverse0, (-748.68038623), (double) 2247, (-748.68038623), allowedSolution0);
      assertEquals((-748.68038623), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-748.68038623), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2242, 2242, 2242);
      double double0 = regulaFalsiSolver0.solve(2242, (UnivariateRealFunction) inverse0, (-748.68038623), (double) 2242, (-748.68038623), allowedSolution0);
      assertEquals((-748.68038623), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1493.3196137700002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2247, 2247, 2247);
      double double0 = regulaFalsiSolver0.solve(2247, (UnivariateRealFunction) inverse0, (-4700.58792285722), (double) 2247, (double) 2247, allowedSolution0);
      assertEquals((-2453.5879228572203), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(5, 5, 5);
      double double0 = regulaFalsiSolver0.solve(5, (UnivariateRealFunction) inverse0, (-627.17292), (double) 5, (-627.17292), allowedSolution0);
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2226, 2226, 2226);
      double double0 = regulaFalsiSolver0.solve(2226, (UnivariateRealFunction) inverse0, (-2775.716329), (double) 2226, (double) 2226, allowedSolution0);
      assertEquals(2226.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-549.7163289999999), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2242, 2242, 2242);
      double double0 = regulaFalsiSolver0.solve(2242, (UnivariateRealFunction) inverse0, (-163.9098056), (double) 2242, (-163.9098056), allowedSolution0);
      assertEquals((-163.9098056), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2078.0901944, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(2282, (UnivariateRealFunction) inverse0, (-8.135007221979702), (double) 2282, (double) 2282, allowedSolution0);
      assertEquals(2282.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(8.31512027856779E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(2242, (UnivariateRealFunction) inverse0, (-748.68038623), (double) 2242, (-748.68038623), allowedSolution0);
      assertEquals((-748.68038623), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-9.209849069094858E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(2263, (UnivariateRealFunction) inverse0, (-748.68038623), (double) 2263, (-748.68038623), allowedSolution0);
      assertEquals((-748.68038623), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-4.5118522026186376E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2274);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(2274, (UnivariateRealFunction) inverse0, (-2522.930615879), (double) 2274, (double) 2274, allowedSolution0);
      assertEquals(2274.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1776.138768241999, double0, 0.01);
  }
}
