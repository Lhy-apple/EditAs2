/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:11:00 GMT 2023
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(3494.14, 3494.14);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Identity identity0 = new Identity();
      regulaFalsiSolver0.solve(203, (UnivariateRealFunction) identity0, (-2732.08094203), (double) 203, (-2732.08094203));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(746, (UnivariateRealFunction) tan0, (-414.39335526), (-0.5004997685228533), allowedSolution0);
      assertEquals((-207.44692751426143), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1.5707967820074291), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tan tan0 = new Tan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(2137, (UnivariateRealFunction) tan0, 0.0, (double) 2137, (double) 2137);
      assertEquals(2137.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tan tan0 = new Tan();
      PegasusSolver pegasusSolver0 = new PegasusSolver(2115, 2115, 2115);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(2115, (UnivariateRealFunction) tan0, (double) 2115, 0.0, 0.0, allowedSolution0);
      assertEquals(2115.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tan tan0 = new Tan();
      PegasusSolver pegasusSolver0 = new PegasusSolver(2137, 2137, 2137);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(2137, (UnivariateRealFunction) tan0, 124.9432534, (double) 2137, 124.9432534, allowedSolution0);
      assertEquals(124.9432534, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(124.9432534, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tan tan0 = new Tan();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double double0 = regulaFalsiSolver0.solve(2131, (UnivariateRealFunction) tan0, (-1.0), (double) 2131, (double) 2131);
      assertEquals(2131.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1064.99990956694, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tan tan0 = new Tan();
      PegasusSolver pegasusSolver0 = new PegasusSolver(2130, 2130, 2130);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(2130, (UnivariateRealFunction) tan0, 124.9432534, (double) 2130, 124.9432534, allowedSolution0);
      assertEquals(124.9432534, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(2129.5869861657493, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tan tan0 = new Tan();
      PegasusSolver pegasusSolver0 = new PegasusSolver(2137, 2137, 2137);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2137, (UnivariateRealFunction) tan0, 124.555347, (double) 2137, 124.555347, allowedSolution0);
      assertEquals(124.555347, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(124.555347, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tan tan0 = new Tan();
      PegasusSolver pegasusSolver0 = new PegasusSolver(2137, 2137, 2137);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(2137, (UnivariateRealFunction) tan0, 124.9432534, (double) 2137, 124.9432534, allowedSolution0);
      assertEquals(124.9432534, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1134.480798934374, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tan tan0 = new Tan();
      PegasusSolver pegasusSolver0 = new PegasusSolver(2137, 2137, 2137);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(2137, (UnivariateRealFunction) tan0, 124.9432534, (double) 2137, 124.9432534, allowedSolution0);
      assertEquals(124.9432534, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1134.480798934374, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tan tan0 = new Tan();
      PegasusSolver pegasusSolver0 = new PegasusSolver(2137, 2137, 2137);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2137, (UnivariateRealFunction) tan0, (-2624.0874248), (double) 2137, (double) 2137, allowedSolution0);
      assertEquals(2137.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(89.97537102659544, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tan tan0 = new Tan();
      PegasusSolver pegasusSolver0 = new PegasusSolver(2137, 2137, 2137);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(2137, (UnivariateRealFunction) tan0, 125.56457662251125, (double) 2137, 125.56457662251125, allowedSolution0);
      assertEquals(125.56457662251125, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(2137.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tan tan0 = new Tan();
      PegasusSolver pegasusSolver0 = new PegasusSolver(2118, 2118, 2118);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(2118, (UnivariateRealFunction) tan0, 124.9432534, (double) 2118, 124.9432534, allowedSolution0);
      assertEquals(124.9432534, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1280.5988882972788, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tan tan0 = new Tan();
      PegasusSolver pegasusSolver0 = new PegasusSolver(1600, 1600, 1600);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(1600, (UnivariateRealFunction) tan0, 124.9432534, (double) 1600, 124.9432534, allowedSolution0);
      assertEquals(1600.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tan tan0 = new Tan();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2137, (UnivariateRealFunction) tan0, 124.9, (double) 2137, 124.9, allowedSolution0);
      assertEquals(124.9, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1171.8140597889928, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tan tan0 = new Tan();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(2137, (UnivariateRealFunction) tan0, (-2774.207903956364), (double) 2137, (-2774.207903956364), allowedSolution0);
      assertEquals((-2774.207903956364), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1061.85831691335), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tan tan0 = new Tan();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(2137, (UnivariateRealFunction) tan0, 124.9, (double) 2137, 124.9, allowedSolution0);
      assertEquals(124.9, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1171.8140597889928, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tan tan0 = new Tan();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(2137, (UnivariateRealFunction) tan0, 106.09387538144192, (double) 2137, 106.09387538144192, allowedSolution0);
      assertEquals(106.09387538144192, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1105.8406140636073, double0, 0.01);
  }
}
