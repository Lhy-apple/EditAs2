/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:12:43 GMT 2023
 */

package org.apache.commons.math.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      // Undeclared exception!
      try { 
        brentOptimizer0.doOptimize();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      brentOptimizer0.resetRelativeAccuracy();
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        brentOptimizer0.optimize((UnivariateRealFunction) null, goalType0, 0.0, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      brentOptimizer0.resetAbsoluteAccuracy();
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        brentOptimizer0.optimize((UnivariateRealFunction) null, goalType0, (-1.0), (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      double[] doubleArray0 = new double[3];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, (-24.296468996328784), 0.0);
      assertEquals(53, brentOptimizer0.getIterationCount());
      assertEquals((-1.0379720754664805E-10), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      GoalType goalType0 = GoalType.MINIMIZE;
      double[] doubleArray0 = new double[4];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      brentOptimizer0.resetMaximalIterationCount();
      try { 
        brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 355.66611519, 0.0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // maximal number of iterations (0) exceeded
         //
         verifyException("org.apache.commons.math.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      GoalType goalType0 = GoalType.MINIMIZE;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1261.0;
      doubleArray0[1] = 1.0E-10;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 1.0E-10, 1261.0);
      assertEquals(59, brentOptimizer0.getIterationCount());
      assertEquals(0.001774439631083654, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 2922.9792371004;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MINIMIZE;
      double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, (-24.296468996328784), 2922.9792371004);
      assertEquals(9, brentOptimizer0.getIterationCount());
      assertEquals((-7.105427357601002E-14), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2922.9792371004;
      doubleArray0[2] = 2922.9792371004;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MINIMIZE;
      double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, (-24.296468996328784), 2922.9792371004);
      assertEquals(43, brentOptimizer0.getEvaluations());
      assertEquals(3.473126954999244E-10, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2922.9792371004;
      doubleArray0[2] = 2922.9792371004;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MINIMIZE;
      double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, (-25.30303106540217), 2922.9792371004);
      assertEquals(41, brentOptimizer0.getIterationCount());
      assertEquals((-3.122259741011073E-10), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      try { 
        brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunctionLagrangeForm0, goalType0, 1.005239133566465, Double.POSITIVE_INFINITY, 2235.64890390903);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // maximal number of iterations (100) exceeded
         //
         verifyException("org.apache.commons.math.optimization.univariate.BrentOptimizer", e);
      }
  }
}
