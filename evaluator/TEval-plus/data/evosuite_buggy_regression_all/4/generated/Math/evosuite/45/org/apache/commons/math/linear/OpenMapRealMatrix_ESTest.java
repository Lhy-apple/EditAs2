/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:11:14 GMT 2023
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpenMapRealMatrix_ESTest extends OpenMapRealMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(53, 53);
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(53, 53);
      openMapRealMatrix0.multiply((RealMatrix) array2DRowRealMatrix0);
      // Undeclared exception!
      openMapRealMatrix0.scalarAdd(52);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(53, 53);
      OpenMapRealMatrix openMapRealMatrix1 = (OpenMapRealMatrix)openMapRealMatrix0.scalarAdd(52);
      // Undeclared exception!
      openMapRealMatrix0.add(openMapRealMatrix1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(33, 33);
      RealMatrix realMatrix0 = openMapRealMatrix0.power(33);
      assertEquals(33, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 1974);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract((RealMatrix) openMapRealMatrix0);
      assertEquals(1974, openMapRealMatrix1.getColumnDimension());
      assertEquals(1, openMapRealMatrix1.getRowDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(53, 53);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.add(openMapRealMatrix0);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(53, 53);
      openMapRealMatrix0.setEntry(0, 46, 44.0);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract(openMapRealMatrix0);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(53, 53);
      openMapRealMatrix0.setEntry(0, 46, 44.0);
      RealMatrix realMatrix0 = openMapRealMatrix0.multiply((RealMatrix) openMapRealMatrix0);
      assertNotSame(realMatrix0, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(53, 53);
      OpenMapRealMatrix openMapRealMatrix1 = (OpenMapRealMatrix)openMapRealMatrix0.scalarAdd(52);
      // Undeclared exception!
      openMapRealMatrix1.multiply(openMapRealMatrix1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(147, 1974);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.createMatrix(726, 1974);
      openMapRealMatrix1.addToEntry(147, 147, 1974);
      assertEquals(1974, openMapRealMatrix1.getColumnDimension());
      assertEquals(726, openMapRealMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(121, 121);
      openMapRealMatrix0.addToEntry(0, 116, 0.0);
      assertEquals(121, openMapRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(53, 53);
      RealMatrix realMatrix0 = openMapRealMatrix0.scalarAdd(52);
      realMatrix0.multiplyEntry(52, 0, (-0.49999999999999994));
      assertEquals(53, realMatrix0.getColumnDimension());
      assertEquals(53, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(53, 53);
      openMapRealMatrix0.multiplyEntry(52, 0, 7.549789948768648E-8);
      assertEquals(53, openMapRealMatrix0.getColumnDimension());
  }
}
