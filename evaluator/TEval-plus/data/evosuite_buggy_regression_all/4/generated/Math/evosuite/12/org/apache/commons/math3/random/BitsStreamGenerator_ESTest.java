/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:06:13 GMT 2023
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitsStreamGenerator_ESTest extends BitsStreamGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      int int0 = iSAACRandom0.nextInt();
      assertEquals((-1775086330), int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Well512a well512a0 = new Well512a(866);
      float float0 = well512a0.nextFloat();
      assertEquals(0.8043331F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a((-2148L));
      Well512a well512a0 = new Well512a(866);
      double double0 = well512a0.nextGaussian();
      assertEquals(0.3436518457266246, double0, 0.01);
      
      Well44497b well44497b0 = new Well44497b((long) 866);
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      boolean boolean0 = iSAACRandom0.nextBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a((-2148L));
      boolean boolean0 = well1024a0.nextBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      byte[] byteArray0 = new byte[5];
      well1024a0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-110), (byte) (-23), (byte)77, (byte) (-34)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[1];
      Well44497b well44497b0 = new Well44497b(intArray0);
      double double0 = well44497b0.nextGaussian();
      assertEquals((-1.3879549978267214), double0, 0.01);
      
      double double1 = well44497b0.nextGaussian();
      assertEquals((-0.7391104687346397), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      try { 
        iSAACRandom0.nextInt((-1775086330));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,775,086,330 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      int int0 = iSAACRandom0.nextInt(4);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      long long0 = iSAACRandom0.nextLong();
      assertEquals(9015322628853483111L, long0);
      
      int int0 = iSAACRandom0.nextInt(1481291872);
      assertEquals(1476211513, int0);
  }
}
