/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:10:56 GMT 2023
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asin;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(162.07683, 162.07683, 162.07683);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      pegasusSolver0.solve(1535, (UnivariateRealFunction) cos0, 162.07683, (double) 1535, 162.07683, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(162.07683, 162.07683);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(1535, (UnivariateRealFunction) cos0, 162.07683, (double) 1535, 162.07683, allowedSolution0);
      assertEquals(162.07683, pegasusSolver0.getMin(), 0.01);
      assertEquals(797.6951472585382, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cos cos0 = new Cos();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      double double0 = illinoisSolver0.solve(1017, (UnivariateRealFunction) cos0, 128.903144962765, 162.07683, (double) (-242738037));
      assertEquals((-2.42738037E8), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(161.79202165987437, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cos cos0 = new Cos();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1535);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1535, (UnivariateRealFunction) cos0, (double) 1535, (double) 1535, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1,535, 1,535]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(11.0);
      Asin asin0 = new Asin();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(2858, (UnivariateRealFunction) asin0, 0.0, (double) 2858, 0.0, allowedSolution0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Identity identity0 = new Identity();
      double double0 = illinoisSolver0.solve(562, (UnivariateRealFunction) identity0, (double) 562, 0.0, 0.0);
      assertEquals(562.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Identity identity0 = new Identity();
      regulaFalsiSolver0.setup(138, identity0, (-2892.8), 532.764814746, (-2892.8));
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(162.64286465315254, 162.64286465315254, 162.64286465315254);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(1535, (UnivariateRealFunction) cos0, 162.64286465315254, (double) 1535, 162.64286465315254, allowedSolution0);
      assertEquals(162.64286465315254, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(162.64286465315254, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cbrt cbrt0 = new Cbrt();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2141.6469864066044), (-2141.6469864066044), (-2141.6469864066044));
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(77, (UnivariateRealFunction) cbrt0, (-2141.6469864066044), (double) 77);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (77) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(162.07683, 162.07683, 162.07683);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(1543, (UnivariateRealFunction) cos0, 162.07683, (double) 1543, 162.07683, allowedSolution0);
      assertEquals(162.07683, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(162.07683, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(162.07683, 162.07683, 162.07683);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(1550, (UnivariateRealFunction) cos0, 162.07683, (double) 1550, 162.07683, allowedSolution0);
      assertEquals(162.07683, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(763.7400766292507, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(162.07683, 162.07683, 162.07683);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(1550, (UnivariateRealFunction) cos0, 162.07683, (double) 1550, (double) 1550, allowedSolution0);
      assertEquals(1550.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(763.7400766292507, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(169.5, 169.5, 169.5);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(1550, (UnivariateRealFunction) cos0, 169.5, (double) 1550, (double) 1550, allowedSolution0);
      assertEquals(1550.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1176.335384016597, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(144.73669604769333, 144.73669604769333, 144.73669604769333);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(1535, (UnivariateRealFunction) cos0, 144.73669604769333, (double) 1535, 144.73669604769333, allowedSolution0);
      assertEquals(144.73669604769333, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1535.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(162.07683, 162.07683, 162.07683);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(1535, (UnivariateRealFunction) cos0, 162.07683, (double) 1535, 162.07683, allowedSolution0);
      assertEquals(162.07683, pegasusSolver0.getMin(), 0.01);
      assertEquals(1535.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(162.07683, 162.07683, 162.07683);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(1535, (UnivariateRealFunction) cos0, 162.07683, (double) 1535, 162.07683, allowedSolution0);
      assertEquals(162.07683, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(797.6951472585382, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(1550, (UnivariateRealFunction) cos0, 162.07683, (double) 1550, 162.07683, allowedSolution0);
      assertEquals(162.07683, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(497.94243559398114, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(1535, (UnivariateRealFunction) cos0, 162.07683, (double) 1535, 162.07683, allowedSolution0);
      assertEquals(162.07683, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1119.9777810047615, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(1535, (UnivariateRealFunction) cos0, 162.07683, (double) 1535, 162.07683, allowedSolution0);
      assertEquals(162.07683, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1119.9777810047615, double0, 0.01);
  }
}
