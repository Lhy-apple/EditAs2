/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 22:07:05 GMT 2023
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FDistribution_ESTest extends FDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution((-2204.434461), (-2204.434461));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-2,204.434)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(862.3307924908412, 1.0108001232147217, 0.0);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertFalse(boolean0);
      assertEquals(862.3307924908412, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0108001232147217, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1892.5969, 1892.5969, 1892.5969);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(1892.5969, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertTrue(boolean0);
      assertEquals(1892.5969, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1892.5969, 1892.5969, 1892.5969);
      double double0 = fDistribution0.density(1892.5969);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(383.880855450455, 0.0, (-453.455116));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(862.3307924908412, 1.0108001232147217, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(fDistribution0.isSupportConnected());
      
      double double0 = fDistribution0.sample();
      assertEquals(64.0098877887326, double0, 0.01);
      assertEquals(1.0108001232147217, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(862.3307924908412, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1892.5969, 1892.5969, 1892.5969);
      double double0 = fDistribution0.getNumericalVariance();
      assertEquals(0.0021213364482067566, double0, 0.01);
      
      double double1 = fDistribution0.sample();
      assertEquals(1.1412896633825522, double1, 0.01);
  }
}
