/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:52:40 GMT 2023
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonPointer_ESTest extends JsonPointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("Ilk95", 0);
      jsonPointer0.hashCode();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("Ilk95", jsonPointer0.toString());
      assertEquals("~Ilk95", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.getMatchingProperty();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      JsonPointer jsonPointer1 = jsonPointer0.tail();
      assertNull(jsonPointer1);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.toString();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      int int0 = jsonPointer0.getMatchingIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("/oZzPk}9^JW_o?BquG");
      boolean boolean0 = jsonPointer0.mayMatchProperty();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("/oZzPk}9^JW_o?BquG", jsonPointer0.toString());
      assertEquals("oZzPk}9^JW_o?BquG", jsonPointer0.getMatchingProperty());
      assertTrue(boolean0);
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      boolean boolean0 = jsonPointer0.matches();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer.valueOf("j}2w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"j}2w\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("m~R:c(");
      boolean boolean0 = jsonPointer0.matches();
      assertEquals("~R:c(", jsonPointer0.getMatchingProperty());
      assertFalse(boolean0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertFalse(boolean0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("%4");
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertEquals("4", jsonPointer0.getMatchingProperty());
      assertTrue(boolean0);
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("%4", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty((String) null);
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      JsonPointer jsonPointer1 = new JsonPointer("l4V", "l4V", jsonPointer0);
      assertTrue(jsonPointer1.mayMatchProperty());
      
      JsonPointer jsonPointer2 = jsonPointer1.matchProperty("l4V");
      assertEquals((-1), jsonPointer2.getMatchingIndex());
      assertSame(jsonPointer2, jsonPointer0);
      assertNotNull(jsonPointer2);
      assertEquals((-1), jsonPointer1.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("7)D#+oP7");
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty("7)D#+oP7");
      assertFalse(jsonPointer0.matches());
      assertNull(jsonPointer1);
      assertEquals("7)D#+oP7", jsonPointer0.toString());
      assertEquals(")D#+oP7", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = jsonPointer0.matchElement(115);
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.matchElement((-1));
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      JsonPointer jsonPointer1 = new JsonPointer();
      boolean boolean0 = jsonPointer1.equals(jsonPointer0);
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.equals(jsonPointer0);
      assertTrue(boolean0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      boolean boolean0 = jsonPointer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      Object object0 = new Object();
      boolean boolean0 = jsonPointer0.equals(object0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("</2`6@\"");
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
      assertEquals("</2`6@\"", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("~&E|T18J^w_$V*?Tp~");
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("&E|T18J^w_$V*?Tp~", jsonPointer0.getMatchingProperty());
      assertEquals("~&E|T18J^w_$V*?Tp~", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("<l~(h");
      assertEquals("<l~(h", jsonPointer0.toString());
      assertEquals("l~(h", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("Invalid input: JSON Pointer expression must start with '/': \"", 2);
      assertEquals("Invalid input: JSON Pointer expression must start with '/': \"", jsonPointer0.toString());
      assertEquals("~valid input: JSON Pointer expression must start with '", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("G~uO.K8+g~i|\u0006");
      assertEquals("~uO.K8+g~i|\u0006", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
      assertEquals("G~uO.K8+g~i|\u0006", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("rCZfT1~", 1);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("~CZfT1~", jsonPointer0.getMatchingProperty());
      assertEquals("rCZfT1~", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("10r", 1);
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("~r", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("10r", 0);
      assertEquals("/0r", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals("10r", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }
}
