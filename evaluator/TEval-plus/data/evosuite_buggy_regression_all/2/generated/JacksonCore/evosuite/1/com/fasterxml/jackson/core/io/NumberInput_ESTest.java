/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:51:45 GMT 2023
 */

package com.fasterxml.jackson.core.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.io.NumberInput;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberInput_ESTest extends NumberInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[4];
      try { 
        NumberInput.parseBigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[14];
      // Undeclared exception!
      try { 
        NumberInput.parseLong(charArray0, 0, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("com.fasterxml.jackson.core.io.NumberInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberInput.parseBigDecimal("2.2250738585072012e-308");
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        NumberInput.parseLong(charArray0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -9
         //
         verifyException("com.fasterxml.jackson.core.io.NumberInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = NumberInput.parseInt(charArray0, 2, 2);
      assertEquals((-528), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[7];
      int int0 = NumberInput.parseInt(charArray0, 3, 3);
      assertEquals((-5328), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[10];
      // Undeclared exception!
      try { 
        NumberInput.parseLong(charArray0, 0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("com.fasterxml.jackson.core.io.NumberInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[10];
      // Undeclared exception!
      try { 
        NumberInput.parseLong(charArray0, 0, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("com.fasterxml.jackson.core.io.NumberInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[9];
      int int0 = NumberInput.parseInt(charArray0, 0, 6);
      assertEquals((-5333328), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[10];
      // Undeclared exception!
      try { 
        NumberInput.parseLong(charArray0, 0, 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("com.fasterxml.jackson.core.io.NumberInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("199n%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"199n%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("-y([:&QgKaSX~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-y([:&QgKaSX~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("-!'cc");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-!'cc\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("}-;Gb(By`W_:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}-;Gb(By`W_:\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"n\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = NumberInput.parseInt("4");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("2=QU0m");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2=QU0m\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("0!A]x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0!A]x\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = NumberInput.parseInt("73");
      assertEquals(73, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("64[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"64[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("19%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"19%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = NumberInput.parseInt("199");
      assertEquals(199, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseInt("199%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"199%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseLong("umDZSUn^6:J");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"umDZSUn^6:J\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberInput.parseLong("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = NumberInput.inLongRange(charArray0, 4, 19, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = NumberInput.inLongRange(charArray0, (-2654), (-2654), false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = NumberInput.inLongRange((char[]) null, 1962, 1962, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[4] = 'b';
      boolean boolean0 = NumberInput.inLongRange(charArray0, 4, 19, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = NumberInput.inLongRange("9L3t]k=t!()W\"MQtl3", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = NumberInput.inLongRange("1qQ:\"{:37N=*kr!QOgm", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = NumberInput.inLongRange("2.225073858507F012e-308", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = NumberInput.parseAsInt("+", 23);
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = NumberInput.parseAsInt((String) null, 23);
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = NumberInput.parseAsInt("", 23);
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = NumberInput.parseAsInt("4", (-5795));
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = NumberInput.parseAsInt("-!'c", 5421);
      assertEquals(5421, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = NumberInput.parseAsInt("n", 23);
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = NumberInput.parseAsLong("", 1139L);
      assertEquals(1139L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = NumberInput.parseAsLong((String) null, (-1195L));
      assertEquals((-1195L), long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long long0 = NumberInput.parseAsLong("4", 1008L);
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long long0 = NumberInput.parseAsLong("+00>+,H1E[6'x7(Z", 18);
      assertEquals(18L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long long0 = NumberInput.parseAsLong("-!'c", 18);
      assertEquals(18L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = NumberInput.parseAsDouble("", 417);
      assertEquals(417.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = NumberInput.parseAsDouble((String) null, 2501.5750693283294);
      assertEquals(2501.5750693283294, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = NumberInput.parseAsDouble("x;Qj! Jo,Af", (-3246.66));
      assertEquals((-3246.66), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long long0 = NumberInput.parseAsLong("2.2250738585072012e-308", 1000000000L);
      assertEquals(0L, long0);
  }
}
