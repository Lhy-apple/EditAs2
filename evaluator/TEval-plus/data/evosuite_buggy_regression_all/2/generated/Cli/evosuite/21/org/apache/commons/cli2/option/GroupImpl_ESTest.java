/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:22:51 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.option.Switch;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.Validator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GroupImpl_ESTest extends GroupImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "D", "D", 336, 336, false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.getSwitch((Option) groupImpl0);
      assertEquals(336, groupImpl0.getMaximum());
      assertEquals(336, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "0FJG:b:76qbu", (-1), (-1), true);
      groupImpl0.getAnonymous();
      assertEquals((-1), groupImpl0.getMinimum());
      assertEquals((-1), groupImpl0.getMaximum());
      assertEquals("", groupImpl0.getPreferredName());
      assertEquals("0FJG:b:76qbu", groupImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 336, 336, true);
      int int0 = groupImpl0.getMaximum();
      assertEquals(336, int0);
      assertEquals(336, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "<Qp-$qa@zwYB\"J$`", "-D", 3485, (-184), false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option <Qp-$qa@zwYB\"J$`
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "~9B!Eu^q`H%<", 3900, 3900, '', '~', dateValidator0, "", linkedList0, 1581);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '~', '?', "", linkedList0);
      linkedList0.add((ArgumentImpl) sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-799), 3900, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 1906, 1906, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
      assertEquals(1906, groupImpl0.getMaximum());
      assertEquals(1906, groupImpl0.getMinimum());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-795), (-795), true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
      assertTrue(linkedList0.contains(propertyOption0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-795), (-795), true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Passes properties and values to the application");
      assertTrue(linkedList0.contains(propertyOption0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<PropertyOption> linkedList1 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption("", "", 3);
      linkedList1.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList1, "Passes properties and values to the application", "Passes properties and values to the application", 3, 124, false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "QT;B@!Ip/0");
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", 46, 46, false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
      assertFalse(boolean0);
      assertEquals(46, groupImpl0.getMaximum());
      assertEquals("Passes properties and values to the application", groupImpl0.getPreferredName());
      assertEquals("-D", groupImpl0.getDescription());
      assertEquals(46, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-795), (-795), true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals((-795), groupImpl0.getMinimum());
      assertEquals((-795), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 336, 336, false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<GroupImpl> listIterator0 = (ListIterator<GroupImpl>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn((Object) null).when(listIterator0).next();
      doReturn((Object) null).when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(336, groupImpl0.getMaximum());
      assertEquals(336, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-795), (-795), true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("-D");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals((-795), groupImpl0.getMinimum());
      assertEquals((-795), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-795), (-795), true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("-D");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      try { 
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected -D while processing 
         //
         verifyException("org.apache.commons.cli2.option.PropertyOption", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "<Qp-$qa@zwYB\"J$`", "-D", 3485, (-184), false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.addOption(propertyOption0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected -D while processing <Qp-$qa@zwYB\"J$`
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-793), (-793), true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.addOption(propertyOption0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList0, "DISPLAY_GROUP_NAME", "", (-1830), 124, false);
      groupImpl1.validate(writeableCommandLineImpl0);
      assertTrue(linkedList0.contains(propertyOption0));
      assertEquals((-793), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "org.apache.commons.cli2.option.ParentImpl", 0, (-795), true);
      StringBuffer stringBuffer0 = new StringBuffer("lU_D20/v$^");
      LinkedHashSet<Switch> linkedHashSet0 = new LinkedHashSet<Switch>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      groupImpl0.appendUsage(stringBuffer0, (Set) linkedHashSet0, (Comparator) comparator0, "");
      assertEquals(0, groupImpl0.getMinimum());
      assertFalse(groupImpl0.isRequired());
      assertEquals("lU_D20/v$^", stringBuffer0.toString());
      assertEquals((-795), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      linkedList0.add(propertyOption0);
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-795), (-795), true);
      String string0 = groupImpl0.toString();
      assertTrue(linkedList0.contains(propertyOption0));
      assertEquals("[-D (-D<property>=<value>|-D<property>=<value>)]", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 336, 336, true);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      List list0 = groupImpl0.helpLines(336, linkedHashSet0, (Comparator) null);
      assertTrue(list0.isEmpty());
      assertEquals(336, groupImpl0.getMinimum());
      assertEquals(336, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-795), (-795), true);
      groupImpl0.findOption("m)'xyMAze[");
      assertTrue(linkedList0.contains(propertyOption0));
      assertEquals((-795), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", 158, 3685, true);
      groupImpl0.findOption("-D");
      assertTrue(linkedList0.contains(propertyOption0));
      assertEquals(3685, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-795), (-795), true);
      groupImpl0.setParent(propertyOption0);
      String string0 = groupImpl0.toString();
      assertEquals((-795), groupImpl0.getMinimum());
      assertEquals((-795), groupImpl0.getMaximum());
      assertEquals("[-D ()]", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Z'vcH%0I\"", "Z'vcH%0I\"", 1485, 1485, false);
      linkedList0.add(groupImpl0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList0, "Z'vcH%0I\"", "Z'vcH%0I\"", (-2239), 34, false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl1, (List) null);
      assertTrue(linkedList0.contains(groupImpl0));
      
      groupImpl1.validate(writeableCommandLineImpl0);
      assertEquals((-2239), groupImpl1.getMinimum());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-795), (-795), true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertEquals((-795), groupImpl0.getMaximum());
      assertEquals((-795), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("-D", "+QNe~1ovz]3+;E~p", 61, 61, 'q', 'q', (Validator) null, "Unexpected.token", linkedList0, 61);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'a', '\u0000', "", linkedList0);
      linkedList0.add(sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", (-1391), (-1391), true);
      // Undeclared exception!
      try { 
        groupImpl0.defaults((WriteableCommandLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }
}
