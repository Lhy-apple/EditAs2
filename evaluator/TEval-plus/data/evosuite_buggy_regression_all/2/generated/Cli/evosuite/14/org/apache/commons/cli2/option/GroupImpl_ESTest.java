/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:21:58 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.FileValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.validation.UrlValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GroupImpl_ESTest extends GroupImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "y)D.9OHvVB~l\"&?)7 ", "y)D.9OHvVB~l\"&?)7 ", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.getProperties((Option) groupImpl0);
      assertEquals(0, groupImpl0.getMaximum());
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 2066, 2066);
      groupImpl0.getAnonymous();
      assertEquals(2066, groupImpl0.getMaximum());
      assertEquals(2066, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-2899), 0);
      int int0 = groupImpl0.getMaximum();
      assertEquals((-2899), groupImpl0.getMinimum());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Passes properties and values to the application", "Passes properties and values to the application", (-3465), (-3465), ';', ';', fileValidator0, "|}:ctoA&N1x:X>", linkedList0, (-3465));
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'T', '(', "{'qSZ*/mC5.oCaV19", linkedList0);
      linkedList0.add((Object) sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "", 1358, 1358);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertEquals(0, linkedList0.size());
      assertEquals(1358, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "(PSDiW5vaWm7t", "-D", (-128), (-984));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
      assertEquals((-128), groupImpl0.getMinimum());
      assertEquals("(PSDiW5vaWm7t", groupImpl0.getPreferredName());
      assertEquals("-D", groupImpl0.getDescription());
      assertEquals((-984), groupImpl0.getMaximum());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", (-890), (-890));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("ClassValidator.class.create", "", (-883), (-883), '!', '!', numberValidator0, "", linkedList0, (-883));
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      LinkedHashSet<PropertyOption> linkedHashSet0 = new LinkedHashSet<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", (-883), (-883));
      Comparator<ArgumentImpl> comparator0 = (Comparator<ArgumentImpl>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List list0 = groupImpl0.helpLines((-883), linkedHashSet0, comparator0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, list0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "org.apache.commons.cli2.option.DefaultOption");
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 2147483637, 2147483637);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D (-D<property>=<value>)");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", 3, 3);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
      assertEquals(3, groupImpl0.getMaximum());
      assertEquals(3, groupImpl0.getMinimum());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("ClassValidator.class.create", "", (-883), (-883), '!', '!', numberValidator0, "", linkedList0, (-883));
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      linkedList0.add((Object) sourceDestArgument0);
      LinkedHashSet<PropertyOption> linkedHashSet0 = new LinkedHashSet<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", (-883), (-883));
      Comparator<ArgumentImpl> comparator0 = (Comparator<ArgumentImpl>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List list0 = groupImpl0.helpLines((-883), linkedHashSet0, comparator0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, list0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "org.apache.commons.cli2.option.DefaultOption");
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedHashSet<PropertyOption> linkedHashSet0 = new LinkedHashSet<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", (-883), (-883));
      Comparator<ArgumentImpl> comparator0 = (Comparator<ArgumentImpl>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List list0 = groupImpl0.helpLines((-883), linkedHashSet0, comparator0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, list0);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("Passes properties and values to the application").when(listIterator0).next();
      doReturn("-D").when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals((-883), groupImpl0.getMinimum());
      assertEquals("-D", groupImpl0.getDescription());
      assertEquals("Passes properties and values to the application", groupImpl0.getPreferredName());
      assertTrue(list0.isEmpty());
      assertEquals((-883), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("ClassValidator.class.create", "", (-883), (-883), '!', '!', numberValidator0, "", linkedList0, (-883));
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      linkedList0.add((Object) sourceDestArgument0);
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      LinkedHashSet<PropertyOption> linkedHashSet0 = new LinkedHashSet<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", (-883), (-883));
      Comparator<ArgumentImpl> comparator0 = (Comparator<ArgumentImpl>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List list0 = groupImpl0.helpLines((-883), linkedHashSet0, comparator0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, list0);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false).when(listIterator0).hasNext();
      doReturn("Passes properties and values to the application").when(listIterator0).next();
      doReturn("-D").when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(1, linkedList0.size());
      assertEquals((-883), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("ClassValidator.class.create", "", (-883), (-883), '!', '!', numberValidator0, "", linkedList0, (-883));
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      linkedList0.add((Object) sourceDestArgument0);
      LinkedHashSet<PropertyOption> linkedHashSet0 = new LinkedHashSet<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", (-883), (-883));
      Comparator<ArgumentImpl> comparator0 = (Comparator<ArgumentImpl>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List list0 = groupImpl0.helpLines((-883), linkedHashSet0, comparator0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, list0);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false).when(listIterator0).hasNext();
      doReturn("Passes properties and values to the application").when(listIterator0).next();
      doReturn("-D").when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "(PSDiW5vaWm7t", "-D", (-128), (-984));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      groupImpl0.validate(writeableCommandLineImpl0);
      assertEquals((-128), groupImpl0.getMinimum());
      assertEquals("-D", groupImpl0.getDescription());
      assertEquals((-984), groupImpl0.getMaximum());
      assertEquals("(PSDiW5vaWm7t", groupImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "yh>O:9A9[$-i8gB", "yh>O:9A9[$-i8gB", 1388, 1388);
      linkedList0.add(groupImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      // Undeclared exception!
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "y)D.9OHvVB~l\"&?)7 ", "y)D.9OHvVB~l\"&?)7 ", 0, 0);
      linkedList0.add(groupImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      // Undeclared exception!
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "(PSDiW5vaWm7t", "-D", (-128), (-984));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.addOption(propertyOption0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected -D while processing (PSDiW5vaWm7t
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "@", 2147483637, 2147483637);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.addOption(propertyOption0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option -D
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("z} ';i:", "z} ';i:", 44, 44, 'K', 'K', fileValidator0, "m<=`N1)^WT4}!w@K", linkedList0, (-1));
      linkedList0.add(argumentImpl0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "z} ';i:", "z} ';i:", (-1), 44);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '\u0000', 'a', "m<=`N1)^WT4}!w@K", linkedList0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s) z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i: z} ';i:
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "", 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      groupImpl0.appendUsage(stringBuffer0, set0, comparator0, "");
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals(0, groupImpl0.getMaximum());
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "", 0, 0);
      String string0 = groupImpl0.toString();
      assertEquals("[]", string0);
      assertEquals(0, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add((Object) propertyOption0);
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "Argument.missing.values", (-1132), (-1647));
      String string0 = groupImpl0.toString();
      assertEquals((-1132), groupImpl0.getMinimum());
      assertEquals((-1647), groupImpl0.getMaximum());
      assertEquals("-D<property>=<value>|-D<property>=<value>", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      UrlValidator urlValidator0 = new UrlValidator("[y1o}\"WVKlu");
      ArgumentImpl argumentImpl0 = new ArgumentImpl("[y1o}\"WVKlu", "[y1o}\"WVKlu", (-53), (-53), 'N', 'N', urlValidator0, "[y1o}\"WVKlu", linkedList0, (-53));
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'N', ',', "Switch.disabled.startsWith.enabled", linkedList0);
      linkedList0.add((Object) sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "[y1o}\"WVKlu", "[y1o}\"WVKlu", (-53), (-53));
      String string0 = groupImpl0.toString();
      assertEquals(0, linkedList0.size());
      assertEquals("[y1o}\"WVKlu () ", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", (-900), (-900));
      Option option0 = groupImpl0.findOption("-D");
      assertEquals((-900), groupImpl0.getMaximum());
      assertEquals("Passes properties and values to the application", groupImpl0.getPreferredName());
      assertEquals((-900), groupImpl0.getMinimum());
      assertEquals("-D", groupImpl0.getDescription());
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add((Object) propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "y)D.9OHvVB~l\"&?)7 ", "y)D.9OHvVB~l\"&?)7 ", 0, 0);
      groupImpl0.findOption("y)D.9OHvVB~l\"&?)7 ");
      assertEquals(0, groupImpl0.getMaximum());
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Passes properties and values to the application", "Passes properties and values to the application", (-3465), (-3465), ';', ';', fileValidator0, "|}:ctoA&N1x:X>", linkedList0, (-3465));
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "", 1358, 1358);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertEquals("", groupImpl0.getDescription());
      assertEquals("Passes properties and values to the application", groupImpl0.getPreferredName());
      assertEquals(1358, groupImpl0.getMaximum());
      assertEquals(1358, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "y)D.9OHvVB~l\"&?)7 ", "y)D.9OHvVB~l\"&?)7 ", 0, 0);
      linkedList0.add(groupImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      // Undeclared exception!
      try { 
        groupImpl0.defaults(writeableCommandLineImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
