/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:21:35 GMT 2023
 */

package org.apache.commons.cli2.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.builder.PatternBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PatternBuilder_ESTest extends PatternBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("[");
      Option option0 = patternBuilder0.create();
      assertEquals("-[", option0.getPreferredName());
      assertFalse(option0.isRequired());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("T0!H~3TRaF#I9(");
      Option option0 = patternBuilder0.create();
      assertNull(option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("Z}/4u;>}Y!+(`D");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("e@;}mU7 H\"Z{9hT7*");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern(" 5z-$]Bvjru^aCz[6nh");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("I)%");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("Y*#9&v] `");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("6eosQB/?~'V");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern(";f/i+?orB;,K9pO<R");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("CDYxt\"nT[a.*hs{]8qV");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("4jPgvFdw8QU1Ri2/< ");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      // Undeclared exception!
      try { 
        patternBuilder0.withPattern("(@k<Fq3\"HvkI:JL7`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use null as a validator.
         //
         verifyException("org.apache.commons.cli2.builder.ArgumentBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("GJ=");
  }
}
