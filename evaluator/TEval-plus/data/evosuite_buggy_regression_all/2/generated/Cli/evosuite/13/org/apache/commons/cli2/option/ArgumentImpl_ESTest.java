/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:21:41 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.validation.Validator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArgumentImpl_ESTest extends ArgumentImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getNumberInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, (String) null, 1559, 1559, '4', '4', numberValidator0, "", linkedList0, 1559);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      argumentImpl0.defaults(writeableCommandLineImpl0);
      assertEquals('4', argumentImpl0.getSubsequentSeparator());
      assertEquals('4', argumentImpl0.getInitialSeparator());
      assertEquals(1559, argumentImpl0.getMaximum());
      assertEquals("arg", argumentImpl0.getPreferredName());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals(1559, argumentImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("T_a", "T_a", 44, 44, 'J', 'J', dateValidator0, "Argument.too.many.defaults", linkedList0, 34);
      assertEquals(44, argumentImpl0.getMaximum());
      assertEquals(44, argumentImpl0.getMinimum());
      
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '~', 'J', "T_a", linkedList0);
      char char0 = sourceDestArgument0.getInitialSeparator();
      assertEquals("Argument.too.many.defaults", argumentImpl0.getConsumeRemaining());
      assertEquals("T_a", argumentImpl0.getDescription());
      assertEquals('~', char0);
      assertEquals('J', sourceDestArgument0.getSubsequentSeparator());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 96, 96, 'z', 'z', dateValidator0, "", linkedList0, 0);
      argumentImpl0.getDefaultValues();
      assertEquals('z', argumentImpl0.getInitialSeparator());
      assertEquals('z', argumentImpl0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      NumberValidator numberValidator0 = new NumberValidator(numberFormat0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("}B7gfZuc5", (String) null, 508, 508, '1', '1', numberValidator0, "m3AF", linkedList0, 508);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 's', 's', "", linkedList0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      boolean boolean0 = sourceDestArgument0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "QV-3?'K5RF|");
      assertEquals('s', sourceDestArgument0.getSubsequentSeparator());
      assertTrue(boolean0);
      assertEquals('s', sourceDestArgument0.getInitialSeparator());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("", sourceDestArgument0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("A'NV]4[=Xg%M:o(>", "", 61, 61, '5', '/', dateValidator0, "A'NV]4[=Xg%M:o(>", linkedList0, 61);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      char char0 = sourceDestArgument0.getSubsequentSeparator();
      assertEquals("A'NV]4[=Xg%M:o(>", argumentImpl0.getConsumeRemaining());
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
      assertEquals("A'NV]4[=Xg%M:o(>", argumentImpl0.getPreferredName());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals('5', argumentImpl0.getInitialSeparator());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("1", "1", 0, 60, 'p', 'S', dateValidator0, "", linkedList0, 60);
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      argumentImpl0.helpLines(0, set0, (Comparator) null);
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals("1", argumentImpl0.getPreferredName());
      assertEquals('p', argumentImpl0.getInitialSeparator());
      assertEquals(60, argumentImpl0.getMaximum());
      assertEquals('S', argumentImpl0.getSubsequentSeparator());
      assertEquals(0, argumentImpl0.getMinimum());
      assertEquals("1", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Z~sMIPX+K#+", "Z~sMIPX+K#+", 0, 0, 'q', 'q', dateValidator0, "Z~sMIPX+K#+", list0, 0);
      String string0 = argumentImpl0.getConsumeRemaining();
      assertEquals("Z~sMIPX+K#+", string0);
      assertEquals("Z~sMIPX+K#+", argumentImpl0.getDescription());
      assertEquals('q', argumentImpl0.getInitialSeparator());
      assertEquals("Z~sMIPX+K#+", argumentImpl0.getPreferredName());
      assertEquals('q', argumentImpl0.getSubsequentSeparator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("T_a", "T_a", 44, 44, 'J', 'J', dateValidator0, "!%6_Yc[J/ZJ(kIt+H.", linkedList0, 'J');
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '\u0000', 'J', "T_a", linkedList0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(listIterator0).hasNext();
      doReturn("--", "!%6_Yc[J/ZJ(kIt+H.", "--", "\"-e\"8F\"", "!%6_Yc[J/ZJ(kIt+H.").when(listIterator0).next();
      try { 
        sourceDestArgument0.process(writeableCommandLineImpl0, listIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected value \"/Z\" found while processing  T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a T_a
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("1", "1", 0, 60, 'p', 'S', dateValidator0, "", linkedList0, 60);
      argumentImpl0.getValidator();
      assertEquals('S', argumentImpl0.getSubsequentSeparator());
      assertEquals("1", argumentImpl0.getDescription());
      assertEquals(60, argumentImpl0.getMaximum());
      assertEquals('p', argumentImpl0.getInitialSeparator());
      assertEquals("1", argumentImpl0.getPreferredName());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertFalse(argumentImpl0.isRequired());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      NumberValidator numberValidator0 = new NumberValidator(numberFormat0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("'", "NV785%Gp", 3553, (-197), '/', '/', numberValidator0, "NV785%Gp", linkedList0, 3553);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum number of values must not exceed maximum number
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("m0-H*7gpp)");
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("T_a", "T_a", 44, 44, 'X', 'X', dateValidator0, "T_a", linkedList0, 'X');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not enough default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      NumberValidator numberValidator0 = NumberValidator.getNumberInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) decimalFormat0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("T_a", "T_a", (-2140), 2260, '.', '~', numberValidator0, "3DXq8m~?Ef2p*88/", linkedList0, (-1291));
      assertEquals('~', argumentImpl0.getSubsequentSeparator());
      assertEquals("T_a", argumentImpl0.getDescription());
      assertEquals('.', argumentImpl0.getInitialSeparator());
      assertEquals("T_a", argumentImpl0.getPreferredName());
      assertEquals("3DXq8m~?Ef2p*88/", argumentImpl0.getConsumeRemaining());
      assertEquals((-2140), argumentImpl0.getMinimum());
      assertEquals(2260, argumentImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      NumberValidator numberValidator0 = new NumberValidator(numberFormat0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 0, 'H', 'H', numberValidator0, "", linkedList0, 0);
      Integer integer0 = Integer.valueOf((int) '^');
      linkedList0.add(integer0);
      SourceDestArgument sourceDestArgument0 = null;
      try {
        sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '\u0000', '^', "", linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too many default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("T_a", "T_a", 44, 44, 'J', 'J', dateValidator0, "Argument.too.many.defaults", linkedList0, 34);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '~', 'J', "T_a", linkedList0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, false).when(listIterator0).hasNext();
      doReturn("--", "T_a", "T_a", "--").when(listIterator0).next();
      sourceDestArgument0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals('J', sourceDestArgument0.getSubsequentSeparator());
      assertEquals('~', sourceDestArgument0.getInitialSeparator());
      assertEquals("Argument.too.many.defaults", argumentImpl0.getConsumeRemaining());
      assertEquals("T_a", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("T_a", "T_a", 44, 44, 'X', 'X', dateValidator0, "T_a", linkedList0, 'X');
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '\u0000', '\u0000', "T_a", linkedList0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(listIterator0).hasNext();
      doReturn("--", "T_a", "--", "--", "T_a").when(listIterator0).next();
      sourceDestArgument0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals('X', argumentImpl0.getInitialSeparator());
      assertEquals('X', argumentImpl0.getSubsequentSeparator());
      assertEquals("T_a", sourceDestArgument0.getConsumeRemaining());
      assertEquals("T_a", argumentImpl0.getDescription());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getNumberInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("T_a", "T_a", (-2140), 2260, '.', '~', numberValidator0, "3DXq8m~?Ef2p*88/", linkedList0, (-1291));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      assertEquals(2260, argumentImpl0.getMaximum());
      assertFalse(argumentImpl0.isRequired());
      
      argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
      assertEquals("T_a", argumentImpl0.getDescription());
      assertEquals('~', argumentImpl0.getSubsequentSeparator());
      assertEquals("3DXq8m~?Ef2p*88/", argumentImpl0.getConsumeRemaining());
      assertEquals('.', argumentImpl0.getInitialSeparator());
      assertEquals("T_a", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("}B7gZuc5", "-!.NaRP4O[o)", (-1073), (-1073), ';', '1', numberValidator0, "-!.NaRP4O[o)", linkedList0, 2528);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      // Undeclared exception!
      try { 
        argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1073
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 0, 4070, 'p', 'S', (Validator) null, "~A/J,'", linkedList0, 32);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, (List) null);
      PropertyOption propertyOption0 = new PropertyOption("--", "qCx7?Fve&br)sN-p", 60);
      argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0, (Option) propertyOption0);
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("~A/J,'", argumentImpl0.getConsumeRemaining());
      assertEquals('p', argumentImpl0.getInitialSeparator());
      assertEquals('S', argumentImpl0.getSubsequentSeparator());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("1", "1", 0, 60, 'p', 'S', dateValidator0, "", linkedList0, 60);
      String string0 = argumentImpl0.toString();
      assertEquals("[<11> [<12> [<13> [<14> [<15> [<16> [<17> [<18> [<19> [<110> [<111> [<112> [<113> [<114> [<115> [<116> [<117> [<118> [<119> [<120> [<121> [<122> [<123> [<124> [<125> [<126> [<127> [<128> [<129> [<130> [<131> [<132> [<133> [<134> [<135> [<136> [<137> [<138> [<139> [<140> [<141> [<142> [<143> [<144> [<145> [<146> [<147> [<148> [<149> [<150> [<151> [<152> [<153> [<154> [<155> [<156> [<157> [<158> [<159> [<160>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", string0);
      assertEquals('S', argumentImpl0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals('p', argumentImpl0.getInitialSeparator());
      assertEquals("1", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Z~sMIPX+K#+", "Z~sMIPX+K#+", 0, 0, 'q', 'q', dateValidator0, "Z~sMIPX+K#+", list0, 0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      argumentImpl0.appendUsage(stringBuffer0, linkedHashSet0, comparator0);
      assertEquals("Z~sMIPX+K#+", argumentImpl0.getConsumeRemaining());
      assertEquals('q', argumentImpl0.getSubsequentSeparator());
      assertEquals("", stringBuffer0.toString());
      assertEquals("Z~sMIPX+K#+", argumentImpl0.getPreferredName());
      assertEquals('q', argumentImpl0.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("}B7gZuc5", "}B7gZuc5", 2514, 2514, '~', '~', numberValidator0, "}B7gZuc5", linkedList0, 29);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      LinkedList<List<String>> linkedList1 = new LinkedList<List<String>>();
      ArgumentImpl argumentImpl1 = new ArgumentImpl("--", "}B7gZuc5", 29, Integer.MAX_VALUE, '~', '}', numberValidator0, "--", linkedList1, 3261);
      try { 
        argumentImpl1.validate((WriteableCommandLine) writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s) -- -- ...
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("1", "1", 0, 60, 'p', 'S', dateValidator0, "", linkedList0, 60);
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      StringBuffer stringBuffer0 = new StringBuffer();
      argumentImpl0.appendUsage(stringBuffer0, set0, (Comparator) null);
      assertEquals(237, stringBuffer0.length());
      assertEquals("1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1 [1]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("T_a", "T_a", 44, 44, 'J', 'J', dateValidator0, "Argument.too.many.defaults", linkedList0, 34);
      String string0 = argumentImpl0.stripBoundaryQuotes("\"JB");
      assertEquals('J', argumentImpl0.getInitialSeparator());
      assertEquals("\"JB", string0);
      assertEquals("T_a", argumentImpl0.getPreferredName());
      assertEquals("T_a", argumentImpl0.getDescription());
      assertEquals('J', argumentImpl0.getSubsequentSeparator());
      assertEquals("Argument.too.many.defaults", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("1", "1", 0, 60, 'p', 'S', dateValidator0, "", linkedList0, 60);
      boolean boolean0 = argumentImpl0.isRequired();
      assertEquals("", argumentImpl0.getConsumeRemaining());
      assertEquals("1", argumentImpl0.getPreferredName());
      assertEquals('p', argumentImpl0.getInitialSeparator());
      assertFalse(boolean0);
      assertEquals('S', argumentImpl0.getSubsequentSeparator());
      assertEquals("1", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("A'NV]4[=Xg%M:o(>", "", 61, 61, '7', '/', dateValidator0, "A'NV]4[=Xg%M:o(>", linkedList0, 61);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      boolean boolean0 = sourceDestArgument0.isRequired();
      assertEquals('/', argumentImpl0.getSubsequentSeparator());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals("A'NV]4[=Xg%M:o(>", argumentImpl0.getConsumeRemaining());
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
      assertEquals('7', argumentImpl0.getInitialSeparator());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertTrue(boolean0);
  }
}
