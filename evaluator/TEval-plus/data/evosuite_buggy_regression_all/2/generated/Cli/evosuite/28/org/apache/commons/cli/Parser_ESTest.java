/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:23:21 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Properties;
import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      GnuParser gnuParser0 = new GnuParser();
      gnuParser0.parse(options1, (String[]) null);
      gnuParser0.processOption("", (ListIterator) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      PosixParser posixParser0 = new PosixParser();
      CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-";
      stringArray0[1] = "";
      CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "e,hv\"PBSYUc";
      stringArray0[1] = "";
      stringArray0[2] = " ]";
      stringArray0[3] = "";
      stringArray0[4] = "-";
      BasicParser basicParser0 = new BasicParser();
      // Undeclared exception!
      try { 
        basicParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-$s6";
      stringArray0[1] = "$s6";
      stringArray0[2] = "-$s6";
      stringArray0[3] = "$s6";
      stringArray0[4] = "$s6";
      stringArray0[5] = "-$s6";
      stringArray0[6] = "q|v#~m+[g05~";
      stringArray0[7] = "$s6";
      stringArray0[8] = "$s6";
      Properties properties0 = new Properties();
      try { 
        posixParser0.parse(options0, stringArray0, properties0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -$s6
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      BasicParser basicParser0 = new BasicParser();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "- ";
      CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option(" ", " ", false, "");
      options0.addOption(option0);
      BasicParser basicParser0 = new BasicParser();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "- ";
      // Undeclared exception!
      try { 
        basicParser0.parse(options0, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      BasicParser basicParser0 = new BasicParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$s6";
      CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("$s6", "$s6", true, "$s6");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-$s6";
      stringArray0[1] = "$s6";
      stringArray0[2] = "-$s6";
      stringArray0[3] = "$s6";
      stringArray0[4] = "$s6";
      stringArray0[5] = "-$s6";
      stringArray0[6] = "q|v#~m+[g05~";
      stringArray0[7] = "$s6";
      stringArray0[8] = "$s6";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = posixParser0.parse(options1, stringArray0, properties0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      BasicParser basicParser0 = new BasicParser();
      Properties properties0 = new Properties();
      properties0.put("]", basicParser0);
      PosixParser posixParser0 = new PosixParser();
      // Undeclared exception!
      try { 
        posixParser0.parse(options0, (String[]) null, properties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("e", "e");
      option0.setRequired(true);
      Options options1 = options0.addOption(option0);
      GnuParser gnuParser0 = new GnuParser();
      try { 
        gnuParser0.parse(options1, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing required option: e
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("E", "E");
      BasicParser basicParser0 = new BasicParser();
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      ListIterator<InputStream> listIterator0 = linkedList0.listIterator();
      try { 
        basicParser0.processArgs(option0, listIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: E
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", "");
      BasicParser basicParser0 = new BasicParser();
      option0.setOptionalArg(true);
      ListIterator<OptionGroup> listIterator0 = (ListIterator<OptionGroup>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(listIterator0).hasNext();
      basicParser0.processArgs(option0, listIterator0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("V", "V");
      Options options1 = options0.addOption(option0);
      GnuParser gnuParser0 = new GnuParser();
      option0.setRequired(true);
      gnuParser0.parse(options1, (String[]) null);
      gnuParser0.processOption("V", (ListIterator) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      GnuParser gnuParser0 = new GnuParser();
      gnuParser0.parse(options1, (String[]) null);
      gnuParser0.processOption("", (ListIterator) null);
  }
}
