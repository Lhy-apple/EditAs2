/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:14:23 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attributes_ESTest extends Attributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.dataset();
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(" ?^e_a^j`;e(", " ?^e_a^j`;e(");
      attributes1.addAll(attributes0);
      attributes1.put(" ?^e_a^j`;e(", false);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hashCode();
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("h5h7f8&}27QhGS!Y\"", "h5h7f8&}27QhGS!Y\"");
      Attributes attributes2 = attributes1.put("numeric reference with no numerals", true);
      Attribute attribute0 = new Attribute("8g_,8gw#Q`E!$S>KMVC", (String) null);
      Attributes attributes3 = attributes2.put(attribute0);
      attributes3.put("80fqe@ll", "eD^te$]rtg");
      attributes3.put("a6FAH }DhizSU", "col");
      assertEquals(5, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("h5h78&}2JQhGB`!Y\"", "h5h78&}2JQhGB`!Y\"");
      Attributes attributes2 = attributes1.clone();
      Attributes attributes3 = attributes2.put("u4+IFgCzPV'Gpx~>", "h5h78&}2JQhGB`!Y\"");
      Attribute attribute0 = new Attribute("][", "u4+IFgCzPV'Gpx~>");
      Attributes attributes4 = attributes3.put("data-", "h5h78&}2JQhGB`!Y\"");
      Attributes attributes5 = attributes2.put(attribute0);
      attributes1.addAll(attributes4);
      assertEquals(4, attributes0.size());
      assertFalse(attributes0.equals((Object)attributes5));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("5h78&}2J&htB`!Y\"", "5h78&}2J&htB`!Y\"");
      assertEquals(1, attributes0.size());
      
      attributes1.removeIgnoreCase("5h78&}2J&htB`!Y\"");
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("h5h78&}2JQhGB`!Y\"", "h5h78&}2JQhGB`!Y\"");
      String string0 = attributes1.get("h5h78&}2JQhGB`!Y\"");
      assertEquals(1, attributes0.size());
      assertEquals("h5h78&}2JQhGB`!Y\"", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.get("              ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("=\"", "=\"");
      attributes0.getIgnoreCase("=\"");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.getIgnoreCase("iK");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("7~h78&}2JQhGB`!Y\"", "7~h78&}2JQhGB`!Y\"");
      attributes1.putIgnoreCase("7~h78&}2jqhgb`!y\"", "7~h78&}2jqhgb`!y\"");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("h5h78&}2JQhGB`!Y\"", "h5h78&}2JQhGB`!Y\"");
      attributes1.putIgnoreCase("h5h78&}2JQhGB`!Y\"", "h5h78&}2JQhGB`!Y\"");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("|'fM", false);
      assertEquals(0, attributes1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.removeIgnoreCase("$F;Q*`K 3");
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKey("keygen");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("=\"", "=\"");
      boolean boolean0 = attributes0.hasKey("=\"");
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKeyIgnoreCase("\"fMOj#U.z$K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("h5h78&}2JQhGBi`!Y\"", "h5h78&}2JQhGBi`!Y\"");
      boolean boolean0 = attributes1.hasKeyIgnoreCase("h5h78&}2JQhGBi`!Y\"");
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.addAll(attributes0);
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("80Fe@lL", true);
      attributes0.asList();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("i&Uo/uG", "org.jsoup.nodes.Attributes$Dataset$EntrySet");
      attributes0.asList();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("=\"", "=\"");
      attributes0.toString();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("J+%", (String) null);
      String string0 = attributes1.html();
      assertEquals(1, attributes0.size());
      assertEquals(" J+%", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("device", true);
      CharBuffer charBuffer0 = CharBuffer.allocate(1163);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      attributes1.html((Appendable) charBuffer0, document_OutputSettings1);
      assertEquals(1, attributes0.size());
      assertEquals(1153, charBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = new Attributes();
      boolean boolean0 = attributes1.equals(attributes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals(attributes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals(" ZiW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("=\"", "=\"");
      Attributes attributes1 = new Attributes();
      boolean boolean0 = attributes1.equals(attributes0);
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("|'fM", "org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      Attributes attributes2 = attributes0.clone();
      boolean boolean0 = attributes1.equals(attributes2);
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("80Fe@lL", true);
      attributes1.normalize();
      assertEquals(1, attributes0.size());
  }
}
