/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:09:23 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comment comment0 = new Comment("auseve`q", "auseve`q");
      // Undeclared exception!
      try { 
        comment0.before((Node) comment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DocumentType documentType0 = new DocumentType(")w*$j", ")w*$j", ")w*$j", ")w*$j");
      documentType0.setBaseUri(")w*$j");
      assertEquals(0, documentType0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("[sELoF#A{u|w!e7");
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("eZP2&MF~g]q=", "eZP2&MF~g]q=", "eZP2&MF~g]q=", "eZP2&MF~g]q=");
      Node[] nodeArray0 = documentType0.childNodesAsArray();
      assertEquals(0, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("amf");
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = document0.normalise();
      String string0 = document1.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("@j*$-", "@j*$-", "@j*$-", "@j*$-");
      // Undeclared exception!
      try { 
        documentType0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("Nscr", "Nscr", "Nscr", "Nscr");
      String string0 = documentType0.toString();
      assertEquals("<!DOCTYPE html PUBLIC \"Nscr\" Nscr\">", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("DSWj^T?");
      Node node0 = document0.removeAttr("DSWj^T?");
      assertSame(node0, document0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment("subseteq", "subseteq");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) comment0;
      nodeArray0[1] = (Node) comment0;
      nodeArray0[2] = (Node) comment0;
      nodeArray0[3] = (Node) comment0;
      nodeArray0[4] = (Node) comment0;
      nodeArray0[5] = (Node) comment0;
      nodeArray0[6] = (Node) comment0;
      nodeArray0[7] = (Node) comment0;
      nodeArray0[8] = (Node) comment0;
      comment0.addChildren(nodeArray0);
      // Undeclared exception!
      try { 
        comment0.before("subseteq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("^CH(ijd0KI^D", "^CH(ijd0KI^D", "^CH(ijd0KI^D", "^CH(ijd0KI^D");
      // Undeclared exception!
      try { 
        documentType0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("thLTp", "thLTp", "thLTp", "thLTp");
      Attributes attributes0 = documentType0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("]2ij-8uw9~.(q,{qqc]8");
      Element element0 = document0.head();
      Element element1 = element0.wrap("]2ij-8uw9~.(q,{qqc]8");
      assertNotNull(element1);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comment comment0 = new Comment("=9R", "ql+3]tY7zjCk");
      String string0 = comment0.absUrl("abs:f:b`6czpdcj/1) ]uw");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comment comment0 = new Comment("subseteq", "subseteq");
      comment0.attr("subseteq", "subseteq");
      String string0 = comment0.absUrl("subseteq");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("[sELoF#A{u|w!e7");
      document0.setParentNode(document0);
      document0.after("[sELoF#A{u|w!e7");
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("]2ij-8uw9~.(q,{qqc]8");
      Element element0 = document0.head();
      element0.replaceWith(document0);
      // Undeclared exception!
      try { 
        element0.wrap("]2ij-8uw9~.(q,{qqc]8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("abs:org.jsoup.nodes.node$outerhtmlvisitor");
      document0.setParentNode(document0);
      Element element0 = document0.wrap("abs:org.jsoup.nodes.node$outerhtmlvisitor");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("amf");
      document0.appendChild(document0);
      Element element0 = document0.wrap("<laE/jsBf8y Qi|1>");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("abs:org.jsoup.odesnodeoutrhtmlisitor");
      document0.prependChild(document0);
      document0.setParentNode(document0);
      assertEquals("abs:org.jsoup.odesnodeoutrhtmlisitor", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("<qm+sf=<S");
      DocumentType documentType0 = new DocumentType("<qm+sf=<S", "<qm+sf=<S", "<qm+sf=<S", "<qm+sf=<S");
      // Undeclared exception!
      try { 
        documentType0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comment comment0 = new Comment("[%M(s=%]", "[%M(s=%]");
      // Undeclared exception!
      try { 
        comment0.removeChild(comment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("':^r}n;_Yp( 8PE;~@");
      Element element0 = document0.appendElement("':^r}n;_Yp( 8PE;~@");
      Node node0 = element0.previousSibling();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("':^rCn_Yp(8PE;~b");
      Element element0 = document0.appendElement("':^rCn_Yp(8PE;~b");
      Element element1 = (Element)element0.previousSibling();
      assertNotNull(element1);
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("^CH(ijd0KI^D", "^CH(ijd0KI^D", "^CH(ijd0KI^D", "^CH(ijd0KI^D");
      boolean boolean0 = documentType0.equals(documentType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      textNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("@j*$-", "@j*$-", "@j*$-", "@j*$-");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("@j*$-", "@j*$-", true);
      documentType0.setParentNode(xmlDeclaration0);
      documentType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("amf");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      assertEquals(0, document2.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("^CtH(ijd0KI^Dz");
      document0.appendText("^CtH(ijd0KI^Dz");
      Element element0 = document0.clone();
      assertEquals(0, element0.siblingIndex());
      assertNotSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      String string0 = textNode0.toString();
      assertEquals("", string0);
  }
}
