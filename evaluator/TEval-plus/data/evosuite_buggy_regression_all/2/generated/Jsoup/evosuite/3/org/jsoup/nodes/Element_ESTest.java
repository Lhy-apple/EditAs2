/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:07:14 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("m2giMgfpj");
      Element element0 = document0.createElement("m2giMgfpj");
      document0.appendChild(element0);
      String string0 = document0.toString();
      assertEquals("<m2gimgfpj>\n</m2gimgfpj>", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("_CUDsK+uS3<=~z]hf;");
      Element element0 = document0.appendText("_CUDsK+uS3<=~z]hf;");
      assertEquals("_CUDsK+uS3<=~z]hf;", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("`V\"T");
      Element element0 = document0.val("`V\"T");
      assertEquals("`V\"T", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("hIPl}w;5Bse-w;1");
      Elements elements0 = document0.getElementsByAttributeValueEnding("hIPl}w;5Bse-w;1", "hIPl}w;5Bse-w;1");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("SUP");
      Elements elements0 = document0.getElementsByClass("SUP");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("cqR");
      // Undeclared exception!
      try { 
        document0.child((-1431655764));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("hIPl}w;5Bse-w;1");
      Elements elements0 = document0.getElementsByAttributeValueContaining("hIPl}w;5Bse-w;1", "H4");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "$");
      Element element1 = element0.val("textarea");
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("m2giMgfpj");
      Elements elements0 = document0.getElementsByAttributeValueNot("m2giMgfpj", "m2giMgfpj");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("`V\"dT");
      Elements elements0 = document0.getElementsByAttribute("`V\"dT");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("s7mmrl5y#4");
      Element element0 = document0.addClass("s7mmrl5y#4");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("hIPl}w;5Bse-w;1");
      // Undeclared exception!
      try { 
        document0.html("hIPl}w;5Bse-w;1");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated string is empty
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document(".j1^zV8a^");
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("8745");
      Elements elements0 = document0.getElementsByAttributeValueStarting("8745", "8745");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("hIPl}w;5Bse-w;1");
      Element element0 = document0.createElement("hIPl}w;5Bse-w;1");
      String string0 = element0.nodeName();
      assertEquals("hipl}w;5bse-w;1", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("$");
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document(".j1^zV8a^");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("$");
      Elements elements0 = document0.getElementsByIndexLessThan(59);
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("hIPl}w;5Bse-w;1");
      Elements elements0 = document0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("m2giMgfpj");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1793423547));
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("tf&'`j&a8;7c6+(c!h");
      Elements elements0 = document0.getElementsByIndexEquals((-1880776845));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("hIPl}w;5Bse-w;1");
      Element element0 = document0.prependElement("uh5");
      document0.setParentNode(element0);
      assertEquals("uh5", element0.tagName());
      
      Elements elements0 = document0.parents();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("$");
      Element element0 = document0.prependText("$");
      Element element1 = element0.getElementById("$");
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("hIPl}w;5Bse-w;1");
      document0.addChild(document0);
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("hIPl}w;5Bse-w;1");
      document0.addChild(document0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("hIPl}w;5Bse-w;1");
      document0.prependElement("6'");
      document0.addChild(document0);
      Element element0 = document0.previousElementSibling();
      assertEquals("6'", element0.tagName());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("hIPl}w;5Bse-w;1");
      document0.addChild(document0);
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("_CUDgK+uS3<=~z]f;");
      document0.addChild(document0);
      Element element0 = document0.appendElement("_CUDgK+uS3<=~z]f;");
      Element element1 = element0.firstElementSibling();
      assertSame(element1, document0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("tf&'`j&a8;7c6+(c!h");
      Element element0 = document0.appendChild(document0);
      element0.getElementsByIndexEquals((-1880776845));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("hIPl}w;5Bse-w;1");
      Element element0 = document0.prependElement("uh5");
      Element element1 = element0.lastElementSibling();
      assertEquals("uh5", element0.tagName());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("hIPl}w;5Bse-w;1");
      document0.prependElement("6'");
      document0.addChild(document0);
      Element element0 = document0.lastElementSibling();
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("mgiMgfpa");
      DataNode dataNode0 = DataNode.createFromEncoded("mgiMgfpa", "mgiMgfpa");
      document0.appendChild(dataNode0);
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("$");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("$");
      Element element0 = document0.createElement("$");
      document0.appendChild(element0);
      Element element1 = document0.prependText("$");
      String string0 = element1.text();
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("_CUDgK+uS3<=~z]f;");
      Document document1 = new Document("_CUDgK+uS3<=~z]f;");
      document1.setParentNode(document0);
      boolean boolean0 = document1.preserveWhitespace();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("%lh/Vt83XY2\"O)[;xCh");
      DataNode dataNode0 = DataNode.createFromEncoded("hIPl}w;5Bse-w;1", "org.jsoup.parser.TokenQueue");
      document0.addChild(dataNode0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("t+");
      Element element0 = document0.prependText("");
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("DL");
      Element element0 = document0.prependElement("value");
      assertEquals("value", element0.tagName());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("hIPl}w;5Bse-w;1");
      Element element0 = document0.createElement("hIPl}w;5Bse-w;1");
      document0.addChild(element0);
      element0.text("*2e>(CN'0mach9en/T");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("$");
      document0.prependText("$");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("mgiMgfpa");
      DataNode dataNode0 = DataNode.createFromEncoded("`/%", " ");
      document0.addChild(dataNode0);
      String string0 = document0.data();
      assertEquals("`/%", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("hIPl}w;5Bse-w;1");
      Element element0 = document0.prependElement("6'");
      assertEquals("6'", element0.tagName());
      
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("0iH0]]iWyTkF");
      document0.removeClass("7Z");
      String string0 = document0.className();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document(".j1^zV8a^");
      document0.toggleClass(".j1^zV8a^");
      Set<String> set0 = document0.classNames();
      assertTrue(set0.contains(".j1^zV8a^"));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("hIPl}w;5Bse-w;1");
      boolean boolean0 = document0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.toggleClass("");
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("hIPl}w;5Bse-w;1");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "$");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Tag tag0 = Tag.valueOf("DL");
      Element element0 = new Element(tag0, "");
      String string0 = element0.outerHtml();
      assertEquals("\n<dl>\n</dl>", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("m2giMgfpj");
      Element element0 = document0.createElement("m2giMgfpj");
      document0.appendChild(element0);
      document0.prependText("m2giMgfpj");
      String string0 = document0.toString();
      assertEquals("m2giMgfpj<m2gimgfpj>\n</m2gimgfpj>", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Tag tag0 = Tag.valueOf("mgiMgfpa");
      Element element0 = new Element(tag0, "mgiMgfpa");
      Element element1 = element0.prependText("mgiMgfpa");
      String string0 = element1.outerHtml();
      assertEquals("<mgimgfpa>\nmgiMgfpa\n</mgimgfpa>", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Tag tag0 = Tag.valueOf("BR");
      Element element0 = new Element(tag0, "BR");
      String string0 = element0.outerHtml();
      assertEquals("<br />", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Tag tag0 = Tag.valueOf("SUP");
      Element element0 = new Element(tag0, "tf&'`j&a8;7c6+(c!h");
      String string0 = element0.outerHtml();
      assertEquals("<sup></sup>", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("m2giMgfpj");
      boolean boolean0 = document0.equals("m2giMgfpj");
      assertFalse(boolean0);
  }
}
