/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:08:38 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("Pat7ern sy}tax error: ");
      Elements elements0 = document0.getElementsMatchingText(" ");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("7Jb2w,ZL]m2$(~");
      Element element0 = document0.prependElement("7Jb2w,ZL]m2$(~");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("iv|\">x^-]umo#[]xi_0");
      document0.prependElement("iv|\">x^-]umo#[]xi_0");
      Element element0 = document0.prependText("iv|\">x^-]umo#[]xi_0");
      Elements elements0 = element0.getElementsContainingText("iv|\">x^-]umo#[]xi_0");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("wJb2w,ZL]m2$(~");
      // Undeclared exception!
      try { 
        document0.child(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      StringBuilder stringBuilder0 = new StringBuilder();
      document0.outerHtml(stringBuilder0);
      assertEquals("<#root>\n <br />\n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.tagName("br");
      document0.appendChild(element0);
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("kDKTj~PTZj5aX");
      Element element0 = document0.prependElement("kDKTj~PTZj5aX");
      Element element1 = element0.text("kDKTj~PTZj5aX");
      assertEquals("kDKTj~PTZj5aX", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("PatBern sA}tax error: ");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("p \",[`_");
      Element element0 = document0.addClass("p \",[`_");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("J2,kevmR?;|");
      // Undeclared exception!
      try { 
        document0.html("J2,kevmR?;|");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      Elements elements0 = document0.getElementsByAttributeValue("Pattern syntax error: ", "Pattern syntax error: ");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("Pat7ern sy}tax errar: ");
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      Elements elements0 = document0.getElementsByAttributeValueStarting("Oslash", "Pattern syntax error: ");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("#?r*sn##<");
      // Undeclared exception!
      try { 
        document0.select("#?r*sn##<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      Element element0 = document0.prepend("Pattern syntax error: ");
      assertEquals("Pattern syntax error:", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("icbvzu>");
      Elements elements0 = document0.getElementsMatchingOwnText(";0!!N#*rV");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("wJb2w,ZL]m2$(~");
      // Undeclared exception!
      try { 
        document0.after("wJb2w,ZL]m2$(~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("wZb2w,ZLmm2$(~");
      Elements elements0 = document0.getElementsByIndexLessThan((-313));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("ctrou");
      Elements elements0 = document0.getElementsByAttributeStarting("ctrou");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("wZb2w,ZLmm2$(~");
      Elements elements0 = document0.getElementsByIndexEquals(9841);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("E");
      // Undeclared exception!
      try { 
        document0.wrap("E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      Element element0 = document0.val("Pattern syntax error: ");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByAttributeValueMatching("", "");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("carou");
      Elements elements0 = document0.getElementsByAttributeValueEnding("Z<", "carou");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("wJb2w,ZL]m2$(~");
      document0.getElementsByClass("wJb2w,ZL]m2$(~");
      boolean boolean0 = document0.hasClass("wJb2w,ZL]m2$(~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("Pat7ern sy}tax error: ");
      Elements elements0 = document0.getElementsByAttributeValueContaining("Pat7ern sy}tax error: ", "pattern syntax error:");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("Pat7ern sy}tax error: ");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("*&{p");
      Document document1 = document0.clone();
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("wJb2w,ZL]m2$(~");
      Elements elements0 = document0.getElementsByAttributeValueNot("wJb2w,ZL]m2$(~", "'`Ai3$*^LtA(;fDV");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("wJb2w,ZL]m2$(~");
      Elements elements0 = document0.getElementsByAttribute("wJb2w,ZL]m2$(~");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.before("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("Zcaron");
      Element element0 = document0.removeClass("Zcaron");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
      Elements elements0 = element0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("wZb2w,ZLmm2$(~");
      // Undeclared exception!
      try { 
        document0.title("wZb2w,ZLmm2$(~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document(",>zuB=6vvT4x*o");
      Elements elements0 = document0.getElementsByIndexGreaterThan(3038);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("J2,kevmR?;|");
      Element element0 = document0.getElementById("J2,kevmR?;|");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendChild(document0);
      Elements elements0 = document0.parents();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.appendChild(document0);
      document0.prependText("Pattern syntax error: ");
      Integer integer0 = document0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.prependElement("Pattern syntax error: ");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.prependText("Pattern syntax error: ");
      List<TextNode> list0 = document0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("Z\"&z 0_?6]z<");
      DataNode dataNode0 = DataNode.createFromEncoded("icbgvzbu>", "icbgvzbu>");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("Zcaron");
      document0.prependText("Zcaron");
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      Element element0 = document0.prependElement("Pattern syntax error: ");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      Element element0 = document0.appendChild(document0);
      element0.prependElement("class");
      Element element1 = document0.previousElementSibling();
      assertNotNull(element1);
      assertEquals("class", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("wJb2w,ZL]m2$(~");
      Element element0 = document0.prependElement("wJb2w,ZL]m2$(~");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.appendChild(document0);
      document0.appendElement("[>y!ui)7_acf&rnm)e");
      Element element0 = document0.firstElementSibling();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.appendChild(document0);
      Element element0 = document0.lastElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      Element element0 = document0.appendChild(document0);
      document0.prependElement("Pattern syntax error: ");
      Element element1 = element0.lastElementSibling();
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.appendChild(document0);
      document0.empty();
      Integer integer0 = document0.elementSiblingIndex();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("7Jb2w,ZL]m2$(~");
      document0.prependElement("7Jb2w,ZL]m2$(~");
      Elements elements0 = document0.getElementsContainingText("7Jb2w,ZL]m2$(~");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("wJb2w,ZL]m2$(~");
      document0.prependElement("wJb2w,ZL]m2$(~");
      Elements elements0 = document0.getElementsContainingOwnText("wJb2w,ZL]m2$(~");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("Pat7ern sy}tax error: ");
      document0.appendText("Pat7ern sy}tax error: ");
      Elements elements0 = document0.getElementsContainingOwnText("Pat7ern sy}tax error: ");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
      Elements elements0 = element0.getElementsContainingText("P9");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      element0.addChildren(nodeArray0);
      // Undeclared exception!
      try { 
        element0.getElementsContainingText("P9");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("kDKTj~PTZj5aX");
      Element element0 = document0.prependElement("kDKTj~PTZj5aX");
      boolean boolean0 = element0.preserveWhitespace();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document(" />");
      document0.prependElement(" />");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("]!vt=nn<6wml(7l>w@");
      document0.prependText("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      DataNode dataNode0 = new DataNode("m", ">");
      document0.appendChild(dataNode0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document(" />");
      Element element0 = document0.prependElement(" />");
      element0.prependText(" />");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("Zcaron");
      Element element0 = document0.prependText("Zcaron");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("iv|\">x^-]umo#[]xi_0");
      document0.prependElement("iv|\">x^-]umo#[]xi_0");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("icbvzu>");
      boolean boolean0 = document0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("@p]VUCG`(OFX5?tcp");
      Element element0 = document0.toggleClass("@p]VUCG`(OFX5?tcp");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("CupCap");
      Document document1 = (Document)document0.toggleClass("");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("icbvzu>");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.prependElement("Pattern syntax error: ");
      StringBuilder stringBuilder0 = new StringBuilder();
      document0.outerHtml(stringBuilder0);
      assertEquals("<#root>\n <pattern syntax error:></pattern syntax error:>\n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, (-1698), document_OutputSettings1);
      assertEquals("</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("7Jb2w,ZL]m2$(~");
      document0.prependElement("7Jb2w,ZL]m2$(~");
      String string0 = document0.html();
      assertEquals("<7jb2w,zl]m2$(~></7jb2w,zl]m2$(~>", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document(" />");
      document0.hashCode();
  }
}
