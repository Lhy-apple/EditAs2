/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:08:51 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Tag_ESTest extends Tag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("y");
      assertNotNull(tag0);
      
      tag0.getName();
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.apache.commons.lang.Validate");
      boolean boolean0 = tag0.canContainBlock();
      assertFalse(tag0.isData());
      assertTrue(boolean0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("title");
      boolean boolean0 = tag0.preserveWhitespace();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("y");
      tag0.toString();
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("x,");
      boolean boolean0 = tag0.isBlock();
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(boolean0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dd");
      boolean boolean0 = tag0.canContain(tag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("script");
      boolean boolean0 = tag0.canContain(tag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("script");
      Tag tag1 = tag0.getImplicitParent();
      assertNotNull(tag1);
      
      boolean boolean0 = tag1.canContain(tag0);
      assertTrue(boolean0);
      assertEquals("head", tag1.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("BASE");
      boolean boolean0 = tag0.canContain(tag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("thead");
      Tag tag1 = tag0.getImplicitParent();
      boolean boolean0 = tag0.canContain(tag1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("base");
      Tag tag1 = tag0.getImplicitParent();
      boolean boolean0 = tag1.canContain(tag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("link");
      Tag tag1 = tag0.getImplicitParent();
      boolean boolean0 = tag1.canContain(tag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("NOSCRIPT");
      Tag tag1 = tag0.getImplicitParent();
      boolean boolean0 = tag1.canContain(tag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("title");
      Tag tag1 = tag0.getImplicitParent();
      boolean boolean0 = tag1.canContain(tag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Tag tag1 = Tag.valueOf("META");
      boolean boolean0 = tag0.canContain(tag1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("object");
      Tag tag1 = tag0.getImplicitParent();
      boolean boolean0 = tag1.canContain(tag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("style");
      Tag tag1 = tag0.getImplicitParent();
      boolean boolean0 = tag1.canContain(tag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      boolean boolean0 = tag0.canContain(tag0);
      assertFalse(tag0.isData());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dd");
      Tag tag1 = Tag.valueOf("DT");
      boolean boolean0 = tag1.canContain(tag0);
      assertFalse(tag1.equals((Object)tag0));
      assertFalse(tag1.isData());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf("1");
      Tag tag1 = Tag.valueOf("DT");
      boolean boolean0 = tag1.canContain(tag0);
      assertFalse(tag0.isEmpty());
      assertTrue(boolean0);
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dd");
      Tag tag1 = Tag.valueOf("BR");
      boolean boolean0 = tag0.canContain(tag1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("title");
      boolean boolean0 = tag0.isInline();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("K");
      boolean boolean0 = tag0.isInline();
      assertFalse(tag0.isEmpty());
      assertTrue(boolean0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isData());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = Tag.valueOf("link");
      boolean boolean0 = tag0.isData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tag tag0 = Tag.valueOf("TITLE");
      boolean boolean0 = tag0.isData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      Tag tag1 = tag0.getImplicitParent();
      assertNull(tag1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tag tag0 = Tag.valueOf("script");
      boolean boolean0 = tag0.isValidParent(tag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Tag tag1 = tag0.getImplicitParent();
      boolean boolean0 = tag0.isValidParent(tag1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Tag tag0 = Tag.valueOf("script");
      Tag tag1 = tag0.getImplicitParent();
      boolean boolean0 = tag1.isValidParent(tag0);
      assertTrue(boolean0);
      assertFalse(tag1.equals((Object)tag0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Tag tag0 = Tag.valueOf("u");
      boolean boolean0 = tag0.equals((Object) null);
      assertFalse(tag0.isEmpty());
      assertFalse(boolean0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Tag tag0 = Tag.valueOf("script");
      boolean boolean0 = tag0.equals("script");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Tag tag0 = Tag.valueOf("1");
      boolean boolean0 = tag0.isValidParent(tag0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Tag tag0 = Tag.valueOf("!{8{");
      Tag tag1 = Tag.valueOf("!{8{");
      boolean boolean0 = tag0.equals(tag1);
      assertTrue(tag1.canContainBlock());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isData());
      assertTrue(boolean0);
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dt");
      tag0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Tag tag0 = Tag.valueOf("script");
      Tag tag1 = tag0.getImplicitParent();
      tag1.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Tag tag0 = Tag.valueOf("PARAM");
      tag0.hashCode();
  }
}
