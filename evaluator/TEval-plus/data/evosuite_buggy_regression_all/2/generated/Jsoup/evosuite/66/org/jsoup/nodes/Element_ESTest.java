/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:13:43 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("J]suAI\u0003w}}=*");
      // Undeclared exception!
      try { 
        document0.wrap("J]suAI\u0003w}}=*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("Zs");
      document0.appendText("Zs");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("GC69+'ZS!7: h'Y");
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsMatchingText("GC69+'ZS!7: h'Y");
      assertEquals("GC69+'ZS!7: h'Y", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("~t(");
      Comment comment0 = new Comment("~t(", "~t(");
      document0.prependChild(comment0);
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("Ve0f@lareg");
      // Undeclared exception!
      try { 
        document0.child(36);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document(";M L7F5");
      document0.prependText(";M L7F5");
      document0.getElementsContainingOwnText(";M L7F5");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell(".8~~oVO;'m39;HveJ");
      Element element0 = document0.tagName(".8~~oVO;'m39;HveJ");
      assertEquals(1, element0.childNodeSize());
      assertEquals(".8~~oVO;'m39;HveJ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("K");
      document0.dataset();
      assertEquals("K", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell(":containsData(");
      Element element0 = document0.addClass(":containsData(");
      assertEquals(":containsData(", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Element element0 = new Element("1F!&3:67");
      String string0 = element0.outerHtml();
      assertEquals("<1F!&3:67></1F!&3:67>", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("GC_6Y)9+'ZS!7: h'Y");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("p;:#Y?;");
      Element element0 = document0.attr("p;:#Y?;", true);
      assertEquals(1, element0.childNodeSize());
      assertEquals("p;:#Y?;", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("TLWZejN!'c7?4?!a");
      document0.getElementsByAttributeValue("TLWZejN!'c7?4?!a", "TLWZejN!'c7?4?!a");
      assertEquals(1, document0.childNodeSize());
      assertEquals("TLWZejN!'c7?4?!a", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Element element0 = new Element("clas");
      Elements elements0 = element0.getElementsByAttributeValueStarting("clas", "clas");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("GC_6Y9+'ZS!7: h'Y");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("GC_6Y9+'ZS!7: h'Y", element0.baseUri());
      assertEquals("html > head", string0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("1F!&3:67");
      document0.prepend("1F!&3:67");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Elements elements0 = document0.getElementsByIndexLessThan(23);
      assertEquals(3, elements0.size());
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell(".8~~oVO;'m39;HveJ");
      document0.getElementsByAttributeStarting(".8~~oVO;'m39;HveJ");
      assertEquals(".8~~oVO;'m39;HveJ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell(">1LT,U(4j}2B^Hd9X");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(">1LT,U(4j}2B^Hd9X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: >1LT,U(4j}2B^Hd9X
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("7]6+scy_");
      Element element0 = document0.val("7]6+scy_");
      assertEquals("7]6+scy_", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("br");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("*cw0;", "*cw0;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: *cw0;
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000022 vx/,nt g?");
      document0.is("l25U");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("wxourc");
      document0.getElementsByAttributeValueEnding("wxourc", "wxourc");
      assertEquals(1, document0.childNodeSize());
      assertEquals("wxourc", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("o@{h;C}(/");
      Elements elements0 = document0.getElementsByClass("o@{h;C}(/");
      assertEquals("o@{h;C}(/", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$NodeList");
      document0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element$NodeList", pattern0);
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("GC_6Y9+'ZS!7: h'Y");
      document0.getElementsByAttributeValueContaining(";`E{_", "var");
      assertEquals("GC_6Y9+'ZS!7: h'Y", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("TLWZejN!'c7?4?!a");
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.setBaseUri("mQ@;=W_Eys;");
      assertEquals("mQ@;=W_Eys;", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("D:D_Sx]");
      document0.getElementsByAttributeValueNot("D:D_Sx]", "D:D_Sx]");
      assertEquals("D:D_Sx]", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell(".r");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertEquals(".r", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("7+Xs~?:Y?v&L#a");
      document0.getElementsByAttribute("7+Xs~?:Y?v&L#a");
      assertEquals(1, document0.childNodeSize());
      assertEquals("7+Xs~?:Y?v&L#a", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell(".8~~oVO;'m39;HveJ");
      Element element0 = document0.removeClass(".8~~oVO;'m39;HveJ");
      assertEquals(".8~~oVO;'m39;HveJ", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell(".8~oVO;'m39;HveJ");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals(".8~oVO;'m39;HveJ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell(";u$olIOSi6MyPrS");
      document0.selectFirst("8H");
      assertEquals(1, document0.childNodeSize());
      assertEquals(";u$olIOSi6MyPrS", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document(":nth-ch4sild%d)");
      Elements elements0 = document0.getElementsByIndexGreaterThan(11);
      assertEquals(":nth-ch4sild%d)", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("GC_6Y9+'ZS!7: h'Y");
      Element element0 = document0.head();
      assertEquals(0, element0.siblingIndex());
      
      element0.before(";`E{_");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(3)", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", (Attributes) null);
      Element element0 = formElement0.appendElement("br");
      element0.append("br");
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("br", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = ">1LT,U\\(4j}2B^Hd9X";
      Document document0 = Document.createShell(">1LT,U(4j}2B^Hd9X");
      Element element0 = document0.text(">1LT,U(4j}2B^Hd9X");
      document0.appendTo(element0);
      document0.hasText();
      int int0 = 126;
      document0.getElementsByIndexEquals(126);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, string0);
      float float0 = 0.0F;
      stringBuilder1.append(float0);
      char[] charArray0 = new char[6];
      char char0 = 'Q';
      charArray0[0] = char0;
      char char1 = '\\';
      charArray0[1] = char1;
      char char2 = '~';
      charArray0[2] = char2;
      String string1 = "J)|x!Y0{Wv:>`%qV^";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag.valueOf(string1, parseSettings0);
      String string2 = "uUOv";
      String string3 = "+2XKX@PvTcu4=0W:@";
      String string4 = "z.9<f}`2*B,h\\IYn";
      boolean boolean0 = true;
      String string5 = "uwX97fo6G<~[-w>fBA";
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("");
      Comment comment0 = new Comment("fEcH&u`ayB");
      document0.prependChild(comment0);
      document0.getElementsByIndexEquals(126);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("/{");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
      assertEquals("/{", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Tag tag0 = Tag.valueOf("K");
      Element element0 = new Element(tag0, "K");
      Element element1 = element0.html("l:");
      element1.textNodes();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell(";u$olIOSi6MyPrS");
      Node[] nodeArray0 = new Node[1];
      DataNode dataNode0 = new DataNode(";u$olIOSi6MyPrS", "By$fFQ0S=uf");
      nodeArray0[0] = (Node) dataNode0;
      document0.addChildren(nodeArray0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell(":matches(");
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      // Undeclared exception!
      try { 
        document0.insertChildren(96, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("GC_6)9+'ZS!7: h'Y");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(0, list0.size());
      
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) list0);
      assertEquals("GC_6)9+'ZS!7: h'Y", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("/{");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2968), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell(":matches(");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(67, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("q");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-182), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", (Attributes) null);
      Element element0 = formElement0.append("br");
      Node[] nodeArray0 = new Node[6];
      // Undeclared exception!
      try { 
        element0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("id", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("id", "id");
      attributes0.put(attribute0);
      Element element0 = new Element(tag0, "id", attributes0);
      String string0 = element0.cssSelector();
      assertEquals("#id", string0);
      assertEquals("id", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("`:Y/xC`'R.oW#U");
      document0.toggleClass("`:Y/xC`'R.oW#U");
      document0.cssSelector();
      assertEquals("`:Y/xC`'R.oW#U", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell("GC_6Y9+'ZS!7: h'Y");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals("GC_6Y9+'ZS!7: h'Y", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell(">1LT,U(4j}2B^Hd9X");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
      assertEquals(">1LT,U(4j}2B^Hd9X", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("/{");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("/{", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "org.jsoup.parser.Token$EndTag");
      Document document0 = new Document("org.jsoup.parser.Token$EndTag");
      document0.prependChild(element0);
      Element element1 = element0.nextElementSibling();
      assertEquals("org.jsoup.parser.Token$EndTag", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("body");
      document0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("/{");
      Element element0 = document0.head();
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
      assertEquals("/{", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("K");
      document0.prependChild(document0);
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
      assertEquals("K", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("/{");
      Element element0 = document0.head();
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertEquals("/{", element1.baseUri());
      assertEquals("head", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Tag tag0 = Tag.valueOf("'Q~N<|,8s7/");
      FormElement formElement0 = new FormElement(tag0, "'Q~N<|,8s7/", (Attributes) null);
      Element element0 = formElement0.appendElement("'Q~N<|,8s7/");
      Element element1 = element0.lastElementSibling();
      assertEquals("'Q~N<|,8s7/", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("String must not be empty");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertEquals("String must not be empty", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", (Attributes) null);
      Element element0 = formElement0.appendElement("br");
      formElement0.empty();
      Elements elements0 = element0.getElementsByIndexEquals((-1241));
      assertTrue(elements0.isEmpty());
      assertEquals("br", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("id", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "id", attributes0);
      Element element1 = element0.getElementById("7d]M9");
      assertEquals("id", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Document.createShell(":matches(");
      DataNode dataNode0 = new DataNode(":matches(");
      document0.appendChild(dataNode0);
      Elements elements0 = document0.getElementsContainingText(":matches(");
      assertEquals(":matches(", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell("#%P");
      document0.appendElement("#%P");
      document0.title("#%P");
      Elements elements0 = document0.getElementsContainingText("#%P");
      assertEquals(4, elements0.size());
      assertEquals("#%P", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.appendElement("br");
      document0.title("br");
      Elements elements0 = document0.getElementsContainingText(";1]v<?");
      assertEquals("br", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("GC_6)9+'ZS!7: h'Y");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      Comment comment0 = new Comment(".B?^Xf_)WCxTQ-&#pe", ".B?^Xf_)WCxTQ-&#pe");
      nodeArray0[3] = (Node) comment0;
      DataNode dataNode0 = DataNode.createFromEncoded("YwVCQfp", (String) null);
      nodeArray0[4] = (Node) dataNode0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.getElementsContainingOwnText("GC_6)9+'ZS!7: h'Y");
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, ";u$olIOSi6MyPrS", (Attributes) null);
      formElement0.appendElement("br");
      formElement0.appendElement("br");
      Elements elements0 = formElement0.getElementsContainingOwnText("         ");
      assertEquals(";u$olIOSi6MyPrS", formElement0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Comment comment0 = new Comment("V>##@A@", "C43q");
      boolean boolean0 = Element.preserveWhitespace(comment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      Element element1 = element0.prependElement("checked");
      boolean boolean0 = Element.preserveWhitespace(element1);
      assertTrue(boolean0);
      assertEquals("textarea", element1.baseUri());
      assertEquals("checked", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("/{");
      Element element0 = document0.head();
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertEquals("/{", element0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("Ve0f@lareg");
      Document document1 = document0.normalise();
      document1.text("");
      boolean boolean0 = document0.hasText();
      assertEquals("Ve0f@lareg", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("");
      Comment comment0 = new Comment("fEcH&u`ayB");
      document0.prependChild(comment0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("gCnWShy\"");
      DataNode dataNode0 = DataNode.createFromEncoded("9]]Z>R", "&ARqpQ");
      document0.prependChild(dataNode0);
      String string0 = document0.data();
      assertEquals("9]]Z>R", string0);
      assertEquals("gCnWShy\"", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("radio");
      document0.title("radio");
      document0.data();
      assertEquals("radio", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", (Attributes) null);
      formElement0.toggleClass("br");
      boolean boolean0 = formElement0.hasClass("java.lang.string@0000000022 vx/,nt g?");
      assertEquals("br", formElement0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Comment comment0 = new Comment("class", "class");
      Attributes attributes0 = comment0.attributes();
      attributes0.putIgnoreCase("class", "class");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      boolean boolean0 = formElement0.hasClass("class");
      assertTrue(boolean0);
      assertEquals("class", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Tag tag0 = Tag.valueOf("RqyL~>!SGLZ");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "RqyL~>!SGLZ", attributes0);
      formElement0.toggleClass("RqyL~>!SGLZ");
      formElement0.toggleClass("java.lang.string@0000000022 vx/,nt g?");
      boolean boolean0 = formElement0.hasClass("$t=xzf");
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Tag tag0 = Tag.valueOf("RqyL~>!SGLZ");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "RqyL~>!SGLZ", attributes0);
      Element element0 = formElement0.toggleClass("RqyL~>!SGLZ");
      element0.toggleClass("         ");
      boolean boolean0 = formElement0.hasClass("*\"}1t8J-*BN[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Tag tag0 = Tag.valueOf("RqyL~>!SGLZ");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "RqyL~>!SGLZ", attributes0);
      Element element0 = formElement0.toggleClass("RqyL~>!SGLZ");
      formElement0.toggleClass("java.lang.string@0000000022 vx/,nt g?");
      boolean boolean0 = element0.hasClass("VX/,nT");
      assertEquals("RqyL~>!SGLZ", element0.baseUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Tag tag0 = Tag.valueOf("B/=");
      Comment comment0 = new Comment("");
      Attributes attributes0 = comment0.attributes();
      FormElement formElement0 = new FormElement(tag0, "B/=", attributes0);
      formElement0.toggleClass("|3bBwT[WZOd");
      formElement0.toggleClass("TNP1J.`;gOP?");
      boolean boolean0 = formElement0.hasClass("TNP1J.`;gOP?");
      assertEquals(2, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Comment comment0 = new Comment("#root");
      Attributes attributes0 = comment0.attributes();
      FormElement formElement0 = new FormElement(tag0, "#root", attributes0);
      formElement0.toggleClass("textarea");
      formElement0.toggleClass("textarea");
      formElement0.toggleClass("textarea");
      assertEquals(2, attributes0.size());
      assertEquals("#root", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("head");
      document0.val();
      assertEquals("head", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Comment comment0 = new Comment("  ", "VFi~DYIt");
      Attributes attributes0 = comment0.attributes();
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "  ", attributes0);
      formElement0.val();
      assertEquals("  ", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Comment comment0 = new Comment("#root");
      Attributes attributes0 = comment0.attributes();
      FormElement formElement0 = new FormElement(tag0, "#root", attributes0);
      formElement0.val("#root");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = Document.createShell("~t(");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document_OutputSettings0.prettyPrint(false);
      String string0 = document1.outerHtml();
      assertEquals("<html><head></head><body></body></html>", string0);
      assertEquals("~t(", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", (Attributes) null);
      formElement0.appendElement("br");
      String string0 = formElement0.outerHtml();
      assertEquals("br", formElement0.baseUri());
      assertEquals("<br><br></br>", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", (Attributes) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      formElement0.outerHtmlHead(stringBuffer0, 44, document_OutputSettings1);
      assertEquals("\n                                            <br>", stringBuffer0.toString());
      assertEquals(49, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", (Attributes) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      formElement0.outerHtmlHead(stringBuffer0, 44, document_OutputSettings0);
      assertEquals("<br />", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = Document.createShell("~t(");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.title("~t(");
      String string0 = document1.outerHtml();
      assertEquals("~t(", document1.baseUri());
      assertEquals("<html>\n <head>\n  <title>~t(</title>\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Document document0 = Document.createShell("GC_6)9+'ZS!7: h'Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("GC_6)9+'ZS!7: h'Y");
      document0.html(mockPrintWriter0);
      assertEquals("GC_6)9+'ZS!7: h'Y", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Document document0 = Document.createShell("YpfNc'aCl`?NFic!D-]q");
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
      
      Document document1 = document0.clone();
      assertNotSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("YpfNc'aCl`?NFic!D-]q", document1.baseUri());
  }
}
