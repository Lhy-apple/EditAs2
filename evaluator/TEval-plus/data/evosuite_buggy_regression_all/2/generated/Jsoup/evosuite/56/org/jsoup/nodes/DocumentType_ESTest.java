/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:11:04 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.File;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DocumentType_ESTest extends DocumentType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "", "org.jsoup.nodes.XmlDeclaration");
      File file0 = MockFile.createTempFile(")rF\"h7xs(~MtU,YmL-", "SYSTEM");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Document.OutputSettings document_OutputSettings0 = documentType0.getOutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      documentType0.outerHtmlHead(mockPrintStream0, 0, document_OutputSettings1);
      assertEquals(10L, file0.length());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("org.jsoup.nodes.DocumentType", "name", "w^", "org.jsoup.nodes.DocumentType");
      String string0 = documentType0.nodeName();
      assertEquals("#doctype", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "x8eYZ:", "", "");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      documentType0.outerHtmlTail(stringWriter0, 33, document_OutputSettings0);
      assertEquals(0, documentType0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "", "org.jsoup.nodes.XmlDeclaration");
      File file0 = MockFile.createTempFile(")rF\"h7xs(~MtU,YmL-", "SYSTEM");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Document.OutputSettings document_OutputSettings0 = documentType0.getOutputSettings();
      documentType0.outerHtmlHead(mockPrintStream0, 0, document_OutputSettings0);
      assertEquals(10L, file0.length());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "", "org.jsoup.nodes.XmlDeclaration");
      File file0 = MockFile.createTempFile(")rF\"h7xs(~MtU,YmL-", "SYSTEM");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Document.OutputSettings document_OutputSettings0 = documentType0.getOutputSettings();
      DocumentType documentType1 = new DocumentType(")rF\"h7xs(~MtU,YmL-", "SYSTEM", "", "PUBLIC");
      documentType1.outerHtmlHead(mockPrintStream0, 0, document_OutputSettings0);
      assertEquals(45L, file0.length());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", ")7~E .{yw|(^IZ", ")7~E .{yw|(^IZ");
      File file0 = MockFile.createTempFile(")rF\"h7xs(~MtU,YmL-", "name");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Document.OutputSettings document_OutputSettings0 = documentType0.getOutputSettings();
      documentType0.outerHtmlHead(mockPrintStream0, 1578, document_OutputSettings0);
      assertEquals(27L, file0.length());
  }
}
