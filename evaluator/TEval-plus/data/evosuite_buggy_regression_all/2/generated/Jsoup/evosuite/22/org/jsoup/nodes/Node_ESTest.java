/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:09:45 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("WJwfQO");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("NotSubsetEqual", "NotSubsetEqual");
      textNode0.setBaseUri("Sum");
      assertEquals("Sum", textNode0.baseUri());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("#text");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("abs:abs:abs:uuperrihtar`ow");
      Element element0 = document0.head();
      assertNotNull(element0);
      
      Node node0 = element0.unwrap();
      assertNull(node0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("abs:abs:abs:uuperrightar`ow");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "|T+23H1'K5%_");
      DocumentType documentType0 = new DocumentType("gjcy", "W", "W", "org.jsoup.nodes.Node$1");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(1158, (Object) documentType0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1158
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("7S2-");
      // Undeclared exception!
      try { 
        document0.before("7S2-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = new TextNode("NoSusetEqual", "NoSusetEqual");
      textNode0.removeAttr("NoSusetEqual");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Xxh1llr&o+OQ<", "Xxh1llr&o+OQ<");
      textNode0.toString();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("quatint");
      document0.getElementsByAttributeStarting("quatint");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("abs:abs:abs:uuperrightar`ow");
      document0.absUrl("abs:abs:abs:uuperrightar`ow");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Node$1");
      Element element0 = document0.attr("org.jsoup.nodes.Node$1", "org.jsoup.nodes.Node$1");
      element0.absUrl("org.jsoup.nodes.Node$1");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comment comment0 = new Comment("|T+23H1'K5%_", "|T+23H1'K5%_");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) comment0;
      nodeArray0[1] = (Node) comment0;
      nodeArray0[2] = (Node) comment0;
      nodeArray0[3] = (Node) comment0;
      comment0.addChildren(nodeArray0);
      // Undeclared exception!
      try { 
        comment0.after("|T+23H1'K5%_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("|T+23H1'K5%_");
      Comment comment0 = new Comment("|T+23H1'K5%_", "|T+23H1'K5%_");
      Node node0 = comment0.doClone(document0);
      node0.after("|T+23H1'K5%_");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("7G2-");
      Element element0 = document0.head();
      element0.replaceWith(document0);
      // Undeclared exception!
      try { 
        element0.wrap("7G2-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("abs:\tb:1|];kdm)^");
      Element element0 = document0.head();
      element0.wrap("abs:\tb:1|];kdm)^");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("?");
      Element element0 = document0.prependElement("?");
      element0.wrap("?");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("abs:abs:abs:uuperrihtar`ow");
      Element element0 = document0.head();
      element0.appendText("abs:abs:abs:uuperrihtar`ow");
      element0.unwrap();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("J");
      Element element0 = document0.head();
      element0.setParentNode(document0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("abs:abs:abs:uuperri9htar`oP");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("abs:abs:abs:uuperri9htar`oP");
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("abs:\tb:1|];kdm)^");
      Element element0 = document0.head();
      element0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comment comment0 = new Comment("abs:", "weV)u.giMF#|)e");
      Document document0 = Document.createShell("");
      document0.appendChild(comment0);
      comment0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("NotSubsetEqual", "NotSubsetEqual");
      textNode0.equals("NotSubsetEqual");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("NotSubsetEqual", "NotSubsetEqual");
      textNode0.equals(textNode0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextNode textNode0 = new TextNode("|T+23H1'K5%_", "|T+23H1'K5%_");
      Document document0 = Document.createShell("|T+23H1'K5%_");
      document0.prependChild(textNode0);
      textNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("abs:abs:bigopnlus");
      document0.html("abs:abs:bigopnlus");
      document0.clone();
  }
}
