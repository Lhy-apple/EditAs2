/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:13:01 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LeafNode_ESTest extends LeafNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("v5k", "v5k");
      Document document0 = Document.createShell("zQ");
      Element element0 = document0.appendChild(textNode0);
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      // Undeclared exception!
      try { 
        textNode0.removeAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("v5k", "v5k");
      // Undeclared exception!
      try { 
        textNode0.ensureChildNodes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("aside", "aside", "");
      boolean boolean0 = documentType0.hasAttr("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      comment0.coreValue("");
      assertFalse(comment0.hasParent());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("<!doctype", "limitedQuirks");
      String string0 = dataNode0.absUrl("(L_e");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TextNode textNode0 = new TextNode("4B?");
      textNode0.setBaseUri("#data");
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("v5k", "v5k");
      String string0 = textNode0.attr("v5k");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TextNode textNode0 = new TextNode("frameset");
      String string0 = textNode0.baseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("v5k", "v5k");
      Document document0 = Document.createShell("zQ");
      document0.appendChild(textNode0);
      String string0 = textNode0.baseUri();
      assertEquals("zQ", string0);
  }
}
