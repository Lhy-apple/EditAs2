/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:12:59 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedWriter;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.prependElement("c");
      String string0 = element1.cssSelector();
      assertEquals("br > c", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = new Document("r");
      Elements elements0 = document0.getElementsMatchingText("r");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = new Element("br");
      Element element1 = document0.prependChild(element0);
      document0.prepend("TagName");
      element1.text();
      assertEquals(2, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = new Document("dU}^cgR^6&B\"0");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_IsRoot0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Element element0 = new Element("br");
      element0.prependElement("br");
      // Undeclared exception!
      try { 
        element0.toString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = new Document("dU}^cgR^6&B\"0");
      Element element0 = document0.prependText("r)F");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = new Document("QVf");
      Element element0 = document0.tagName("QVf");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Element element0 = new Element("br");
      Map<String, String> map0 = element0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Element element0 = new Element(":nth-child(%d)");
      Element element1 = element0.addClass(":nth-child(%d)");
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Element element0 = new Element("br");
      // Undeclared exception!
      try { 
        element0.html("br");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.attr("br", false);
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValue("br", "br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Element element0 = new Element("br");
      Elements elements0 = element0.getElementsByAttributeValueStarting("br", "br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = new Document("r");
      // Undeclared exception!
      try { 
        document0.after("r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = new Document("dU}^cgR^6&B\"0");
      Elements elements0 = document0.getElementsByIndexLessThan(5);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeStarting("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByIndexEquals(43);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = new Document("dU}^cgR^6&B\"0");
      // Undeclared exception!
      try { 
        document0.wrap("dU}^cgR^6&B\"0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        Document.createShell("9e,HiV5KJPX>B:8vJ+X");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Element element0 = new Element("s+");
      Element element1 = element0.val("s+");
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document("#doctype");
      Elements elements0 = document0.getElementsByAttributeValueMatching("#doctype", "#doctype");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Element element0 = new Element("Children collection to be inserted must not be null.");
      Elements elements0 = element0.getElementsByAttributeValueEnding("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = new Document("dU}^cgR^6&B\"0");
      Elements elements0 = document0.getElementsContainingText("dU}^cgR^6&B\"0");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = new Document("OX #,pV:\"3>-");
      Elements elements0 = document0.getElementsByAttributeValueContaining("OX #,pV:\"3>-", "OX #,pV:\"3>-");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = new Document("k$C8pwd;m");
      Document document1 = document0.clone();
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = new Document("OX #,pV:\"3>-");
      Elements elements0 = document0.getElementsByAttributeValueNot("OX #,pV:\"3>-", "OX #,pV:\"3>-");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Element element0 = new Element("br");
      Elements elements0 = element0.getElementsByAttribute("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.before("br");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = new Document("frameset");
      Element element0 = document0.removeClass("frameset");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = new Document("dU}^cgR^6&B\"0");
      // Undeclared exception!
      try { 
        document0.is("dU}^cgR^6&B\"0");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'dU}^cgR^6&B\"0': unexpected token at '}^cgR^6&B\"0'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = new Document("k$C8pwd;m");
      Elements elements0 = document0.getElementsByTag("k$C8pwd;m");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Element element0 = new Element("br");
      Elements elements0 = element0.getElementsByIndexGreaterThan(46);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.createElement("br");
      document0.setParentNode(element0);
      Elements elements0 = document0.parents();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document("dwU}^cgR^6&B\"0");
      document0.append("dwU}^cgR^6&B\"0");
      document0.prependChild(document0);
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = new Document("I");
      document0.prepend("I");
      List<TextNode> list0 = document0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = new Document("");
      document0.prependChild(document0);
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = new Document("dU}^cgR^6&B\"0");
      document0.prependChild(document0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = new Document("dU}^cgR^6&B\"0");
      DataNode dataNode0 = DataNode.createFromEncoded("dU}^cgR^6&B\"0", " > ");
      document0.prependChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Element element0 = new Element(">");
      LinkedHashSet<TextNode> linkedHashSet0 = new LinkedHashSet<TextNode>();
      // Undeclared exception!
      try { 
        element0.insertChildren(62, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = new Document("frameset");
      Elements elements0 = document0.getElementsContainingOwnText("frameset");
      // Undeclared exception!
      try { 
        document0.insertChildren((-1994344069), elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = new Document("i");
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      Element element0 = document0.insertChildren(0, linkedList0);
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = new Document("frmespt");
      document0.toggleClass("frmespt");
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      String string0 = element0.cssSelector();
      assertEquals("br", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = new Document("v?-;J=*6 ds$*CKoj");
      Element element0 = document1.appendChild(document0);
      element0.prependChild(document1);
      Elements elements0 = document1.siblingElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = new Document("dwU}^cgR^6&B\"0");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("1ew7QB$xo,@U;6H$Pp");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = new Document("9e,HiV5KJPX>B:8vJ+X");
      Document document1 = new Document("je]eZ1w");
      document0.prependChild(document0);
      document0.before((Node) document1);
      assertEquals(1, document0.siblingIndex());
      
      Element element0 = document1.nextElementSibling();
      assertNotSame(document1, element0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = new Document("frameset");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = new Document("dU}^cgR^6&B\"0");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = new Document("frameset");
      Element element0 = document0.prependChild(document0);
      element0.prependElement("~gibzb0L&]");
      element0.previousElementSibling();
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Tag tag0 = Tag.valueOf("frameset");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "frameset", attributes0);
      Document document0 = new Document("frameset");
      Element element0 = document0.prependChild(formElement0);
      document0.prependChild(element0);
      Element element1 = document0.firstElementSibling();
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.prependElement("br");
      Integer integer0 = element1.elementSiblingIndex();
      assertEquals(0, (int)integer0);
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = new Document("dU}^cgR^6&B\"0");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = new Document("");
      Document document2 = (Document)document0.appendChild(document1);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document2.addChildren(nodeArray0);
      Document document3 = (Document)document0.lastElementSibling();
      assertEquals(2, document3.childNodeSize());
      assertNotNull(document3);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = new Document("dU}^cgR^6&B\"0");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = new Document("Ar");
      Element element0 = document0.getElementById("Ar");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = new Document(":nth-child(d)");
      DocumentType documentType0 = new DocumentType(":nth-child(d)", "mgE7$']", "mgE7$']", "mgE7$']", ":nth-child(d)");
      Element element0 = document0.appendChild(documentType0);
      String string0 = element0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Tag tag0 = Tag.valueOf("frameset");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "frameset", attributes0);
      Document document0 = new Document("frameset");
      document0.prependChild(formElement0);
      document0.prepend("|`#Q~ ");
      String string0 = document0.text();
      assertEquals("|`#Q~", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = new Document("tm-`khhv;ne\u0000)%nd");
      Element element0 = document0.prepend("tm-`khhv;ne\u0000)%nd");
      Element element1 = element0.appendChild(document0);
      element1.text();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = new Document("frmespt");
      Element element0 = document0.prepend("frmespt");
      Elements elements0 = element0.getElementsMatchingOwnText("frmespt");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = new Document("frameset");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("Gr?RwI_K7]KOlX6", "Gr?RwI_K7]KOlX6", true);
      document0.prependChild(xmlDeclaration0);
      Elements elements0 = document0.getElementsMatchingOwnText("frameset");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document(" >");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.getElementsMatchingOwnText(" >");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.prependElement("br");
      element1.after((Node) element0);
      // Undeclared exception!
      element0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DataNode dataNode0 = new DataNode(":nth-child(d)", ":nth-child(d)");
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("pre", parseSettings0);
      Element element0 = new Element(tag0, "k(tj)");
      Element element1 = element0.append("(?i)\bcharset=s*(?:\"|')?([^s,;\"']*)");
      // Undeclared exception!
      try { 
        element1.toString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = new Element("textarea");
      document0.setParentNode(element0);
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = new Document("frmespt");
      document0.prepend(" ");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = new Document("dU}^cgR^6&B\"0");
      Document document1 = new Document("dU}^cgR^6&B\"0");
      document1.prependChild(document0);
      document0.prepend("dU}^cgR^6&B\"0");
      boolean boolean0 = document1.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prepend("<!7VVpoHxr6l3.");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = new Document("frmespt");
      document0.prependElement("frmespt");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = new Document("dwU}^cgR^6&B\"0");
      document0.prependChild(document0);
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = new Document("dU}^cgR^6&B\"0");
      DataNode dataNode0 = DataNode.createFromEncoded("dU}^cgR^6&B\"0", "dU}^cgR^6&B\"0");
      document0.prependChild(dataNode0);
      String string0 = document0.data();
      assertEquals("dU}^cgR^6&B\"0", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = new Document("dwU}^cgR^6&B\"0");
      Comment comment0 = new Comment("dwU}^cgR^6&B\"0", "value");
      document0.prependChild(comment0);
      String string0 = document0.data();
      assertEquals("dwU}^cgR^6&B\"0", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = new Document("dU}^cgR^6&B\"0");
      document0.prepend("dU}^cgR^6&B\"0");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = new Document("");
      boolean boolean0 = document0.hasClass(" h");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = new Document("Y*9t}-D9OV:)@q");
      document0.toggleClass("Y*9t}-D9OV:)@q");
      boolean boolean0 = document0.hasClass("org.jsoup.parser.treebuilder");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = new Document("");
      document0.toggleClass("Tag name must not be empty.");
      boolean boolean0 = document0.hasClass("ScriptDataDoubleEscapedDash");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = new Document("dU}^cgR^6&B\"0");
      document0.toggleClass("dU}^cgR^6&B\"0");
      document0.toggleClass(" }_$bOQphZ(");
      boolean boolean0 = document0.hasClass(" }_$bOQphZ(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = new Document("I");
      document0.toggleClass("I");
      document0.toggleClass(".");
      document0.toggleClass("I");
      boolean boolean0 = document0.hasClass(".");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = new Document("I");
      document0.toggleClass("I");
      document0.toggleClass(".");
      document0.toggleClass("I");
      boolean boolean0 = document0.hasClass("5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = new Document("");
      document0.toggleClass("");
      document0.toggleClass("");
      boolean boolean0 = document0.hasClass("XJ}m\" 3he7W)S");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = new Document("dU}^cgR^6&B\"0");
      document0.toggleClass("dU}^cgR^6&B\"0");
      document0.toggleClass("dU}^cgR^6&B\"0");
      Element element0 = document0.toggleClass("dU}^cgR^6&B\"0");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = new Document("frameset");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ">", attributes0);
      String string0 = formElement0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      TextNode textNode0 = new TextNode("BetweenDoctypePublicAndSystemIdentifiers", "textarea");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "form", attributes0);
      formElement0.val("</");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Element element0 = new Element("br");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      element0.outerHtmlHead(stringBuilder0, 55, document_OutputSettings1);
      assertEquals("br<br>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Element element0 = new Element("br");
      StringBuffer stringBuffer0 = new StringBuffer("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element0.outerHtmlHead(stringBuffer0, 1447, document_OutputSettings0);
      assertEquals(1454, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = new Element("br");
      document0.prependChild(element0);
      document0.prepend("TagName");
      String string0 = document0.html();
      assertEquals("TagName\n<br>", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.createElement("br");
      MockPrintStream mockPrintStream0 = new MockPrintStream(":last-of-type");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(mockPrintStream0, 2753, document_OutputSettings0);
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = new Document("Ar");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ar");
      document0.outerHtmlTail(mockPrintStream0, 2454, document_OutputSettings1);
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Element element0 = new Element(" 5ZrwN_K]y^p]@l51");
      element0.prependElement(" 5ZrwN_K]y^p]@l51");
      // Undeclared exception!
      try { 
        element0.toString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Element element0 = new Element("br");
      element0.prependElement("c");
      StringBuffer stringBuffer0 = new StringBuffer("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(stringBuffer0, (-1346), document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Element element0 = new Element("br");
      element0.prependElement("c");
      element0.appendText("N&!8 5U6");
      StringBuffer stringBuffer0 = new StringBuffer("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(stringBuffer0, (-1346), document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Element element0 = new Element("br");
      StringBuffer stringBuffer0 = new StringBuffer("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.text("br");
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element0.outerHtmlTail(stringBuffer0, (-1346), document_OutputSettings1);
      assertEquals("br</br>", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = new Document("1wP");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      String string0 = document1.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("qZ4fdt:(MdBv3");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedWriter pipedWriter1 = document0.html(pipedWriter0);
      assertSame(pipedWriter1, pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000012 . 5");
      Element element0 = document0.prepend("java.lang.string@0000000012 . 5");
      // Undeclared exception!
      try { 
        element0.html((MockPrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
}
