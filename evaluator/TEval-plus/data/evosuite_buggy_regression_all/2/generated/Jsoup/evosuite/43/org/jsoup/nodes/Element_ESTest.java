/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:11:20 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("Pattern syntaxberror: ");
      Element element0 = document0.appendText("Pattern syntaxberror: ");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("Pattern syntaxberror: ");
      Elements elements0 = document0.getElementsMatchingText("Pattern syntaxberror: ");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("AV");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.getElementsContainingOwnText("AV");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("AV");
      Element element0 = document0.appendElement("br");
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = document0.createElement("br");
      Element element2 = document0.prependChild(element1);
      assertEquals(0, element2.siblingIndex());
      
      String string0 = element2.html();
      assertEquals("<br>\n<br>", string0);
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("v/bu!q");
      // Undeclared exception!
      try { 
        document0.html("v/bu!q");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("#root");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("UTF-8");
      document0.addClass("UTF-8");
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("$u");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("BeforeDoctypePublicIdentifier");
      Elements elements0 = document0.getElementsByAttributeValue("BeforeDoctypePublicIdentifier", "BeforeDoctypePublicIdentifier");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("p$6ZmJ]U.I6VgYzi");
      Elements elements0 = document0.getElementsByAttributeValueStarting("p$6ZmJ]U.I6VgYzi", "p$6ZmJ]U.I6VgYzi");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      element0.prependChild(formElement0);
      assertEquals(1, document0.childNodeSize());
      
      String string0 = formElement0.cssSelector();
      assertEquals("br > br", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("BeforeDoctypePublicIdentifier");
      Element element0 = document0.prepend("BeforeDoctypePublicIdentifier");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("mz");
      Elements elements0 = document0.getElementsMatchingOwnText("mz");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("AfterDoctypePublicIdentifier");
      // Undeclared exception!
      try { 
        document0.after("AfterDoctypePublicIdentifier");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("dO5LrGD");
      Elements elements0 = document0.getElementsByIndexLessThan(46);
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("p$ZmOZU.I6VgYzi");
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("yb(P@c#/My}*T{o");
      Elements elements0 = document0.getElementsByAttributeStarting("yb(P@c#/My}*T{o");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("ehN59MA9TT");
      Elements elements0 = document0.getElementsByIndexEquals(2800);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("AfterDoctypePublicIdentifier");
      // Undeclared exception!
      try { 
        document0.wrap("AfterDoctypePublicIdentifier");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("p$6ZmJ]U.I6VgYzi");
      Element element0 = document0.val("p$6ZmJ]U.I6VgYzi");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("p$6ZmOZ]U.I6VgYzi");
      Elements elements0 = document0.getElementsByAttributeValueMatching("p$6ZmOZ]U.I6VgYzi", "p$6ZmOZ]U.I6VgYzi");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("Ryz");
      Elements elements0 = document0.getElementsByAttributeValueEnding("Ryz", "Ryz");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("BeforeDoctypePublicIdentifier");
      Elements elements0 = document0.getElementsByClass("BeforeDoctypePublicIdentifier");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("i");
      Elements elements0 = document0.getElementsByAttributeValueContaining("i", "i");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      TextNode textNode0 = new TextNode("main", "textarea");
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, "textarea", attributes0);
      element0.val("0ZpI+u");
      element0.val();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("html");
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("b");
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("AfterDoctypePublicIdentifier");
      Elements elements0 = document0.getElementsByAttributeValueNot("AfterDoctypePublicIdentifier", "AfterDoctypePublicIdentifier");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("BeforeDoctypePublicIdentifier");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("bn");
      Elements elements0 = document0.getElementsByAttribute("bn");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.before("br");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("AV");
      Element element0 = document0.removeClass("AV");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("html");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("AV");
      Elements elements0 = document0.getElementsByTag("`}(cc]2");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("0eV-bWiKuz{");
      Element element0 = document0.appendElement("0eV-bWiKuz{");
      Elements elements0 = element0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("0eV-bWiKuz{");
      document0.tagName("r/Uo");
      Element element0 = document0.appendElement("0eV-bWiKuz{");
      element0.parents();
      assertEquals("r/uo", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("Pattern syntaxberror: ");
      document0.append("Pattern syntaxberror: ");
      // Undeclared exception!
      try { 
        document0.child((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      Element element0 = new Element(tag0, "html");
      Element element1 = element0.append("html");
      List<TextNode> list0 = element1.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Tag tag0 = Tag.valueOf("P");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "P", attributes0);
      Element element1 = element0.append("Children collection to be inserted must not be null.");
      List<TextNode> list0 = element1.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("EJ");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      DataNode dataNode0 = new DataNode("?+j", "");
      nodeArray0[4] = (Node) dataNode0;
      document0.addChildren(nodeArray0);
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("html");
      LinkedHashSet<TextNode> linkedHashSet0 = new LinkedHashSet<TextNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(62, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      Element element0 = new Element(tag0, "html");
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      Element element1 = element0.insertChildren((-1), linkedList0);
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("org.jsoup.parser.Token");
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2705), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("b");
      Element element0 = document0.createElement("b");
      Tag tag0 = Tag.valueOf("b");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "b", attributes0);
      Element element1 = element0.prependChild(formElement0);
      Element element2 = element1.appendElement("b");
      assertEquals(1, element2.siblingIndex());
      assertFalse(element2.equals((Object)element1));
      
      String string0 = formElement0.cssSelector();
      assertEquals("b > b:nth-child(1)", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("p$6ZmJ]U.I6VgYzi");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("AV");
      Element element0 = document0.appendElement("br");
      document0.prependChild(document0);
      element0.siblingElements();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("html");
      Element element0 = document0.appendElement("html");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.element$1");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("[");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      Tag tag0 = Tag.valueOf(">");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "[", attributes0);
      nodeArray0[2] = (Node) formElement0;
      document0.addChildren(nodeArray0);
      Element element0 = document0.nextElementSibling();
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("AV");
      document0.appendChild(document0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("html");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("AV");
      document0.appendChild(document0);
      Element element0 = document0.appendElement("AV");
      element0.previousElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("g'mveg[2");
      Element element0 = document0.appendElement("g'mveg[2");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("oT>&cu7*;");
      Element element0 = document0.appendElement("br");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      element0.addChildren(nodeArray0);
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertEquals("br", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "html", attributes0);
      Document document0 = new Document("html");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) element0;
      document0.addChildren(nodeArray0);
      Element element1 = document0.lastElementSibling();
      assertEquals("html", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("AV");
      Element element0 = document0.getElementById("<br>\n<br>");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("Ryz");
      DataNode dataNode0 = new DataNode("Ryz", "Ryz");
      document0.prependChild(dataNode0);
      Elements elements0 = document0.getElementsContainingText("Ryz");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("html");
      document0.appendElement("html");
      document0.prependText("beforedoctypepublicidentifier");
      Elements elements0 = document0.getElementsContainingText("beforedoctypepublicidentifier");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("AV");
      TextNode textNode0 = TextNode.createFromEncoded("AV", "beforedoctypepublicidentifier");
      document0.appendElement("AV");
      document0.prependChild(textNode0);
      Elements elements0 = document0.getElementsContainingText("AV");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("AV");
      document0.appendElement("br");
      Element element0 = document0.createElement("br");
      document0.prependChild(element0);
      document0.prependText("br");
      Elements elements0 = document0.getElementsContainingText("FM%MNOyupu");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document(";");
      document0.prependText(";");
      Elements elements0 = document0.getElementsContainingOwnText(";");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("Ryz");
      DataNode dataNode0 = new DataNode("Ryz", "Ryz");
      document0.prependChild(dataNode0);
      Elements elements0 = document0.getElementsContainingOwnText("f7IA");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("V");
      Element element0 = document0.appendElement("br");
      Element element1 = document0.createElement("br");
      Element element2 = document0.prependChild(element1);
      element2.getElementsContainingOwnText("V");
      assertTrue(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DataNode dataNode0 = new DataNode("tml", "tml");
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      Element element0 = new Element(tag0, "html");
      Element element1 = element0.append("html");
      boolean boolean0 = element1.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("html");
      document0.append(" ");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("s");
      Node[] nodeArray0 = new Node[4];
      DataNode dataNode0 = new DataNode("s", "beforedoctypename");
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("FnftQUsrNl0WHE;(.");
      DataNode dataNode0 = new DataNode("xtaMC$_'d", "o5`Q!R|Y,");
      document0.appendChild(dataNode0);
      String string0 = document0.data();
      assertEquals("xtaMC$_'d", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("FnftQUsrNl0WHE;(.");
      document0.appendElement("FnftQUsrNl0WHE;(.");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      TextNode textNode0 = new TextNode("main", "textarea");
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, "textarea", attributes0);
      Element element1 = element0.val("0ZpI+u");
      element1.data();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("#root");
      Element element0 = document0.toggleClass("#root");
      boolean boolean0 = element0.hasClass("#root");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("BeforeDoctypePublicIdentifier");
      document0.toggleClass("q");
      boolean boolean0 = document0.hasClass("BeforeDoctypePublicIdentifier");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.toggleClass("#root");
      document0.toggleClass("@kh!\"C*],Fa&Y3EZ[N");
      Elements elements0 = document0.getElementsByClass("@kh!\"C*],Fa&Y3EZ[N");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("^?9o)prgnj=ee!fm");
      Element element0 = document0.toggleClass("^?9o)prgnj=ee!fm");
      element0.toggleClass("^?9o)prgnj=ee!fm");
      Element element1 = document0.toggleClass("^?9o)prgnj=ee!fm");
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("html");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("b");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.appendElement("b");
      Element element0 = document1.prependText("b");
      String string0 = element0.html();
      assertEquals("b<b></b>", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      Element element0 = new Element(tag0, "html");
      element0.append("html");
      // Undeclared exception!
      try { 
        element0.html();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("b");
      Element element0 = document0.createElement("b");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "b");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlHead(stringBuilder0, (-1625949436), document_OutputSettings0);
      assertEquals("b<b>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      element0.prependChild(formElement0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlTail(stringBuilder0, 1, document_OutputSettings0);
      formElement0.outerHtmlHead(stringBuilder0, 3, document_OutputSettings0);
      assertEquals("</br><br>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("b");
      Element element0 = document0.createElement("b");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "b");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(stringBuilder0, (-1625949436), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      formElement0.outerHtmlHead(stringBuilder0, 3, document_OutputSettings1);
      assertEquals("<br />", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      element0.prependChild(formElement0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element0.outerHtmlTail(stringBuilder0, 1, document_OutputSettings0);
      assertEquals("\n </br>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      Element element1 = element0.prependChild(formElement0);
      StringBuilder stringBuilder0 = new StringBuilder("br > br");
      element0.prependChild(element1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element0.outerHtmlTail(stringBuilder0, 11, document_OutputSettings1);
      assertEquals("br > br\n           </br>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      TextNode textNode0 = TextNode.createFromEncoded("br", "br");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      formElement0.prependChild(textNode0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      formElement0.outerHtmlTail(stringBuilder0, 14959, document_OutputSettings1);
      assertEquals("</br>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = new Document("5q");
      boolean boolean0 = document0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("AV");
      Element element0 = document0.createElement("class");
      document0.appendChild(element0);
      Element element1 = document0.appendElement("AV");
      Element element2 = element1.previousElementSibling();
      assertNotNull(element2);
      assertEquals(1, element1.siblingIndex());
      assertEquals("class", element2.tagName());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      Element element0 = new Element(tag0, "html");
      element0.append("html");
      Elements elements0 = element0.getElementsByIndexGreaterThan(3);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = new Document("AV");
      document0.hashCode();
  }
}
