/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:08:39 GMT 2023
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.jsoup.select.Selector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Selector_ESTest extends Selector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("Y[KxSs^=SR!-i[evoz");
      Elements elements0 = Selector.select("Y[KxSs^=SR!-i[evoz", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell(":eq(");
      // Undeclared exception!
      try { 
        Selector.select(":eq(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("cd>PGK))b|p gg=R~*");
      Elements elements0 = Selector.select("cd>PGK))b|p gg=R~*", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document(":has(e)sMselect us9 n deempty");
      Elements elements0 = Selector.select(":has(e)sMselect us9 n deempty", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("N8Q_4T.dgf[ho");
      Elements elements0 = Selector.select("N8Q_4T.dgf[ho", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document(":lt(");
      // Undeclared exception!
      try { 
        Selector.select(":lt(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell(":gt(");
      // Undeclared exception!
      try { 
        Selector.select(":gt(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("e#Hvs*b-!J");
      // Undeclared exception!
      try { 
        Selector.select("e#Hvs*b-!J", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'e#Hvs*b-!J': unexpected token at '!J'
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document(">5\"[");
      // Undeclared exception!
      try { 
        Selector.select(">5\"[", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '5\"[': unexpected token at '\"['
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document(".1bCD4,Nl P");
      Elements elements0 = Selector.select(".1bCD4,Nl P", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("Unk+own combinator: ");
      Elements elements0 = Selector.select("Unk+own combinator: ", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell(",");
      // Undeclared exception!
      try { 
        Selector.select(",", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unknown combinator: ,
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell(":contains(text) query must not be empty");
      Elements elements0 = Selector.select(":contains(text) query must not be empty", (Element) document0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document(":containsOwn(");
      // Undeclared exception!
      try { 
        Selector.select(":containsOwn(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // :contains(text) query must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document(":matches(regex) query must not be empty");
      Elements elements0 = Selector.select(":matches(regex) query must not be empty", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document(":matchesOwn(");
      // Undeclared exception!
      try { 
        Selector.select(":matchesOwn(", (Element) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // :matches(regex) query must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("cDt|2p");
      Elements elements0 = Selector.select("cDt|2p", (Element) document0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("dU[^?uC[)g]f_TAo");
      Elements elements0 = Selector.select("dU[^?uC[)g]f_TAo", (Element) document0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("Y[Kx!l_=&R!-Fvevz");
      Elements elements0 = Selector.select("Y[Kx!l_=&R!-Fvevz", (Element) document0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.appendElement("^u#71hWcam");
      Elements elements0 = Selector.select("+*", element0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("S");
      Element element0 = document0.head();
      Elements elements0 = Selector.select("+*", element0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("**");
      Elements elements0 = Selector.select("**", (Element) document0);
      assertEquals(4, elements0.size());
  }
}
