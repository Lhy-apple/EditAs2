/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:14:31 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("(([+-])?(d+)?)n(s*([+-])?s*d+)?");
      assertFalse(document0.hasParent());
      
      Element element0 = document0.getElementById("(([+-])?(d+)?)n(s*([+-])?s*d+)?");
      assertEquals("(([+-])?(d+)?)n(s*([+-])?s*d+)?", document0.baseUri());
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("PatteXn syCtax erqr:C");
      // Undeclared exception!
      try { 
        document0.wrap("PatteXn syCtax erqr:C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000006 value cuxz/:>cyw");
      document0.appendText("java.lang.string@0000000006 value cuxz/:>cyw");
      document0.getElementsContainingOwnText("java.lang.string@0000000006 value cuxz/:>cyw");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("(([+-])?(d+)?)n(s*([+-])?s*d+)?");
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsMatchingText("(([+-])?(d+)?)n(s*([+-])?s*d+)?");
      assertEquals(1, document0.childNodeSize());
      assertEquals("(([+-])?(d+)?)n(s*([+-])?s*d+)?", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("String input must not be null");
      document0.prependText("String input must not be null");
      document0.getElementsByIndexEquals(792);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("eUER|o)c]7");
      // Undeclared exception!
      try { 
        document0.child(165);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 165, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("eUER|o)c]7");
      Element element0 = document0.tagName("eUER|o)c]7");
      assertEquals("eUER|o)c]7", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000006 value cuxz/:>cyw");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Element element0 = new Element("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("4u@la0/$DVL");
      Element element0 = document0.html("4u@la0/$DVL");
      assertEquals(1, document0.childNodeSize());
      assertEquals("4u@la0/$DVL", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("       ");
      Element element0 = document0.attr("       ", true);
      assertEquals(1, element0.childNodeSize());
      assertEquals("       ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("MBhn!~%F)B$Cd");
      document0.getElementsByAttributeValue("MBhn!~%F)B$Cd", "MBhn!~%F)B$Cd");
      assertEquals(1, document0.childNodeSize());
      assertEquals("MBhn!~%F)B$Cd", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("RawtextEndTagOpen");
      document0.getElementsByAttributeValueStarting("RawtextEndTagOpen", "RawtextEndTagOpen");
      assertEquals("RawtextEndTagOpen", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("d");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      String string0 = document1.toString();
      assertEquals("d", document1.baseUri());
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\" />\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("eUER|o)c]7");
      document0.prepend("eUER|o)c]7");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsMatchingOwnText("");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("pew1FJ#+h");
      // Undeclared exception!
      try { 
        document0.after("pew1FJ#+h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexLessThan(70);
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("eUER|o)c]7");
      document0.getElementsByAttributeStarting("eUER|o)c]7");
      assertEquals("eUER|o)c]7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000009 children collection to `^ inserted mus' not be null.");
      document0.getElementsByAttributeValueMatching("java.lang.string@0000000009 children collection to `^ inserted mus' not be null.", "java.lang.string@0000000009 children collection to `^ inserted mus' not be null.");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("org.joup.nodes.Element");
      document0.is("org.joup.nodes.Element");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.joup.nodes.Element", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      document0.getElementsByAttributeValueEnding("Tag name must not be empty.", "Tag name must not be empty.");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("eUET|o)cG]7");
      Elements elements0 = document0.getElementsContainingText("eUET|o)cG]7");
      assertEquals("eUET|o)cG]7", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("PS59ScZ0GT0r");
      document0.getElementsByAttributeValueContaining("PS59ScZ0GT0r", "PS59ScZ0GT0r");
      assertEquals("PS59ScZ0GT0r", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("eUER|o)c]7");
      Comment comment0 = new Comment("eUER|o)c]7");
      // Undeclared exception!
      try { 
        document0.after((Node) comment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("eUER|o)c]7");
      document0.doSetBaseUri("eUER|o)c]7");
      assertEquals("eUER|o)c]7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("tDN$}<<kmi");
      Element element0 = document0.shallowClone();
      assertEquals("tDN$}<<kmi", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("eUER|o)c]7");
      document0.getElementsByAttribute("eUER|o)c]7");
      assertEquals(1, document0.childNodeSize());
      assertEquals("eUER|o)c]7", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("nosript");
      Element element0 = document0.removeClass("nosript");
      assertEquals(1, element0.childNodeSize());
      assertEquals("nosript", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("mK$(/rpt>'$m^FyVL{");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("mK$(/rpt>'$m^FyVL{", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000009 children collection to `^ inserted mus' not be null.");
      // Undeclared exception!
      try { 
        document0.selectFirst("java.lang.string@0000000009 children collection to `^ inserted mus' not be null.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'java.lang.string@0000000009 children collection to `^ inserted mus' not be null.': unexpected token at '@0000000009 children collection to `^ inserted mus' not be null.'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000006 d?t0?s%vi ?f+|");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1584));
      assertEquals(1, document0.childNodeSize());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("W'rjRCw3E1b{ ()v*.M");
      Element element0 = document0.body();
      assertEquals(1, element0.siblingIndex());
      
      element0.before("W'rjRCw3E1b{ ()v*.M");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(4)", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("MBhn!~%F)B$Cd");
      Element element0 = document0.body();
      Elements elements0 = element0.parents();
      assertEquals("MBhn!~%F)B$Cd", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("%^Z9}8Wy$rdG");
      document0.title("%^Z9}8Wy$rdG");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.getElementsByIndexEquals(62);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("eUER|o)c]7");
      Element element0 = document0.append("eUER|o)c]7");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000006 value cuxz/:>cyw");
      List<DataNode> list0 = document0.dataNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren((-34), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("        ");
      DataNode dataNode0 = new DataNode("        ");
      Element element0 = document0.appendChild(dataNode0);
      element0.dataNodes();
      assertEquals(1, dataNode0.siblingIndex());
      assertEquals("        ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(60, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("eUER|o)c]7");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("eUER|o)c]7", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("math");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-285), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren(1892, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("eUER|o)c]7");
      Element element0 = document0.toggleClass("eUER|o)c]7");
      element0.cssSelector();
      assertEquals("eUER|o)c]7", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("W'rjRCw3E1b{ ()v*.M");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("W'rjRCw3E1b{ ()v*.M", element0.baseUri());
      assertEquals("html > body", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("(([+-])?(d+)?)n(s*([+-])?s*d+)?");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("(([+-])?(d+)?)n(s*([+-])?s*d+)?", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000009 children collection to `^ inserted mus' not be null.");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("eUER|o)c]7");
      document0.appendTo(document0);
      Element element0 = document0.nextElementSibling();
      assertEquals("eUER|o)c]7", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("eUER|o)c]7");
      document0.nextElementSibling();
      assertEquals("eUER|o)c]7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document(" ");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      Element element1 = element0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("math");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertNotNull(element1);
      assertEquals(0, element1.siblingIndex());
      assertEquals("math", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("CPLkNrmO-i3O-wo");
      document0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("CPLkNrmO-i3O-wo", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      Element element0 = document0.head();
      Element element1 = element0.previousElementSibling();
      assertEquals(" ", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("eUER|o)c]7");
      Element element0 = document0.appendTo(document0);
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
      assertEquals("eUER|o)c]7", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertEquals("head", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("eUER|o)c]7");
      document0.appendTo(document0);
      Element element0 = document0.lastElementSibling();
      assertNull(element0);
      assertEquals("eUER|o)c]7", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("                   ");
      document0.normalise();
      document0.appendTo(document0);
      document0.lastElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("value");
      document0.parentNode = (Node) document0;
      Elements elements0 = document0.getElementsByIndexEquals(9984);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals("value", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("jaQa.langstring@0000000006 value cuxz/:>cyw");
      Node[] nodeArray0 = new Node[3];
      DataNode dataNode0 = DataNode.createFromEncoded("jaQa.langstring@0000000006 value cuxz/:>cyw", "f:9CDdMT");
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("MBhn!~%F)B$Cd");
      document0.title("MBhn!~%F)B$Cd");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("((+-])?(d+)?)n(s*([+])?s*d+)?");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("<9A3#`C:|(", "ScriptDataLessthanSign", false);
      document0.appendChild(xmlDeclaration0);
      document0.getElementsContainingOwnText("((+-])?(d+)?)n(s*([+])?s*d+)?");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TextNode textNode0 = new TextNode("h>V");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell("W'rjRCw3E1b{ ()v*.M");
      document0.text("W'rjRCw3E1b{ ()v*.M");
      String string0 = document0.html();
      assertEquals("W'rjRCw3E1b{ ()v*.M", document0.baseUri());
      assertEquals("<html>\n <head></head>\n <body>\n  W'rjRCw3E1b{ ()v*.M\n </body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Document.createShell("");
      DataNode dataNode0 = DataNode.createFromEncoded("", "java.lang.string@0000000023 children collection to be :prev*%s must not be null.");
      document0.prependChild(dataNode0);
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("eUER|o)c]7");
      Element element0 = document0.text("eUER|o)c]7");
      boolean boolean0 = element0.hasText();
      assertTrue(boolean0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("eUER|o)c]7", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell("        ");
      DataNode dataNode0 = new DataNode("        ");
      document0.appendChild(dataNode0);
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Document.createShell("required");
      document0.append("required");
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("PS59ScZ0GT0r");
      document0.toggleClass("=p");
      boolean boolean0 = document0.hasClass("Children collection to be insered mus' not be null.");
      assertEquals("PS59ScZ0GT0r", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell("CPLkNrmO-i3O-wo");
      document0.toggleClass("CPLkNrmO-i3O-wo");
      Elements elements0 = document0.getElementsByClass("Tag name must not be empty.");
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("CPLkNrmO-i3O-wo", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("p9Xn0>L");
      Element element0 = document0.toggleClass("p9Xn0>L");
      element0.toggleClass("value");
      boolean boolean0 = element0.hasClass("value");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("p9Xn0>L");
      Element element0 = document0.toggleClass("p9Xn0>L");
      element0.toggleClass("                 ");
      document0.hasClass("#root.java.lang.String@0000000008.value");
      assertEquals("p9Xn0>L", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("p9Xn0>L");
      Element element0 = document0.toggleClass("p9Xn0>L");
      element0.toggleClass("value");
      element0.toggleClass("                 ");
      boolean boolean0 = element0.hasClass("value");
      assertEquals("p9Xn0>L", element0.baseUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("value");
      document0.toggleClass("&UWO_ CUXZ/:>CYW");
      document0.toggleClass("&UWO_ CUXZ/:>CYW");
      boolean boolean0 = document0.hasClass("value");
      assertEquals("value", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("eUER|o)c]7");
      document0.addClass(" > ");
      document0.toggleClass("eUER|o)c]7");
      Element element0 = document0.toggleClass("eUER|o)c]7");
      assertEquals("eUER|o)c]7", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = Document.createShell("CPLkNrmO-i3O-wo");
      document0.val();
      assertEquals(1, document0.childNodeSize());
      assertEquals("CPLkNrmO-i3O-wo", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = Document.createShell("CPLkNrmO-i3O-wo");
      Element element0 = document0.val("");
      assertEquals(1, element0.childNodeSize());
      assertEquals("CPLkNrmO-i3O-wo", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.val("%niTbNscSZ");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000006 value cuxz/:>cyw");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      String string0 = document0.toString();
      assertEquals("<html><head></head><body></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = Document.createShell("MBhn!~Pz%)B$Cd");
      document0.title("MBhn!~Pz%)B$Cd");
      String string0 = document0.toString();
      assertEquals("<html>\n <head>\n  <title>MBhn!~Pz%)B$Cd</title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals("MBhn!~Pz%)B$Cd", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = Document.createShell("W'rjRCw3E1b{ ()v*.M");
      CharBuffer charBuffer0 = CharBuffer.allocate(645);
      document0.html(charBuffer0);
      assertEquals(45, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = Document.createShell("required");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      String string0 = document0.toString();
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body></body>\n</html>", string0);
      assertEquals("required", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = Document.createShell("MBhn!~Pz%)B$Cd");
      document0.title("MBhn!~Pz%)B$Cd");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      String string0 = document1.toString();
      assertEquals("<html>\n <head>\n  <title>MBhn!~Pz%)B$Cd</title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals("MBhn!~Pz%)B$Cd", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = Document.createShell("eUER|o)c]7");
      Document document1 = (Document)document0.toggleClass("eUER|o)c]7");
      Document document2 = document1.clone();
      assertEquals("eUER|o)c]7", document2.baseUri());
      assertNotSame(document2, document1);
      assertEquals(1, document1.childNodeSize());
  }
}
