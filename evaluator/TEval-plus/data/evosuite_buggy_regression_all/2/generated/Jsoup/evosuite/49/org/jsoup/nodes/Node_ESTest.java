/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:12:39 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("abs:(]}{HkD?");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataNode dataNode0 = new DataNode("abs:}s2", "abs:}s2");
      dataNode0.setBaseUri("\n");
      assertEquals("\n", dataNode0.baseUri());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("abs:(]}{HkD?");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("   ", "sbs:abs:abs:abs:bs+no&", "   ", "");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "sbs:abs:abs:abs:bs+no&");
      stringBuilder0.append((Object) documentType0);
      assertEquals("sbs:abs:abs:abs:bs+no&<!DOCTYPE PUBLIC \"sbs:abs:abs:abs:bs+no&\">", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("=}(kWgb:{$", "=}(kWgb:{$");
      Node node0 = textNode0.removeAttr("=}(kWgb:{$");
      assertEquals("=}(kWgb:{$", node0.baseUri());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("abs:}s2", "abs:}s2");
      DataNode dataNode0 = new DataNode("abs:}s2", "abs:}s2");
      dataNode0.setParentNode(textNode0);
      Node node0 = dataNode0.before("abs:}s2");
      assertEquals(0, node0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = new TextNode("pRn635", "~'U.>\"'Xxt^I\"x>;");
      textNode0.toString();
      assertEquals(0, textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("f=]DW3_@R3|g]@[");
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("htm");
      Element element0 = document0.removeClass("htm");
      String string0 = element0.attr("abs:abs:class");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("htm");
      document0.baseUri = "http:/";
      Element element0 = document0.removeClass("htm");
      String string0 = element0.attr("abs:abs:class");
      assertEquals("http:/", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("abs:(]}{HkD?");
      List<Node> list0 = document0.childNodesCopy();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("nSMeJy!f*BYyD?c");
      Element element0 = document0.body();
      assertEquals(1, element0.siblingIndex());
      
      element0.wrap("nSMeJy!f*BYyD?c");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("3cJ Gb*ot");
      document0.setParentNode(document0);
      document0.after("3cJ Gb*ot");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("U[=`CBD?:R^dSwg7");
      // Undeclared exception!
      try { 
        document0.wrap("U[=`CBD?:R^dSwg7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("aAdbs:u");
      document0.setParentNode(document0);
      Node node0 = document0.wrap("aAdbs:u");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("3cJ Gb*ot");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.unwrap();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("3cJ Gb*ot");
      document0.setParentNode(document0);
      Node node0 = document0.unwrap();
      assertEquals(0, node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("3cJ Gb*ot");
      document0.appendChild(document0);
      document0.setParentNode(document0);
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("as::m&");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("fr]DW3'@R3|g{]@I[");
      Element element0 = document0.body();
      element0.replaceWith(document0);
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataNode dataNode0 = new DataNode("#QHzHEJz8G", "#QHzHEJz8G");
      // Undeclared exception!
      try { 
        dataNode0.removeChild(dataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("abs:abs:nSMe");
      Element element0 = document0.body();
      List<Node> list0 = element0.siblingNodes();
      assertEquals(1, list0.size());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("version");
      List<Node> list0 = document0.siblingNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("3cJ Gb*ot");
      document0.appendChild(document0);
      document0.previousSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("abs:(]}{HkD?");
      Node node0 = document0.previousSibling();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("3cJ Gb*ot");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("abs:abs:abs:abs:bslno&", "abs:abs:abs:abs:bslno&");
      boolean boolean0 = dataNode0.equals(dataNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DataNode dataNode0 = new DataNode("f=]DW3_@g{]ip@I[", "f=]DW3_@g{]ip@I[");
      boolean boolean0 = dataNode0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DataNode dataNode0 = new DataNode("4'`-lU9UTZxs#iJ", "4'`-lU9UTZxs#iJ");
      boolean boolean0 = dataNode0.equals("4'`-lU9UTZxs#iJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("abo: :psO\":class");
      document0.childNodes = null;
      Document document1 = Document.createShell("abo: :psO\":class");
      boolean boolean0 = document0.equals(document1);
      assertFalse(boolean0);
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("abo: :psO\":class");
      Document document1 = Document.createShell("abo: :psO\":class");
      boolean boolean0 = document0.equals(document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("abo: :psO\":class");
      document0.childNodes = null;
      Document document1 = Document.createShell("abo: :psO\":class");
      assertFalse(document1.equals((Object)document0));
      
      document1.childNodes = null;
      boolean boolean0 = document0.equals(document1);
      assertTrue(document1.equals((Object)document0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextNode textNode0 = new TextNode("abs:abs:abs:abs:nom&", "abs:abs:abs:abs:nom&");
      TextNode textNode1 = TextNode.createFromEncoded("", "abs:abs:abs:abs:nom&");
      boolean boolean0 = textNode1.equals(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("abs:abts:abs:bs+nom&");
      Document document1 = document0.clone();
      assertTrue(document1.equals((Object)document0));
      
      document1.val("abs:abts:abs:bs+nom&");
      boolean boolean0 = document1.equals(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextNode textNode0 = new TextNode("abs:abs:abs:abs:nom&", "abs:abs:abs:abs:nom&");
      textNode0.attr("abs:abs:abs:abs:nom&");
      TextNode textNode1 = TextNode.createFromEncoded("", "abs:abs:abs:abs:nom&");
      boolean boolean0 = textNode1.equals(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("abo: :psO\":class");
      document0.childNodes = null;
      document0.hashCode();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("IW#*cF~Gjj+{~(V~?`");
      Element element0 = document0.text("IW#*cF~Gjj+{~(V~?`");
      element0.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("abs:(]=yHk?");
      document0.prepend("abs:(]=yHk?");
      document0.clone();
      assertEquals(1, document0.childNodeSize());
  }
}
