/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:11:14 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      formElement0.prependElement("br");
      // Undeclared exception!
      try { 
        formElement0.toString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendText("br");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("7gbs0e6jKtb}!'");
      Elements elements0 = document0.getElementsMatchingText("7gbs0e6jKtb}!'");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("br");
      document0.append("br");
      document0.appendChild(document0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      // Undeclared exception!
      try { 
        document0.child(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("a[=I(`5E");
      Element element0 = document0.prependText("a[=I(`5E");
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "I;S3x");
      element0.val("@x@B9?");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("K` GK@V#{CLt}J");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      Elements elements0 = document0.getElementsContainingOwnText("NLljxo$ci&Bs");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("fieldset");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("_)");
      // Undeclared exception!
      try { 
        document0.html("_)");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("K` GK@V#{CLt}J");
      Elements elements0 = document0.getElementsByAttributeValue("K` GK@V#{CLt}J", ".xq");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      Elements elements0 = document0.getElementsByAttributeValueStarting("NLljxo$ci&Bs", "NLljxo$ci&Bs");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("FQAZ(/-:fRj ,o");
      // Undeclared exception!
      try { 
        document0.select("FQAZ(/-:fRj ,o");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'FQAZ(/-:fRj ,o': unexpected token at '(/-:fRj ,o'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("br");
      Document document1 = (Document)document0.prepend("br");
      assertEquals("br", document1.location());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document(";");
      Elements elements0 = document0.getElementsMatchingOwnText(";");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("vpy+o.wwlwav?o2");
      // Undeclared exception!
      try { 
        document0.after("vpy+o.wwlwav?o2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("u1$KPh");
      Elements elements0 = document0.getElementsByIndexLessThan(174);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document(";");
      Elements elements0 = document0.getElementsByAttributeStarting(";");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("@x@B9?");
      Elements elements0 = document0.getElementsByIndexEquals(1424);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("7$a$LG&KCn^");
      // Undeclared exception!
      try { 
        document0.wrap("7$a$LG&KCn^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      Element element0 = document0.val("NLljxo$ci&Bs");
      assertEquals("NLljxo$ci&Bs", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("quot");
      Elements elements0 = document0.getElementsByAttributeValueMatching("quot", "quot");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("vpy+o.wwlwav?o2");
      Elements elements0 = document0.getElementsByAttributeValueEnding("vpy+o.wwlwav?o2", "vpy+o.wwlwav?o2");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      Elements elements0 = document0.getElementsContainingText("NLljxo$ci&Bs");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      Elements elements0 = document0.getElementsByAttributeValueContaining("NLljxo$ci&Bs", "NLljxo$ci&Bs");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      Comment comment0 = new Comment("NLljxo$ci&Bs", "NLljxo$ci&Bs");
      // Undeclared exception!
      try { 
        document0.after((Node) comment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("<|Pg^-");
      Elements elements0 = document0.getElementsByAttributeValueNot("<|Pg^-", "<|Pg^-");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      Elements elements0 = document0.getElementsByAttribute("NLljxo$ci&Bs");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.before("Insert position out of bounds.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("n|lljxoci&bs");
      Document document1 = (Document)document0.removeClass("n|lljxoci&bs");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("starttag");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("fieldset");
      Elements elements0 = document0.getElementsByIndexGreaterThan(66);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("7gbs0e6jKtb}!'");
      Element element0 = document0.getElementById("7gbs0e6jKtb}!'");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      document0.prependChild(document0);
      Element element0 = document0.append("NLljxo$ci&Bs");
      element0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("@x@B9?");
      document0.parentNode = (Node) document0;
      document0.tagName("@x@B9?");
      // Undeclared exception!
      try { 
        document0.append("@x@B9?");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("@x@BJ?");
      Element element0 = document0.append("@x@BJ?");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("mef\"ter");
      document0.prependChild(document0);
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("#Lljxo$ci&Bs");
      Element element0 = document0.prependChild(document0);
      List<DataNode> list0 = element0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      DataNode dataNode0 = DataNode.createFromEncoded("NLljxo$ci&Bs", "");
      document0.prependChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      LinkedHashSet<Element> linkedHashSet0 = new LinkedHashSet<Element>();
      // Undeclared exception!
      try { 
        document0.insertChildren(7491, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("fieldset");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-4311), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("@x@B9?");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      Element element0 = document0.insertChildren((-1), linkedHashSet0);
      assertEquals("@x@B9?", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("fieldset");
      Elements elements0 = document0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document(">J");
      Document document1 = new Document(">J");
      Element element0 = document0.prependChild(document1);
      document0.prependChild(element0);
      Elements elements0 = document0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("<IRB>`4,");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      Document document1 = document0.clone();
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.prependChild(document0);
      document0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("n|lljxoci&bs");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      Element element0 = document0.prependChild(document0);
      document0.prependElement("textarea");
      element0.previousElementSibling();
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("pqtir");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document(">J");
      Document document1 = new Document(">J");
      Element element0 = document0.prependChild(document1);
      document0.prependChild(element0);
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      Element element0 = document0.prependChild(document0);
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("@x@B9?");
      Element element0 = document0.appendElement("@x@B9?");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      document0.prependChild(document0);
      document0.appendElement("lt");
      Element element0 = document0.lastElementSibling();
      assertNotNull(element0);
      assertEquals("lt", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      Element element0 = document0.prependChild(document0);
      element0.empty();
      // Undeclared exception!
      try { 
        element0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document(";");
      DataNode dataNode0 = new DataNode(";", " ");
      document0.appendChild(dataNode0);
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("br");
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
      document0.append("br");
      document0.appendChild(element0);
      String string0 = document0.text();
      assertEquals("br", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependChild(document0);
      Pattern pattern0 = Pattern.compile("br");
      // Undeclared exception!
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("@x@BJ?");
      Element element0 = document0.append("@x@BJ?");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("@x@BJ?");
      DataNode dataNode0 = new DataNode("@x@BJ?", "@x@BJ?");
      document0.prependChild(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("br");
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
      document0.prependChild(element0);
      Pattern pattern0 = Pattern.compile("br");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DataNode dataNode0 = new DataNode("x(f)az%", "x(f)az%");
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      TextNode textNode0 = TextNode.createFromEncoded("textarea", "textarea");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "pR-RsFoE!2k", attributes0);
      boolean boolean0 = Element.preserveWhitespace(formElement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document(";");
      DataNode dataNode0 = new DataNode(";", " ");
      document0.appendChild(dataNode0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("<IRB>`4,");
      document0.append("<IRB>`4,");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("NLTjxo$c_&Bs");
      Element element0 = document0.append("NLTjxo$c_&Bs");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("mef\"ter");
      DataNode dataNode0 = new DataNode("mef\"ter", "D[iYl>DUqt$Q/GRj|{");
      Element element0 = document0.prependChild(dataNode0);
      String string0 = element0.data();
      assertEquals("mef\"ter", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("mef\"ter");
      document0.prependChild(document0);
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&ms");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.getElementsByClass("NLljxo$ci&ms");
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&ms");
      document0.addClass("NLljxo$ci&ms");
      Elements elements0 = document0.getElementsByClass("NLljxo$ci&ms");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("starttag");
      Element element0 = document0.toggleClass("track");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      Element element0 = document0.toggleClass("");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Tag tag0 = Tag.valueOf("fieldset");
      Element element0 = new Element(tag0, "fieldset");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "I;S3x");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$MatchesOwn");
      document0.appendChild(document0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      // Undeclared exception!
      document1.toString();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      document0.prependChild(document0);
      document0.prependElement("textarea");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((StringBuilder) null, 11, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("NLljxo$ci&Bs");
      Document document1 = new Document("NLljxo$ci&Bs");
      document0.prependChild(document1);
      document1.append("NLljxo$ci&Bs");
      String string0 = document0.html();
      assertEquals("<#root>\n NLljxo$ci&amp;Bs\n</#root>", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("quot");
      document0.hashCode();
  }
}
