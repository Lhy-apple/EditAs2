/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:15:15 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("cAy8", "cAy8");
      Attribute attribute1 = Attribute.createFromEncoded("cAy8", "cAy8");
      attribute1.equals(attribute0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = new Attribute("FwJ6iF", "FwJ6iF");
      Attributes attributes0 = new Attributes();
      attributes0.put(attribute0);
      attribute0.setKey("FT:J:f}");
      assertEquals("FT:J:f}", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-A3!(", "data-A3!(");
      boolean boolean0 = attribute0.isDataAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attribute attribute0 = new Attribute("noresize", "noresize");
      String string0 = attribute0.html();
      assertEquals("noresize", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attribute attribute0 = new Attribute("cdatasection", (String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals("", attribute1.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attribute attribute0 = new Attribute("cdatasection", (String) null);
      String string0 = attribute0.toString();
      assertEquals("cdatasection", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("<PnrICx@d,`O!X\"\"]/J", ".gaFb", attributes0);
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attribute attribute0 = new Attribute("noresize", "noresize");
      attribute0.setKey("noresize");
      assertEquals("noresize", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("(heckd", "(heckd", attributes0);
      attribute0.setKey("(heckd");
      assertEquals("(heckd", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("QY&t7}c7@!P", "novalidate", attributes0);
      String string0 = attribute0.setValue("novalidate");
      assertEquals("", string0);
      assertEquals("QY&t7}c7@!P", attribute0.getKey());
      assertEquals("novalidate", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("QY&t7}c7@!P", "QY&t7}c7@!P");
      Attribute attribute0 = new Attribute("QY&t7}c7@!P", "novalidate", attributes1);
      String string0 = attribute0.setValue("novalidate");
      assertEquals("QY&t7}c7@!P", string0);
      assertEquals("novalidate", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("title");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-data-(eje%O1C\"%.-[0lck]m=\"data-(eje%O1C&quot;%.-[0lck]m\"", "data-data-(eje%O1C\"%.-[0lck]m=\"data-(eje%O1C&quot;%.-[0lck]m\"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("data-data-(eje%O1C\"%.-[0lck]m=\"data-(eje%O1C&quot;%.-[0lck]m\"");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      attribute0.html((Appendable) mockPrintWriter0, document_OutputSettings1);
      assertTrue(document_OutputSettings1.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-(eje%O1C\"%.-[0lck]m", "");
      String string0 = attribute0.toString();
      assertEquals("data-(eje%O1C\"%.-[0lck]m=\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attribute attribute0 = new Attribute("autofocus", "autofocus");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attribute attribute0 = new Attribute("N", (String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("1U}AQ:yEohH;ob", "1U}AQ:yEohH;ob");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-data-(eje%O1C\"%.-[0lck]m=\"data-(eje%O1C&quot;%.-[0lck]m\"", "data-data-(eje%O1C\"%.-[0lck]m=\"data-(eje%O1C&quot;%.-[0lck]m\"");
      boolean boolean0 = attribute0.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("ismap", "ismap");
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("hr*Lc@f", "hr*Lc@f");
      boolean boolean0 = attribute0.equals("hr*Lc@f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attribute attribute0 = new Attribute("noresize", "noresize");
      Attribute attribute1 = Attribute.createFromEncoded("data-ZXDs", "noresize");
      boolean boolean0 = attribute1.equals(attribute0);
      assertFalse(boolean0);
      assertEquals("noresize", attribute1.getValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attribute attribute0 = new Attribute("cdatasection", (String) null);
      Attribute attribute1 = new Attribute("cdatasection", "cdatasection");
      boolean boolean0 = attribute0.equals(attribute1);
      assertFalse(boolean0);
      assertTrue(attribute1.equals((Object)attribute0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-data-(eje%O1C\"%.-[0lck]m=\"data-(eje%O1C&quot;%.-[0lck]m\"", "data-data-(eje%O1C\"%.-[0lck]m=\"data-(eje%O1C&quot;%.-[0lck]m\"");
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attribute attribute0 = new Attribute("cdatasection", (String) null);
      attribute0.hashCode();
      assertEquals("", attribute0.getValue());
  }
}
