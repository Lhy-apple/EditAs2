/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:10:40 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("bRT:lgdtL-Hibe6W");
      document0.appendText((String) null);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("sU");
      Elements elements0 = document0.getElementsMatchingText("sU");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document(".P7-Xe#");
      // Undeclared exception!
      try { 
        document0.child(122);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 122, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("bxRt:lgdtL-Hibe76W");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("~n7i;");
      document0.addClass("~n7i;");
      Document document1 = document0.clone();
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("bxRt:lgdtL-Hibe3o76W");
      // Undeclared exception!
      try { 
        document0.html("bxRt:lgdtL-Hibe3o76W");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("bxRt:lgdtL-Hibe76W");
      Elements elements0 = document0.getElementsByAttributeValue("bxRt:lgdtL-Hibe76W", "bxRt:lgdtL-Hibe76W");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("4rv!t{~bInVWTxD\"");
      Elements elements0 = document0.getElementsByAttributeValueStarting("4rv!t{~bInVWTxD\"", "4rv!t{~bInVWTxD\"");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.lement");
      Elements elements0 = document0.select("org.jsoup.nodes.lement");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("bxRtldtL-HbeEa76");
      Element element0 = document0.prepend("bxRtldtL-HbeEa76");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("-<-rmRFbT0a^kM*");
      Elements elements0 = document0.getElementsMatchingOwnText("-<-rmRFbT0a^kM*");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("IvM}r6");
      Elements elements0 = document0.getElementsByIndexLessThan((-2021204349));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.lement");
      Element element0 = document0.prependElement("org.jsoup.nodes.lement");
      assertEquals("org.jsoup.nodes.lement", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("4rv!t{~bInVWTxD");
      Elements elements0 = document0.getElementsByAttributeStarting("4rv!t{~bInVWTxD");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("K+");
      Elements elements0 = document0.getElementsByIndexEquals(2334);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("-<-rmRFba^kM*");
      // Undeclared exception!
      try { 
        document0.wrap("-<-rmRFba^kM*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("class");
      Document document1 = (Document)document0.val("class");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("bRT:lgdtL-Hibe6W");
      Elements elements0 = document0.getElementsByAttributeValueMatching("bRT:lgdtL-Hibe6W", "bRT:lgdtL-Hibe6W");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("-<-rmRFbmNa^kM*");
      Elements elements0 = document0.getElementsByAttributeValueEnding("-<-rmRFbmNa^kM*", "-<-rmRFbmNa^kM*");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("-<-rmRFbmNa^kM*");
      Elements elements0 = document0.getElementsByClass("-<-rmRFbmNa^kM*");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("caption");
      Elements elements0 = document0.getElementsByAttributeValueContaining("caption", "caption");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      Elements elements0 = document0.getElementsByAttributeValueNot("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.lement");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("caption");
      Elements elements0 = document0.getElementsByAttribute("caption");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("$D?{^&K2GXbUoo(vrC");
      // Undeclared exception!
      try { 
        document0.before("$D?{^&K2GXbUoo(vrC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("extaref/a");
      Element element0 = document0.removeClass("extaref/a");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("bxRt:lgdtL-Hibe76W");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Elemezt");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-70));
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("^]#5_d!%sl");
      Element element0 = document0.getElementById("^]#5_d!%sl");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("@s@NAX7k@");
      Element element0 = document0.appendElement("h2");
      Elements elements0 = element0.parents();
      assertEquals(0, elements0.size());
      assertEquals("h2", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("@s@NAX7k@");
      Element element0 = document0.appendElement("h2");
      document0.tagName("h2");
      element0.parents();
      assertEquals("h2", document0.tagName());
      assertEquals("h2", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document(".P7-Xe#");
      Element element0 = document0.prependText(".P7-Xe#");
      document0.prependChild(element0);
      Element element1 = document0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("or.jso2uodrs.Element");
      document0.appendElement("or.jso2uodrs.Element");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("vfxq3fekq@jl]1yig");
      Element element0 = document0.append("vfxq3fekq@jl]1yig");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("bxRt:lgdtL-Hibe76W");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      DataNode dataNode0 = new DataNode("luum", "bxRt:lgdtL-Hibe76W");
      nodeArray0[2] = (Node) dataNode0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      document0.addChildren(nodeArray0);
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document(".P7-Xe#");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      Element element0 = document0.insertChildren(0, linkedList0);
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("-<-r*RFbmN$a^M*");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-4785), linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("^]c5O_d!8s=l;");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(2, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("b,R*t:lgdtL-Hbe76W");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Elem7Gt");
      Element element0 = document0.appendElement("org.jsoup.nodes.Elem7Gt");
      element0.after((Node) document0);
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      Element element0 = document0.appendElement("org.jsoup.nodes.Element");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("noframes");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      Element element0 = document0.appendElement("org.jsoup.nodes.Element");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      element0.addChildren(nodeArray0);
      Element element1 = element0.nextElementSibling();
      assertEquals("org.jsoup.nodes.Element", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.lement");
      Element element0 = document0.appendElement("org.jsoup.nodes.lement");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("vfxq3fekq@jl]1yig");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.lement");
      Element element0 = document0.appendElement("org.jsoup.nodes.lement");
      Element element1 = element0.before((Node) document0);
      Element element2 = element1.previousElementSibling();
      assertFalse(element2.isBlock());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("bRT:lgdtL-Hibe6W");
      Element element0 = document0.appendElement("bRT:lgdtL-Hibe6W");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      Element element0 = document0.appendElement("org.jsoup.nodes.Element");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      element0.addChildren(nodeArray0);
      Element element1 = element0.firstElementSibling();
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("bxRt:lgdtL-Hibe76W");
      Element element0 = document0.appendElement("bxRt:lgdtL-Hibe76W");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document(".P7-Xe#");
      Element element0 = document0.prependChild(document0);
      element0.appendElement("br");
      Element element1 = document0.lastElementSibling();
      assertNotNull(element1);
      assertEquals("br", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("Luum");
      Element element0 = document0.appendElement("dl");
      List<Node> list0 = document0.childNodesCopy();
      element0.childNodes = list0;
      assertEquals("dl", element0.nodeName());
      
      Element element1 = document0.prependText("dl");
      String string0 = element1.text();
      assertEquals("dl", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document(".P7-Xe#");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(".P7-Xe#", "K", true);
      document0.prependChild(xmlDeclaration0);
      Elements elements0 = document0.getElementsContainingOwnText("org.jsoup.parser.ParseErrorList");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document(".P7-Xe#");
      document0.prependText("Pattern syntax error: ");
      Elements elements0 = document0.getElementsContainingOwnText("org.jsoup.parser.ParseErrorList");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Tag tag0 = Tag.valueOf("title");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "title", attributes0);
      element0.append("textarea");
      Elements elements0 = element0.getElementsContainingText("J7Y1%81L7r2{^M");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("-<-rmRFbmNa^kM*");
      document0.prependText("-<-rmRFbmNa^kM*");
      Element element0 = document0.prependText("@<:Q<sSn%Z ");
      String string0 = element0.text();
      assertEquals("@<:Q<sSn%Z -<-rmRFbmNa^kM*", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      TextNode textNode0 = TextNode.createFromEncoded("br", "#root");
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, "#root", attributes0);
      element0.appendElement("br");
      String string0 = element0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("s+");
      Element element0 = document0.appendElement("s+");
      element0.text("s+");
      Elements elements0 = document0.getElementsContainingText("s+");
      assertEquals(2, elements0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("oVUs%,ZgUd$A");
      Element element0 = document0.prependText("oVUs%,ZgUd$A");
      Element element1 = document0.appendElement("textarea");
      element1.appendChild(document0);
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("bRT:lgdtL-Hibe6W");
      document0.appendElement("bRT:lgdtL-Hibe6W");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("Children collection to be inserted must not be null.");
      DocumentType documentType0 = new DocumentType("Children collection to be inserted must not be null.", "HAh=OzNH", "", "");
      document0.prependChild(documentType0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document(".P7-Xe#");
      Element element0 = document0.appendElement(".P7-Xe#");
      element0.prependText(".P7-Xe#");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document(".P7-Xe#");
      Element element0 = document0.prependText(".P7-Xe#");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("urK)hu*i?g[)_y\"");
      DataNode dataNode0 = new DataNode("6_|r42/uja", "6_|r42/uja");
      Element element0 = document0.appendChild(dataNode0);
      String string0 = element0.data();
      assertEquals("6_|r42/uja", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.lement");
      document0.appendElement("org.jsoup.nodes.lement");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("b,R*t:lgdtL-Hbe76W");
      boolean boolean0 = document0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("bxRt:lgdtL-Hibe76W");
      Element element0 = document0.toggleClass("bxRt:lgdtL-Hibe76W");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("caption");
      Element element0 = document0.toggleClass("");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("Z'T;=#yOvne");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "^sg*;0v");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("^]#5_d!%sl");
      Element element0 = document0.appendElement("textarea");
      element0.val("textarea");
      assertEquals(1, element0.childNodeSize());
      
      String string0 = document0.outerHtml();
      assertEquals("<textarea>textarea</textarea>", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("bxRt:lgdtL-Hibe76W");
      StringBuilder stringBuilder0 = new StringBuilder("bxRt:lgdtL-Hibe76W");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, 12231, document_OutputSettings0);
      assertEquals("bxRt:lgdtL-Hibe76W<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("@s@NAX7k@");
      Element element0 = document0.prependText("@s@NAX7k@");
      document0.appendElement("h2");
      element0.tagName("h2");
      element0.outerHtml();
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document(".P7-Xe#");
      document0.appendElement("br");
      String string0 = document0.outerHtml();
      assertEquals("<br />", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("'biU_");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.appendElement("'biU_");
      String string0 = document0.outerHtml();
      assertEquals("<'biu_></'biu_>", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("b,Rt:lgdtL-Hibe76W");
      Element element0 = document0.appendElement("b,Rt:lgdtL-Hibe76W");
      element0.prependText("b,Rt:lgdtL-Hibe76W");
      String string0 = document0.outerHtml();
      assertEquals("<b,rt:lgdtl-hibe76w>\n b,Rt:lgdtL-Hibe76W\n</b,rt:lgdtl-hibe76w>", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("'biU_");
      document0.hashCode();
  }
}
