/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:08:03 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharacterReader_ESTest extends CharacterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\n");
      characterReader0.rewindToMark();
      assertEquals("\n", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("z3LTNF(");
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("");
      assertEquals("z3LTNF(", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("WB_?3HS#mv9v#S+m4qHWB_?3HS#mv9v#S+m4qH");
      characterReader0.mark();
      assertEquals("WB_?3HS#mv9v#S+m4qHWB_?3HS#mv9v#S+m4qH", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("z3LTNF(");
      characterReader0.advance();
      characterReader0.consumeDigitSequence();
      assertEquals("LTNF(", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("WB_?3HS#mv9v#S+m4qHWB_?3HS#mv9v#S+m4qH");
      boolean boolean0 = characterReader0.matchConsume("@$%IB*IAxgL");
      assertFalse(boolean0);
      assertEquals("WB_?3HS#mv9v#S+m4qHWB_?3HS#mv9v#S+m4qH", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("FThxinYbdI6Yr");
      characterReader0.unconsume();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      String string0 = characterReader0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("'yCoJ|");
      characterReader0.consumeAsString();
      assertEquals("yCoJ|", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("z3LTNF(");
      int int0 = characterReader0.pos();
      assertEquals(0, int0);
      assertEquals("z3LTNF(", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("WB_?3HS#mv9v#S+m4qHWB_?3HS#mv9v#S+m4qH");
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("WB_?3HS#mv9v#S+m4qHWB_?3HS#mv9v#S+m4qH", characterReader0.toString());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\n");
      assertEquals("\n", characterReader0.toString());
      
      characterReader0.consumeToEnd();
      char[] charArray0 = new char[9];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("'yCoJ|");
      char char0 = characterReader0.current();
      assertEquals('\'', char0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("N1/6!x");
      assertEquals("N1/6!x", characterReader0.toString());
      
      characterReader0.consumeToEnd();
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(":\"xJg:,!'4@b:\"xJg:,!'4@b");
      char char0 = characterReader0.consume();
      assertEquals(':', char0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("3`'^9~}Rd!I<c9fLED");
      characterReader0.consumeTo('x');
      assertEquals("", characterReader0.toString());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("D;MMPF9u5:IB,_K6DF>");
      characterReader0.consumeTo('K');
      assertEquals("K6DF>", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ll");
      characterReader0.consumeTo("9(JMG\"BDMrKNY");
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(":\"xJg:,!'4@b");
      String string0 = characterReader0.consumeTo("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("FThxinYbdI6Yr");
      char[] charArray0 = new char[8];
      characterReader0.consumeToAny(charArray0);
      characterReader0.consumeLetterSequence();
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("N1/6!x");
      String string0 = characterReader0.consumeToEnd();
      char[] charArray0 = new char[9];
      String string1 = characterReader0.consumeToAny(charArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Tq}");
      characterReader0.consumeLetterSequence();
      assertEquals("}", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("z36TN.,(");
      char[] charArray0 = new char[0];
      characterReader0.consumeToAny(charArray0);
      characterReader0.consumeHexSequence();
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("FThxinYbdI6Yr");
      characterReader0.consumeHexSequence();
      assertEquals("ThxinYbdI6Yr", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9\bOVtUF");
      characterReader0.consumeHexSequence();
      assertEquals("\bOVtUF", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("FThxinYbdI6Yr");
      char[] charArray0 = new char[8];
      charArray0[5] = 'b';
      characterReader0.consumeToAny(charArray0);
      characterReader0.consumeHexSequence();
      assertEquals("I6Yr", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      characterReader0.consumeHexSequence();
      assertEquals("org.jsoup.parser.CharacterReader", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.consumeDigitSequence();
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%]}jg}m9#0*r~lF^ Dv");
      characterReader0.consumeDigitSequence();
      assertEquals("%]}jg}m9#0*r~lF^ Dv", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("FThxinYbdI6Yr");
      char[] charArray0 = new char[8];
      characterReader0.consumeToAny(charArray0);
      boolean boolean0 = characterReader0.matches('b');
      assertEquals("", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      boolean boolean0 = characterReader0.matches('.');
      assertFalse(boolean0);
      assertEquals("\n?", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("N1/6!x");
      boolean boolean0 = characterReader0.matches('N');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("z3LTNF(");
      char[] charArray0 = new char[7];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals("z3LTNF(", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(":\"xJg:,!'4@b:\"xJg:,!'4@b");
      char[] charArray0 = new char[3];
      char[] charArray1 = new char[4];
      charArray1[0] = '\"';
      String string0 = characterReader0.consumeToAny(charArray1);
      assertEquals(":", string0);
      
      charArray0[2] = '\"';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("z3LTNF(");
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(":\"xJg:,!'4@b");
      characterReader0.consumeToEnd();
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(".zt\"X .i3.A5)n7T");
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(".zt\"X .i3.A5)n7T", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("D;MMPF9u5:IB,_K6DF>");
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("?^q");
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals("?^q", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("z3LTNF(");
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals("z3LTNF(", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("z36TN.,(");
      char[] charArray0 = new char[0];
      characterReader0.consumeToAny(charArray0);
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals("", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("'yCoJ|");
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals("'yCoJ|", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("z3LTNF(");
      characterReader0.consumeLetterSequence();
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals("3LTNF(", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("'yCoJ|");
      boolean boolean0 = characterReader0.matchConsume("'yCoJ|");
      assertEquals("", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("D;MMPF9u5:IB,_K6DF>");
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase(";MMPF9u5:IB,_");
      assertFalse(boolean0);
      assertEquals("D;MMPF9u5:IB,_K6DF>", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("/ (ebg");
      boolean boolean0 = characterReader0.containsIgnoreCase("");
      assertEquals("/ (ebg", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("FThxinYbdI6Yr");
      boolean boolean0 = characterReader0.containsIgnoreCase("h,");
      assertFalse(boolean0);
      assertEquals("FThxinYbdI6Yr", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("WB_?3HS#mv9v#S+m4qHWB_?3HS#mv9v#S+m4qH");
      boolean boolean0 = characterReader0.containsIgnoreCase("b_?3h");
      assertTrue(boolean0);
  }
}
