/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:11:37 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("textarea");
      Document document1 = (Document)document0.tagName("textarea");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      document1.outerHtml(stringBuilder1);
      assertEquals("false<textarea></textarea>", stringBuilder1.toString());
      assertEquals("false<textarea></textarea>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("=");
      Document document1 = (Document)document0.appendText("=");
      assertEquals("=", document1.location());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("entities-full.propertis");
      Elements elements0 = document0.getElementsMatchingText("entities-full.propertis");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prepend("textarea");
      document0.appendChild(element0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("entities-fu1l.pro;eGties");
      // Undeclared exception!
      try { 
        document0.child(8882);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8882, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("textarea");
      Document document1 = (Document)document0.prependText("textarea");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.createElement("textarea");
      element0.val("textarea");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("4O");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("?}]oa}dRYcXnTsU*9");
      Document document1 = (Document)document0.addClass("?}]oa}dRYcXnTsU*9");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("entities-fu1l.pro;eGties");
      // Undeclared exception!
      try { 
        document0.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("M3+}");
      // Undeclared exception!
      try { 
        document0.html("M3+}");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("l=:VZ");
      Elements elements0 = document0.getElementsByAttributeValue("l=:VZ", "l=:VZ");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("texta>epa");
      Elements elements0 = document0.getElementsByAttributeValueStarting("texta>epa", "texta>epa");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.createElement("textarea");
      element0.appendChild(document0);
      String string0 = document0.cssSelector();
      assertEquals("textarea > #root", string0);
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("4H");
      Elements elements0 = document0.getElementsMatchingOwnText("4H");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("=");
      // Undeclared exception!
      try { 
        document0.after("=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("x7[Z3IE ,");
      document0.prependElement("x7[Z3IE ,");
      document0.appendChild(document0);
      document0.previousElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("?}]oa}dRYcXnTsU*9");
      Elements elements0 = document0.getElementsByAttributeStarting("?}]oa}dRYcXnTsU*9");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("?}]oa}dRYcXnTsU*9");
      Elements elements0 = document0.getElementsByIndexEquals((-2359));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("M3+}");
      // Undeclared exception!
      try { 
        document0.wrap("M3+}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("textarea");
      Elements elements0 = document0.getElementsByAttributeValueMatching("textarea", "textarea");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("0_o");
      Elements elements0 = document0.getElementsByAttributeValueEnding("0_o", "wlejheo");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document(">uy)b MeMBF");
      Elements elements0 = document0.getElementsByClass(">uy)b MeMBF");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("textarea");
      Elements elements0 = document0.getElementsContainingText("textarea");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("textarea");
      Elements elements0 = document0.getElementsByAttributeValueContaining("textarea", "textarea");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("=");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("h7`]-t^}}\"!6`:'q^");
      Document document1 = document0.clone();
      boolean boolean0 = document0.equals(document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("=");
      Elements elements0 = document0.getElementsByAttributeValueNot("=", "=");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("MJN3+}");
      Elements elements0 = document0.getElementsByAttribute("MJN3+}");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("entities-fu1l.pro;eGties");
      // Undeclared exception!
      try { 
        document0.before("entities-fu1l.pro;eGties");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("MJN3+}");
      Element element0 = document0.removeClass("MJN3+}");
      assertEquals("MJN3+}", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("}:FZ{");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      Elements elements0 = document0.getElementsByTag("Sk6A\"`l@yJNH3");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("MJN3+}");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1858);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("N(");
      document0.appendChild(document0);
      document0.prepend("N(");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("textarea");
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      document0.parentNode = (Node) element0;
      Element element1 = document0.prepend("textarea");
      assertEquals("#root", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.appendChild(document0);
      List<TextNode> list0 = element0.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("?}]oa}dRYcXnTsU*9");
      document0.prepend("?}]oa}dRYcXnTsU*9");
      List<TextNode> list0 = document0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("b4{x");
      document0.prepend("b4{x");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("%4Ov");
      DataNode dataNode0 = DataNode.createFromEncoded(" ", "%4Ov");
      Element element0 = document0.prependChild(dataNode0);
      List<DataNode> list0 = element0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("h:j0>>j#D$x~m[/\"");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(1544, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("entities-full.properties");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1467384668), linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("O%4OYv");
      Element element0 = document0.createElement("O%4OYv");
      element0.prepend("Children collection to be inserted must not be null.");
      Element element1 = element0.appendChild(document0);
      Elements elements0 = document0.getElementsByIndexLessThan((-3));
      element1.insertChildren((-3), elements0);
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("0o");
      Element element0 = document0.toggleClass("0o");
      String string0 = element0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("zpf!Mn4 xcJ<");
      document0.appendChild(document0);
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.tagName("textarea");
      Element element0 = document0.createElement("textarea");
      element0.appendElement("textarea");
      element0.appendChild(document0);
      assertEquals(1, document0.siblingIndex());
      
      String string0 = document0.cssSelector();
      assertEquals("textarea > textarea:nth-child(2)", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("0_o");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("O%4OYv");
      Element element0 = document0.createElement("O%4OYv");
      Element element1 = element0.prepend("Children collection to be inserted must not be null.");
      Element element2 = element0.appendChild(document0);
      Elements elements0 = element1.getElementsContainingOwnText("Children collection to be inserted must not be null.");
      element2.insertChildren((-3), elements0);
      document0.siblingElements();
      assertEquals(2, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("entities-full.properties");
      Element element0 = document0.appendElement("dm");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
      assertEquals("dm", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("lvirmfuzxh$pkpz");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("?}]oa}dRYcXnTsU*9");
      document0.appendElement("?}]oa}dRYcXnTsU*9");
      document0.prependChild(document0);
      Element element0 = document0.nextElementSibling();
      assertEquals("?}]oa}drycxntsu*9", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("x7[Z3IE ,");
      document0.appendChild(document0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("     ");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("MJN3+}");
      document0.appendChild(document0);
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document(">uy)b MeMBF");
      Element element0 = document0.appendChild(document0);
      element0.appendElement(">_vc&YS");
      Element element1 = document0.firstElementSibling();
      assertSame(document0, element1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("x7[Z3IE ,");
      document0.appendChild(document0);
      Element element0 = document0.lastElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("O%4OYv");
      Element element0 = document0.createElement("O%4OYv");
      Element element1 = element0.prepend("Children collection to be inserted must not be null.");
      Element element2 = element0.appendChild(document0);
      Elements elements0 = element1.getElementsContainingOwnText("Children collection to be inserted must not be null.");
      element2.insertChildren((-3), elements0);
      element2.lastElementSibling();
      assertEquals(2, document0.siblingIndex());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.getElementById("textarea");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("l=:vz");
      DocumentType documentType0 = new DocumentType("", "R3[|hc^>h", "R3[|hc^>h", "R3[|hc^>h");
      document0.appendChild(documentType0);
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("4O");
      DataNode dataNode0 = new DataNode("4O", "4O");
      document0.appendChild(dataNode0);
      Elements elements0 = document0.getElementsContainingOwnText("4O");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.createElement("textarea");
      element0.prepend("textarea");
      Element element1 = document0.appendChild(element0);
      String string0 = element1.text();
      assertEquals("textarea", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Comment comment0 = new Comment("J#(/J~", "");
      boolean boolean0 = Element.preserveWhitespace(comment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.createElement("textarea");
      element0.appendChild(document0);
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("     ");
      document0.prepend("     ");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("O%4OYv");
      DataNode dataNode0 = DataNode.createFromEncoded("5k3H", "f:d2");
      Element element0 = document0.prependChild(dataNode0);
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("4O");
      document0.appendElement("4O");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("?}]oa}dRYcXnTsU*9");
      Element element0 = document0.createElement("?}]oa}dRYcXnTsU*9");
      element0.prepend(" C%Q98a9UAZN");
      document0.appendChild(element0);
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("textarea");
      DataNode dataNode0 = new DataNode(" />", "0\"SNR");
      document0.appendChild(dataNode0);
      String string0 = document0.data();
      assertEquals(" />", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("N(");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("N(");
      document0.prepend("N(");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("sU<pv8rA[H4");
      document0.toggleClass("sU<pv8rA[H4");
      boolean boolean0 = document0.hasClass("java.lang.String@0000000005");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("0o");
      document0.toggleClass("0o");
      boolean boolean0 = document0.hasClass("0o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("?}]oa}dRYcXnTsU*9");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.createElement("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document0.appendChild(document1);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("N(");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.createElement("textarea");
      Element element1 = document0.prepend("textarea");
      element1.appendChild(element0);
      String string0 = document0.html();
      assertEquals("textarea\n<textarea></textarea>", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.tagName("textarea");
      Element element1 = document0.appendChild(element0);
      element1.html();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("Er");
      Element element0 = document0.createElement("param");
      document0.appendChild(element0);
      String string0 = document0.html();
      assertEquals("<param>", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("Er");
      Element element0 = document0.createElement("param");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(stringBuilder0, 1961, document_OutputSettings1);
      assertEquals("<param />", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("?}]oa}dRYcXnTsU*9");
      Element element0 = document0.createElement("?}]oa}dRYcXnTsU*9");
      element0.prepend(" C%Q98a9UAZN");
      Element element1 = document0.appendChild(element0);
      String string0 = element1.toString();
      assertEquals("<?}]oa}drycxntsu*9>\n  C%Q98a9UAZN\n</?}]oa}drycxntsu*9>", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("h7`]-t^}}\"!6`:'q^");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "h7`]-t^}}\"!6`:'q^");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, 2187, document_OutputSettings0);
      assertEquals("h7`]-t^}}\"!6`:'q^</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.createElement("textarea");
      element0.prepend("textarea");
      // Undeclared exception!
      try { 
        element0.toString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = new Document("#");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      String string0 = document0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = new Document("?}]oa}dRYcXnTsU*9");
      boolean boolean0 = document0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = new Document("xjgf~gq?,ft2pgn");
      Document document1 = document0.clone();
      document1.val("xjgf~gq?,ft2pgn");
      boolean boolean0 = document1.equals(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("h7`]-t^}}\"!6`:'q^");
      document0.hashCode();
  }
}
