/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:09:34 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextNode textNode0 = new TextNode("abs:ir]{", "abs:ir]{");
      String string0 = textNode0.absUrl("abs:ir]{");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataNode dataNode0 = new DataNode("T&Od;r:5Di", "T&Od;r:5Di");
      dataNode0.setBaseUri("T&Od;r:5Di");
      assertEquals(0, (int)dataNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("dcM/", "dcM/", true);
      xmlDeclaration0.attr("dcM/", "dcM/");
      String string0 = xmlDeclaration0.absUrl("dcM/");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextNode textNode0 = new TextNode(";PU1N]#!R(,+t'y", ";PU1N]#!R(,+t'y");
      Node node0 = textNode0.removeAttr(";PU1N]#!R(,+t'y");
      assertEquals(0, (int)node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("@~$-fJP>I9s\"_O9FZ");
      Element element0 = document0.html("@~$-fJP>I9s\"_O9FZ");
      assertEquals(0, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("ir]{");
      // Undeclared exception!
      try { 
        document0.replaceWith(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = new TextNode(";PU1N]#!R(,+t'y", ";PU1N]#!R(,+t'y");
      // Undeclared exception!
      try { 
        textNode0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("~$-fJP>I9s\"_O9FZ");
      Element element0 = document0.clone();
      assertNotSame(element0, document0);
      assertEquals(0, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("~$-fJP>I9s\"_O9FZ");
      assertEquals(0, (int)document0.siblingIndex());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("$/=SO", "$/=SO");
      assertNotNull(textNode0);
      assertEquals("$/=SO", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      
      String string0 = textNode0.toString();
      assertEquals("$/=SO", string0);
      assertNotNull(string0);
      assertEquals("$/=SO", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextNode textNode0 = new TextNode("abs:ir]{", "abs:ir]{");
      assertNotNull(textNode0);
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("abs:ir]{", textNode0.baseUri());
      
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("abs:ir]{", textNode0.baseUri());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("abs:ir]{");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("abs:ir]{", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      
      Element element0 = document0.appendChild(document0);
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("abs:ir]{", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("#document", element0.nodeName());
      assertEquals("abs:ir]{", element0.baseUri());
      assertEquals(0, (int)element0.siblingIndex());
      assertSame(document0, element0);
      assertSame(element0, document0);
      
      document0.setParentNode(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("abs:ir]{", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("#document", element0.nodeName());
      assertEquals("abs:ir]{", element0.baseUri());
      assertEquals(0, (int)element0.siblingIndex());
      assertSame(document0, element0);
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("T&Od;r:5Di");
      assertNotNull(document0);
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("T&Od;r:5Di", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("ir]{");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ir]{", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      
      document0.setParentNode(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ir]{", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("ir]{");
      assertNotNull(document0);
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ir]{", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      DataNode dataNode0 = new DataNode("ir]{", "ir]{");
      assertNotNull(dataNode0);
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("ir]{", dataNode0.baseUri());
      
      Element element0 = document0.prependElement("ir]{");
      assertNotNull(element0);
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ir]{", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ir]{", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, (int)element0.siblingIndex());
      
      document0.replaceChild(element0, dataNode0);
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ir]{", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("ir]{", dataNode0.baseUri());
      assertEquals("ir]{", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, (int)element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("ir]{");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ir]{", document0.baseUri());
      
      document0.setParentNode(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ir]{", document0.baseUri());
      
      Node node0 = document0.previousSibling();
      assertNull(node0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ir]{", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("xH\"&J$hKmP0&");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xH\"&J$hKmP0&", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(1, nodeArray0.length);
      assertEquals(1, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xH\"&J$hKmP0&", document0.baseUri());
      
      Element element0 = (Element)document0.previousSibling();
      assertNotNull(element0);
      assertEquals(1, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xH\"&J$hKmP0&", document0.baseUri());
      assertEquals(0, (int)element0.siblingIndex());
      assertEquals("xH\"&J$hKmP0&", element0.baseUri());
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded(";PU1N]#!R(,+t'y", ";PU1N]#!R(,+t'y");
      assertNotNull(textNode0);
      assertEquals(";PU1N]#!R(,+t'y", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      
      boolean boolean0 = textNode0.equals(";PU1N]#!R(,+t'y");
      assertFalse(boolean0);
      assertEquals(";PU1N]#!R(,+t'y", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("xH\"&J$hKmP0&", "xH\"&J$hKmP0&");
      assertNotNull(textNode0);
      assertEquals("xH\"&J$hKmP0&", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      
      boolean boolean0 = textNode0.equals(textNode0);
      assertTrue(boolean0);
      assertEquals("xH\"&J$hKmP0&", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("", document0.baseUri());
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", "", true);
      assertNotNull(xmlDeclaration0);
      assertEquals(0, (int)xmlDeclaration0.siblingIndex());
      assertEquals("", xmlDeclaration0.baseUri());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      
      xmlDeclaration0.setParentNode(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(0, (int)xmlDeclaration0.siblingIndex());
      assertEquals("", xmlDeclaration0.baseUri());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      
      xmlDeclaration0.hashCode();
      assertEquals(0, (int)xmlDeclaration0.siblingIndex());
      assertEquals("", xmlDeclaration0.baseUri());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("xH\"&J$hKmP0&", "xH\"&J$hKmP0&");
      assertNotNull(textNode0);
      assertEquals("xH\"&J$hKmP0&", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      
      textNode0.hashCode();
      assertEquals("xH\"&J$hKmP0&", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("xH\"&J$hKmP0&", "xH\"&J$hKmP0&");
      assertNotNull(textNode0);
      assertEquals("xH\"&J$hKmP0&", textNode0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      Node node0 = textNode0.clone();
      assertNotNull(node0);
      assertEquals("xH\"&J$hKmP0&", textNode0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("xH\"&J$hKmP0&", node0.baseUri());
      assertEquals(0, (int)node0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertFalse(node0.equals((Object)textNode0));
      assertNotSame(textNode0, node0);
      assertNotSame(node0, textNode0);
  }
}
