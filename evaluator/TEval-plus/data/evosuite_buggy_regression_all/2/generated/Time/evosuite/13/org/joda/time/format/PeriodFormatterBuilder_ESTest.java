/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:39:16 GMT 2023
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePeriod;
import org.joda.time.Years;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeriodFormatterBuilder_ESTest extends PeriodFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("pdefix not followed by field", "pdefix not followed by field");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1, (-1087), 1, false, 1, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.KOREAN;
      int int0 = periodFormatterBuilder_FieldFormatter1.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(85, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("f31P`yr=");
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("q6!pa0gja3ime.chrono.gjchronology", "q6!pa0gja3ime.chrono.gjchronology");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "q6!pa0gja3ime.chrono.gjchronology");
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, (-1));
      assertEquals("q6!pa0gja3ime.chrono.gjchronologyf31P`yr=q6!pa0gja3ime.chrono.gjchronology", stringBuffer0.toString());
      assertEquals(74, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[1];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("{&}@i[");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-219), (-219), (-219), false, 9, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      MockFileWriter mockFileWriter0 = new MockFileWriter("{&}@i[");
      Locale locale0 = Locale.ITALY;
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      periodFormatterBuilder_FieldFormatter1.printTo((Writer) mockFileWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      periodFormatterBuilder1.appendSuffix("ilder$c");
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod(",w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \",w\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      Period period0 = new Period();
      StringBuffer stringBuffer0 = new StringBuffer();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("ptefix not followed by field", "ptefix not followed by field", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(false);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      Locale locale0 = Locale.PRC;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("ptefix not followed by field", "ptefix not followed by field", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      PeriodType periodType0 = PeriodType.standard();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(48);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)ethiopicChronology0.withUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(9223372036854775807L, 604800000L, periodType0, ethiopicChronology1);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "", 48, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      assertNotNull(periodPrinter0);
      
      Period period0 = new Period();
      Locale locale0 = Locale.CHINESE;
      int int0 = periodPrinter0.calculatePrintedLength(period0, locale0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendYears();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("4ilder$cnu yvmg!p.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"4ilder$cnu yvmg!p.\" is malformed at \"ilder$cnu yvmg!p.\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      periodFormatterBuilder1.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder2.toPrinter();
      Period period0 = new Period();
      Locale locale0 = Locale.PRC;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("ptefix not followed by field", "ptefix not followed by field", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits((-4576));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      periodFormatterBuilder1.appendMillis3Digit();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Period period0 = new Period();
      Locale locale0 = Locale.ENGLISH;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "r%'wz%q";
      stringArray0[1] = "e`";
      stringArray0[2] = "pO|,8";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("pO|,8");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("pO|,8", "H{6Iat", stringArray0, periodPrinter0, periodFormatterBuilder_Literal0, true, true);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMinutes();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("8=qU8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"8=qU8\" is malformed at \"=qU8\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("psefix not follow_d'by field", "]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMonths();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("-4Mycun");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-4Mycun\" is malformed at \"Mycun\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendWeeks();
      periodFormatterBuilder0.appendSuffix("ilder$c", "ilder$c");
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("ilder$c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"ilder$c\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("b8yhB?c8]R6MBv[c");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      Period period0 = new Period();
      Locale locale0 = Locale.KOREA;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("ART");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("ART", "ART", (String[]) null, periodPrinter0, periodFormatterBuilder_Literal0, true, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(209);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("-4Mycun", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-4Mycun\" is malformed at \"Mycun\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("c8;W", "$%]</7)5`!d", (String[]) null);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      periodFormatterBuilder1.appendSeparatorIfFieldsBefore("");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("4ilder$cnu yvmg!p.", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"4ilder$cnu yvmg!p.\" is malformed at \"ilder$cnu yvmg!p.\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      String string0 = mutablePeriod0.toString();
      assertEquals("PT0S", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      Period period0 = new Period();
      Locale locale0 = Locale.PRC;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("*pA720Y::W3;Lw<o*W", "!*7q-8v7cannot be null", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Literal0);
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      assertNull(periodPrinter0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) null);
      PeriodParser periodParser0 = periodFormatterBuilder1.toParser();
      assertNull(periodParser0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.clear();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer or parser supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral("?u");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix("0~C+.|Otl{+_Vsc", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("above the supported maximum of ", "above the supported maximum of ");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendPrefix("[[h [@DUZxFF", "[[h [@DUZxFF");
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("ilder$c");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("ilder$c", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) null);
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("org.joda.time.base.BasePeriod$1", "Builder has created neither a printer nor a parser");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("m*>nuend");
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("m*>nuend");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparatorIfFieldsAfter((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator("'b,JN8P8X?", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("c8;Q");
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparatorIfFieldsAfter("c8;Q");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("c8;Q");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsAfter("c8;Q");
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("-gK`KHbG1");
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparatorIfFieldsAfter("-gK`KHbG1");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Literal0);
      PeriodParser periodParser0 = periodFormatterBuilder0.toParser();
      assertNotNull(periodParser0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("(X0,)");
      periodFormatterBuilder1.toParser();
      PeriodParser periodParser0 = periodFormatterBuilder0.toParser();
      assertNotNull(periodParser0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      periodFormatterBuilder1.appendSuffix("ilder$c");
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("4ilder$cnu yvmg!p.", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"4ilder$cnu yvmg!p.\" is malformed at \"nu yvmg!p.\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("-gK`KHb31");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("-gK`KHb31", 8);
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      periodFormatterBuilder1.appendSuffix("ilder$c");
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("+rUo&Xk ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+rUo&Xk \"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("-gK`KHb31");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("U-[-r}CX-X+@7@g", 8);
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("?QI#o_.CZHIl");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan(".3uxdan [y!$#7krh suffix to", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("5W[`p8EY/n");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("5W[`p8EY/n", 8);
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("-gK`KHbG1");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("'0ZThA6b0<*Xxm),p,j", 8);
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("N5@");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("N5@", 1);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      periodFormatterBuilder1.appendSuffix("ilder$c");
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("6\"o.Q);hh}Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"6\"o.Q);hh}Z\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      periodFormatterBuilder1.appendSuffix("ilder$c");
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("8Q5YzU,THX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"8Q5YzU,THX\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      periodFormatterBuilder1.appendSuffix("ilder$c");
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("49#3;''Nu YvmG!p.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"49#3;''Nu YvmG!p.\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.chrono.GJMonthOfYearDateTimeField", "org.joda.time.chrono.GJMonthOfYearDateTimeField");
      int int0 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(1);
      assertEquals(47, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Buildr has reated neither a printer nor a parser", "Buildr has reated neither a printer nor a parser");
      StringBuffer stringBuffer0 = new StringBuffer(101);
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 1);
      assertEquals("Buildr has reated neither a printer nor a parser", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("NxDF)%E82:kb", "o");
      StringWriter stringWriter0 = new StringWriter();
      periodFormatterBuilder_PluralAffix0.printTo((Writer) stringWriter0, 48);
      assertEquals("o", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Builder has created neither a printer nor a parser", "Builder has created neither a printer nor a parser");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(109);
      periodFormatterBuilder_PluralAffix0.printTo((Writer) charArrayWriter0, 1);
      assertEquals(50, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("<BKNd2~I%`@", "<BKNd2~I%`@");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(2, 2, 2, true, 2, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("<BKNd2~I%`@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"<BKNd2~I%`@\" is too short
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("PT0S", "d");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(81, 81, 81, true, (-2091464730), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_PluralAffix0);
      Locale locale0 = Locale.GERMANY;
      int int0 = periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, "NST", (-2091464730), locale0);
      assertEquals(2091464729, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "org.joda.time.format.PeriodFormatterBuilder$CompositeAffix");
      int int0 = periodFormatterBuilder_PluralAffix0.parse("w", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "1f%oqlFJd~X");
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix1 = new PeriodFormatterBuilder.PluralAffix("hpq-j6@gqv<<kb|;tm", "1f%oqlFJd~X");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix1, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("1f%oqlFJd~X", 52);
      assertEquals((-53), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      periodFormatterBuilder1.appendSuffix("resulting", "resulting");
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("4ilder$cnu yvmg!p.", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"4ilder$cnu yvmg!p.\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$Separator", "org.joda.time.chrono.GJChronology");
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Q6!pa0gjA3i");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("org.joda.time.chrono.GJChronology", (-1610));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.chrono.CopticChronology");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.parse("org.joda.time.chrono.CopticChronology", 855);
      assertEquals((-856), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("pO|,8", "pO|,8");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1452), (-1452), 2, true, 2, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      Days days0 = Days.ONE;
      int int0 = periodFormatterBuilder_FieldFormatter0.countFieldsToPrint(days0, (-1452), (Locale) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2425L);
      String string0 = mutablePeriod0.toString();
      assertEquals("PT2.425S", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(".3");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-636), 3, 719544, true, 3, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      periodFormatterBuilder_FieldFormatter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals(".30.3", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Period period0 = new Period();
      Locale locale0 = Locale.PRC;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("*pA720Y::W3;Lw<o*W", "Hb", (String[]) null, periodPrinter0, periodFormatterBuilder_Literal0, false, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[1];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("c8;W");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-219), 48, 89, true, 9, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-219), 9, 9, 9, (-219), 48, 9, 48);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.field.BaseDateTimeField", true);
      Locale locale0 = Locale.ITALY;
      periodFormatterBuilder_FieldFormatter0.printTo((Writer) mockFileWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("<BKNd2~I%`@", "<BKNd2~I%`@");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(2, 4, 2, true, 53, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod(",Q'S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \",Q'S\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix((PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(880, 4, 4, true, (-763), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      Locale locale0 = Locale.JAPANESE;
      int int0 = periodFormatterBuilder_FieldFormatter0.parseInto((ReadWritablePeriod) null, "4/A!/C$}", 880, locale0);
      assertEquals((-881), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      // Undeclared exception!
      try { 
        periodFormatter1.parseMutablePeriod("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.format.PeriodForma...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("--4MBycun");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"--4MBycun\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("+rUo&Xk ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+rUo&Xk \"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod(",");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \",\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod(".3 field to apply suffix to");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \".3 field to apply suffix to\" is malformed at \" field to apply suffix to\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("2147483648", periodFormatter0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2147483648\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("23 fiel to appy suffix&to");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"23 fiel to appy suffix&to\" is malformed at \" fiel to appy suffix&to\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix((PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(880, 4, 4, true, (-763), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      Locale locale0 = Locale.JAPANESE;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "4/A!/C$}";
      stringArray0[1] = "4/A!/C$}";
      stringArray0[2] = "4/A!/C$}";
      stringArray0[3] = "4/A!/C$}";
      stringArray0[4] = "ConverterManager[";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("4/A!/C$}", "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendDays();
      periodFormatterBuilder0.appendDays();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Period period0 = new Period();
      Locale locale0 = Locale.PRC;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("*pA720Y::W3;Lw<o*W", "Hb", (String[]) null, periodPrinter0, periodFormatterBuilder_Literal0, false, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      String string0 = mutablePeriod0.toString();
      assertEquals("P0W", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Buildr has reated neither a printer nor a parser", "Buildr has reated neither a printer nor a parser");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[20];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1160, 1, 1160, false, 1, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.KOREAN;
      Duration duration0 = Duration.standardSeconds(1160);
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      StringBuffer stringBuffer0 = new StringBuffer(43);
      periodFormatterBuilder_FieldFormatter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Buildr has reated neither a printer nor a parser", "Buildr has reated neither a printer nor a parser");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[20];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1160, 1, 1160, false, 1, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.KOREAN;
      StringBuffer stringBuffer0 = new StringBuffer(43);
      periodFormatterBuilder_FieldFormatter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Cannot have two adjacent separators");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1, 1, 1, true, (-887), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      Months months0 = Months.ZERO;
      long long0 = periodFormatterBuilder_FieldFormatter0.getFieldValue(months0);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      PeriodType periodType0 = PeriodType.millis();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = new Period(60L, periodType0, (Chronology) julianChronology0);
      periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) period0);
      assertEquals(5, stringBuffer0.length());
      assertEquals("0.060", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendDays();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("4ilderg$cnu yvmg!p.", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"4ilderg$cnu yvmg!p.\" is malformed at \"ilderg$cnu yvmg!p.\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(".3");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-636), 3, 719544, true, 3, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, (-636), 3);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("Invalid UTC zone provided");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Invalid UTC zone provided\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator((String) null, (String) null, (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("m>*uenb", "m>*uenb", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Period period0 = new Period();
      Locale locale0 = Locale.PRC;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("*pA720Y::W3;Lw<o*W", "*pA720Y::W3;Lw<o*W", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength(period0, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      Period period0 = new Period();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("h|tz8{i>T0#N\"pg^=tP", "DU,aMbE=@\".A", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, false);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(".3 field to apply suffix to");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      Locale locale0 = Locale.GERMANY;
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength(period0, locale0);
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(".3");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-636), 3, 719544, true, 3, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("Invalid style character: ");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", "hours", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      Period period0 = new Period();
      Locale locale0 = Locale.ENGLISH;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kKs";
      stringArray0[1] = "kKs";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(".3 field to apply suffix to", "kKs", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator2 = new PeriodFormatterBuilder.Separator("kKs", "kKs", stringArray0, periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator3 = periodFormatterBuilder_Separator2.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      periodFormatterBuilder_Separator2.finish(periodFormatterBuilder_Separator1, periodFormatterBuilder_Composite0);
      int int0 = periodFormatterBuilder_Separator3.calculatePrintedLength(period0, locale0);
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "K]m";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("u'P:<J2B -J0tlx9", "K]m", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      Locale locale0 = Locale.TAIWAN;
      int int0 = periodFormatterBuilder_Separator0.calculatePrintedLength((ReadablePeriod) null, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMonths();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Period period0 = new Period();
      Locale locale0 = Locale.PRC;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("*pA720Y::W3;Lw<o*W", "*pA720Y::W3;Lw<o*W", (String[]) null, periodPrinter0, periodFormatterBuilder_Literal0, true, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendYears();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Period period0 = new Period();
      Locale locale0 = Locale.US;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("BS}G\"IS/)");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Values array must not be null", "Values array must not be null", (String[]) null, periodPrinter0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      StringBuffer stringBuffer0 = new StringBuffer();
      periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals(10, stringBuffer0.length());
      assertEquals("0BS}G\"IS/)", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      Period period0 = Period.ZERO;
      Locale locale0 = Locale.CHINESE;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("ptefix not followed by field", "ptefix not followed by field", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      StringBuffer stringBuffer0 = new StringBuffer();
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals(38, stringBuffer0.length());
      assertEquals("0.000ptefix not followed by field0.000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.printZeroRarelyFirst();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      Period period0 = Period.ZERO;
      Locale locale0 = Locale.CHINESE;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("ptefix not followed by field", "ptefix not followed by field", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      StringBuffer stringBuffer0 = new StringBuffer();
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals(40, stringBuffer0.length());
      assertEquals("0.0000ptefix not followed by field0.0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      Period period0 = new Period();
      Locale locale0 = Locale.PRC;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("+CpV)!", "+CpV)!", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      Period period0 = new Period();
      Locale locale0 = Locale.PRC;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("*pA720Y::W3;Lw<o*W", "!*7q-8v7cannot be null", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, false);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      Period period0 = new Period();
      Locale locale0 = Locale.PRC;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("*pA720Y::W3;Lw<o*W", "*pA720Y::W3;Lw<o*W", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal((String) null);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Composite0);
      StringWriter stringWriter0 = new StringWriter();
      periodFormatterBuilder_Separator1.printTo((Writer) stringWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("000null", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeconds();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      Period period0 = new Period();
      Locale locale0 = Locale.PRC;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("ptefix not followed by field", "ptefix not followed by field", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      StringWriter stringWriter0 = new StringWriter();
      periodFormatterBuilder_Separator1.printTo((Writer) stringWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("0ptefix not followed by field0", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      Locale locale0 = Locale.PRC;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("ptefix not followed by field", "ptefix not followed by field", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      StringWriter stringWriter0 = new StringWriter();
      PeriodType periodType0 = PeriodType.standard();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(48);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)ethiopicChronology0.withUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(9223372036854775807L, 604800000L, periodType0, ethiopicChronology1);
      periodFormatterBuilder_Separator1.printTo((Writer) stringWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("-55-55.807ptefix not followed by field-55-55.807", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      Period period0 = new Period();
      Locale locale0 = Locale.PRC;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("*pA720Y::W3;Lw<o*W", "*pA720Y::W3;Lw<o*W", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("0~C+.|Otl{+_Vsc");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toParser();
      MockFileWriter mockFileWriter0 = new MockFileWriter("FMgSgDKI");
      Years years0 = Years.TWO;
      periodFormatterBuilder_Separator0.printTo((Writer) mockFileWriter0, (ReadablePeriod) years0, (Locale) null);
      assertEquals(1, years0.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      Period period0 = new Period();
      Locale locale0 = Locale.PRC;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("*pA720Y::W3;Lw<o*W", "*pA720Y::W3;Lw<o*W", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, false, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      StringWriter stringWriter0 = new StringWriter();
      periodFormatterBuilder_Separator1.printTo((Writer) stringWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("0*pA720Y::W3;Lw<o*W0", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      periodFormatterBuilder1.appendSeparator("ilder$c", "ilder$c");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("7s%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"7s%\" is malformed at \"s%\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("ptsfix not followed by field");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"ptsfix not followed by field\" is malformed at \"sfix not followed by field\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("ptsfix not followed by field");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite1 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toParser();
      assertFalse(periodFormatterBuilder_Composite1.equals((Object)periodFormatterBuilder_Composite0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) null);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("M/");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodParser periodParser0 = periodFormatterBuilder1.toParser();
      assertNotSame(periodFormatterBuilder_Composite0, periodParser0);
  }
}
