/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:40:30 GMT 2023
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.joda.time.Chronology;
import org.joda.time.Days;
import org.joda.time.Hours;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeriodFormatterBuilder_ESTest extends PeriodFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "Literal must not be null");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(2);
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "Literal must not be null");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_CompositeAffix0.printTo((StringBuffer) null, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$PluralAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "Literal must not be null");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) mockPrintWriter0, 0);
      assertEquals(48, charArrayWriter0.size());
      assertEquals("Literal must not be nullLiteral must not be null", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("x:<^");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendPrefix("x:<^");
      periodFormatterBuilder3.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.ITALY;
      StringBuffer stringBuffer0 = new StringBuffer("x:<^");
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals(13, stringBuffer0.length());
      assertEquals("x:<^x:<^0.000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      periodFormatterBuilder1.appendMillis3Digit();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSuffix("0yXw*KMRk1%", "0yXw*KMRk1%");
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder2.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("0yXw*KMRk1%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0yXw*KMRk1%\" is malformed at \"yXw*KMRk1%\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(true);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeconds();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertNotNull(periodPrinter0);
      
      Seconds seconds0 = Seconds.ZERO;
      Locale locale0 = Locale.JAPAN;
      int int0 = periodPrinter0.calculatePrintedLength(seconds0, locale0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertNotNull(periodPrinter0);
      
      Seconds seconds0 = Seconds.ZERO;
      Locale locale0 = Locale.JAPAN;
      int int0 = periodPrinter0.calculatePrintedLength(seconds0, locale0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendYears();
      periodFormatterBuilder0.appendSeparatorIfFieldsBefore("X");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertNotNull(periodPrinter0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.TAIWAN;
      int int0 = periodPrinter0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.printTo((Writer) null, (ReadablePeriod) mutablePeriod0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Literal0);
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toParser();
      assertNotNull(periodFormatterBuilder_Composite0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(63);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("0Xw*KMF6HRk1%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0Xw*KMF6HRk1%\" is malformed at \"Xw*KMF6HRk1%\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("I");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMonths();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("0yXw*KMRk1%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0yXw*KMRk1%\" is malformed at \"yXw*KMRk1%\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("Q,gj");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      MockFileWriter mockFileWriter0 = new MockFileWriter("Q,gj");
      Locale locale0 = Locale.CANADA;
      periodPrinter0.printTo((Writer) mockFileWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("CA", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("0yXw*KMRk1%");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType1);
      // Undeclared exception!
      try { 
        periodFormatter1.parsePeriod("8C]f& BTWn.#}y.Lt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'seconds'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator("a=?{=hy$Q2", (String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      periodFormatterBuilder1.appendSuffix("uR_[xp:.f");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSuffix("0yXw*KMRk1%");
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder2.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("0yXw*KMRk1%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0yXw*KMRk1%\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendYears();
      periodFormatterBuilder0.appendSeparator("I", "I");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
      String string0 = periodFormatter0.print(mutablePeriod0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      periodFormatterBuilder0.appendSuffix("0Xw*KMF6H91Rk1%", "0Xw*KMF6HRk1%");
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("0Xw*KMF6HRk1%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0Xw*KMF6HRk1%\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("NoHours");
      StringWriter stringWriter0 = new StringWriter();
      periodFormatterBuilder_SimpleAffix0.printTo((Writer) stringWriter0, 1);
      assertEquals("NoHours", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      periodFormatterBuilder0.append(periodFormatter0);
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertNull(periodPrinter0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) null);
      PeriodParser periodParser0 = periodFormatterBuilder0.toParser();
      assertNull(periodParser0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.clear();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer or parser supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral("O:H");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix("`/WlXq=~24^|fO", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("YearMonthDayTime");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("YearMonthDayTime", "YearMonthDayTime");
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("org.joda.time.base.AbstractInterval");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("5;jN)D8.6#Ao'", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) null);
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("org.joda.time.format.PeriodFormatterBuilder$Literal");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "gq?s'";
      stringArray0[1] = "gq?s'";
      stringArray0[2] = "gq?s'";
      stringArray0[3] = "gq?s'";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("gq?s'", "gq?s'", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Separator0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("gq?s'");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("org.joda.9imu.convert.DabeConvrter");
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("No field to apply suffix to", "org.joda.9imu.convert.DabeConvrter");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter(" as this period contains months and months vary in length");
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator(" as this period contains months and months vary in length", "org.joda.time.PeriodType");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter(" as this period contains months and months vary in length");
      periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator(" as this period contains months and months vary in length", "org.joda.time.PeriodType");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("xR", "xR");
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparator("xR");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "gq?s'";
      stringArray0[1] = "gq?s'";
      stringArray0[2] = "gq?s'";
      stringArray0[3] = "gq?s'";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(stringArray0[1], "gq?s'", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Separator0, (PeriodParser) null);
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertTrue(periodFormatter0.isParser());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("0Xw*KMF6HRk1%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0Xw*KMF6HRk1%\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("q");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(2755, (-890), (-890), true, (-890), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodFormatterBuilder_FieldFormatter0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"q\" is too short
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("T7AFe}D4c(oM@zi");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan(";2", 1);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("T7AFe}D4c(oM@zi");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("'+ze,4>5o9|cb&", 1);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("T7AFe}D4c(oM@zi");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("r+zh,4>5o9-d|c&", 5);
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("'(#V&a f`42.+j");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("{Fl-&8AA[)S-v!o=Mc5", 3);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("x.Z:$cT5aE3{J");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("x.Z:$cT5aE3{J", 1);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("A/cLlPQ");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("A/cLlPQ", 1);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("qCSZ%9enSbyNl\"JCU");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("..v&U1_Y6aHkV(PJ!Fj", 5);
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("T7AFe}D4c(oM@zi");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("AYZM}_I)H}3(=", 10);
      assertEquals((-11), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("T7AFeD4c(obti");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("s5~Qh(8<ZqE", 1);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("p#t0l=cgt ");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan(">6?^I{%#W.yJcv{q72", 1);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("T7AFe}D4c(oM@zi");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("T7AFe}D4c(oM@zi", 1);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("<A<pz&1:R(oy");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("m8hpRVz\"RU +", 1);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("]tU0C+d[");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("^9MyP+E%\",O6", 1);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(">+FV9,#~E=]e!B.", "");
      int int0 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(1);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("x$^R");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendSuffix("x$^R", "x$^R");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      StringBuffer stringBuffer0 = new StringBuffer("x$^R");
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = new Locale("x$^R", "x$^R");
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("x$^Rx$^R1.001x$^R", stringBuffer0.toString());
      assertEquals(17, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("X%a@", "rk7Y");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      periodFormatterBuilder_PluralAffix0.printTo((Writer) charArrayWriter0, 1);
      assertEquals("X%a@", charArrayWriter0.toString());
      assertEquals(5, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("hqe`g'o<+7zjk.wrq", "");
      int int0 = periodFormatterBuilder_PluralAffix0.parse("", 3);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("xR", "xR");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendWeeks();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder2.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("xR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"xR\" is too short
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendPrefix("org.joda.time.", "org.joda.time.format.PeriodFormatterBuilder$PluralAffix");
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("org.joda.time.Days");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.Days\" is malformed at \"Days\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("x$^R");
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendSuffix("x$^R", "x$^R");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = new Locale("x$^R", "x$^R");
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "x$^R", 1, locale0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("}fnaMGaZ:8=,<qg5");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.parse("}fnaMGaZ:8=,<qg5", 91);
      assertEquals((-92), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.convert.ConverterSet");
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("\"718%/U{2*C?ak", "org.joda.time.convert.ConverterSet");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1326035209), (-1326035209), 460, true, 460, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      Locale locale0 = Locale.CANADA_FRENCH;
      int int0 = periodFormatterBuilder_FieldFormatter0.parseInto((ReadWritablePeriod) null, "org.joda.time.convert.ConverterSet", (-1326035209), locale0);
      assertEquals(1326035208, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMinutes();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix("5Z/;jN)D86#Ao'", "5Z/;jN)D86#Ao'");
      periodFormatterBuilder1.appendSuffix("5Z/;jN)D86#Ao'");
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("5Z/;jN)D86#Ao'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"5Z/;jN)D86#Ao'\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix((PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-2092131880), (-1828), (-2092131880), true, (-2120), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      Days days0 = Days.parseDays((String) null);
      Seconds seconds0 = days0.toStandardSeconds();
      Locale locale0 = Locale.CANADA;
      int int0 = periodFormatterBuilder_FieldFormatter0.countFieldsToPrint(seconds0, (-1828), locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      String string0 = mutablePeriod0.toString();
      assertEquals("PT0S", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("x<^");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix("x<^", "x<^");
      periodFormatterBuilder3.appendWeeks();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.forLanguageTag("No field to apply suffix to");
      int int0 = periodPrinter0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("x<$^R}");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.printZeroAlways();
      periodFormatterBuilder2.minimumPrintedDigits(47);
      periodFormatterBuilder0.appendWeeks();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      StringBuffer stringBuffer0 = new StringBuffer("x<$^R}");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 1, (Chronology) islamicChronology0);
      Locale locale0 = Locale.ITALY;
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals(59, stringBuffer0.length());
      assertEquals("x<$^R}x<$^R}00000000000000000000000000000000000000000000000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("x<$^R}");
      periodFormatterBuilder1.appendPrefix("x<$^R}", "x<$^R}");
      periodFormatterBuilder0.appendYears();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.ITALY;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("x<$^R}");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      periodPrinter0.printTo((Writer) bufferedWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("IT", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("x<$^R}");
      periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.ITALY;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("t&^AycY7Ov~");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      periodPrinter0.printTo((Writer) bufferedWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("it_IT", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("x<$^R}");
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 1, (Chronology) islamicChronology0);
      Locale locale0 = Locale.ITALY;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("x<$^R}");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      periodPrinter0.printTo((Writer) bufferedWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("it_IT", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("x<$^R}");
      periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 1, (Chronology) islamicChronology0);
      Locale locale0 = Locale.ITALY;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("x<$^R}");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      periodPrinter0.printTo((Writer) bufferedWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("ITA", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix("0yXw*KMRk1%", "0yXw*KMRk1%");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Period period0 = new Period(93000L, 2147483647000L, (PeriodType) null);
      Period period1 = period0.plusMillis((-2115));
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period1, (Locale) null);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("x<$^R}");
      periodFormatterBuilder0.printZeroAlways();
      periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toPrinter();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 1, (Chronology) islamicChronology0);
      Locale locale0 = Locale.ITALY;
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "x<$^R}", 45, locale0);
      assertEquals((-46), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("x$^R");
      periodFormatterBuilder0.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("x$^R", "x$^R");
      periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder2.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = new Locale("x$^R", "x$^R");
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "F9-gJK*=8M", 1, locale0);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendHours();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      PeriodType periodType0 = PeriodType.days();
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      // Undeclared exception!
      try { 
        periodFormatter1.parsePeriod("wFS]g)t-g.^;Bn~#`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"wFS]g)t-g.^;Bn~#`\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      periodFormatterBuilder0.appendSuffix("0Xw*KMF6HRk1%", "0Xw*KMF6HRk1%");
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("illegal n0xw*kmf6hrk1%ts: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"illegal n0xw*kmf6hrk1%ts: \"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendYears();
      periodFormatterBuilder0.appendSeparatorIfFieldsBefore("I");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "q5*z(->M1X5XQ+a", 5, (Locale) null);
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("x<$^R}");
      periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = new Locale("x<$^R}", "x<$^R}");
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "+- s Zj/Z", 1, locale0);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("8C]f& BTWn.#wy.Lt");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder2.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "8C]f& BTWn.#wy.Lt", 10, (Locale) null);
      assertEquals((-11), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("8CH]& BTWn.#wy.Lt");
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "&r1<.Y.3F.,6:", 10, (Locale) null);
      assertEquals((-11), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("Q,gj");
      periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.GERMANY;
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "Q,gj", 1, locale0);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("0Xw*KMF6HRk1%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0Xw*KMF6HRk1%\" is malformed at \"Xw*KMF6HRk1%\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("Q,gj");
      periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "9223372036854775808", 1, (Locale) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2233720368\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      Days days0 = Days.MIN_VALUE;
      Locale locale0 = Locale.CHINESE;
      int int0 = periodPrinter0.calculatePrintedLength(days0, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("8C]f& BTWn.#wy.Lt");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(423, 4, (-1887), false, 1603, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      long long0 = periodFormatterBuilder_FieldFormatter0.getFieldValue(mutablePeriod0);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("x:<>J^");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroNever();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder3.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.ITALY;
      StringBuffer stringBuffer0 = new StringBuffer("x:<>J^");
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("x:<>J^", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("OF![]ezn$b+]", "pwi");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1732218858), (-1732218858), 2699, true, 6, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix0);
      Period period0 = Period.years(6);
      long long0 = periodFormatterBuilder_FieldFormatter0.getFieldValue(period0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("x:2m*<>JP^");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroRarelyFirst();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder3.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.FRENCH;
      mutablePeriod0.addHours(19);
      StringBuffer stringBuffer0 = new StringBuffer();
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder");
      periodFormatterBuilder1.printZeroRarelyFirst();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithMillis();
      periodFormatterBuilder3.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.ITALY;
      StringBuffer stringBuffer0 = new StringBuffer("SST");
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals(3, stringBuffer0.length());
      assertEquals("SST", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(51, 51, 51, false, 51, periodFormatterBuilder_FieldFormatterArray0, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      Hours hours0 = Hours.MIN_VALUE;
      long long0 = periodFormatterBuilder_FieldFormatter0.getFieldValue(hours0);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter(" as this period contains months and months vary in length");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Locale locale0 = Locale.KOREA;
      Months months0 = Months.TWELVE;
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) months0, locale0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("82`dH\"=ZW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"82`dH\"=ZW\" is malformed at \"`dH\"=ZW\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("0yXw*KMRk1%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0yXw*KMRk1%\" is malformed at \"yXw*KMRk1%\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendHours();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("0yXw*KMRk1%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0yXw*KMRk1%\" is malformed at \"yXw*KMRk1%\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMinutes();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("5Z/;jN)D86#Ao'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"5Z/;jN)D86#Ao'\" is malformed at \"Z/;jN)D86#Ao'\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("_s,WEoQ6m\"L)\"", "*dQ9Me%");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-3), (-3), (-3), false, (-3), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3091L), periodType0, (Chronology) gJChronology0);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, (-3), 5);
      assertEquals(7, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("-");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      Locale locale0 = Locale.FRANCE;
      int int0 = periodFormatterBuilder_Separator0.parseInto((ReadWritablePeriod) null, "", (-2471), locale0);
      assertEquals((-2471), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("zSh)zv)", "zSh)zv)", stringArray0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendYears();
      periodFormatterBuilder0.appendSeparatorIfFieldsBefore("TJ`!DMfj[5[X9V((Y0");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.ITALY;
      StringBuffer stringBuffer0 = new StringBuffer();
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("TJ`!DMfj[5[X9V((Y0", "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField", stringArray0, periodPrinter0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodPrinter0, periodFormatterBuilder_Literal0);
      periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("0TJ`!DMfj[5[X9V((Y0org.joda.time.chrono.ZonedChronology$ZonedDateTimeField0TJ`!DMfj[5[X9V((Y0", stringBuffer0.toString());
      assertEquals(93, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.FRANCE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.joda.time.format.PeriodFormatterBuilder$Composite";
      stringArray0[1] = " + ";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("WMya&jC9c7U'JDY");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("-", " + ", stringArray0, periodPrinter0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodPrinter0, periodFormatterBuilder_Literal0);
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator("F4C'*", "F4C'*");
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendYears();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.ITALY;
      int int0 = periodPrinter0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.forLanguageTag("No field to apply suffix to");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "No field to apply suffix to";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("h4", "Printing is not supported", stringArray0, periodPrinter0, (PeriodParser) null, false, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodPrinter0, (PeriodParser) null);
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 1, 1, 1, 1, 1, 1);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
      String string0 = periodFormatter0.print(mutablePeriod0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      periodFormatterBuilder0.appendSeparator("F4C'*", "F4C'*");
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendYears();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      StringBuffer stringBuffer0 = new StringBuffer("x<$^R}");
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.ITALY;
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals(18, stringBuffer0.length());
      assertEquals("x<$^R}1F4C'*1.0011", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      StringBuffer stringBuffer0 = new StringBuffer("dSb`h2K04VH]");
      Locale locale0 = Locale.KOREA;
      Months months0 = Months.TWELVE;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("dSb`h2K04VH]", "0xw*kmf6hrk1%", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) months0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("x:<^");
      periodFormatterBuilder2.appendSecondsWithMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder2.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
      // Undeclared exception!
      try { 
        periodFormatter0.printTo((Writer) null, (ReadablePeriod) mutablePeriod0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("x<$^R}");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.ITALY;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("x<$^R}");
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("it_IT", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.ITALY;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7Gy5mPt b5Pe,_^d'C");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "hourOfDay";
      stringArray0[1] = "<0U0]qF\"drO6Ogf";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("7Gy5mPt b5Pe,_^d'C", "kX]m{", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      periodFormatterBuilder_Separator1.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("ITA", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendDays();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.ITALY;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Pu%'pxn^v77B0");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("|jm%~c94", "F\";L", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      periodFormatterBuilder_Separator0.printTo((Writer) bufferedWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("ita", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendDays();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      periodFormatterBuilder1.appendYears();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.ITALY;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Pu%'pxn^v77B0");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("|jm%~c94", "F\";L", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      periodFormatterBuilder_Separator0.printTo((Writer) bufferedWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("it", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Lj[E6Ium{3(i^", "o`fec7s2rp'", (String[]) null, periodPrinter0, periodFormatterBuilder_Composite0, false, false);
      File file0 = MockFile.createTempFile("!o`fec7s2rp", "!GqFL(pLB~D");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.KOREAN;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator((String) null, (String) null, (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "p@<$^r}", (-83), locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.ROOT;
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "", (-1), locale0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("org.joda.time.convert.DateConvrter");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.ROOT;
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "org.joda.time.convert.DateConvrter", (-1), locale0);
      assertEquals((-35), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      periodFormatterBuilder1.appendMillis3Digit();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("-g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-g\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite1 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toParser();
      assertNotSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(set0);
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = null;
      try {
        periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 3
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodParser periodParser0 = periodFormatterBuilder1.toParser();
      assertNotSame(periodParser0, periodFormatterBuilder_Composite0);
  }
}
