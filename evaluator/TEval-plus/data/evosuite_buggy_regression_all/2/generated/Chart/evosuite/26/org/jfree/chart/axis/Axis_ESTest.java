/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:21:56 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      extendedCategoryAxis0.setFixedDimension(1.0);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertEquals(1.0, extendedCategoryAxis0.getFixedDimension(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryAxis categoryAxis1 = (CategoryAxis)categoryAxis0.clone();
      assertTrue(categoryAxis1.isTickLabelsVisible());
      assertTrue(categoryAxis1.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertNotSame(categoryAxis1, categoryAxis0);
      assertEquals(0.0, categoryAxis1.getLabelAngle(), 0.01);
      assertFalse(categoryAxis1.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis1.isVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      extendedCategoryAxis0.setTickMarkOutsideLength(0.3F);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertEquals(0.3F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      extendedCategoryAxis0.setLabelToolTip("hx ,T8_4b");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
      assertFalse(extendedCategoryAxis1.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis1.isVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'axis' agument.");
      logarithmicAxis0.getLabelURL();
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("nh${RjN~45&w\"C ?");
      periodAxis0.getLabelToolTip();
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      extendedCategoryAxis0.setTickMarkInsideLength((-2083.3738F));
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertEquals((-2083.3738F), extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      assertTrue(extendedCategoryAxis0.isVisible());
      
      extendedCategoryAxis0.setVisible(true);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setLabel("fyl{Ax'I");
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      extendedCategoryAxis0.setLabel("hx ,T8_4b");
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(553.8617475505, 1986.38238327681, (String) null);
      cyclicNumberAxis0.setLabel((String) null);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("nh${FjN~X4%&w\"bC ?");
      // Undeclared exception!
      try { 
        logarithmicAxis0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DateAxis dateAxis0 = new DateAxis("OG*g");
      dateAxis0.setLabelFont(numberAxis3D0.DEFAULT_AXIS_LABEL_FONT);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isAxisLineVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "_Q");
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      extendedCategoryAxis0.setLabelInsets(extendedCategoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertEquals(2.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.equals((Object)extendedCategoryAxis1));
      assertFalse(boolean0);
      assertFalse(extendedCategoryAxis1.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis1.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis1.isVisible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("7.OU4nFGx;CO[");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setAxisLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      BasicStroke basicStroke0 = (BasicStroke)PolarPlot.DEFAULT_GRIDLINE_STROKE;
      extendedCategoryAxis0.setAxisLineStroke(basicStroke0);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertFalse(extendedCategoryAxis1.isTickMarksVisible());
      assertTrue(extendedCategoryAxis1.isVisible());
      assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(boolean0);
      assertTrue(extendedCategoryAxis1.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      // Undeclared exception!
      try { 
        categoryAxis0.setAxisLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      
      subCategoryAxis0.setTickLabelsVisible(true);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      extendedCategoryAxis0.setTickLabelFont(extendedCategoryAxis0.DEFAULT_AXIS_LABEL_FONT);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertTrue(extendedCategoryAxis1.isAxisLineVisible());
      assertFalse(extendedCategoryAxis1.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis1.isVisible());
      assertFalse(boolean0);
      assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("XUB1G60Il(F>*W]");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      subCategoryAxis0.setTickLabelFont(subCategoryAxis0.DEFAULT_TICK_LABEL_FONT);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      // Undeclared exception!
      try { 
        categoryAxis0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("1fSvqM");
      // Undeclared exception!
      try { 
        dateAxis0.setTickLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(numberAxis3D0.isTickMarksVisible());
      
      numberAxis3D0.setTickMarksVisible(true);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      extendedCategoryAxis0.setTickMarkStroke(thermometerPlot0.DEFAULT_OUTLINE_STROKE);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertEquals(0.0F, extendedCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isTickLabelsVisible());
      assertFalse(extendedCategoryAxis1.isTickMarksVisible());
      assertFalse(boolean0);
      assertTrue(extendedCategoryAxis1.isVisible());
      assertTrue(extendedCategoryAxis1.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setTickMarkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DateAxis dateAxis0 = new DateAxis("Fmw%sr]J?~");
      dateAxis0.setTickMarkStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isAxisLineVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("h ,T8v_4b");
      extendedCategoryAxis0.setTickMarkPaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("h ,T8v_4b");
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertFalse(boolean0);
      assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
      assertFalse(extendedCategoryAxis1.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("WZ-r");
      // Undeclared exception!
      try { 
        logarithmicAxis0.setTickMarkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
      assertEquals(10, bufferedImage0.getWidth());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      extendedCategoryAxis0.removeChangeListener(thermometerPlot0);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Unrecognised 'edge' argument.");
      CategoryPlot categoryPlot0 = new CategoryPlot();
      extendedCategoryAxis0.removeChangeListener(categoryPlot0);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("XB1G60Il(xkF>*W]");
      boolean boolean0 = subCategoryAxis0.hasListener(thermometerPlot0);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertFalse(boolean0);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("guHd(kO@!N6pR)m");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      boolean boolean0 = subCategoryAxis0.hasListener(combinedDomainCategoryPlot0);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertTrue(boolean0);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)subCategoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      AxisState axisState0 = new AxisState(0.05);
      AxisState axisState1 = subCategoryAxis0.drawLabel("", graphics2D0, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, axisState0, plotRenderingInfo0);
      assertFalse(numberAxis3D0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.05, axisState1.getCursor(), 0.01);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("'2/");
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)subCategoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals((-2.484375), rectangle2D_Double0.x, 0.01);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("XUB1G60Il(F>*W]");
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3, 1839, (double) 1839, 1885.0972859853914, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(800, 500, 82.473, 0.0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RectangleEdge rectangleEdge0 = categoryPlot0.getDomainAxisEdge(0);
      // Undeclared exception!
      try { 
        subCategoryAxis0.drawLabel("ZOOM_IN_RANGE", graphics2D0, rectangle0, rectangle2D_Double0, rectangleEdge0, (AxisState) null, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'state' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("T(_T!i#,|N\u0000b?s");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      AxisState axisState0 = new AxisState();
      subCategoryAxis0.drawLabel("T(_T!i#,|N\u0000b?s", graphics2D0, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge1, axisState0, plotRenderingInfo0);
      assertEquals((-19.96875), axisState0.getCursor(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("T(_T!i#,|N\u0000b?s");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      AxisState axisState0 = new AxisState();
      subCategoryAxis0.drawLabel("T(_T!i#,|N\u0000b?s", graphics2D0, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge1, axisState0, plotRenderingInfo0);
      assertEquals(19.96875, axisState0.getCursor(), 0.01);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("T(_T!i#,|N\u0000b?s");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      AxisState axisState0 = new AxisState();
      subCategoryAxis0.drawLabel("a../]S", graphics2D0, rectangle2D_Double0, rectangle2D_Double0, (RectangleEdge) null, axisState0, plotRenderingInfo0);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SymbolAxis symbolAxis0 = new SymbolAxis("(BsE)]QsB", stringArray0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("(BsE)]QsB", symbolAxis0.DEFAULT_AXIS_LABEL_FONT, fastScatterPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      chartRenderingInfo0.setEntityCollection((EntityCollection) null);
      jFreeChart0.createBufferedImage(420, 10, (double) 0.0F, (double) 500, chartRenderingInfo0);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Gll");
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.draw((Graphics2D) null, 1.0, rectangle2D0, rectangle2D0, (RectangleEdge) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("org.jfree.chart.event.AxisChangeListener");
      Rectangle2D rectangle2D0 = subCategoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw(graphics2D0, 0.05, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SubCategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("'2");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw(graphics2D0, 2.0F, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SubCategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("T(_T!i#,|N\u0000b?s");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      subCategoryAxis0.drawAxisLine(graphics2D0, 303.47672606004954, rectangle2D_Double0, rectangleEdge0);
      assertTrue(subCategoryAxis0.isVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("'2");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw(graphics2D0, 0.5F, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge1, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.SubCategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertTrue(extendedCategoryAxis1.isTickLabelsVisible());
      assertFalse(extendedCategoryAxis1.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
      assertTrue(boolean0);
      assertTrue(extendedCategoryAxis1.isVisible());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      extendedCategoryAxis1.setVisible(false);
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertFalse(boolean0);
      assertFalse(extendedCategoryAxis1.isVisible());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      extendedCategoryAxis1.setLabel("&_D7zFdQNui");
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertEquals("&_D7zFdQNui", extendedCategoryAxis1.getLabel());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      Font font0 = new Font("wB-q-.m8a7", 2142991004, 2142991004);
      extendedCategoryAxis0.setLabelFont(font0);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertFalse(boolean0);
      assertTrue(extendedCategoryAxis1.isVisible());
      assertFalse(extendedCategoryAxis0.equals((Object)extendedCategoryAxis1));
      assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isAxisLineVisible());
      assertFalse(extendedCategoryAxis1.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis1.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      assertTrue(extendedCategoryAxis1.equals((Object)extendedCategoryAxis0));
      
      extendedCategoryAxis1.setLabelPaint(extendedCategoryAxis0.DEFAULT_TICK_MARK_PAINT);
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertFalse(extendedCategoryAxis1.equals((Object)extendedCategoryAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
      
      extendedCategoryAxis1.setLabelAngle(1);
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      assertTrue(extendedCategoryAxis1.equals((Object)extendedCategoryAxis0));
      
      extendedCategoryAxis1.setLabelURL("hx ,T8_4b");
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      extendedCategoryAxis1.setAxisLineVisible(false);
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertFalse(extendedCategoryAxis1.isAxisLineVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(")Mw/k#");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis(")Mw/k#");
      assertTrue(extendedCategoryAxis1.equals((Object)extendedCategoryAxis0));
      
      extendedCategoryAxis1.setAxisLinePaint(extendedCategoryAxis0.DEFAULT_TICK_LABEL_PAINT);
      boolean boolean0 = extendedCategoryAxis0.equals(extendedCategoryAxis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("#)+^W#TBE%iEV");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("#)+^W#TBE%iEV");
      extendedCategoryAxis1.setTickLabelsVisible(false);
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertFalse(extendedCategoryAxis1.isTickLabelsVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      assertTrue(extendedCategoryAxis1.equals((Object)extendedCategoryAxis0));
      
      extendedCategoryAxis1.setTickLabelPaint(thermometerPlot0.DEFAULT_OUTLINE_PAINT);
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      assertTrue(extendedCategoryAxis1.equals((Object)extendedCategoryAxis0));
      
      extendedCategoryAxis1.setTickLabelInsets(extendedCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertFalse(extendedCategoryAxis1.equals((Object)extendedCategoryAxis0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("hx ,T8_4b");
      assertFalse(extendedCategoryAxis0.isTickMarksVisible());
      
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("hx ,T8_4b");
      extendedCategoryAxis0.setTickMarksVisible(true);
      boolean boolean0 = extendedCategoryAxis1.equals(extendedCategoryAxis0);
      assertFalse(boolean0);
  }
}
