/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:18:49 GMT 2023
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.DefaultKeyedValues;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultKeyedValues_ESTest extends DefaultKeyedValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      defaultKeyedValues0.addValue(comparable0, (Number) null);
      DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
      Comparable<DefaultKeyedValues> comparable1 = (Comparable<DefaultKeyedValues>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      defaultKeyedValues1.setValue(comparable1, (Number) null);
      boolean boolean0 = defaultKeyedValues1.equals(defaultKeyedValues0);
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      // Undeclared exception!
      try { 
        defaultKeyedValues0.insertValue(3747, (Comparable) null, (double) 3747);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Byte byte0 = new Byte((byte)70);
      defaultKeyedValues0.setValue((Comparable) byte0, (double) (byte)70);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Float float0 = new Float(0.5446046931543879);
      defaultKeyedValues0.addValue((Comparable) float0, (Number) null);
      Object object0 = defaultKeyedValues0.clone();
      boolean boolean0 = defaultKeyedValues0.equals(object0);
      assertTrue(boolean0);
      assertNotSame(object0, defaultKeyedValues0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      List list0 = defaultKeyedValues0.getKeys();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      // Undeclared exception!
      try { 
        defaultKeyedValues0.removeValue((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Long long0 = Long.valueOf((long) 0);
      defaultKeyedValues0.insertValue(0, (Comparable) long0, (Number) long0);
      Number number0 = defaultKeyedValues0.getValue((Comparable) long0);
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Long long0 = Long.valueOf((long) 0);
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getValue((Comparable) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: 0
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      // Undeclared exception!
      try { 
        defaultKeyedValues0.addValue((Comparable) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      // Undeclared exception!
      try { 
        defaultKeyedValues0.insertValue((-1476), (Comparable) long0, (Number) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        defaultKeyedValues0.insertValue(0, (Comparable) null, (Number) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Long long0 = Long.valueOf((long) 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.insertValue(0, (Comparable) long0, (Number) long0);
      defaultKeyedValues0.insertValue(0, (Comparable) long0, (Number) long0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Long long0 = Long.valueOf((long) 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.insertValue(0, (Comparable) long0, (Number) long0);
      // Undeclared exception!
      try { 
        defaultKeyedValues0.insertValue(1, (Comparable) long0, (Number) long0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Long long0 = Long.valueOf((long) 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      defaultKeyedValues0.addValue((Comparable) long0, (Number) long0);
      defaultKeyedValues0.addValue((Comparable) comparable0, (double) 0);
      defaultKeyedValues0.removeValue(0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Long long0 = Long.valueOf((long) 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.insertValue(0, (Comparable) long0, (Number) long0);
      defaultKeyedValues0.removeValue((Comparable) long0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.removeValue((Comparable) 1);
      assertEquals(0, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Long long0 = Long.valueOf((long) 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.insertValue(0, (Comparable) long0, (Number) long0);
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.sortByKeys(sortOrder0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Byte byte0 = Byte.valueOf((byte)1);
      defaultKeyedValues0.addValue((Comparable) byte0, 1.0);
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      defaultKeyedValues0.sortByValues(sortOrder0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Long long0 = Long.valueOf((long) 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      boolean boolean0 = defaultKeyedValues0.equals(long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Long long0 = Long.valueOf((long) 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.insertValue(0, (Comparable) long0, (Number) long0);
      DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
      boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Long long0 = Long.valueOf((long) 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.insertValue(0, (Comparable) long0, (Number) long0);
      Object object0 = defaultKeyedValues0.clone();
      boolean boolean0 = defaultKeyedValues0.equals(object0);
      assertTrue(boolean0);
      assertNotSame(object0, defaultKeyedValues0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Long long0 = Long.valueOf((long) 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.insertValue(0, (Comparable) long0, (Number) long0);
      DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues)defaultKeyedValues0.clone();
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      
      defaultKeyedValues1.addValue((Comparable) long0, (-1740.174050189592));
      boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.hashCode();
  }
}
