/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:04:27 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReferenceType_ESTest extends ReferenceType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.refine(class0, typeBindings0, referenceType0, (JavaType[]) null);
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<ArrayType> class1 = ArrayType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType javaType0 = referenceType0.getReferencedType();
      assertFalse(javaType0.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      boolean boolean0 = referenceType0.isReferenceType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      Class<String> class0 = String.class;
      Class<CollectionType> class1 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = new ReferenceType(simpleType0, resolvedRecursiveType0);
      String string0 = referenceType0.toString();
      assertEquals("[reference type, class java.lang.Class<java.lang.String<[recursive type; UNRESOLVED>]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0]);
      String string0 = referenceType0.getErasedSignature();
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals("Lcom/fasterxml/jackson/databind/type/SimpleType;", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      Class<String> class0 = String.class;
      Class<CollectionType> class1 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = new ReferenceType(simpleType0, resolvedRecursiveType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0._narrow(class0);
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      boolean boolean0 = referenceType0.hasContentType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ReferenceType.construct(class0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      StringBuilder stringBuilder0 = new StringBuilder("Ljava/lang/Class;");
      referenceType0.getGenericSignature(stringBuilder0);
      assertEquals("Ljava/lang/Class;Ljava/lang/Class<Ljava/lang/Class;>;", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      JavaType javaType0 = referenceType0.getAnchorType();
      assertFalse(javaType0.useStaticType());
      assertNotNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      referenceType0.getContentType();
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings0);
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, arrayType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType1, (JavaType[]) null, (JavaType) collectionLikeType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentType(collectionLikeType1);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentType(resolvedRecursiveType0);
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(typeBindings0);
      ReferenceType referenceType2 = referenceType1.withTypeHandler(typeBindings0);
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType2.isAnchorType());
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertFalse(referenceType2.useStaticType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(class0);
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.equals((Object)referenceType0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler((Object) null);
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(arrayType0);
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withValueHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(typeBindings0);
      boolean boolean0 = referenceType1.isAnchorType();
      assertTrue(referenceType0.isAnchorType());
      assertFalse(boolean0);
      assertTrue(referenceType0.equals((Object)referenceType1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      assertSame(referenceType2, referenceType1);
      assertFalse(referenceType2.isAnchorType());
      assertTrue(referenceType0.equals((Object)referenceType1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      boolean boolean0 = referenceType0.isAnchorType();
      assertFalse(referenceType0.useStaticType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1, 1);
      TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
      Class<HashMap> class1 = HashMap.class;
      Class<SimpleType> class2 = SimpleType.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class0);
      JavaType[] javaTypeArray0 = new JavaType[3];
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) mapType0, javaTypeArray0, (JavaType) referenceType0);
      boolean boolean0 = referenceType0.equals(collectionType0);
      assertFalse(boolean0);
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      boolean boolean0 = referenceType0.equals(referenceType0);
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      boolean boolean0 = referenceType0.equals((Object) null);
      assertFalse(referenceType0.useStaticType());
      assertFalse(boolean0);
      assertTrue(referenceType0.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      boolean boolean0 = referenceType1.equals(referenceType0);
      assertFalse(referenceType1.isAnchorType());
      assertTrue(boolean0);
      assertTrue(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(simpleType0, collectionLikeType0);
      boolean boolean0 = referenceType0.equals(referenceType1);
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(boolean0);
  }
}
