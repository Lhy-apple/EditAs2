/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:58:47 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReferenceType_ESTest extends ReferenceType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) "", (Object) "");
      referenceType0.getParameterSource();
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, simpleType0, false);
      String string0 = referenceType0.getGenericSignature();
      assertEquals("Ljava/lang/String<Ljava/lang/String;;", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, javaType0, (Object) javaType0, (Object) javaType0);
      referenceType0.getReferencedType();
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, simpleType0, true);
      boolean boolean0 = referenceType0.isReferenceType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, simpleType0, false);
      String string0 = referenceType0.toString();
      assertEquals("[reference type, class java.lang.String<java.lang.String<[simple type, class java.lang.String]>]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, simpleType0, false);
      String string0 = referenceType0.getErasedSignature();
      assertEquals("Ljava/lang/String;", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, simpleType0, false);
      Class<Object> class1 = Object.class;
      JavaType javaType0 = referenceType0._narrow(class1);
      assertTrue(javaType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, simpleType0, false);
      int int0 = referenceType0.containedTypeCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) "", (Object) "");
      ReferenceType referenceType1 = referenceType0.withTypeHandler("");
      assertFalse(referenceType1.useStaticType());
      assertNotSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      CollectionType collectionType0 = CollectionType.construct(class0, mapLikeType0);
      Object object0 = new Object();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) collectionType0, (Object) class0, object0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
      assertSame(referenceType1, referenceType0);
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      Object object0 = new Object();
      MapLikeType mapLikeType0 = new MapLikeType(class0, simpleType0, simpleType0, simpleType0, object0, false);
      ReferenceType referenceType0 = new ReferenceType(class0, mapLikeType0, object0, object0, true);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(object0);
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.instance;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
      Object object0 = new Object();
      Class<Integer> class1 = Integer.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, javaType0, (Object) typeFactory0, object0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(typeFactory0);
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, simpleType0, false);
      ReferenceType referenceType1 = referenceType0.withValueHandler(simpleType0);
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, simpleType0, false);
      Class<Object> class1 = Object.class;
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(class1);
      assertNotSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, simpleType0, false);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, simpleType0, false);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      assertTrue(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      Integer integer0 = new Integer(999);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, integer0, "", true);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, simpleType0, false);
      JavaType javaType0 = referenceType0.containedTypeOrUnknown((-121));
      assertFalse(javaType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) collectionType0, (Object) class0, (Object) "");
      JavaType javaType1 = referenceType0.containedType(0);
      assertFalse(referenceType0.useStaticType());
      assertNotNull(javaType1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      ReferenceType referenceType0 = new ReferenceType(class0, collectionType0, collectionType0, class0, true);
      String string0 = referenceType0.containedTypeName((-1106));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) collectionType0, (Object) class0, (Object) "");
      String string0 = referenceType0.containedTypeName(0);
      assertFalse(referenceType0.useStaticType());
      assertNotNull(string0);
      assertEquals("T", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, simpleType0, false);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(class0);
      boolean boolean0 = referenceType0.equals(referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) "", (Object) "");
      boolean boolean0 = referenceType0.equals(referenceType0);
      assertFalse(referenceType0.useStaticType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) "", (Object) null);
      boolean boolean0 = referenceType0.equals((Object) null);
      assertFalse(referenceType0.useStaticType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, simpleType0, simpleType0, false);
      boolean boolean0 = referenceType0.equals("Ljava/lang/String<Ljava/lang/String;;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeFactory typeFactory0 = TypeFactory.instance;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
      Object object0 = new Object();
      Class<Integer> class1 = Integer.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, javaType0, (Object) typeFactory0, object0);
      Class<Object> class2 = Object.class;
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class2, (JavaType) referenceType0, (Object) "", object0);
      boolean boolean0 = referenceType0.equals(referenceType1);
      assertFalse(boolean0);
      assertFalse(referenceType1.useStaticType());
  }
}
