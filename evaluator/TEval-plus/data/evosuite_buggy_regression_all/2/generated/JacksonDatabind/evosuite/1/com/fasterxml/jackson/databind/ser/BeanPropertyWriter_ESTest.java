/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:55:36 GMT 2023
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.time.temporal.ChronoUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanPropertyWriter_ESTest extends BeanPropertyWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      Class<BeanSerializer> class0 = BeanSerializer.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(")qto output; max is 0106FFF av ter RFC 4627", annotationIntrospector0, true);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_UNKNOWN_SERIALIZER, (TypeSerializer) null, mapLikeType0, false, coreXMLSerializers_XMLGregorianCalendarSerializer0);
      Class<Annotation> class1 = Annotation.class;
      beanPropertyWriter0.getAnnotation(class1);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, false);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      JsonSerializer<NamedType> jsonSerializer0 = (JsonSerializer<NamedType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, jsonSerializer0, asArrayTypeSerializer0, (JavaType) null, false, typeFactory0);
      beanPropertyWriter0.isRequired(annotationIntrospector1);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, false);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, (JsonSerializer<?>) null, asArrayTypeSerializer0, (JavaType) null, false, coreXMLSerializers_XMLGregorianCalendarSerializer0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("", "");
      BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0.unwrappingWriter(nameTransformer0);
      assertFalse(beanPropertyWriter1.isRequired());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, false);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, (JsonSerializer<?>) null, asArrayTypeSerializer0, (JavaType) null, false, dOMSerializer0);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        beanPropertyWriter0.getContextAnnotation(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("\"T/|*g&Nr&Yp89>9Vw", annotationIntrospector0, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      BeanPropertyWriter beanPropertyWriter0 = null;
      try {
        beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, asArrayTypeSerializer0, (JavaType) null, false, annotationMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, true);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, (JsonSerializer<?>) null, asArrayTypeSerializer0, (JavaType) null, true, dOMSerializer0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(") to output; max is 0x10FFFF as per RFC 4627", "\"N!*+)! c%*EEOovZ");
      NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
      BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0.rename(nameTransformer_Chained0);
      assertTrue(beanPropertyWriter1.willSuppressNulls());
      assertEquals(") to output; max is 0x10FFFF as per RFC 4627) to output; max is 0x10FFFF as per RFC 4627) to output; max is 0x10FFFF as per RFC 4627\"N!*+)! c%*EEOovZ\"N!*+)! c%*EEOovZ", beanPropertyWriter1.getName());
      assertFalse(beanPropertyWriter1.isRequired());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("SPYgQoK", annotationIntrospector1, false);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      JsonSerializer<NamedType> jsonSerializer0 = (JsonSerializer<NamedType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, jsonSerializer0, asArrayTypeSerializer0, (JavaType) null, false, typeFactory0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer((String) null, (String) null);
      BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0.rename(nameTransformer0);
      assertSame(beanPropertyWriter1, beanPropertyWriter0);
      assertTrue(beanPropertyWriter1.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("No 'injectableValues' configured, can not inject value with id [", annotationIntrospector1, true);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      JsonSerializer<NamedType> jsonSerializer0 = (JsonSerializer<NamedType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, jsonSerializer0, asArrayTypeSerializer0, (JavaType) null, true, typeFactory0);
      // Undeclared exception!
      try { 
        beanPropertyWriter0.assignSerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not override serializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, false);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      JsonSerializer<NamedType> jsonSerializer0 = (JsonSerializer<NamedType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, jsonSerializer0, asArrayTypeSerializer0, (JavaType) null, false, typeFactory0);
      JsonSerializer<Object> jsonSerializer1 = beanPropertyWriter0._serializer;
      beanPropertyWriter0.assignSerializer(jsonSerializer1);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, false);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      Class<Annotation> class0 = Annotation.class;
      Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ArrayType arrayType0 = ArrayType.construct(simpleType0, class1, annotationIntrospector0);
      MapType mapType0 = MapType.construct(class0, arrayType0, arrayType0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, simpleType0, (JsonSerializer<?>) null, (TypeSerializer) null, mapType0, false, mapType0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      beanPropertyWriter0.assignNullSerializer(serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      // Undeclared exception!
      try { 
        beanPropertyWriter0.assignNullSerializer(serializerProvider0.DEFAULT_UNKNOWN_SERIALIZER);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not override null serializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, true);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, (JsonSerializer<?>) null, asArrayTypeSerializer0, (JavaType) null, true, dOMSerializer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      beanPropertyWriter0.assignNullSerializer(serializerProvider0.DEFAULT_UNKNOWN_SERIALIZER);
      beanPropertyWriter0.assignNullSerializer(serializerProvider0.DEFAULT_UNKNOWN_SERIALIZER);
      assertTrue(beanPropertyWriter0.hasNullSerializer());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("No 'injectableValues' configured, can not inject value with id [", annotationIntrospector1, true);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, (JsonSerializer<?>) null, asArrayTypeSerializer0, (JavaType) null, true, annotationIntrospector1);
      beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) null);
      assertEquals("No 'injectableValues' configured, can not inject value with id [", beanPropertyWriter0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, false);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, dOMSerializer0, asArrayTypeSerializer0, (JavaType) null, false, pOJOPropertyBuilder0);
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
      beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) jsonObjectFormatVisitor_Base0);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, true);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      JsonSerializer<String> jsonSerializer0 = (JsonSerializer<String>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, jsonSerializer0, asArrayTypeSerializer0, (JavaType) null, true, pOJOPropertyBuilder0);
      beanPropertyWriter0.getInternalSetting(typeFactory0);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, false);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      Class<BeanSerializer> class1 = BeanSerializer.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      MapLikeType mapLikeType0 = MapLikeType.construct(class1, simpleType0, simpleType0);
      MapType mapType0 = MapType.construct(class0, mapLikeType0, mapLikeType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, mapType0);
      JsonSerializer<CoreXMLSerializers.XMLGregorianCalendarSerializer> jsonSerializer0 = (JsonSerializer<CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, collectionLikeType0, jsonSerializer0, (TypeSerializer) null, mapType0, true, class1);
      ChronoUnit chronoUnit0 = ChronoUnit.WEEKS;
      Object object0 = beanPropertyWriter0.setInternalSetting(annotationIntrospector0, chronoUnit0);
      beanPropertyWriter0.setInternalSetting(object0, (Object) null);
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      Class<BeanSerializer> class0 = BeanSerializer.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(")qto output; max is 0106FFF av ter RFC 4627", annotationIntrospector0, true);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_UNKNOWN_SERIALIZER, (TypeSerializer) null, mapLikeType0, true, coreXMLSerializers_XMLGregorianCalendarSerializer0);
      Object object0 = beanPropertyWriter0.removeInternalSetting(annotatedField0);
      assertTrue(beanPropertyWriter0.hasSerializer());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, false);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      JsonSerializer<NamedType> jsonSerializer0 = (JsonSerializer<NamedType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, jsonSerializer0, asArrayTypeSerializer0, (JavaType) null, false, typeFactory0);
      boolean boolean0 = beanPropertyWriter0.hasSerializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, true);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, (JsonSerializer<?>) null, asArrayTypeSerializer0, (JavaType) null, true, dOMSerializer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      beanPropertyWriter0.assignNullSerializer(serializerProvider0.DEFAULT_UNKNOWN_SERIALIZER);
      boolean boolean0 = beanPropertyWriter0.hasNullSerializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, false);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      Class<BeanSerializer> class1 = BeanSerializer.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      MapLikeType mapLikeType0 = MapLikeType.construct(class1, simpleType0, simpleType0);
      MapType mapType0 = MapType.construct(class0, mapLikeType0, mapLikeType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, mapType0);
      JsonSerializer<CoreXMLSerializers.XMLGregorianCalendarSerializer> jsonSerializer0 = (JsonSerializer<CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, collectionLikeType0, jsonSerializer0, (TypeSerializer) null, mapType0, false, class1);
      Class<?> class2 = beanPropertyWriter0.getRawSerializationType();
      assertTrue(beanPropertyWriter0.hasSerializer());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, false);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      JsonSerializer<NamedType> jsonSerializer0 = (JsonSerializer<NamedType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      Version version0 = new Version((-283), (-283), (-283), " since it is not abstract", "", "");
      SimpleModule simpleModule0 = new SimpleModule(version0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, jsonSerializer0, asArrayTypeSerializer0, (JavaType) null, true, simpleModule0);
      beanPropertyWriter0.getRawSerializationType();
      assertTrue(beanPropertyWriter0.hasSerializer());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(")qto output; max is 0106FFF av ter RFC 4627", annotationIntrospector0, true);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, simpleType0, true, simpleType0);
      // Undeclared exception!
      try { 
        beanPropertyWriter0.getPropertyType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, false);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, dOMSerializer0, asArrayTypeSerializer0, (JavaType) null, false, pOJOPropertyBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        beanPropertyWriter0.depositSchemaProperty((ObjectNode) null, serializerProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, true);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Field> jsonSerializer0 = (JsonSerializer<Field>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonSerializer0).toString();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, simpleType0, jsonSerializer0, (TypeSerializer) null, simpleType0, true, (Object) null);
      assertTrue(beanPropertyWriter0.hasSerializer());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      beanPropertyWriter0.depositSchemaProperty(objectNode0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertFalse(beanPropertyWriter0.isRequired());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      Class<BeanSerializer> class0 = BeanSerializer.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(")qto output; max is 0106FFF av ter RFC 4627", annotationIntrospector0, true);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, simpleType0, defaultSerializerProvider_Impl0.DEFAULT_UNKNOWN_SERIALIZER, (TypeSerializer) null, mapLikeType0, false, coreXMLSerializers_XMLGregorianCalendarSerializer0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      beanPropertyWriter0.depositSchemaProperty(objectNode0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertEquals(1, objectNode0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, true);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      JsonSerializer<String> jsonSerializer0 = (JsonSerializer<String>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jsonSerializer0).toString();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, jsonSerializer0, asArrayTypeSerializer0, (JavaType) null, true, pOJOPropertyBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      try { 
        objectMapper1.writeValueAsBytes(beanPropertyWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class org.evosuite.shaded.org.mockito.internal.invocation.mockref.MockWeakReference and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[\"serializer\"]->com.fasterxml.jackson.databind.JsonSerializer$MockitoMock$1747884816[\"mockitoInterceptor\"]->org.evosuite.shaded.org.mockito.internal.creation.bytebuddy.MockMethodInterceptor[\"mockHandler\"]->org.evosuite.shaded.org.mockito.internal.handler.InvocationNotifierHandler[\"invocationContainer\"]->org.evosuite.shaded.org.mockito.internal.stubbing.InvocationContainerImpl[\"invocationForStubbing\"]->org.evosuite.shaded.org.mockito.internal.invocation.InvocationMatcher[\"invocation\"]->org.evosuite.shaded.org.mockito.internal.invocation.InterceptedInvocation[\"mockRef\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.impl.UnknownSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, true);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, (JsonSerializer<?>) null, asArrayTypeSerializer0, (JavaType) null, true, dOMSerializer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      beanPropertyWriter0.assignNullSerializer(serializerProvider0.DEFAULT_UNKNOWN_SERIALIZER);
      try { 
        beanPropertyWriter0.serializeAsPlaceholder(dOMSerializer0, (JsonGenerator) null, serializerProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, true);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, (JavaType) null, (JsonSerializer<?>) null, asArrayTypeSerializer0, (JavaType) null, true, ") to output; max is 0x10FFFF as per RFC 4627");
      SerializedString serializedString0 = new SerializedString(") to output; max is 0x10FFFF as per RFC 4627");
      try { 
        beanPropertyWriter0.serializeAsColumn(serializedString0, (JsonGenerator) null, (SerializerProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, false);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      Class<AnnotatedField> class1 = AnnotatedField.class;
      MapType mapType0 = MapType.construct(class1, simpleType0, mapLikeType0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, simpleType0, (JsonSerializer<?>) null, (TypeSerializer) null, mapType0, true, (Object) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      try { 
        beanPropertyWriter0._handleSelfReference(annotatedField0, serializerProvider0.DEFAULT_UNKNOWN_SERIALIZER);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Direct self-reference leading to cycle
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(") to output; max is 0x10FFFF as per RFC 4627", annotationIntrospector1, false);
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, (AnnotationMap) null);
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      Class<BeanSerializer> class1 = BeanSerializer.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      MapLikeType mapLikeType0 = MapLikeType.construct(class1, simpleType0, simpleType0);
      MapType mapType0 = MapType.construct(class0, mapLikeType0, mapLikeType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, mapType0);
      JsonSerializer<CoreXMLSerializers.XMLGregorianCalendarSerializer> jsonSerializer0 = (JsonSerializer<CoreXMLSerializers.XMLGregorianCalendarSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, (Annotations) null, collectionLikeType0, jsonSerializer0, (TypeSerializer) null, mapType0, true, class1);
      JsonSerializer<Integer> jsonSerializer1 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonSerializer1).usesObjectId();
      beanPropertyWriter0._handleSelfReference(annotatedField0, jsonSerializer1);
      assertTrue(beanPropertyWriter0.willSuppressNulls());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((Field) null, annotationMap0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeSerializer asArrayTypeSerializer0 = new AsArrayTypeSerializer(classNameIdResolver0, (BeanProperty) null);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer", annotationIntrospector0, false);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, (JsonSerializer<?>) null, asArrayTypeSerializer0, (JavaType) null, false, (Object) null);
      // Undeclared exception!
      try { 
        beanPropertyWriter0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanPropertyWriter", e);
      }
  }
}
