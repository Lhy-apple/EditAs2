/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:04:52 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.deser.std.MapDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.sql.ClientInfoStatus;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapDeserializer_ESTest extends MapDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InputStream> class0 = InputStream.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, jsonLocationInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        mapDeserializer0.deserializeWithType(jsonParser0, defaultDeserializationContext_Impl0, (TypeDeserializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.MapDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      MapDeserializer mapDeserializer1 = new MapDeserializer(mapDeserializer0);
      assertFalse(mapDeserializer1.equals((Object)mapDeserializer0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonDeserializer<JsonMappingException> jsonDeserializer0 = (JsonDeserializer<JsonMappingException>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<TextNode> class0 = TextNode.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, jsonLocationInstantiator0, stdKeyDeserializer_DelegatingKD0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType1 = mapDeserializer0.getValueType();
      assertFalse(javaType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        mapDeserializer0.findBackReference("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not handle managed/back reference '': type: container deserializer of type com.fasterxml.jackson.databind.deser.std.MapDeserializer returned null for 'getContentDeserializer()'
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        mapDeserializer0.deserialize((JsonParser) null, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.MapDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Error> class0 = Error.class;
      JsonDeserializer<JsonMappingException> jsonDeserializer0 = (JsonDeserializer<JsonMappingException>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, jsonLocationInstantiator0, stdKeyDeserializer_DelegatingKD0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType1 = mapDeserializer0.getContentType();
      assertNull(javaType1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader(javaType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, stdValueInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved(stdKeyDeserializer_StringKD0, (TypeDeserializer) null, mapDeserializer0, linkedHashSet0);
      assertFalse(mapDeserializer1.isCachable());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, stdValueInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      Class<String> class1 = String.class;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "JSON", false, class1);
      MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved(stdKeyDeserializer_StringKD0, asExternalTypeDeserializer0, fromStringDeserializer_Std0, linkedHashSet0);
      assertFalse(mapDeserializer1.isCachable());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      Class<TextNode> class0 = TextNode.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer_StringKD0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved(stdKeyDeserializer_StringKD0, (TypeDeserializer) null, (JsonDeserializer<?>) null, (HashSet<String>) null);
      assertSame(mapDeserializer1, mapDeserializer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class1, class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(mapType0, stdValueInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
      assertTrue(mapDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonDeserializer<JsonMappingException> jsonDeserializer0 = (JsonDeserializer<JsonMappingException>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<TextNode> class0 = TextNode.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      MapType mapType0 = MapType.construct(class0, javaType0, javaType0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(mapType0, jsonLocationInstantiator0, stdKeyDeserializer_DelegatingKD0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      assertTrue(mapDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Error> class0 = Error.class;
      JsonDeserializer<JsonMappingException> jsonDeserializer0 = (JsonDeserializer<JsonMappingException>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, jsonLocationInstantiator0, stdKeyDeserializer_DelegatingKD0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      String[] stringArray0 = new String[0];
      mapDeserializer0.setIgnorableProperties(stringArray0);
      assertTrue(mapDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonDeserializer<JsonMappingException> jsonDeserializer0 = (JsonDeserializer<JsonMappingException>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<TextNode> class0 = TextNode.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, jsonLocationInstantiator0, stdKeyDeserializer_DelegatingKD0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      String[] stringArray0 = new String[8];
      mapDeserializer0.setIgnorableProperties(stringArray0);
      assertFalse(mapDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        mapDeserializer0.resolve((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.MapDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 3);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, jsonLocationInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        mapDeserializer0.createContextual(defaultDeserializationContext_Impl0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      ObjectReader objectReader0 = objectMapper0.reader(javaType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, stdValueInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved(stdKeyDeserializer_StringKD0, (TypeDeserializer) null, fromStringDeserializer_Std0, linkedHashSet0);
      boolean boolean0 = mapDeserializer1.isCachable();
      assertFalse(boolean0);
      assertTrue(mapDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InputStream> class0 = InputStream.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, jsonLocationInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      // Undeclared exception!
      try { 
        mapDeserializer0.deserialize(jsonParser0, (DeserializationContext) null, (Map<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.MapDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InputStream> class0 = InputStream.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, jsonLocationInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(8);
      mapDeserializer0._readAndBind(jsonParser0, (DeserializationContext) null, hashMap0);
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InputStream> class0 = InputStream.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, jsonLocationInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      mapDeserializer0._readAndBindStringMap(jsonParser0, (DeserializationContext) null, hashMap0);
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 1);
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, stdValueInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("JSON", "JSON");
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLRecoverableException0);
      try { 
        mapDeserializer0.wrapAndThrow(invocationTargetException0, class0, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON (through reference chain: java.lang.reflect.InvocationTargetException[\"JSON\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 1);
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, stdValueInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);
      try { 
        mapDeserializer0.wrapAndThrow(invocationTargetException0, invocationTargetException0, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.lang.reflect.InvocationTargetException) (through reference chain: java.lang.reflect.InvocationTargetException[\"JSON\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Error> class0 = Error.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonDeserializer<JsonMappingException> jsonDeserializer0 = (JsonDeserializer<JsonMappingException>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer_DelegatingKD0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLInvalidAuthorizationSpecException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(">GV2?ff", "Rk>A8]mL?IzP", sQLSyntaxErrorException0);
      MockError mockError0 = new MockError(": value instantiator (", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        mapDeserializer0.wrapAndThrow(mockError0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, stdValueInstantiator0, stdKeyDeserializer_StringKD0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      MockIOException mockIOException0 = new MockIOException((String) null);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      try { 
        mapDeserializer0.wrapAndThrow(mockIOException0, objectIdGenerators_IntSequenceGenerator0, "com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor$Base");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 1);
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      MapDeserializer mapDeserializer0 = new MapDeserializer(javaType0, stdValueInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
      try { 
        mapDeserializer0.wrapAndThrow(jsonMappingException0, "Ljava/lang/Object;", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }
}
