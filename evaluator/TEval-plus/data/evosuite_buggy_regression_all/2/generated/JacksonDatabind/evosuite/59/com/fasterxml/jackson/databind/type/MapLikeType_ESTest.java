/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:01:47 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.time.chrono.IsoEra;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapLikeType_ESTest extends MapLikeType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      String string0 = mapType0.getGenericSignature();
      assertEquals("Ljava/lang/Object<Ljava/lang/Object;Ljava/lang/Object;>;", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      Class<MapLikeType> class0 = MapLikeType.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyType(simpleType0);
      assertFalse(mapLikeType1.useStaticType());
      assertSame(mapLikeType1, mapLikeType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      Class<MapLikeType> class0 = MapLikeType.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withContentTypeHandler(class0);
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      Class<CollectionType> class0 = CollectionType.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyValueHandler(simpleType0);
      assertFalse(mapLikeType1.useStaticType());
      assertTrue(mapLikeType1.hasHandlers());
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      mapLikeType0.getContentTypeHandler();
      assertFalse(mapLikeType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class1, mapType0, mapType0);
      Class<JsonDeserializer> class2 = JsonDeserializer.class;
      JavaType javaType0 = mapLikeType0._narrow(class2);
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      boolean boolean0 = mapType0.isMapLikeType();
      assertTrue(boolean0);
      assertFalse(mapType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      String string0 = mapType0.getErasedSignature();
      assertFalse(mapType0.hasHandlers());
      assertEquals("Ljava/util/HashMap;", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(simpleType0);
      boolean boolean0 = mapLikeType1.equals(mapLikeType0);
      assertTrue(boolean0);
      assertFalse(mapLikeType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      JavaType javaType0 = mapType0.getKeyType();
      assertSame(simpleType0, javaType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      JavaType javaType0 = mapLikeType0.getContentType();
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(mapLikeType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      Object object0 = mapType0.getContentValueHandler();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      Class<String> class2 = String.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class2, (List<JavaType>) stack0);
      JavaType[] javaTypeArray0 = new JavaType[3];
      JavaType javaType0 = mapLikeType0.refine(class0, typeBindings0, mapType0, javaTypeArray0);
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.equals((Object)mapLikeType0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<IsoEra> class1 = IsoEra.class;
      Class<Object> class2 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      boolean boolean0 = mapType0.isContainerType();
      assertFalse(mapType0.hasHandlers());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, mapType0, mapType0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyTypeHandler(mapType0);
      assertFalse(mapLikeType1.useStaticType());
      assertEquals(2, mapLikeType1.containedTypeCount());
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertTrue(mapLikeType1.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, mapType0, mapType0);
      String string0 = mapLikeType0.toString();
      assertEquals("[map-like type; class java.util.HashMap, [map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]] -> [map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]]", string0);
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      Class<JsonSerializer> class0 = JsonSerializer.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, mapType0, mapType0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler("java.lang.Object<java.lang.Object,java.lang.Object>");
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertFalse(mapLikeType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      boolean boolean0 = mapType0.isTrueMapType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapLikeType.upgradeFrom((JavaType) null, (JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      MapLikeType mapLikeType0 = mapType0.withStaticTyping();
      Class<JsonSerializer> class0 = JsonSerializer.class;
      MapLikeType mapLikeType1 = MapLikeType.construct(class0, mapLikeType0, mapType0);
      MapLikeType mapLikeType2 = mapLikeType1.withKeyType(mapType0);
      assertTrue(mapLikeType2.equals((Object)mapLikeType1));
      assertNotSame(mapLikeType2, mapLikeType1);
      assertFalse(mapLikeType2.useStaticType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      JavaType javaType0 = mapLikeType0.withContentType(mapType0);
      assertFalse(mapType0.hasHandlers());
      assertFalse(javaType0.equals((Object)mapLikeType0));
      assertNotSame(javaType0, mapLikeType0);
      assertFalse(javaType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class1, mapType0, mapType0);
      JavaType javaType0 = mapLikeType0.withContentType(mapType0);
      assertSame(javaType0, mapLikeType0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      Class<JsonSerializer> class0 = JsonSerializer.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, mapType0, mapType0);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      MapLikeType mapLikeType2 = mapLikeType1.withStaticTyping();
      assertTrue(mapLikeType2.useStaticType());
      assertTrue(mapLikeType2.equals((Object)mapLikeType0));
      assertNotSame(mapLikeType2, mapLikeType0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      MapType mapType0 = new MapType(simpleType0, (JavaType) null, simpleType0);
      String string0 = mapType0.buildCanonicalName();
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      String string0 = mapType0.buildCanonicalName();
      assertFalse(mapType0.hasHandlers());
      assertEquals("java.util.HashMap<java.lang.Object,java.lang.Object>", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapLikeType mapLikeType0 = mapType0.withTypeHandler(typeFactory0);
      MapType mapType1 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) mapLikeType0, (JavaType) mapType0);
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      Class<Integer> class1 = Integer.class;
      Class<ArrayType> class2 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class2, class1);
      MapLikeType mapLikeType1 = mapLikeType0.withContentValueHandler(class1);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) mapLikeType1, (JavaType) mapLikeType0);
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertTrue(mapType0.hasHandlers());
      assertFalse(mapLikeType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      boolean boolean0 = mapType0.equals(mapType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      boolean boolean0 = mapType0.equals((Object) null);
      assertFalse(mapType0.hasHandlers());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType1 = typeFactory0.constructRawMapType(class0);
      MapType mapType2 = mapType0.withStaticTyping();
      boolean boolean0 = mapType2.equals(mapType1);
      assertFalse(boolean0);
      assertTrue(mapType2.equals((Object)mapType0));
      assertFalse(mapType2.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      MapType mapType1 = mapType0.withKeyType(mapType0);
      boolean boolean0 = mapType1.equals(mapType0);
      assertFalse(boolean0);
      assertFalse(mapType0.equals((Object)mapType1));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      MapType mapType1 = new MapType(mapType0, simpleType0, mapType0);
      boolean boolean0 = mapType1.equals(mapType0);
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(boolean0);
  }
}
