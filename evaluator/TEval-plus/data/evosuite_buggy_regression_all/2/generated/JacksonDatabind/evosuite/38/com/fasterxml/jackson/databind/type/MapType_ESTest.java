/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:58:39 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.type.ClassStack;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapType_ESTest extends MapType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      MapType mapType0 = MapType.construct((Class<?>) class0, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
      assertFalse(mapType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      Class<String> class1 = String.class;
      ClassStack classStack0 = new ClassStack(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      MapType mapType0 = (MapType)typeFactory0._fromAny(classStack0, class0, typeBindings0);
      MapType mapType1 = mapType0.withContentValueHandler((Object) null);
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType1.useStaticType());
      assertEquals(0, mapType1.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      Class<String> class1 = String.class;
      ClassStack classStack0 = new ClassStack(class1);
      Class<Object> class2 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      MapType mapType0 = (MapType)typeFactory0._fromAny(classStack0, class0, typeBindings0);
      MapType mapType1 = (MapType)mapType0._narrow(class2);
      assertFalse(mapType1.useStaticType());
      assertEquals(0, mapType1.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonAutoDetect_Visibility0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      MapType mapType1 = mapType0.withKeyTypeHandler((Object) null);
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonAutoDetect_Visibility0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      MapType mapType1 = mapType0.withKeyValueHandler(objectReader0);
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      Class<String> class1 = String.class;
      ClassStack classStack0 = new ClassStack(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      MapType mapType0 = (MapType)typeFactory0._fromAny(classStack0, class0, typeBindings0);
      MapType mapType1 = mapType0.withContentTypeHandler((Object) null);
      assertTrue(mapType1.equals((Object)mapType0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      Class<String> class1 = String.class;
      ClassStack classStack0 = new ClassStack(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = typeFactory0._fromAny(classStack0, class0, typeBindings0);
      String string0 = javaType0.toString();
      assertEquals(0, javaType0.containedTypeCount());
      assertEquals("[map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]", string0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonAutoDetect_Visibility0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      MapType mapType1 = mapType0.withStaticTyping();
      MapType mapType2 = mapType1.withStaticTyping();
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType2.equals((Object)mapType0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      Class<String> class1 = String.class;
      ClassStack classStack0 = new ClassStack(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = typeFactory0._fromAny(classStack0, class0, typeBindings0);
      JavaType javaType1 = javaType0.withContentType(javaType0);
      assertNotSame(javaType1, javaType0);
      assertFalse(javaType1.equals((Object)javaType0));
      assertEquals(0, javaType1.containedTypeCount());
      assertFalse(javaType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonAutoDetect_Visibility0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class1, class1);
      javaTypeArray0[0] = (JavaType) mapType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      MapType mapType1 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) mapType0, javaTypeArray0, (JavaType) mapType0, javaTypeArray0[0]);
      JavaType javaType0 = mapType1.withContentType(mapType0);
      assertFalse(javaType0.useStaticType());
      assertSame(javaType0, mapType1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonAutoDetect_Visibility0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      MapType mapType1 = mapType0.withKeyType(mapType0);
      assertFalse(mapType1.useStaticType());
      assertNotSame(mapType1, mapType0);
      assertFalse(mapType1.equals((Object)mapType0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = new SimpleType(class0);
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      MapType mapType1 = mapType0.withKeyType(simpleType0);
      assertSame(mapType1, mapType0);
  }
}
