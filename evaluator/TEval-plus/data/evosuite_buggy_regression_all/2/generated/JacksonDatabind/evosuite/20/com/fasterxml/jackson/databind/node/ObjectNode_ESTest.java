/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:57:00 GMT 2023
 */

package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectNode_ESTest extends ObjectNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.addObject();
      ObjectNode objectNode1 = objectNode0.put("/kE.*&^36sv", 1);
      assertFalse(objectNode1.isLong());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      JsonNode jsonNode0 = objectNode0.putAll(objectNode0);
      assertFalse(jsonNode0.isFloatingPointNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      HashMap<String, BinaryNode> hashMap0 = new HashMap<String, BinaryNode>();
      HashMap<String, JsonNode> hashMap1 = new HashMap<String, JsonNode>(hashMap0);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap1);
      Iterator<String> iterator0 = objectNode0.fieldNames();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.putNull("{");
      assertSame(objectNode0, objectNode1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      objectNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      JsonNode jsonNode0 = objectNode0._at(jsonPointer0);
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.put("?8PItG", (short) (byte) (-80));
      assertFalse(objectNode1.isFloatingPointNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.removeAll();
      assertFalse(objectNode1.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      Iterator<JsonNode> iterator0 = objectNode0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      JsonNode jsonNode0 = objectNode0.without("A%UQkkvT'5s9Db");
      assertFalse(jsonNode0.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      JsonToken jsonToken0 = objectNode0.asToken();
      assertFalse(jsonToken0.isNumeric());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      String[] stringArray0 = new String[2];
      ObjectNode objectNode1 = objectNode0.retain(stringArray0);
      assertFalse(objectNode1.isFloatingPointNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      boolean boolean0 = objectNode0.isBinary();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ObjectNode objectNode1 = objectNode0.remove((Collection<String>) arrayList0);
      assertFalse(objectNode1.isBigInteger());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      JsonNode jsonNode0 = objectNode0.remove(":^ cWc$)BnRkK-?Bn");
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      boolean boolean0 = objectNode0.has(2282);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.put("tEUa=e=K", 0L);
      assertSame(objectNode1, objectNode0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put((String) null, (double) (short)676);
      assertFalse(objectNode1.isLong());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = jsonNodeFactory0.objectNode();
      boolean boolean0 = objectNode0.equals(objectNode1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      HashSet<String> hashSet0 = new HashSet<String>();
      ObjectNode objectNode1 = objectNode0.without((Collection<String>) hashSet0);
      assertFalse(objectNode1.isBigInteger());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.put("com.fasterxml.jackson.databind.ext.CoreXMLDeserializers", 1.0F);
      assertEquals("", objectNode1.asText());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      JsonNode jsonNode0 = objectNode0.path((int) (short) (-884));
      assertFalse(jsonNode0.isInt());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      Iterator<Map.Entry<String, JsonNode>> iterator0 = (Iterator<Map.Entry<String, JsonNode>>)objectNode0.fields();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.putPOJO("com.fasterxml.jackson.databind.node.ObjectNode", (Object) null);
      assertFalse(objectNode1.isFloatingPointNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.insertObject(32);
      ObjectNode objectNode1 = objectNode0.put("com.fasterxml.jackson.databind.ext.CoreXMLDeserializers", "com.fasterxml.jackson.databind.ext.CoreXMLDeserializers");
      ObjectNode objectNode2 = objectNode0.deepCopy();
      assertEquals(1, objectNode2.size());
      assertNotSame(objectNode2, objectNode1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      JsonNode jsonNode0 = objectNode0.path(")2u$cwp;");
      assertEquals("", jsonNode0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Long long0 = new Long((-9223372036854775808L));
      ObjectNode objectNode1 = objectNode0.put(")2u$cwp;", long0);
      JsonNode jsonNode0 = objectNode1.path(")2u$cwp;");
      assertTrue(jsonNode0.isLong());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      objectNode0.replace("com.fasterxml.jackson.databind.node.ObjectNode", objectNode0);
      ObjectNode objectNode1 = objectNode0.with("com.fasterxml.jackson.databind.node.ObjectNode");
      assertEquals(1, objectNode1.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("", true);
      // Undeclared exception!
      try { 
        objectNode1.with("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Property '' has value that is not of type ObjectNode (but com.fasterxml.jackson.databind.node.BooleanNode)
         //
         verifyException("com.fasterxml.jackson.databind.node.ObjectNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.insertObject(32);
      objectNode0.replace("", arrayNode0);
      ArrayNode arrayNode1 = objectNode0.withArray("");
      assertEquals(1, arrayNode1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("", false);
      // Undeclared exception!
      try { 
        objectNode1.withArray("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Property '' has value that is not of type ArrayNode (but com.fasterxml.jackson.databind.node.BooleanNode)
         //
         verifyException("com.fasterxml.jackson.databind.node.ObjectNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      Integer integer0 = new Integer(3);
      ObjectNode objectNode1 = objectNode0.put("Can not instantiate abstract type ", integer0);
      JsonNode jsonNode0 = objectNode1.findValue("Property '");
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.with("^atcj?Udz}j}5]/p%E");
      Integer integer0 = new Integer(3);
      ObjectNode objectNode2 = objectNode0.put("Can not instantiate abstract type ", integer0);
      byte[] byteArray0 = new byte[1];
      ObjectNode objectNode3 = objectNode1.put("Property '", byteArray0);
      objectNode2.findValue("Property '");
      assertEquals(2, objectNode0.size());
      assertNotSame(objectNode0, objectNode3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("", true);
      List<JsonNode> list0 = objectNode1.findValues("");
      List<JsonNode> list1 = objectNode0.findParents("yNeq=B98]0ko,*G!A", list0);
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      objectNode0.withArray("mE^M8~nl1Uc^&^");
      Vector<JsonNode> vector0 = new Vector<JsonNode>();
      List<JsonNode> list0 = objectNode0.findValues("", (List<JsonNode>) vector0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      objectNode0.withArray("mE^M8~nl1Uc^&^");
      Vector<JsonNode> vector0 = new Vector<JsonNode>();
      objectNode0.findValues("mE^M8~nl1Uc^&^", (List<JsonNode>) vector0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("", true);
      Stack<String> stack0 = new Stack<String>();
      List<String> list0 = objectNode1.findValuesAsText("sr-3zR8GSf{->Q", (List<String>) stack0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      objectNode0.put("com.fasterxml.jackson.databind.node.ObjectNode", true);
      List<String> list0 = objectNode0.findValuesAsText("com.fasterxml.jackson.databind.node.ObjectNode", (List<String>) null);
      List<String> list1 = objectNode0.findValuesAsText("com.fasterxml.jackson.databind.node.ObjectNode", list0);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      Short short0 = new Short((short)676);
      objectNode0.put("^atcj?Udz}j}5]/p%E", short0);
      ObjectNode objectNode1 = objectNode0.findParent("TR<");
      assertNull(objectNode1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.putObject("Can not instantiate abstract type ");
      objectNode1.putArray("TR<");
      objectNode0.findParent("TR<");
      assertEquals(1, objectNode0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectNode0.withArray("");
      List<JsonNode> list0 = objectNode0.findParents("", (List<JsonNode>) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      objectNode0.putArray("2M PiN&*f?k8& GU");
      Vector<JsonNode> vector0 = new Vector<JsonNode>(1884, (-379));
      objectNode0.findParents("2M PiN&*f?k8& GU", (List<JsonNode>) vector0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("", true);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonNodeFactory0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, pipedOutputStream0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      objectNode1.serialize(uTF8JsonGenerator0, defaultSerializerProvider_Impl0);
      assertFalse(objectNode1.isLong());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.addObject();
      Long long0 = new Long(3848L);
      ObjectNode objectNode1 = objectNode0.put("mg|", long0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectNode1, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-683));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1118), (ObjectCodec) null, byteArrayBuilder0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ShortNode> class0 = ShortNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer(classNameIdResolver0, (BeanProperty) null, "Invalid 'any-setter' annotation on method ");
      objectNode0.serializeWithType(jsonGeneratorDelegate0, defaultSerializerProvider_Impl0, asPropertyTypeSerializer0);
      assertFalse(objectNode0.isInt());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      JsonNode jsonNode0 = objectNode0.set("O<q\"n,", bigIntegerNode0);
      assertNull(jsonNode0.textValue());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      JsonNode jsonNode0 = objectNode0.set("}", (JsonNode) null);
      assertNull(jsonNode0.textValue());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      objectNode0.put(":", true);
      JsonNode jsonNode0 = objectNode0.putAll((Map<String, ? extends JsonNode>) hashMap0);
      assertFalse(jsonNode0.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      HashMap<String, NullNode> hashMap0 = new HashMap<String, NullNode>();
      hashMap0.put("", (NullNode) null);
      objectNode0.putAll((Map<String, ? extends JsonNode>) hashMap0);
      assertEquals(1, objectNode0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      JsonNode jsonNode0 = objectNode0.replace((String) null, (JsonNode) null);
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("com.fasterxml.jackson.databind.node.ObjectNode", true);
      JsonNode jsonNode0 = objectNode1.findValue("com.fasterxml.jackson.databind.node.ObjectNode");
      assertNotNull(jsonNode0);
      
      objectNode1.put(":", jsonNode0);
      assertEquals(JsonToken.VALUE_TRUE, jsonNode0.asToken());
      assertTrue(jsonNode0.booleanValue());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      JsonNode jsonNode0 = objectNode0.put("", (JsonNode) null);
      assertNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("", (Short) null);
      assertFalse(objectNode1.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.put("", (Integer) null);
      assertFalse(objectNode1.isInt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.put("q$W^}(n0DNL}ps/+", (Long) null);
      assertFalse(objectNode1.isLong());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      Float float0 = new Float((-497.028));
      ObjectNode objectNode1 = objectNode0.put("iXLL*g^;~7R1vZ/-,8`", float0);
      assertFalse(objectNode1.isLong());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.put("4>}32k", (Float) null);
      assertSame(objectNode0, objectNode1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      Double double0 = new Double((-3314.50856289017));
      ObjectNode objectNode1 = objectNode0.put("Y H3wu1HRtEbqti", double0);
      assertEquals("", objectNode1.asText());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ObjectNode objectNode0 = arrayNode0.insertObject((-1));
      ObjectNode objectNode1 = objectNode0.put("r'/!UyVR(M7uU`v@m0", (Double) null);
      assertFalse(objectNode1.isFloatingPointNumber());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      ObjectNode objectNode1 = objectNode0.put("P(o^FjX_(", bigDecimal0);
      assertFalse(objectNode1.isFloatingPointNumber());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.put(",UYNm63otMbFrrX1", (BigDecimal) null);
      assertSame(objectNode0, objectNode1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.put((String) null, (String) null);
      assertFalse(objectNode1.isDouble());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Boolean boolean0 = new Boolean(false);
      ObjectNode objectNode1 = objectNode0.put("Hs5MJn578oK[ +?vBd", boolean0);
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.addObject();
      ObjectNode objectNode1 = objectNode0.put("!OBBopl$w#T<", (Boolean) null);
      assertFalse(objectNode1.booleanValue());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.put("ADJUST_DATES_TO_CONTEXT_TIME_ZONE", (byte[]) null);
      assertFalse(objectNode1.isDouble());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      boolean boolean0 = objectNode0.equals(objectNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      boolean boolean0 = objectNode0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      boolean boolean0 = objectNode0.equals(doubleNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.put("}", true);
      String string0 = objectNode1.toString();
      assertEquals("{\"}\":true}", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      ObjectNode objectNode1 = objectNode0.put("}", true);
      objectNode1.replace("(2}\"*g", objectNode0);
      // Undeclared exception!
      try { 
        objectNode1.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }
}
