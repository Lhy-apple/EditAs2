/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:03:33 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.IOException;
import java.io.PipedInputStream;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanPropertyMap_ESTest extends BeanPropertyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, true);
      SettableBeanProperty[] settableBeanPropertyArray0 = beanPropertyMap0.getPropertiesInInsertionOrder();
      assertEquals(0, settableBeanPropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, true);
      int int0 = beanPropertyMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, ")", true, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 27, typeFactory0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withoutProperties(set0);
      assertEquals(1, beanPropertyMap2.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedHashSet0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(true);
      assertNotSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, false);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(false);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Class<Integer> class1 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[6];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "}", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-242), asWrapperTypeDeserializer0, propertyMetadata0);
      arrayList0.add((SettableBeanProperty) creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, true);
      beanPropertyMap0.remove(creatorProperty0);
      BeanPropertyMap beanPropertyMap1 = new BeanPropertyMap(beanPropertyMap0, false);
      assertEquals(0, beanPropertyMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Class<Integer> class1 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[6];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "}", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-242), asWrapperTypeDeserializer0, propertyMetadata0);
      arrayList0.add((SettableBeanProperty) creatorProperty0);
      arrayList0.add((SettableBeanProperty) creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, true);
      beanPropertyMap0.remove(creatorProperty0);
      assertEquals(1, beanPropertyMap0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Class<Integer> class1 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[2];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "}", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-242), asWrapperTypeDeserializer0, propertyMetadata0);
      arrayList0.add((SettableBeanProperty) creatorProperty0);
      arrayList0.add((SettableBeanProperty) creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, true);
      arrayList0.add((SettableBeanProperty) creatorProperty0);
      beanPropertyMap0.init(arrayList0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find("@");
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Class<Integer> class1 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[2];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "}", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-242), asWrapperTypeDeserializer0, propertyMetadata0);
      arrayList0.add((SettableBeanProperty) creatorProperty0);
      arrayList0.add((SettableBeanProperty) creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, true);
      arrayList0.add((SettableBeanProperty) creatorProperty0);
      arrayList0.add((SettableBeanProperty) creatorProperty0);
      beanPropertyMap0.init(arrayList0);
      assertEquals(4, beanPropertyMap0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      stack0.setSize(36);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
      assertEquals(36, beanPropertyMap0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      arrayList0.add((SettableBeanProperty) null);
      arrayList0.add((SettableBeanProperty) null);
      arrayList0.add((SettableBeanProperty) null);
      arrayList0.add((SettableBeanProperty) null);
      arrayList0.add((SettableBeanProperty) null);
      arrayList0.add((SettableBeanProperty) null);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, true);
      assertEquals(6, beanPropertyMap0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Class<Integer> class1 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[6];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "}", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-242), asWrapperTypeDeserializer0, propertyMetadata0);
      arrayList0.add((SettableBeanProperty) creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, true);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      assertEquals(1, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      PropertyName propertyName0 = PropertyName.construct("QIYo", "QIYo");
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Class<Integer> class1 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[0], typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "", true, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1966, annotationMap0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);
      BeanPropertyMap beanPropertyMap3 = beanPropertyMap1.withProperty(creatorProperty0);
      BeanPropertyMap beanPropertyMap4 = beanPropertyMap2.withProperty(creatorProperty0);
      assertSame(beanPropertyMap4, beanPropertyMap3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, ")", true, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 27, typeFactory0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      beanPropertyMap1.assignIndexes();
      assertEquals(0, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, priorityQueue0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll((NameTransformer) null);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayList0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, treeSet0);
      PropertyName propertyName0 = PropertyName.construct("QIYo", "QIYo");
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1966, annotationMap0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("QIYo", "QIYo");
      BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.renameAll(nameTransformer0);
      assertEquals(1, beanPropertyMap2.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
      vector0.add((SettableBeanProperty) null);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer1);
      assertNotSame(beanPropertyMap1, beanPropertyMap0);
      assertEquals(1, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
      HashSet<String> hashSet0 = new HashSet<String>();
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(hashSet0);
      assertSame(beanPropertyMap1, beanPropertyMap0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      arrayDeque0.addFirst("nresolved orward references for: ");
      vector0.add((SettableBeanProperty) null);
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(arrayDeque0);
      assertEquals(0, beanPropertyMap1.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, ")", true, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 27, typeFactory0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      beanPropertyMap0.remove(creatorProperty0);
      // Undeclared exception!
      try { 
        beanPropertyMap1.replace(creatorProperty0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No entry '' found, can't replace
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, treeSet0);
      PropertyName propertyName0 = PropertyName.construct("QIYo", "QIYo");
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1966, annotationMap0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find((-2));
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      MockIOException mockIOException0 = new MockIOException();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1966, mockIOException0, propertyMetadata0);
      beanPropertyMap0.withProperty(creatorProperty0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find((-1));
      assertFalse(settableBeanProperty0.hasViews());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.find((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not pass null property name
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, treeSet0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SQLDataException sQLDataException0 = new SQLDataException("", "N5ZjK:q/^hoMoY9J+");
      MockError mockError0 = new MockError(sQLDataException0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockError0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, objectMapper0, byteQuadsCanonicalizer0, (byte[]) null, 2299, 23, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = beanPropertyMap0.findDeserializeAndSet(uTF8StreamJsonParser0, defaultDeserializationContext_Impl0, annotationMap0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, treeSet0);
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Class<Integer> class1 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[0], typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1959, annotationMap0, propertyMetadata0);
      beanPropertyMap0.withProperty(creatorProperty0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SQLDataException sQLDataException0 = new SQLDataException("", "N5ZjK:q/^hoMoY9J+");
      MockError mockError0 = new MockError(sQLDataException0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockError0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, objectMapper0, byteQuadsCanonicalizer0, (byte[]) null, 2299, 23, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        beanPropertyMap0.findDeserializeAndSet(uTF8StreamJsonParser0, defaultDeserializationContext_Impl0, annotationMap0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_OBJECT: need JSON Object to contain As.WRAPPER_OBJECT type information for class int
         //  at [Source: org.evosuite.runtime.mock.java.lang.MockError@0000000010; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "", true, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2018, propertyMetadata0, propertyMetadata0);
      beanPropertyMap0.withProperty(creatorProperty0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find("((");
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Class<Integer> class1 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[2];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "}", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-242), asWrapperTypeDeserializer0, propertyMetadata0);
      arrayList0.add((SettableBeanProperty) creatorProperty0);
      arrayList0.add((SettableBeanProperty) creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, true);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find("@");
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      PropertyName propertyName0 = PropertyName.construct("QIYo", "QIYo");
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Class<Integer> class1 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[0], typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "", true, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1966, annotationMap0, propertyMetadata0);
      beanPropertyMap0.withProperty(creatorProperty0);
      beanPropertyMap0.remove(creatorProperty0);
      assertEquals(1, beanPropertyMap0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      PropertyName propertyName0 = new PropertyName("", "");
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Class<Integer> class1 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[0], typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "qiyo", true, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1947, annotationMap0, propertyMetadata0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.remove(creatorProperty0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No entry '' found, can't remove
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      PropertyName propertyName0 = PropertyName.construct("QIYo", "QIYo");
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Class<Integer> class1 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) null);
      JavaType[] javaTypeArray0 = new JavaType[1];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[0], typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "", true, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1966, annotationMap0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      beanPropertyMap1.withProperty(creatorProperty0);
      String string0 = beanPropertyMap1.toString();
      assertEquals("Properties=[QIYo([collection-like type; class com.fasterxml.jackson.databind.JsonDeserializer, contains [simple type, class int]]), QIYo([collection-like type; class com.fasterxml.jackson.databind.JsonDeserializer, contains [simple type, class int]])]", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename((SettableBeanProperty) null, nameTransformer0);
      assertNull(settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      MockIOException mockIOException0 = new MockIOException();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1966, mockIOException0, propertyMetadata0);
      NameTransformer nameTransformer0 = NameTransformer.NOP;
      JsonDeserializer<JsonDeserializer<JsonProcessingException>> jsonDeserializer0 = (JsonDeserializer<JsonDeserializer<JsonProcessingException>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((JsonDeserializer) null).when(jsonDeserializer0).unwrappingDeserializer(any(com.fasterxml.jackson.databind.util.NameTransformer.class));
      CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
      SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty1, nameTransformer_Chained0);
      assertFalse(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.mappingException("sj;EE%?Wgj`s$?g");
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(jsonMappingException0);
      try { 
        beanPropertyMap0.wrapAndThrow(invocationTargetException0, beanDeserializerFactory0, "sj;EE%?Wgj`s$?g", defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // sj;EE%?Wgj`s$?g
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);
      try { 
        beanPropertyMap0.wrapAndThrow(invocationTargetException0, invocationTargetException0, "", defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.lang.reflect.InvocationTargetException) (through reference chain: java.lang.reflect.InvocationTargetException[\"\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        beanPropertyMap0.wrapAndThrow(mockError0, objectMapper0, "", deserializationContext0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("QIYo", "QIYo");
      try { 
        beanPropertyMap0.wrapAndThrow(sQLIntegrityConstraintViolationException0, "QIYo", "yASIqzg[-St(!", (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // QIYo (through reference chain: java.lang.String[\"yASIqzg[-St(!\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, treeSet0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[7];
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.mappingException("k^j?", objectArray0);
      try { 
        beanPropertyMap0.wrapAndThrow(jsonMappingException0, objectArray0[5], "k^j?", (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // k^j? (through reference chain: UNKNOWN[\"k^j?\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        beanPropertyMap0.wrapAndThrow(mockIOException0, mockIOException0, "}Ujs~rvfK", (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayList0, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.wrapAndThrow(mockRuntimeException0, beanDeserializerFactory0, "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", defaultDeserializationContext_Impl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Class<Integer> class1 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "", true, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1966, asWrapperTypeDeserializer0, propertyMetadata0);
      arrayList0.add((SettableBeanProperty) creatorProperty0);
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, true);
      beanPropertyMap0.init(arrayList0);
      // Undeclared exception!
      try { 
        beanPropertyMap0.replace(creatorProperty0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal state: property '' missing from _propsInOrder
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, treeSet0);
      PropertyName propertyName0 = PropertyName.construct("", "");
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Class<Integer> class1 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaTypeArray0[0], typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "", false, collectionLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionLikeType0, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1959, annotationMap0, propertyMetadata0);
      BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
      beanPropertyMap1.remove(creatorProperty0);
      beanPropertyMap0.withProperty(creatorProperty0);
      beanPropertyMap1.replace(creatorProperty0);
      assertEquals(0, beanPropertyMap1.size());
  }
}
