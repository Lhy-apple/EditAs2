/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:58:49 GMT 2023
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.net.URL;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.text.DateFormat;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.TimeZone;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectMapper_ESTest extends ObjectMapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = objectMapper0.getNodeFactory();
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.reader((JavaType) null);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "JSON");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLIntegrityConstraintViolationException0);
      boolean boolean0 = objectMapper0.canDeserialize((JavaType) null, atomicReference0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Version version0 = new Version(7, (-909), (-909), "JSON", "JSON", "JSON");
      SimpleModule simpleModule0 = new SimpleModule("JSON", version0);
      Class<ArrayType> class0 = ArrayType.class;
      Class<BooleanNode> class1 = BooleanNode.class;
      simpleModule0.setMixInAnnotation(class0, class1);
      Module[] moduleArray0 = new Module[4];
      moduleArray0[0] = (Module) simpleModule0;
      // Undeclared exception!
      try { 
        objectMapper0.registerModules(moduleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, javaType0);
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, collectionLikeType0, collectionLikeType0);
      MapType mapType0 = MapType.construct(class0, mapLikeType0, javaType0);
      boolean boolean0 = objectMapper0.canDeserialize((JavaType) mapType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[1];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      try { 
        objectMapper0.readValue(byteArray0, (JavaType) mapType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: [B@0000007938; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Locale locale0 = new Locale("JSON", "com.fasterxml.jackson.databind.KeyDeserializer");
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      try { 
        objectMapper0.readValue("JSON", class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: java.lang.String@0000007939; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DataOutputStream>[] classArray0 = (Class<DataOutputStream>[]) Array.newInstance(Class.class, 5);
      // Undeclared exception!
      try { 
        objectMapper0.registerSubtypes(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.NamedType", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[8];
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      // Undeclared exception!
      try { 
        objectMapper0.readValue(byteArray0, (int)  (-24), 371, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -24
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<NullNode> class0 = NullNode.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.copy();
      assertNotSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 510);
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      try { 
        objectMapper0.readValue((Reader) bufferedReader0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      // Undeclared exception!
      try { 
        objectMapper0.writer(serializationFeature0, (SerializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        objectMapper0.readValue(byteArray0, (TypeReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Throwable> class0 = Throwable.class;
      // Undeclared exception!
      try { 
        objectMapper0.readValue((File) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TimeZone timeZone0 = TimeZone.getDefault();
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      boolean boolean0 = objectMapper0.isEnabled(jsonGenerator_Feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeReference<DataInputStream> typeReference0 = (TypeReference<DataInputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readerFor(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonParser_Feature0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      ObjectWriter objectWriter0 = objectMapper0.writer(dateFormat0);
      assertFalse(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MapType> class0 = MapType.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setConfig((DeserializationConfig) null);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectWriter objectWriter0 = objectMapper0.writer((FilterProvider) simpleFilterProvider0);
      assertFalse(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      try { 
        objectMapper0.readValue("", (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: java.lang.String@0000007940; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      objectMapper0.setFilters(simpleFilterProvider0);
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockFile mockFile0 = new MockFile("`$dh'");
      objectMapper0.writeValue((File) mockFile0, (Object) jsonGenerator_Feature0);
      assertEquals(1392409281320L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectWriter objectWriter0 = objectMapper0.writerWithType((JavaType) null);
      assertFalse(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleType> class0 = SimpleType.class;
      ObjectWriter objectWriter0 = objectMapper0.writerWithView(class0);
      assertFalse(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[8];
      TypeReference<BufferedInputStream> typeReference0 = (TypeReference<BufferedInputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        objectMapper0.readValue(byteArray0, (int) 7, (int) 8, (TypeReference) typeReference0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 3, 3);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      try { 
        objectMapper0.readValue((Reader) lineNumberReader0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: java.io.LineNumberReader@0000007941; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[4];
      // Undeclared exception!
      try { 
        objectMapper0.disable(mapperFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeReference<ArrayNode> typeReference0 = (TypeReference<ArrayNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.reader(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      byte[] byteArray0 = new byte[3];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (int) (byte)25, (-1315));
      TypeReference<ArrayType> typeReference0 = (TypeReference<ArrayType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readValue(jsonParser0, (TypeReference<?>) typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = objectMapper0.getJsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      VisibilityChecker<?> visibilityChecker0 = objectMapper0.getVisibilityChecker();
      assertNotNull(visibilityChecker0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      // Undeclared exception!
      try { 
        objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      URL uRL0 = MockURL.getFileExample();
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      // Undeclared exception!
      try { 
        objectMapper0.readValue(uRL0, (JavaType) mapType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      File file0 = MockFile.createTempFile("JSON", "JSON");
      ObjectReader objectReader0 = objectMapper0.reader();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      Class<SimpleType> class1 = SimpleType.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      MapLikeType mapLikeType0 = MapLikeType.construct(class1, simpleType0, simpleType0);
      JavaType javaType0 = typeFactory0.constructReferenceType(class0, mapLikeType0);
      try { 
        objectMapper0.readValue(file0, javaType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFile@0000007942; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      // Undeclared exception!
      try { 
        objectMapper0.writeValueAsBytes(objectMapper0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/JsonMappingException$Reference
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeReference<Integer> typeReference0 = (TypeReference<Integer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readValues((JsonParser) null, (TypeReference<?>) typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MapLikeType> class0 = MapLikeType.class;
      // Undeclared exception!
      try { 
        objectMapper0._checkInvalidCopy(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Failed copy(): com.fasterxml.jackson.databind.ObjectMapper (version: 2.6.3-SNAPSHOT) does not override copy(); it has to
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PropertyNamingStrategy propertyNamingStrategy0 = objectMapper0.getPropertyNamingStrategy();
      assertNull(propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      try { 
        objectMapper0.writeValue((OutputStream) mockPrintStream0, (Object) dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class java.io.DataOutputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )
         //
         verifyException("com.fasterxml.jackson.databind.ser.impl.UnknownSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("`Mc.ak5di;9M");
      try { 
        objectMapper0.writeValue((Writer) null, (Object) mockPrintWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class org.evosuite.runtime.mock.java.io.MockPrintWriter and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )
         //
         verifyException("com.fasterxml.jackson.databind.ser.impl.UnknownSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("");
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<BufferedWriter> class0 = BufferedWriter.class;
      Class<NullNode> class1 = NullNode.class;
      objectMapper0.addMixInAnnotations(class0, class1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 1338, 1338);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      // Undeclared exception!
      try { 
        objectMapper0.readValue(jsonParser0, (ResolvedType) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1338
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<LineNumberReader> class0 = LineNumberReader.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectWriter objectWriter0 = objectMapper0.writer();
      assertFalse(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector((AnnotationIntrospector) null);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.SETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null, 8);
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArrayBuilder0.NO_BYTES);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<BooleanNode> class0 = BooleanNode.class;
      MappingIterator<BooleanNode> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      assertNotNull(serializerProvider0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ByteArrayOutputStream> class0 = ByteArrayOutputStream.class;
      ObjectReader objectReader0 = objectMapper0.reader(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      HandlerInstantiator handlerInstantiator0 = mock(HandlerInstantiator.class, new ViolatedAssumptionAnswer());
      Object object0 = objectMapper0.setHandlerInstantiator(handlerInstantiator0);
      assertSame(object0, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = objectMapper0.canSerialize(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, (String) null);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Class<CollectionType> class0 = CollectionType.class;
      try { 
        objectMapper0.readValue((InputStream) mockFileInputStream0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectWriter objectWriter0 = objectMapper0.writer((CharacterEscapes) null);
      assertFalse(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DateFormat dateFormat0 = objectMapper0.getDateFormat();
      assertNotNull(dateFormat0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PipedReader pipedReader0 = new PipedReader();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      try { 
        objectMapper0.readValue(jsonParser0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<ArrayType> class0 = ArrayType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MappingIterator<CharArrayReader> mappingIterator0 = objectMapper0.readValues((JsonParser) null, (ResolvedType) simpleType0);
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      // Undeclared exception!
      try { 
        objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) null);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      int int0 = objectMapper0.mixInCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      String string0 = objectMapper0.writeValueAsString("O$a");
      assertEquals("\"O$a\"", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      ObjectWriter objectWriter0 = objectMapper0.writer(serializationFeature0);
      assertFalse(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectWriter objectWriter0 = objectMapper0.writer((FormatSchema) null);
      assertFalse(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      assertEquals("", objectNode0.asText());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Throwable> class0 = Throwable.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      boolean boolean0 = objectMapper0.isEnabled(serializationFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerFactory serializerFactory0 = objectMapper0.getSerializerFactory();
      assertNotNull(serializerFactory0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      URL uRL0 = MockURL.getHttpExample();
      TypeReference<MockPrintWriter> typeReference0 = (TypeReference<MockPrintWriter>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      try { 
        objectMapper0.readValue(uRL0, (TypeReference) typeReference0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setBase64Variant((Base64Variant) null);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectWriter objectWriter0 = objectMapper0.writerWithDefaultPrettyPrinter();
      assertFalse(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PrettyPrinter prettyPrinter0 = objectMapper0._defaultPrettyPrinter();
      assertNotNull(prettyPrinter0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      TypeFactory typeFactory0 = objectMapper0.getTypeFactory();
      byte[] byteArray0 = new byte[6];
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      // Undeclared exception!
      try { 
        objectMapper0.readValue(byteArray0, (int) 2, (int) 8, javaType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[7];
      // Undeclared exception!
      try { 
        objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues injectableValues0 = objectMapper0.getInjectableValues();
      assertNull(injectableValues0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      URL uRL0 = MockURL.getFileExample();
      Class<BufferedOutputStream> class0 = BufferedOutputStream.class;
      // Undeclared exception!
      try { 
        objectMapper0.readValue(uRL0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[0];
      Class<LongNode> class0 = LongNode.class;
      try { 
        objectMapper0.readValue(byteArray0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: [B@0000007943; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<FloatNode> class0 = FloatNode.class;
      Class<?> class1 = objectMapper0.findMixInClassFor(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      // Undeclared exception!
      try { 
        objectMapper0.enable(mapperFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Version version0 = new Version((-2206), 8, 8, "fYs", "G_XzgZoc!", "QI}<0(1(c");
      SimpleModule simpleModule0 = new SimpleModule("JSON", version0);
      NamedType[] namedTypeArray0 = new NamedType[4];
      simpleModule0.registerSubtypes(namedTypeArray0);
      Module[] moduleArray0 = new Module[7];
      moduleArray0[0] = (Module) simpleModule0;
      // Undeclared exception!
      try { 
        objectMapper0.registerModules(moduleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockFile mockFile0 = new MockFile("JSON");
      TypeReference<IntNode> typeReference0 = (TypeReference<IntNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      try { 
        objectMapper0.readValue((File) mockFile0, (TypeReference) typeReference0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      JavaType javaType0 = objectMapper0.constructType(class0);
      assertFalse(javaType0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectWriter objectWriter0 = objectMapper0.writer((Base64Variant) null);
      assertFalse(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      TypeReference<ByteArrayInputStream> typeReference0 = (TypeReference<ByteArrayInputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readValue((Reader) mockFileReader0, (TypeReference) typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider((FilterProvider) null);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeReference<InputStreamReader> typeReference0 = (TypeReference<InputStreamReader>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      try { 
        objectMapper0.convertValue((Object) null, (TypeReference<?>) typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectWriter objectWriter0 = objectMapper0.writer(contextAttributes0);
      assertFalse(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.addHandler((DeserializationProblemHandler) null);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeReference<BigIntegerNode> typeReference0 = (TypeReference<BigIntegerNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readValue((InputStream) null, (TypeReference) typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectWriter objectWriter0 = objectMapper0.writerFor(javaType0);
      assertFalse(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      boolean boolean0 = objectMapper0.isEnabled(deserializationFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeReference<PipedWriter> typeReference0 = (TypeReference<PipedWriter>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readValue("`KZ<~?\"pz#^.h`G", (TypeReference) typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector)ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.pair(jacksonAnnotationIntrospector0, jacksonAnnotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, jacksonAnnotationIntrospector0);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Version version0 = new Version((-2206), 8, 8, "fYs", "G_XzgZoc!", "QI}<0(1(c");
      SimpleModule simpleModule0 = new SimpleModule("JSON", version0);
      Module[] moduleArray0 = new Module[7];
      moduleArray0[0] = (Module) simpleModule0;
      Class<String> class0 = String.class;
      simpleModule0.addKeySerializer((Class<? extends String>) class0, (JsonSerializer<String>) null);
      // Undeclared exception!
      try { 
        objectMapper0.registerModules(moduleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule("eOu(b&", version0);
      Class<Object> class0 = Object.class;
      JsonDeserializer<CoreXMLDeserializers.Std> jsonDeserializer0 = (JsonDeserializer<CoreXMLDeserializers.Std>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      simpleModule0.addDeserializer(class0, (JsonDeserializer<?>) jsonDeserializer0);
      ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleModule simpleModule0 = new SimpleModule();
      Class<CollectionType> class0 = CollectionType.class;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      simpleModule0.addValueInstantiator(class0, jsonLocationInstantiator0);
      objectMapper0.registerModule(simpleModule0);
      assertEquals("SimpleModule-21", simpleModule0.getModuleName());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Module[] moduleArray0 = new Module[1];
      SimpleModule simpleModule0 = new SimpleModule();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      simpleModule0.setDeserializerModifier(beanDeserializerModifier0);
      moduleArray0[0] = (Module) simpleModule0;
      ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      SimpleModule simpleModule0 = new SimpleModule("e|3+U=m[%@N");
      Class<ArrayType> class0 = ArrayType.class;
      JsonSerializer<ArrayType> jsonSerializer0 = (JsonSerializer<ArrayType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      simpleModule0.addSerializer((Class<? extends ArrayType>) class0, jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      Module[] moduleArray0 = new Module[1];
      moduleArray0[0] = (Module) simpleModule0;
      ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Module[] moduleArray0 = new Module[1];
      SimpleModule simpleModule0 = new SimpleModule();
      moduleArray0[0] = (Module) simpleModule0;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      simpleModule0.setAbstractTypes(simpleAbstractTypeResolver0);
      ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule("eOu(b&", version0);
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      simpleModule0.setSerializerModifier(beanSerializerModifier0);
      ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      POJONode pOJONode0 = new POJONode(objectMapper0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      try { 
        objectMapper0.treeToValue((TreeNode) pOJONode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (VALUE_EMBEDDED_OBJECT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY type information for class com.fasterxml.jackson.databind.type.CollectionLikeType
         //  at [Source: java.lang.String@0000007944; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        objectMapper1.convertValue((Object) jsonFactory0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/JsonMappingException$Reference
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      objectMapper0.enableDefaultTyping();
      POJONode pOJONode0 = new POJONode(decimalNode0);
      try { 
        objectMapper0.convertValue((Object) pOJONode0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not construct instance of com.fasterxml.jackson.databind.type.CollectionLikeType, problem: no suitable creator method found to deserialize from JSON floating-point number
         //  at [Source: java.lang.String@0000000485; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      Class<OutputStreamWriter> class0 = OutputStreamWriter.class;
      ObjectWriter objectWriter0 = objectMapper0.writerWithType(class0);
      assertTrue(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Q1H", "", 12);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      try { 
        objectMapper0.convertValue((Object) sQLTransactionRollbackException0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No suitable constructor found for type [simple type, class com.fasterxml.jackson.databind.type.CollectionLikeType]: can not instantiate from JSON object (missing default constructor or creator, or perhaps need to add/enable type information?)
         //  at [Source: java.lang.String@0000001160; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      Class<MockFileWriter> class0 = MockFileWriter.class;
      ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
      assertTrue(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      Class<ShortNode> class0 = ShortNode.class;
      ObjectWriter objectWriter0 = objectMapper0.writerWithType(class0);
      assertTrue(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleModule simpleModule0 = new SimpleModule();
      MapperFeature mapperFeature0 = MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS;
      objectMapper0.configure(mapperFeature0, false);
      objectMapper0.registerModule(simpleModule0);
      assertEquals("SimpleModule-21", simpleModule0.getModuleName());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleModule simpleModule0 = new SimpleModule((String) null);
      // Undeclared exception!
      try { 
        objectMapper0.registerModule(simpleModule0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Module without defined name
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      List<Module> list0 = ObjectMapper.findModules(classLoader0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      ObjectMapper objectMapper1 = objectMapper0.setMixInResolver(simpleMixInResolver0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      // Undeclared exception!
      try { 
        objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not use includeAs of EXTERNAL_PROPERTY
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature mapperFeature0 = MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS;
      ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[7];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      jsonParser_FeatureArray0[1] = jsonParser_Feature0;
      jsonParser_FeatureArray0[2] = jsonParser_Feature0;
      jsonParser_FeatureArray0[3] = jsonParser_FeatureArray0[1];
      jsonParser_FeatureArray0[4] = jsonParser_Feature0;
      jsonParser_FeatureArray0[5] = jsonParser_FeatureArray0[2];
      jsonParser_FeatureArray0[6] = jsonParser_FeatureArray0[2];
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      jsonParser_FeatureArray0[1] = jsonParser_Feature0;
      jsonParser_FeatureArray0[2] = jsonParser_Feature0;
      jsonParser_FeatureArray0[3] = jsonParser_Feature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[7];
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[7];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_FeatureArray0[1];
      jsonGenerator_FeatureArray0[4] = jsonGenerator_FeatureArray0[1];
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_FeatureArray0[1];
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser jsonParser0 = jsonFactory0.createParser((InputStream) null);
      BigIntegerNode bigIntegerNode0 = objectMapper0.readTree(jsonParser0);
      assertNull(bigIntegerNode0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      ArrayNode arrayNode1 = objectMapper0.readTree(jsonParser0);
      assertFalse(arrayNode1.booleanValue());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonNode jsonNode0 = objectMapper0.readTree((Reader) charArrayReader0);
      assertEquals(3.0, jsonNode0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/I; &A");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 573);
      try { 
        objectMapper0.valueToTree((Object) bufferedOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No serializer found for class java.io.BufferedOutputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0);
      objectMapper0.writeValue(jsonGenerator0, (Object) mapperFeature0);
      assertEquals(24, byteArrayOutputStream0.size());
      assertEquals("\"DEFAULT_VIEW_INCLUSION\"", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1770);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNode jsonNode0 = objectReader0.createObjectNode();
      objectMapper0.writeTree(jsonGenerator0, (TreeNode) jsonNode0);
      assertEquals(2, byteArrayBuilder0.getCurrentSegmentLength());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1770);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNode jsonNode0 = objectReader0.createObjectNode();
      objectMapper0.writeTree(jsonGenerator0, jsonNode0);
      assertEquals(2, byteArrayBuilder0.getCurrentSegmentLength());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      LongNode longNode0 = objectMapper0.valueToTree((Object) null);
      assertNull(longNode0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeReference<StringReader> typeReference0 = (TypeReference<StringReader>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.writerFor(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectWriter objectWriter0 = objectMapper0.writerFor((TypeReference<?>) null);
      assertFalse(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      ObjectWriter objectWriter0 = objectMapper0.writer((PrettyPrinter) defaultPrettyPrinter0);
      assertFalse(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TypeReference<MapType> typeReference0 = (TypeReference<MapType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.writerWithType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectWriter objectWriter0 = objectMapper0.writerWithType((TypeReference<?>) null);
      assertFalse(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      CollectionLikeType collectionLikeType0 = objectMapper0.convertValue((Object) null, class0);
      assertNull(collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1770);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      Class<ArrayType> class1 = ArrayType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashSet> class2 = LinkedHashSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class2);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) collectionType0, (Object) mockFileInputStream0);
      try { 
        objectMapper0.convertValue((Object) jsonGenerator0, (JavaType) referenceType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No suitable constructor found for type [reference type, class com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std<com.fasterxml.jackson.databind.type.ArrayType<[simple type, class com.fasterxml.jackson.databind.type.ArrayType]>]: can not instantiate from JSON object (missing default constructor or creator, or perhaps need to add/enable type information?)
         //  at [Source: java.lang.String@0000001928; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashSet> class1 = LinkedHashSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      CollectionLikeType collectionLikeType0 = objectMapper0.convertValue((Object) collectionType0, class0);
      assertSame(collectionType0, collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<POJONode> class0 = POJONode.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) collectionType0, (Object) objectMapper0, (Object) class0);
      NullNode nullNode0 = (NullNode)objectMapper0._convert((Object) null, referenceType0);
      assertFalse(nullNode0.isDouble());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      // Undeclared exception!
      try { 
        objectMapper0.acceptJsonFormatVisitor((JavaType) null, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // type must be provided
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      // Undeclared exception!
      try { 
        objectMapper0.writeValue((Writer) null, (Object) jsonParser_Feature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2779, objectMapper0, (OutputStream) null);
      Class<MissingNode> class0 = MissingNode.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 7);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) byteArrayInputStream0, (Object) bufferRecycler0);
      Class<DoubleNode> class2 = DoubleNode.class;
      // Undeclared exception!
      try { 
        objectMapper0._configAndWriteValue(uTF8JsonGenerator0, referenceType0, class2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      Stack<String> stack0 = new Stack<String>();
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      objectMapper0._configAndWriteValue(jsonGenerator0, stack0, class0);
      assertEquals(31, jsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0);
      Class<FloatNode> class0 = FloatNode.class;
      // Undeclared exception!
      try { 
        objectMapper0._configAndWriteValue(jsonGenerator0, objectMapper0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/JsonMappingException$Reference
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }
}
