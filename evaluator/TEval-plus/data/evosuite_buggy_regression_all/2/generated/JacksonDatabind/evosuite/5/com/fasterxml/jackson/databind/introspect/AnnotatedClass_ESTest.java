/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:56:06 GMT 2023
 */

package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.util.Annotations;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AnnotatedClass_ESTest extends AnnotatedClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      Class<?> class0 = annotatedClass0.getRawType();
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
      int int0 = annotatedClass0.getModifiers();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      Class class0 = (Class)annotatedClass0.getGenericType();
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, (AnnotationIntrospector) null, (ClassIntrospector.MixInResolver) null);
      Class<ShortNode>[] classArray0 = (Class<ShortNode>[]) Array.newInstance(Class.class, 4);
      AnnotatedMethod annotatedMethod0 = annotatedClass0.findMethod("|Q|TU-Er(-]D(;o_:", classArray0);
      assertNull(annotatedMethod0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, (AnnotationIntrospector) null, (ClassIntrospector.MixInResolver) null);
      assertEquals(17, annotatedClass0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      AnnotatedClass annotatedClass1 = annotatedClass0.withAnnotations((AnnotationMap) null);
      assertEquals(1041, annotatedClass1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<String> class0 = String.class;
      AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
      String string0 = annotatedClass0.getName();
      assertEquals("java.lang.String", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      Class<?> class0 = annotatedClass0.getAnnotated();
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      String string0 = annotatedClass0.toString();
      assertEquals("[AnnotedClass java.lang.String]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      AnnotationMap annotationMap0 = new AnnotationMap();
      Iterable<Annotation> iterable0 = annotatedClass0.annotations();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      AnnotationMap annotationMap0 = annotatedClass0.getAllAnnotations();
      assertEquals(0, annotationMap0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      boolean boolean0 = annotatedClass0.hasAnnotations();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      annotatedClass0.memberMethods();
      boolean boolean0 = annotatedClass0.hasAnnotations();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<Integer> class0 = Integer.class;
      AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
      AnnotatedConstructor annotatedConstructor0 = annotatedClass0.getDefaultConstructor();
      assertNull(annotatedConstructor0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      AnnotatedMethod annotatedMethod0 = basicBeanDescription0.findMethod("", classArray0);
      assertNull(annotatedMethod0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      int int0 = annotatedClass0.getFieldCount();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule("", version0);
      Class<Object> class0 = Object.class;
      Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
      SimpleModule simpleModule1 = simpleModule0.setMixInAnnotation(class0, class1);
      objectMapper0.registerModule(simpleModule1);
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Method method0 = basicBeanDescription0.findFactoryMethod(classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, (AnnotationIntrospector) null, (ClassIntrospector.MixInResolver) null);
      List<AnnotatedConstructor> list0 = annotatedClass0.getConstructors();
      assertNotNull(list0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
      Annotations annotations0 = annotatedClass0.getAnnotations();
      assertEquals(0, annotations0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Module> class0 = Module.class;
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      annotatedClass0._addConstructorMixIns(class0);
      assertEquals(17, annotatedClass0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<String> class0 = String.class;
      AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, (AnnotationIntrospector) null, (ClassIntrospector.MixInResolver) null);
      annotatedClass0.getStaticMethods();
      annotatedClass0._addConstructorMixIns(class0);
      assertEquals(17, annotatedClass0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedClass annotatedClass0 = AnnotatedClass.construct((Class<?>) null, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
      int int0 = annotatedClass0.getMemberMethodCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<String> class0 = String.class;
      AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
      Class<ShortNode> class1 = ShortNode.class;
      LinkedHashMap<String, AnnotatedField> linkedHashMap0 = new LinkedHashMap<String, AnnotatedField>();
      annotatedClass0._addFieldMixIns(class1, class0, linkedHashMap0);
      assertEquals(17, annotatedClass0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<String> class0 = String.class;
      AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
      Class<ShortNode> class1 = ShortNode.class;
      LinkedHashMap<String, AnnotatedField> linkedHashMap0 = new LinkedHashMap<String, AnnotatedField>();
      Map<String, AnnotatedField> map0 = annotatedClass0._findFields(class0, linkedHashMap0);
      annotatedClass0._addFieldMixIns(class1, class0, map0);
      assertEquals(2, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
      Iterable<AnnotatedField> iterable0 = annotatedClass0.fields();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<Integer> class0 = Integer.class;
      AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
      AnnotationMap annotationMap0 = annotatedClass0._collectRelevantAnnotations((Annotation[]) null);
      assertEquals(0, annotationMap0.size());
  }
}
