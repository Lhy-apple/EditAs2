/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:05:41 GMT 2023
 */

package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.Writer;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class POJONode_ESTest extends POJONode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      JsonToken jsonToken0 = pOJONode0.asToken();
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, jsonToken0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-2369));
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      POJONode pOJONode0 = new POJONode(decimalNode0);
      DecimalNode decimalNode1 = (DecimalNode)pOJONode0.getPojo();
      assertNull(decimalNode1.textValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(15.6702);
      POJONode pOJONode0 = new POJONode(doubleNode0);
      pOJONode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(15.6702);
      POJONode pOJONode0 = new POJONode(doubleNode0);
      boolean boolean0 = pOJONode0.isContainerNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = Integer.valueOf(1);
      POJONode pOJONode0 = new POJONode(integer0);
      byte[] byteArray0 = pOJONode0.binaryValue();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MissingNode missingNode0 = MissingNode.getInstance();
      POJONode pOJONode0 = new POJONode(missingNode0);
      String string0 = pOJONode0.asText();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      String string0 = pOJONode0.asText();
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      POJONode pOJONode0 = new POJONode("");
      String string0 = pOJONode0.asText("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      String string0 = pOJONode0.asText("F1t]RI1B<e*T*YT");
      assertEquals("F1t]RI1B<e*T*YT", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      boolean boolean0 = pOJONode0.asBoolean(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MissingNode missingNode0 = MissingNode.getInstance();
      POJONode pOJONode0 = new POJONode(missingNode0);
      boolean boolean0 = pOJONode0.asBoolean(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      POJONode pOJONode0 = new POJONode(boolean0);
      boolean boolean1 = pOJONode0.asBoolean(false);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      POJONode pOJONode0 = new POJONode("0Ejd`Rx.MX");
      int int0 = pOJONode0.asInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double double0 = new Double(0.0);
      POJONode pOJONode0 = new POJONode(double0);
      int int0 = pOJONode0.asInt(52);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(15.6702);
      POJONode pOJONode0 = new POJONode(doubleNode0);
      long long0 = pOJONode0.asLong((long) 15);
      assertEquals(15L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = Integer.valueOf(1);
      POJONode pOJONode0 = new POJONode(integer0);
      long long0 = pOJONode0.asLong();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      POJONode pOJONode0 = new POJONode(object0);
      double double0 = pOJONode0.asDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer((-308));
      POJONode pOJONode0 = new POJONode(integer0);
      double double0 = pOJONode0.asDouble((-1.0));
      assertEquals((-308.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(15.6702);
      POJONode pOJONode0 = new POJONode(doubleNode0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) charArrayWriter0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      pOJONode0.serialize(jsonGenerator0, serializerProvider0);
      assertEquals(7, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        pOJONode0.serialize((JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Float float0 = new Float((-711.5960242));
      POJONode pOJONode0 = new POJONode(float0);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile((String) null, "");
      MockFile mockFile1 = new MockFile(mockFile0, "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile1, jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      pOJONode0.serialize(jsonGenerator0, defaultSerializerProvider_Impl0);
      assertEquals(8, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(15.6702);
      POJONode pOJONode0 = new POJONode(doubleNode0);
      POJONode pOJONode1 = new POJONode(pOJONode0);
      boolean boolean0 = pOJONode1._pojoEquals(pOJONode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MissingNode missingNode0 = MissingNode.getInstance();
      POJONode pOJONode0 = new POJONode(missingNode0);
      boolean boolean0 = pOJONode0.equals((Object) pOJONode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      boolean boolean0 = pOJONode0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(15.6702);
      POJONode pOJONode0 = new POJONode(doubleNode0);
      POJONode pOJONode1 = new POJONode(pOJONode0);
      POJONode pOJONode2 = new POJONode(pOJONode1);
      boolean boolean0 = pOJONode1._pojoEquals(pOJONode2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      POJONode pOJONode1 = new POJONode((Object) null);
      boolean boolean0 = pOJONode1.equals((Object) pOJONode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      POJONode pOJONode0 = new POJONode((Object) null);
      FloatNode floatNode0 = FloatNode.valueOf((-1.0F));
      POJONode pOJONode1 = new POJONode(floatNode0);
      boolean boolean0 = pOJONode0.equals((Object) pOJONode1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DoubleNode doubleNode0 = DoubleNode.valueOf(15.6702);
      POJONode pOJONode0 = new POJONode(doubleNode0);
      String string0 = pOJONode0.toString();
      assertEquals("15.6702", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RawValue rawValue0 = new RawValue("ALWAYS");
      POJONode pOJONode0 = new POJONode(rawValue0);
      String string0 = pOJONode0.toString();
      assertEquals("(raw value '[RawValue of type `java.lang.String`]')", string0);
  }
}
