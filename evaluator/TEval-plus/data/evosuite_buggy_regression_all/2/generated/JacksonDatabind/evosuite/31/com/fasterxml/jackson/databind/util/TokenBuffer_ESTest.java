/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:01:22 GMT 2023
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.util.RawValue;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.DateTimeException;
import java.time.Month;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenBuffer_ESTest extends TokenBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.getCurrentValue();
      tokenBuffer0._appendRaw(16, (Object) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.writeEndObject();
      tokenBuffer0.serialize(tokenBuffer1);
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndObject();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndObject();
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.END_OBJECT, jsonToken0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndArray();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      tokenBuffer1.append(tokenBuffer0);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(31, tokenBuffer2.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      String string0 = tokenBuffer0.toString();
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals("[TokenBuffer: ]", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeEndObject();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      tokenBuffer1.append(tokenBuffer0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer1._first;
      Month month0 = Month.NOVEMBER;
      assertEquals(Month.NOVEMBER, month0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0.writeObject(serializedString0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeEndObject();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.writeRawValue("com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNa5eIdResolver");
      Month month0 = Month.NOVEMBER;
      assertEquals(Month.NOVEMBER, month0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      boolean boolean0 = tokenBuffer0.isClosed();
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(boolean0);
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Month month0 = Month.NOVEMBER;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeNumberField("", (float) 16);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      try { 
        tokenBuffer1.writeObject(tokenBuffer_Segment0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class com.fasterxml.jackson.databind.util.TokenBuffer$Segment and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )
         //
         verifyException("com.fasterxml.jackson.databind.ser.impl.UnknownSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.nextFieldName();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeRawValue((String) null);
      Short short0 = new Short((short)28);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      tokenBuffer0._appendRaw((short)28, bigDecimal0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndObject();
      tokenBuffer0.serialize(tokenBuffer1);
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeRawValue("j>fGI1A_sc#\u0004(^I=E");
      tokenBuffer0.writeEndObject();
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)0);
      tokenBuffer0.writeTypeId(byte0);
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeRawValue("j>fGI1A_sc#\u0004(^I=E");
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      Float float0 = new Float(1696.776);
      tokenBuffer_Segment0.append(712, jsonToken0, (Object) simpleType0, (Object) float0, (Object) jsonToken0);
      tokenBuffer0.writeEndObject();
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeEndObject();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeRawValue((String) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'O';
      charArray0[3] = '9';
      charArray0[4] = 'n';
      charArray0[5] = 'j';
      charArray0[6] = 'B';
      charArray0[7] = '^';
      charArray0[8] = ',';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeUTF8String(byteArray0, (byte)0, 2487);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectMapper0.getDateFormat();
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Month month0 = Month.NOVEMBER;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0._appendRaw(16, objectMapper0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      // Undeclared exception!
      try { 
        tokenBuffer1._reportUnsupportedOperation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, deserializationContext0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((double) 16);
      tokenBuffer0.writeTree(numericNode0);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeEndObject();
      Boolean boolean0 = new Boolean(false);
      tokenBuffer0.isClosed();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Month month0 = Month.NOVEMBER;
      assertEquals(Month.NOVEMBER, month0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.writeNumber((-91));
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.append((-547), jsonToken0, object0, (Object) tokenBuffer0, (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -547
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.close();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Pe@ElG;c:S:fd:", "Pe@ElG;c:S:fd:", true, 'm', 738);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 14)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeEndObject();
      Byte byte0 = new Byte((byte) (-54));
      tokenBuffer0.writeTypeId(byte0);
      tokenBuffer0.firstToken();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      TreeMap<String, JsonNode> treeMap0 = new TreeMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, treeMap0);
      ArrayNode arrayNode0 = objectNode0.withArray("r8GD*FPDPP6_6");
      TextNode textNode0 = arrayNode0.textNode("");
      RawValue rawValue0 = new RawValue(textNode0);
      tokenBuffer0._appendRaw((byte) (-54), rawValue0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000045; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      int int0 = (-432);
      try { 
        tokenBuffer_Parser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000045; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      Short short0 = new Short((short)2439);
      tokenBuffer_Segment0.appendRaw(578, 677, (Object) objectMapper1, (Object) short0, (Object) short0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000045; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeEndObject();
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      
      tokenBuffer_Parser0.getCurrentValue();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      tokenBuffer0.writeEndObject();
      Byte byte0 = new Byte((byte) (-121));
      Long long0 = new Long(16);
      tokenBuffer0.writeTypeId(long0);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      tokenBuffer1.firstToken();
      assertEquals(31, tokenBuffer1.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.getTextCharacters();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer_Segment0.hasIds();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      Month month0 = Month.NOVEMBER;
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectReader0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        tokenBuffer0.writeObject(tokenBuffer_Parser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000045; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      RawValue rawValue0 = new RawValue("*p}t5");
      RawValue rawValue1 = new RawValue(tokenBuffer0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertFalse(boolean0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) tokenBuffer_Parser0);
      JsonLocation jsonLocation0 = dupDetector0.findLocation();
      assertNotNull(jsonLocation0);
      
      tokenBuffer_Parser0.setLocation(jsonLocation0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      tokenBuffer_Parser0.getTextCharacters();
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      boolean boolean0 = false;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.nextFieldName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.asParser(jsonParser0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.writeRawValue((String) null);
      short short0 = (short)6;
      Short short1 = new Short((short)6);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("jEy&tCR;");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(0, 16);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = 'U';
      charArray0[2] = 'J';
      charArray0[3] = 'u';
      charArray0[4] = 'D';
      charArray0[5] = '^';
      charArray0[6] = 'C';
      charArray0[7] = 'Q';
      charArray0[8] = '%';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeString(charArray0, 16, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      
      RawValue rawValue0 = new RawValue("*p}t5");
      Class<Short> class0 = Short.class;
      tokenBuffer_Parser0.readValuesAs(class0);
      Class<SerializedString> class1 = SerializedString.class;
      tokenBuffer_Parser0.readValuesAs(class1);
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      RawValue rawValue1 = new RawValue(tokenBuffer0, true);
      tokenBuffer_Segment0.appendRaw(0, 0, (Object) beanDeserializerFactory0, (Object) rawValue0, (Object) rawValue1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertFalse(boolean0);
      
      tokenBuffer0.writeNumber((-727L));
      tokenBuffer0.isClosed();
      tokenBuffer0.forceUseOfBigDecimal(false);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getTextLength();
      RawValue rawValue0 = new RawValue("*p}t5");
      Class<SerializedString> class0 = SerializedString.class;
      tokenBuffer_Parser0.readValuesAs(class0);
      RawValue rawValue1 = new RawValue(tokenBuffer0, true);
      tokenBuffer_Segment0.appendRaw(0, 0, (Object) beanDeserializerFactory0, (Object) rawValue0, (Object) rawValue1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      tokenBuffer0.writeNumber((-727L));
      tokenBuffer0.isClosed();
      tokenBuffer_Parser0.version();
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.nextFieldName();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeRawValue((String) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      // Undeclared exception!
      tokenBuffer0.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("EL", 16, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      
      tokenBuffer0.writeEndObject();
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      
      tokenBuffer1.writeRawValue("Called operation not supported for TokenBuffer");
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertNotNull(tokenBuffer2);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer2.firstToken());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Month month0 = Month.NOVEMBER;
      assertEquals(Month.NOVEMBER, month0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Month month0 = Month.NOVEMBER;
      assertEquals(Month.NOVEMBER, month0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      
      tokenBuffer0.writeEndObject();
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      boolean boolean0 = false;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      try { 
        tokenBuffer_Parser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000045; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isPrimitive());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Month month0 = Month.NOVEMBER;
      assertEquals(Month.NOVEMBER, month0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      tokenBuffer0.writeObject(bigInteger0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer");
      assertNotNull(serializedString0);
      assertEquals("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer", serializedString0.getValue());
      assertEquals(78, serializedString0.charLength());
      assertEquals("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer", serializedString0.toString());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString0, false);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertEquals("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer", serializedString0.getValue());
      assertEquals(78, serializedString0.charLength());
      assertEquals("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer", serializedString0.toString());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = '^';
      charArray0[2] = 'S';
      charArray0[3] = 'O';
      charArray0[4] = '*';
      charArray0[5] = 'i';
      charArray0[6] = 'O';
      charArray0[7] = '@';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 37, false);
      assertArrayEquals(new char[] {'g', '^', 'S', 'O', '*', 'i', 'O', '@'}, charArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(8, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer", serializedString0.getValue());
      assertEquals(78, serializedString0.charLength());
      assertEquals("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer", serializedString0.toString());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertArrayEquals(new char[] {'g', '^', 'S', 'O', '*', 'i', 'O', '@'}, charArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(8, charArray0.length);
      assertNotNull(readerBasedJsonParser1);
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(17, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(17, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer", serializedString0.getValue());
      assertEquals(78, serializedString0.charLength());
      assertEquals("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer", serializedString0.toString());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(tokenFilter1, tokenFilter0);
      assertNotNull(tokenFilter1);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeRawValue());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser1, tokenFilter1, false, true);
      assertArrayEquals(new char[] {'g', '^', 'S', 'O', '*', 'i', 'O', '@'}, charArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(8, charArray0.length);
      assertNotNull(filteringParserDelegate0);
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(17, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(17, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer", serializedString0.getValue());
      assertEquals(78, serializedString0.charLength());
      assertEquals("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer", serializedString0.toString());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeRawValue());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(17, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(filteringParserDelegate0);
      assertArrayEquals(new char[] {'g', '^', 'S', 'O', '*', 'i', 'O', '@'}, charArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(8, charArray0.length);
      assertNotNull(tokenBuffer0);
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(17, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(17, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer", serializedString0.getValue());
      assertEquals(78, serializedString0.charLength());
      assertEquals("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer", serializedString0.toString());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeRawValue());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(17, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      
      tokenBuffer0.writeNumber((BigInteger) null);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(tokenFilter1, tokenFilter0);
      assertArrayEquals(new char[] {'g', '^', 'S', 'O', '*', 'i', 'O', '@'}, charArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(8, charArray0.length);
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(17, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(17, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer", serializedString0.getValue());
      assertEquals(78, serializedString0.charLength());
      assertEquals("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer", serializedString0.toString());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeRawValue());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(17, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      tokenBuffer0._appendRaw((short)28, bigDecimal0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      tokenBuffer0.serialize(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000045; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      boolean boolean0 = tokenBuffer0.canWriteBinaryNatively();
      assertTrue(boolean0);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      int int0 = tokenBuffer0.getFeatureMask();
      assertEquals(31, int0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(tokenBuffer_Parser0, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(jsonParserSequence0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      
      boolean boolean0 = jsonParserSequence0.hasTextCharacters();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      
      tokenBuffer1.setCurrentValue(tokenBuffer_Parser0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(jsonParserSequence0);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertNull(tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      TokenBuffer tokenBuffer3 = (TokenBuffer)tokenBuffer1.configure(jsonGenerator_Feature0, false);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertSame(tokenBuffer3, tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertNotNull(tokenBuffer3);
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer3.isClosed());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertEquals((-1), tokenBuffer3.getOutputBuffered());
      assertTrue(tokenBuffer3.canOmitFields());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertNull(tokenBuffer3.firstToken());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertEquals(31, tokenBuffer3.getFeatureMask());
      assertEquals(0, tokenBuffer3.getFormatFeatures());
      
      Month month0 = Month.NOVEMBER;
      assertEquals(Month.NOVEMBER, month0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000045; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      RawValue rawValue0 = new RawValue("*p}t5");
      assertNotNull(rawValue0);
      
      RawValue rawValue1 = new RawValue(tokenBuffer0, true);
      assertFalse(rawValue1.equals((Object)rawValue0));
      assertNotNull(rawValue1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(0, 0, (Object) beanDeserializerFactory0, (Object) rawValue0, (Object) rawValue1);
      assertNotSame(rawValue0, rawValue1);
      assertNotSame(rawValue1, rawValue0);
      assertFalse(rawValue0.equals((Object)rawValue1));
      assertFalse(rawValue1.equals((Object)rawValue0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(tokenBuffer_Segment1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer_Segment0.hasIds());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertFalse(boolean0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer0.writeNumber((-727L));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      boolean boolean1 = tokenBuffer0.isClosed();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue((char[]) null, 0, 471);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Short short0 = new Short((short) (-669));
      assertEquals((short) (-669), (short)short0);
      assertNotNull(short0);
      
      Object object1 = tokenBuffer0._objectId;
      assertNull(object1);
      
      tokenBuffer0._appendRaw(200, (Object) null);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeEndObject();
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.serialize(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(1342.68163);
      assertNotNull(doubleNode0);
      assertEquals(1342, doubleNode0.intValue());
      assertFalse(doubleNode0.isFloat());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isInt());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(1342L, doubleNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(1342.68163, doubleNode0.doubleValue(), 0.01);
      assertFalse(doubleNode0.isShort());
      assertEquals(0, doubleNode0.size());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isLong());
      assertEquals(1342.6816F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isIntegralNumber());
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isDouble());
      assertEquals((short)1342, doubleNode0.shortValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      
      Class<Month> class0 = Month.class;
      try { 
        objectMapper0.convertValue((Object) doubleNode0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not deserialize instance of java.time.Month out of VALUE_NUMBER_FLOAT token
         //  at [Source: java.lang.String@0000000207; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertNotNull(objectMapper2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      
      ObjectMapper objectMapper3 = objectMapper2.clearProblemHandlers();
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertNotNull(objectMapper3);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      assertNotNull(tokenBuffer0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer0.writeEndArray();
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Parser tokenBuffer_Parser2 = (TokenBuffer.Parser)tokenBuffer_Parser1.setFeatureMask((-694));
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals((-694), tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals((-694), tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals((-694), tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) tokenBuffer_Parser0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(dupDetector0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals((-694), tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      JsonLocation jsonLocation0 = dupDetector0.findLocation();
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(jsonLocation0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals((-694), tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.overrideStdFeatures((-694), 592);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals((-694), tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals((-694), tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      tokenBuffer_Parser0.setLocation(jsonLocation0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals((-694), tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("EL", 16, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(charArray0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertNotNull(objectMapper2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper3 = objectMapper0.configure(serializationFeature0, true);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertNotNull(objectMapper3);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2);
      assertNotNull(tokenBuffer0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer0.writeEndArray();
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      SerializedString serializedString0 = new SerializedString("s");
      assertNotNull(serializedString0);
      assertEquals("s", serializedString0.getValue());
      assertEquals("s", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals("s", serializedString0.getValue());
      assertEquals("s", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      
      Version version0 = tokenBuffer0.version();
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertNotNull(version0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(4, version0.getPatchLevel());
      assertEquals(2, version0.getMajorVersion());
      assertTrue(version0.isSnapshot());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals(6, version0.getMinorVersion());
      assertFalse(version0.isUknownVersion());
      assertEquals("jackson-databind", version0.getArtifactId());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer0.writeEndObject();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      Object object0 = tokenBuffer_Parser0.getCurrentValue();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      tokenBuffer0.writeTypeId((Object) null);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      tokenBuffer0._append(jsonToken0, "]");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0._append(jsonToken0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      tokenBuffer0.writeEndObject();
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      
      Byte byte0 = new Byte((byte) (-54));
      assertEquals((byte) (-54), (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-54);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte) (-54)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      tokenBuffer0.writeTypeId(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(JsonToken.END_OBJECT, jsonToken0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(2, jsonToken0.id());
      assertTrue(jsonToken0.isStructEnd());
      assertFalse(jsonToken0.isBoolean());
      assertFalse(jsonToken0.isScalarValue());
      assertEquals("}", jsonToken0.asString());
      assertFalse(jsonToken0.isStructStart());
      assertFalse(jsonToken0.isNumeric());
      
      DoubleNode doubleNode0 = new DoubleNode(16);
      assertNotNull(doubleNode0);
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.canConvertToInt());
      assertNull(doubleNode0.textValue());
      assertEquals(16, doubleNode0.intValue());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isLong());
      assertEquals(0, doubleNode0.size());
      assertEquals(16.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isBigDecimal());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(16.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isShort());
      assertEquals((short)16, doubleNode0.shortValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(16L, doubleNode0.longValue());
      assertTrue(doubleNode0.canConvertToLong());
      
      tokenBuffer0.writeObject(doubleNode0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.canConvertToInt());
      assertNull(doubleNode0.textValue());
      assertEquals(16, doubleNode0.intValue());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isLong());
      assertEquals(0, doubleNode0.size());
      assertEquals(16.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isBigDecimal());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(16.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isShort());
      assertEquals((short)16, doubleNode0.shortValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(16L, doubleNode0.longValue());
      assertTrue(doubleNode0.canConvertToLong());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      
      tokenBuffer0.writeEndObject();
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Month month0 = Month.NOVEMBER;
      assertEquals(Month.NOVEMBER, month0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)66;
      tokenBuffer0.writeBinary(byteArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte)66}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      
      tokenBuffer0.writeObject(serializedString0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      tokenBuffer0.writeEndObject();
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      tokenBuffer1.writeRawValue((String) null);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      Class<Object> class0 = Object.class;
      Iterator<Object> iterator0 = tokenBuffer_Parser0.readValuesAs(class0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(iterator0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      RawValue rawValue0 = new RawValue("*p}t5");
      assertNotNull(rawValue0);
      
      RawValue rawValue1 = new RawValue(tokenBuffer0, false);
      assertFalse(rawValue1.equals((Object)rawValue0));
      assertNotNull(rawValue1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      
      tokenBuffer0.writeNumber(16);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      int int1 = tokenBuffer_Parser0.getTextOffset();
      assertEquals(0, int1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertTrue(int1 == int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertNotNull(objectMapper2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      
      ObjectMapper objectMapper3 = objectMapper2.clearProblemHandlers();
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertNotNull(objectMapper3);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      assertNotNull(tokenBuffer0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("mfWW$PL#Q<1=Q~Z0$", (-3462), (-3462));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      tokenBuffer_Parser0.close();
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      
      SerializationFeature serializationFeature0 = SerializationFeature.CLOSE_CLOSEABLE;
      ObjectMapper objectMapper2 = objectMapper0.enable(serializationFeature0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertNotNull(objectMapper2);
      
      ObjectMapper objectMapper3 = objectMapper0.clearProblemHandlers();
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertNotNull(objectMapper3);
      
      ObjectMapper objectMapper4 = objectMapper3.enableDefaultTyping();
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper0);
      assertNotNull(objectMapper4);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.enable(jsonGenerator_Feature0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(63, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(63, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      tokenBuffer0.writeEndArray();
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(63, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      SerializedString serializedString0 = new SerializedString("s");
      assertNotNull(serializedString0);
      assertEquals("s", serializedString0.toString());
      assertEquals("s", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(63, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals("s", serializedString0.toString());
      assertEquals("s", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      
      Version version0 = tokenBuffer0.version();
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotNull(version0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(63, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertFalse(version0.isUknownVersion());
      assertTrue(version0.isSnapshot());
      assertEquals(6, version0.getMinorVersion());
      assertEquals(2, version0.getMajorVersion());
      assertEquals(4, version0.getPatchLevel());
      assertEquals("jackson-databind", version0.getArtifactId());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(dupDetector0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      
      try { 
        tokenBuffer_Parser0.getBinaryValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary
         //  at [Source: java.lang.String@0000000045; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      tokenBuffer0.writeRawValue((String) null);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      tokenBuffer0._appendRaw((short)28, bigDecimal0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(charArray0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      
      Byte byte0 = new Byte((byte) (-54));
      assertEquals((byte) (-54), (byte)byte0);
      assertNotNull(byte0);
      
      tokenBuffer0.writeTypeId(byte0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      
      tokenBuffer0.firstToken();
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertNotNull(simpleType0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      
      JavaType javaType0 = simpleAbstractTypeResolver0.resolveAbstractType((DeserializationConfig) null, simpleType0);
      assertNull(javaType0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      assertNotNull(objectReader0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader1 = objectReader0.with(jsonNodeFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.withValueToUpdate(objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      tokenBuffer0.writeNumber("Bracketed IPv6 address must contain closing bracket");
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("[typeId=");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      tokenBuffer0.writeNumber("");
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Float float0 = new Float(1326.175F);
      assertEquals(1326.175F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy();
      assertNotNull(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      
      boolean boolean1 = tokenBuffer1.isClosed();
      assertFalse(boolean1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer1._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, false);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      
      try { 
        tokenBuffer_Parser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000045; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertNull(tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(3411, (-2737), (Object) objectMapper0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, true, true);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000045; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeEndObject();
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertNotNull(tokenBuffer2);
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteTypeId());
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000045; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      tokenBuffer0.writeEndObject();
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Short short0 = new Short((short)460);
      assertEquals((short)460, (short)short0);
      assertNotNull(short0);
      
      tokenBuffer0.writeString((String) null);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      tokenBuffer0.writeRawValue((String) null);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer2);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteObjectId());
      
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertNotNull(tokenBuffer3);
      assertFalse(tokenBuffer3.isClosed());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertEquals(0, tokenBuffer3.getFormatFeatures());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer3.getOutputBuffered());
      assertTrue(tokenBuffer3.canOmitFields());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertNull(tokenBuffer3.firstToken());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertEquals(31, tokenBuffer3.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) tokenBuffer_Parser0);
      assertNotNull(dupDetector0);
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      
      JsonLocation jsonLocation0 = dupDetector0.findLocation();
      assertNotNull(jsonLocation0);
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      
      tokenBuffer_Parser0.close();
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      
      tokenBuffer_Parser0.setLocation(jsonLocation0);
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertNull(tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer1.serialize(tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertNull(tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000045; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: ]", string0);
      assertNotNull(string0);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      
      tokenBuffer_Parser0.nextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      tokenBuffer_Parser0.nextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append((-530), jsonToken0, (Object) jsonToken0, (Object) fileSystemHandling0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(tokenBuffer_Segment1);
      assertTrue(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      tokenBuffer0.writeEndObject();
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertTrue(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer_Segment0.hasIds());
      
      Short short0 = new Short((short)460);
      assertEquals((short)460, (short)short0);
      assertNotNull(short0);
      
      tokenBuffer0._appendRaw(1001, short0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      
      tokenBuffer1.writeEndObject();
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      
      try { 
        tokenBuffer0.serialize(tokenBuffer1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized value type for VALUE_NUMBER_FLOAT: java.lang.Short, can not serialize
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertNotNull(simpleType0);
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(113, jsonToken0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      int int0 = 4096;
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(4096, 16, (Object) "JSON");
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment2.append(16, jsonToken0, (Object) simpleType0, (Object) tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment3);
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertTrue(tokenBuffer_Segment3.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment3, objectMapper0, true, true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertTrue(tokenBuffer_Segment3.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000045; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(32, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(32, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      tokenBuffer0.writeRawValue("com.fasterxml.jackson.databind.util.TokenBuffer$Segment");
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      
      tokenBuffer0.writeEndObject();
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      
      boolean boolean1 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Object object0 = tokenBuffer_Segment0.findTypeId((byte)0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer0.writeEndObject();
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      
      String string1 = tokenBuffer_Parser0.getCurrentName();
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(32, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      
      Float float0 = new Float(485.9F);
      assertEquals(485.9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = new Integer(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertFalse(boolean0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeNumber((long) (-1405));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      boolean boolean1 = tokenBuffer1.isClosed();
      assertFalse(boolean1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      tokenBuffer0.writeString("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$DoubleDeserializer");
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)104;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawUTF8String(byteArray0, (-1), 1926);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer0.writeRawValue((String) null);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      
      Month month0 = Month.NOVEMBER;
      assertEquals(Month.NOVEMBER, month0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      
      Object object0 = tokenBuffer_Parser1.getTypeId();
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      
      tokenBuffer0.writeObject((Object) null);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeRawValue((String) null);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      
      tokenBuffer_Parser1.overrideCurrentName((String) null);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      
      String string1 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: VALUE_EMBEDDED_OBJECT]", string1);
      assertNotNull(string1);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      String string2 = tokenBuffer_Parser0.nextFieldName();
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      tokenBuffer_Parser1.nextToken();
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      assertNotNull(defaultPrettyPrinter0);
      
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      assertFalse(defaultPrettyPrinter1.equals((Object)defaultPrettyPrinter0));
      assertNotNull(defaultPrettyPrinter1);
      
      ObjectMapper objectMapper2 = objectMapper0.setDefaultPrettyPrinter(defaultPrettyPrinter1);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(defaultPrettyPrinter0, defaultPrettyPrinter1);
      assertNotSame(defaultPrettyPrinter1, defaultPrettyPrinter0);
      assertSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultPrettyPrinter0.equals((Object)defaultPrettyPrinter1));
      assertFalse(defaultPrettyPrinter1.equals((Object)defaultPrettyPrinter0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectMapper2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter0.withRootSeparator("Leading zeroes not allowed");
      assertNotSame(defaultPrettyPrinter0, defaultPrettyPrinter2);
      assertNotSame(defaultPrettyPrinter0, defaultPrettyPrinter1);
      assertNotSame(defaultPrettyPrinter2, defaultPrettyPrinter1);
      assertNotSame(defaultPrettyPrinter2, defaultPrettyPrinter0);
      assertFalse(defaultPrettyPrinter0.equals((Object)defaultPrettyPrinter1));
      assertFalse(defaultPrettyPrinter2.equals((Object)defaultPrettyPrinter1));
      assertFalse(defaultPrettyPrinter2.equals((Object)defaultPrettyPrinter0));
      assertNotNull(defaultPrettyPrinter2);
      
      ObjectMapper objectMapper3 = objectMapper0.copy();
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper0);
      assertNotSame(objectMapper3, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper3.equals((Object)objectMapper2));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper1));
      assertNotNull(objectMapper3);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper4 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper4);
      assertNotSame(defaultPrettyPrinter0, defaultPrettyPrinter2);
      assertNotSame(defaultPrettyPrinter0, defaultPrettyPrinter1);
      assertNotSame(defaultPrettyPrinter1, defaultPrettyPrinter0);
      assertNotSame(defaultPrettyPrinter1, defaultPrettyPrinter2);
      assertNotSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper4);
      assertNotSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper0);
      assertNotSame(objectMapper4, objectMapper3);
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultPrettyPrinter0.equals((Object)defaultPrettyPrinter2));
      assertFalse(defaultPrettyPrinter0.equals((Object)defaultPrettyPrinter1));
      assertFalse(defaultPrettyPrinter1.equals((Object)defaultPrettyPrinter0));
      assertFalse(defaultPrettyPrinter1.equals((Object)defaultPrettyPrinter2));
      assertFalse(objectMapper2.equals((Object)objectMapper3));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper4.equals((Object)objectMapper1));
      assertFalse(objectMapper4.equals((Object)objectMapper3));
      assertNotNull(objectMapper4);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper3));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper4));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(tokenBuffer0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.useDefaultPrettyPrinter();
      assertNotSame(objectMapper1, objectMapper3);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper4);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertFalse(objectMapper1.equals((Object)objectMapper3));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper4));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(tokenBuffer1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      int int0 = 1960;
      Byte byte0 = new Byte((byte) (-31));
      assertEquals((byte) (-31), (byte)byte0);
      assertNotNull(byte0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      // Undeclared exception!
      try { 
        Month.of(1960);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear: 1960
         //
         verifyException("java.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      tokenBuffer0.writeEndObject();
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      boolean boolean1 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Object object0 = tokenBuffer_Segment0.findTypeId((byte)0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Float float0 = new Float(2.97F);
      assertEquals(2.97F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      tokenBuffer0._appendRaw(1001, float0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      Integer integer0 = new Integer(669);
      assertEquals(669, (int)integer0);
      assertNotNull(integer0);
      
      tokenBuffer0.writeObjectId(integer0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      ObjectCodec objectCodec0 = tokenBuffer0.getCodec();
      assertSame(objectMapper0, objectCodec0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectCodec0, objectMapper1);
      assertSame(objectCodec0, objectMapper0);
      assertNotNull(objectCodec0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ShortNode shortNode0 = new ShortNode((short)1869);
      assertNotNull(shortNode0);
      assertEquals(1869.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isInt());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertEquals(1869L, shortNode0.longValue());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals((short)1869, shortNode0.shortValue());
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(1869, shortNode0.intValue());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isFloat());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(1869.0F, shortNode0.floatValue(), 0.01F);
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      tokenBuffer0.writeTree(shortNode0);
      assertEquals(1869.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isInt());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertEquals(1869L, shortNode0.longValue());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals((short)1869, shortNode0.shortValue());
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(1869, shortNode0.intValue());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isFloat());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(1869.0F, shortNode0.floatValue(), 0.01F);
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasGenericTypes());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      
      JavaType javaType0 = simpleAbstractTypeResolver0.resolveAbstractType((DeserializationConfig) null, simpleType0);
      assertNull(javaType0);
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasGenericTypes());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = simpleType0.equals(long0);
      assertFalse(boolean0);
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasGenericTypes());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      assertNotNull(objectReader0);
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasGenericTypes());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectReader0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasGenericTypes());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      tokenBuffer_Parser0.overrideCurrentName((String) null);
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasGenericTypes());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: ]", string0);
      assertNotNull(string0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      String string1 = tokenBuffer_Parser0.nextFieldName();
      assertNull(string1);
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasGenericTypes());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      tokenBuffer_Parser0.nextToken();
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasGenericTypes());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-327));
      assertNotNull(numericNode0);
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.isFloatingPointNumber());
      assertEquals((-327.0), numericNode0.doubleValue(), 0.01);
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isDouble());
      assertFalse(numericNode0.booleanValue());
      assertEquals((short) (-327), numericNode0.shortValue());
      assertFalse(numericNode0.isFloat());
      assertEquals((-327), numericNode0.intValue());
      assertTrue(numericNode0.isInt());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertTrue(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.isBigDecimal());
      assertTrue(numericNode0.canConvertToLong());
      assertEquals((-327L), numericNode0.longValue());
      assertNull(numericNode0.textValue());
      assertFalse(numericNode0.isShort());
      assertFalse(numericNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.INT, numericNode0.numberType());
      assertEquals((-327.0F), numericNode0.floatValue(), 0.01F);
      assertTrue(numericNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
      
      tokenBuffer0.writeTree(numericNode0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.isFloatingPointNumber());
      assertEquals((-327.0), numericNode0.doubleValue(), 0.01);
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isDouble());
      assertFalse(numericNode0.booleanValue());
      assertEquals((short) (-327), numericNode0.shortValue());
      assertFalse(numericNode0.isFloat());
      assertEquals((-327), numericNode0.intValue());
      assertTrue(numericNode0.isInt());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertTrue(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.isBigDecimal());
      assertTrue(numericNode0.canConvertToLong());
      assertEquals((-327L), numericNode0.longValue());
      assertNull(numericNode0.textValue());
      assertFalse(numericNode0.isShort());
      assertFalse(numericNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.INT, numericNode0.numberType());
      assertEquals((-327.0F), numericNode0.floatValue(), 0.01F);
      assertTrue(numericNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertNotNull(objectReader0);
      
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ObjectReader objectReader1 = objectReader0.withAttributes(hashMap0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(3, deserializationFeatureArray0.length);
      assertNotNull(objectReader2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader2, false);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(3, deserializationFeatureArray0.length);
      assertNotNull(tokenBuffer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*gXV='nP=,!");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw('3');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      
      Float float0 = new Float((float) 16);
      assertEquals(16.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy();
      assertNotNull(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      BigDecimal bigDecimal0 = new BigDecimal(12);
      assertNotNull(bigDecimal0);
      assertEquals((short)12, bigDecimal0.shortValue());
      assertEquals((byte)12, bigDecimal0.byteValue());
      
      tokenBuffer1.writeNumber(bigDecimal0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals((short)12, bigDecimal0.shortValue());
      assertEquals((byte)12, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(tokenBuffer_Parser0, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(jsonParserSequence0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      
      tokenBuffer1.setCurrentValue(tokenBuffer_Parser0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(jsonParserSequence0);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertNull(tokenBuffer2.firstToken());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertNotNull(simpleType0);
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasGenericTypes());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      int int0 = tokenBuffer_Segment0.rawType(493);
      assertEquals(0, int0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer0._first;
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectReader0, false, false);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      try { 
        tokenBuffer_Parser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (END_ARRAY) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000045; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeEndObject();
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      boolean boolean1 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      tokenBuffer0.writeEndObject();
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      
      tokenBuffer0.writeString((SerializableString) serializedString0);
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      tokenBuffer0.writeRawValue("com.fasterxml.jackson.databind.util.TokenBuffer$1");
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      tokenBuffer0.writeEndObject();
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      boolean boolean2 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Object object0 = tokenBuffer_Segment0.findTypeId((byte)0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer0.writeEndObject();
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      String string1 = tokenBuffer_Parser0.getCurrentName();
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      boolean boolean0 = tokenBuffer0.isClosed();
      assertFalse(boolean0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Month month0 = Month.NOVEMBER;
      assertEquals(Month.NOVEMBER, month0);
      
      Short short0 = new Short((short)1629);
      assertEquals((short)1629, (short)short0);
      assertNotNull(short0);
      
      tokenBuffer0._appendRaw(16, tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      
      tokenBuffer0.writeEndObject();
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      
      JavaType javaType0 = simpleAbstractTypeResolver0.resolveAbstractType((DeserializationConfig) null, simpleType0);
      assertNull(javaType0);
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = simpleType0.equals(long0);
      assertFalse(boolean0);
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      assertNotNull(objectReader0);
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectReader0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      
      tokenBuffer1.writeRawValue(" entries)");
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertNotNull(tokenBuffer2);
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer0.writeEndObject();
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      // Undeclared exception!
      tokenBuffer2.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      
      tokenBuffer0.writeEndArray();
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      tokenBuffer1.writeEndObject();
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      tokenBuffer_Segment0._nativeIds = treeMap0;
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(0, treeMap0.size());
      assertEquals(0, tokenBuffer_Segment0._nativeIds.size());
      
      Object object0 = tokenBuffer_Segment0.findTypeId((byte)0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertTrue(tokenBuffer_Segment0.hasIds());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      short short0 = (short) (-669);
      Short short1 = new Short((short) (-669));
      assertEquals((short) (-669), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Object object1 = tokenBuffer0._objectId;
      assertNull(object1);
      
      tokenBuffer0._appendRaw(200, (Object) null);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      
      tokenBuffer0.writeEndObject();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.serialize(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer0.writeEndObject();
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Short short0 = new Short((short)460);
      assertEquals((short)460, (short)short0);
      assertNotNull(short0);
      
      tokenBuffer0._appendRaw(1001, short0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      
      tokenBuffer1.writeEndObject();
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      
      try { 
        tokenBuffer0.serialize(tokenBuffer1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized value type for VALUE_NUMBER_FLOAT: java.lang.Short, can not serialize
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      
      tokenBuffer0.writeEndArray();
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      
      int int0 = tokenBuffer_Segment0.rawType((-1515));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      
      tokenBuffer_Parser1.peekNextToken();
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasGenericTypes());
      
      JavaType javaType0 = simpleAbstractTypeResolver0.resolveAbstractType((DeserializationConfig) null, simpleType0);
      assertNull(javaType0);
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasGenericTypes());
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      assertNotNull(objectReader0);
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasGenericTypes());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectReader0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      tokenBuffer1.writeRawValue(" entries)");
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertNotNull(tokenBuffer2);
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasGenericTypes());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Month month0 = Month.NOVEMBER;
      assertEquals(Month.NOVEMBER, month0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, false);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      tokenBuffer_Parser0.close();
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      try { 
        tokenBuffer_Parser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000045; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw((String) null, 16, 16);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(dupDetector0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      JsonLocation jsonLocation0 = dupDetector0.findLocation();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(jsonLocation0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      
      tokenBuffer_Parser0.close();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      tokenBuffer_Parser0.setLocation(jsonLocation0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      tokenBuffer_Parser0.nextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      tokenBuffer_Parser0.nextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertNull(tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(tokenBuffer_Parser0, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(jsonParserSequence0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      
      tokenBuffer1.setCurrentValue(tokenBuffer_Parser0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(jsonParserSequence0);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertNull(tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        tokenBuffer2.deserialize(tokenBuffer_Parser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      
      tokenBuffer0.writeEndObject();
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: END_OBJECT]", string0);
      assertNotNull(string0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      String string1 = tokenBuffer_Parser0.nextFieldName();
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      tokenBuffer_Parser1.nextToken();
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(32, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(32, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      
      tokenBuffer0.writeRawValue((String) null);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      tokenBuffer0.writeEndObject();
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.canReadObjectId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      
      tokenBuffer_Parser0.overrideCurrentName((String) null);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(32, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      String string1 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: VALUE_EMBEDDED_OBJECT, END_OBJECT]", string1);
      assertNotNull(string1);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      tokenBuffer0.writeEndObject();
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Object object0 = tokenBuffer_Segment0.findTypeId((byte)0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Float float0 = new Float(1326.175F);
      assertEquals(1326.175F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy();
      assertNotNull(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      
      tokenBuffer_Parser0.setCodec(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      boolean boolean1 = tokenBuffer1.isClosed();
      assertFalse(boolean1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      
      tokenBuffer_Parser0.peekNextToken();
      assertSame(objectMapper0, objectMapper1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      BigDecimal bigDecimal0 = new BigDecimal(12);
      assertNotNull(bigDecimal0);
      assertEquals((short)12, bigDecimal0.shortValue());
      assertEquals((byte)12, bigDecimal0.byteValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals((short)12, bigDecimal0.shortValue());
      assertEquals((byte)12, bigDecimal0.byteValue());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      assertSame(objectMapper0, objectMapper1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = tokenBuffer0._objectId;
      assertNull(object0);
      
      tokenBuffer0._appendRaw(200, (Object) null);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      tokenBuffer0.writeEndObject();
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.serialize(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      
      Short short0 = new Short((short)1774);
      assertEquals((short)1774, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)16);
      assertEquals((short)16, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Object object0 = tokenBuffer_Parser0.getObjectId();
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      assertNotNull(sequenceInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(1114111, (int) (short) (-2841), (Object) short0, (Object) null, (Object) sequenceInputStream0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(short0.equals((Object)short1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(fileDescriptor0.valid());
      assertTrue(tokenBuffer_Segment1.hasIds());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      Object object1 = tokenBuffer_Segment1.findTypeId((short)1774);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(short0.equals((Object)short1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(fileDescriptor0.valid());
      assertTrue(tokenBuffer_Segment1.hasIds());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw(charArray0, (int) (short)1774, 177);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      
      tokenBuffer0.writeEndObject();
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Object object0 = tokenBuffer_Segment0.findTypeId((byte)0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Float float0 = new Float((-0.7831505F));
      assertEquals((-0.7831505F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      boolean boolean1 = tokenBuffer1.isEnabled(jsonGenerator_Feature0);
      assertTrue(boolean1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(boolean1 == boolean0);
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertNotNull(tokenBuffer2);
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      
      boolean boolean2 = tokenBuffer2.isClosed();
      assertFalse(boolean2);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      
      BigDecimal bigDecimal0 = new BigDecimal(108);
      assertNotNull(bigDecimal0);
      assertEquals((short)108, bigDecimal0.shortValue());
      assertEquals((byte)108, bigDecimal0.byteValue());
      
      tokenBuffer1.writeNumber(bigDecimal0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((short)108, bigDecimal0.shortValue());
      assertEquals((byte)108, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(64, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      BigDecimal bigDecimal0 = new BigDecimal(16);
      assertNotNull(bigDecimal0);
      assertEquals((byte)16, bigDecimal0.byteValue());
      assertEquals((short)16, bigDecimal0.shortValue());
      
      tokenBuffer0.writeNumberField("", bigDecimal0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((byte)16, bigDecimal0.byteValue());
      assertEquals((short)16, bigDecimal0.shortValue());
      
      tokenBuffer_Parser0.close();
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      tokenBuffer1.writeRawValue("");
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(64, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer2.firstToken());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteTypeId());
      
      RawValue rawValue0 = new RawValue("");
      assertNotNull(rawValue0);
      
      // Undeclared exception!
      tokenBuffer2.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasGenericTypes());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      tokenBuffer0.writeEndObject();
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      tokenBuffer0.writeStringField("", (String) null);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: END_OBJECT, FIELD_NAME(), VALUE_NULL]", string0);
      assertNotNull(string0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Month month0 = Month.OCTOBER;
      assertEquals(Month.OCTOBER, month0);
      
      Object object0 = tokenBuffer_Segment0.findObjectId(646);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(128, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      BigDecimal bigDecimal0 = new BigDecimal((-432));
      assertNotNull(bigDecimal0);
      assertEquals((byte)80, bigDecimal0.byteValue());
      assertEquals((short) (-432), bigDecimal0.shortValue());
      
      tokenBuffer0.writeNumberField("", bigDecimal0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((byte)80, bigDecimal0.byteValue());
      assertEquals((short) (-432), bigDecimal0.shortValue());
      
      tokenBuffer_Parser0.close();
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      tokenBuffer1.writeRawValue((String) null);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      
      tokenBuffer0._appendRaw((-432), (Object) null);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeRawValue((String) null);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      
      tokenBuffer_Parser1.overrideCurrentName((String) null);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      
      String string1 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: VALUE_EMBEDDED_OBJECT]", string1);
      assertNotNull(string1);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      
      String string2 = tokenBuffer_Parser0.nextFieldName();
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      
      tokenBuffer_Parser1.nextToken();
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = tokenBuffer0._objectId;
      assertNull(object0);
      
      tokenBuffer0._appendRaw(170, (Object) null);
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(32, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(32, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      tokenBuffer0.writeRawValue((String) null);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      tokenBuffer0.writeEndObject();
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.canReadObjectId());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      
      String string1 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: VALUE_EMBEDDED_OBJECT, END_OBJECT]", string1);
      assertNotNull(string1);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)100;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)100}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, (-3162));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      Short short1 = new Short((short)28);
      assertEquals((short)28, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Byte byte0 = new Byte((byte)71);
      assertEquals((byte)71, (byte)byte0);
      assertNotNull(byte0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      tokenBuffer0._appendRaw((short)28, bigInteger0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      tokenBuffer0.writeEndObject();
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Object object0 = tokenBuffer_Segment0.findTypeId((byte)0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Short short0 = new Short((short)460);
      assertEquals((short)460, (short)short0);
      assertNotNull(short0);
      
      tokenBuffer0._appendRaw(1001, short0);
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      
      BigDecimal bigDecimal0 = new BigDecimal(1960);
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-88), bigDecimal0.byteValue());
      assertEquals((short)1960, bigDecimal0.shortValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((byte) (-88), bigDecimal0.byteValue());
      assertEquals((short)1960, bigDecimal0.shortValue());
      
      tokenBuffer1.writeString((SerializableString) null);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(2, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(2, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(2, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(2, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      BigDecimal bigDecimal0 = new BigDecimal((-432));
      assertNotNull(bigDecimal0);
      assertEquals((byte)80, bigDecimal0.byteValue());
      assertEquals((short) (-432), bigDecimal0.shortValue());
      
      tokenBuffer0.writeNumberField((String) null, bigDecimal0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(2, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(2, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((byte)80, bigDecimal0.byteValue());
      assertEquals((short) (-432), bigDecimal0.shortValue());
      
      tokenBuffer_Parser0.close();
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(2, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      tokenBuffer0.writeRawValue("");
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(2, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(2, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, false);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertNotNull(tokenBuffer2);
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertNull(tokenBuffer2.firstToken());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canOmitFields());
      
      // Undeclared exception!
      try { 
        tokenBuffer2.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setCodec(objectMapper0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertNotNull(tokenBuffer2);
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertNull(tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(tokenBuffer_Parser0, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(jsonParserSequence0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      
      tokenBuffer2.setCurrentValue(tokenBuffer_Parser0);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertNull(tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      
      TokenBuffer tokenBuffer3 = new TokenBuffer(jsonParserSequence0);
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer3);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(31, tokenBuffer3.getFeatureMask());
      assertEquals(0, tokenBuffer3.getFormatFeatures());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertFalse(tokenBuffer3.isClosed());
      assertEquals((-1), tokenBuffer3.getOutputBuffered());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertNull(tokenBuffer3.firstToken());
      assertTrue(tokenBuffer3.canOmitFields());
      assertFalse(tokenBuffer3.canWriteObjectId());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      
      tokenBuffer2.writeEndObject();
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer3);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      
      tokenBuffer0.firstToken();
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer3));
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(dupDetector0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      
      JsonLocation jsonLocation0 = dupDetector0.findLocation();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(jsonLocation0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      
      tokenBuffer_Parser0.close();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      
      tokenBuffer_Parser0.setLocation(jsonLocation0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      
      tokenBuffer_Parser0.nextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      
      tokenBuffer_Parser0.nextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      Short short0 = new Short((short)4);
      assertEquals((short)4, (short)short0);
      assertNotNull(short0);
      
      Byte byte0 = new Byte((byte) (-104));
      assertEquals((byte) (-104), (byte)byte0);
      assertNotNull(byte0);
      
      tokenBuffer0._appendRaw(5, byte0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer2);
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertNull(tokenBuffer2.firstToken());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.serialize(tokenBuffer2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      tokenBuffer0.writeEndObject();
      assertSame(objectMapper0, objectMapper1);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Float float0 = new Float((float) 1317);
      assertEquals(1317.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      tokenBuffer0.writeEndObject();
      assertSame(objectMapper0, objectMapper1);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: END_OBJECT, END_OBJECT]", string0);
      assertSame(objectMapper0, objectMapper1);
      assertNotNull(string0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setCodec(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(128, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      tokenBuffer0.writeNumber((short)32767);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      BigDecimal bigDecimal0 = new BigDecimal((-432));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-432), bigDecimal0.shortValue());
      assertEquals((byte)80, bigDecimal0.byteValue());
      
      tokenBuffer_Parser0.close();
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      
      tokenBuffer1.writeRawValue((String) null);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      
      tokenBuffer_Parser0.nextToken();
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertNotNull(simpleType0);
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasGenericTypes());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Float float0 = new Float((-294.77325F));
      assertEquals((-294.77325F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy();
      assertNotNull(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      boolean boolean1 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer_Parser0.peekNextToken();
      assertSame(objectMapper0, objectMapper1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      BigDecimal bigDecimal0 = new BigDecimal(16);
      assertNotNull(bigDecimal0);
      assertEquals((byte)16, bigDecimal0.byteValue());
      assertEquals((short)16, bigDecimal0.shortValue());
      
      tokenBuffer0.writeNumber((BigDecimal) null);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      tokenBuffer0.writeEndObject();
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Object object0 = tokenBuffer_Segment0.findTypeId(1111);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Float float0 = new Float((float) 16);
      assertEquals(16.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Short short0 = new Short((short) (-669));
      assertEquals((short) (-669), (short)short0);
      assertNotNull(short0);
      
      Object object1 = tokenBuffer0._objectId;
      assertNull(object1);
      
      Object object2 = tokenBuffer0.getCurrentValue();
      assertNull(object2);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      tokenBuffer0.writeNumberField("", (long) 1111);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      tokenBuffer0._appendRaw(3353, bigDecimal0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      
      tokenBuffer1.writeEndObject();
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(JsonToken.END_OBJECT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(128, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeNumber((short)32767);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      Short short0 = new Short((short)460);
      assertEquals((short)460, (short)short0);
      assertNotNull(short0);
      
      tokenBuffer0._appendRaw((-1602), short0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      
      tokenBuffer0.writeEndObject();
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeRawValue((String) null);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      tokenBuffer0._appendRaw((short)28, bigDecimal0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.serialize(tokenBuffer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.util.RawValue cannot be cast to java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      tokenBuffer0.writeEndObject();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Object object0 = tokenBuffer_Segment0.findTypeId((byte)0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Float float0 = new Float(1326.175F);
      assertEquals(1326.175F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy();
      assertNotNull(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      
      String string1 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: END_OBJECT]", string1);
      assertSame(objectMapper0, objectMapper1);
      assertNotNull(string1);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Month month0 = Month.FEBRUARY;
      assertEquals(Month.FEBRUARY, month0);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.appendRaw((int) (byte)0, 16, (Object) float1, (Object) month0, (Object) float0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(tokenBuffer_Segment2);
      assertTrue(tokenBuffer_Segment0.hasIds());
      
      Month month1 = Month.OCTOBER;
      assertEquals(Month.OCTOBER, month1);
      assertNotSame(month1, month0);
      assertFalse(month1.equals((Object)month0));
      
      Object object1 = tokenBuffer_Segment0.findObjectId((-3270));
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object1);
      assertTrue(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(JsonToken.END_OBJECT, jsonToken0);
      assertSame(objectMapper0, objectMapper1);
      assertFalse(jsonToken0.isScalarValue());
      assertFalse(jsonToken0.isStructStart());
      assertEquals("}", jsonToken0.asString());
      assertFalse(jsonToken0.isBoolean());
      assertFalse(jsonToken0.isNumeric());
      assertEquals(2, jsonToken0.id());
      assertTrue(jsonToken0.isStructEnd());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(128, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      tokenBuffer_Parser1._closed = false;
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(128, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      
      tokenBuffer_Parser2.overrideCurrentName("");
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals("", tokenBuffer_Parser2.getCurrentName());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: ]", string0);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      String string1 = tokenBuffer_Parser0.nextFieldName();
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      tokenBuffer_Parser1.nextToken();
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(128, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      
      tokenBuffer_Parser1.overrideCurrentName("I<8uV<vnTiW");
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(128, tokenBuffer_Parser0.getFeatureMask());
      assertEquals("I<8uV<vnTiW", tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(128, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals("I<8uV<vnTiW", tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Short short0 = new Short((short) (-2166));
      assertEquals((short) (-2166), (short)short0);
      assertNotNull(short0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      tokenBuffer0._appendRaw((short) (-2166), short0);
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      tokenBuffer0.writeEndObject();
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, false);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertNotNull(tokenBuffer2);
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      assertNull(tokenBuffer2.firstToken());
      
      TokenBuffer tokenBuffer3 = tokenBuffer1.append(tokenBuffer0);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer1, tokenBuffer3);
      assertSame(tokenBuffer3, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer3);
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer3.firstToken());
      assertTrue(tokenBuffer3.canOmitFields());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertEquals(0, tokenBuffer3.getFormatFeatures());
      assertEquals(31, tokenBuffer3.getFeatureMask());
      assertEquals((-1), tokenBuffer3.getOutputBuffered());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertFalse(tokenBuffer3.isClosed());
      
      TokenBuffer tokenBuffer4 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer3));
      assertNotNull(tokenBuffer4);
      assertFalse(tokenBuffer4.canWriteObjectId());
      assertEquals(0, tokenBuffer4.getFormatFeatures());
      assertFalse(tokenBuffer4.canWriteTypeId());
      assertEquals(31, tokenBuffer4.getFeatureMask());
      assertTrue(tokenBuffer4.canOmitFields());
      assertTrue(tokenBuffer4.canWriteBinaryNatively());
      assertNull(tokenBuffer4.firstToken());
      assertEquals((-1), tokenBuffer4.getOutputBuffered());
      assertEquals(0, tokenBuffer4.getHighestEscapedChar());
      assertFalse(tokenBuffer4.isClosed());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      tokenBuffer0.writeString("zGPB'V");
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      tokenBuffer1.writeRawValue("");
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertNull(tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      
      TokenBuffer tokenBuffer3 = tokenBuffer2.append(tokenBuffer0);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer3);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      assertSame(tokenBuffer3, tokenBuffer2);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer3);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertEquals(31, tokenBuffer3.getFeatureMask());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer3.firstToken());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertTrue(tokenBuffer3.canOmitFields());
      assertEquals(0, tokenBuffer3.getFormatFeatures());
      assertFalse(tokenBuffer3.isClosed());
      assertEquals((-1), tokenBuffer3.getOutputBuffered());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      
      TokenBuffer tokenBuffer4 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer1));
      assertNotNull(tokenBuffer4);
      assertFalse(tokenBuffer4.canWriteTypeId());
      assertFalse(tokenBuffer4.isClosed());
      assertFalse(tokenBuffer4.canWriteObjectId());
      assertEquals((-1), tokenBuffer4.getOutputBuffered());
      assertTrue(tokenBuffer4.canOmitFields());
      assertTrue(tokenBuffer4.canWriteBinaryNatively());
      assertNull(tokenBuffer4.firstToken());
      assertEquals(0, tokenBuffer4.getHighestEscapedChar());
      assertEquals(31, tokenBuffer4.getFeatureMask());
      assertEquals(0, tokenBuffer4.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeEndObject();
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Object object0 = tokenBuffer_Parser0.getCurrentValue();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      tokenBuffer0.writeEndObject();
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeNumber(0.0F);
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeStringField("", "");
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0._appendRaw(16, (Object) null);
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertNull(tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      tokenBuffer1.writeEndObject();
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Object object0 = tokenBuffer_Segment0.findTypeId((byte)0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[8];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      serializationFeatureArray0[7] = serializationFeature1;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(serializationFeature0, serializationFeature1);
      assertFalse(serializationFeature0.equals((Object)serializationFeature1));
      assertEquals(8, serializationFeatureArray0.length);
      assertNotNull(objectMapper1);
      
      Short short0 = new Short((short) (-669));
      assertEquals((short) (-669), (short)short0);
      assertNotNull(short0);
      
      tokenBuffer0._appendAt = Integer.MAX_VALUE;
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      Object object1 = tokenBuffer0._objectId;
      assertNull(object1);
      
      tokenBuffer0._appendRaw(200, (Object) null);
      assertSame(objectMapper0, objectMapper1);
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000045; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      tokenBuffer0._appendRaw((short)28, bigDecimal0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      tokenBuffer1.writeEndObject();
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, false);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertNull(tokenBuffer2.firstToken());
      
      // Undeclared exception!
      try { 
        tokenBuffer2.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      tokenBuffer0.writeRawValue("K{fG'");
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      tokenBuffer0._appendRaw((-904), objectMapper0);
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      
      tokenBuffer1.writeEndObject();
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, false);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertNotNull(tokenBuffer2);
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      
      // Undeclared exception!
      try { 
        tokenBuffer2.append(tokenBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: entry should be a Number, but is of type com.fasterxml.jackson.databind.ObjectMapper
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      tokenBuffer1._appendRaw((-986), tokenBuffer_Segment0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertNotNull(tokenBuffer2);
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertNull(tokenBuffer2.firstToken());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      
      tokenBuffer2.writeEndObject();
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper0, false);
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer3);
      assertNull(tokenBuffer3.firstToken());
      assertTrue(tokenBuffer3.canOmitFields());
      assertEquals(0, tokenBuffer3.getFormatFeatures());
      assertEquals(31, tokenBuffer3.getFeatureMask());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertFalse(tokenBuffer3.isClosed());
      assertEquals((-1), tokenBuffer3.getOutputBuffered());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertFalse(tokenBuffer3.canWriteTypeId());
      
      TokenBuffer tokenBuffer4 = tokenBuffer1.append(tokenBuffer0);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer4);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer4);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertSame(tokenBuffer4, tokenBuffer1);
      assertNotSame(tokenBuffer4, tokenBuffer0);
      assertNotSame(tokenBuffer4, tokenBuffer2);
      assertNotSame(tokenBuffer4, tokenBuffer3);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer3));
      assertNotNull(tokenBuffer4);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer4.canWriteTypeId());
      assertEquals(31, tokenBuffer4.getFeatureMask());
      assertEquals(0, tokenBuffer4.getFormatFeatures());
      assertFalse(tokenBuffer4.isClosed());
      assertEquals((-1), tokenBuffer4.getOutputBuffered());
      assertEquals(0, tokenBuffer4.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer4.firstToken());
      assertTrue(tokenBuffer4.canWriteBinaryNatively());
      assertFalse(tokenBuffer4.canWriteObjectId());
      assertTrue(tokenBuffer4.canOmitFields());
      
      TokenBuffer tokenBuffer5 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer4));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer5.equals((Object)tokenBuffer1));
      assertNotNull(tokenBuffer5);
      assertTrue(tokenBuffer5.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer5.getOutputBuffered());
      assertTrue(tokenBuffer5.canOmitFields());
      assertEquals(0, tokenBuffer5.getFormatFeatures());
      assertFalse(tokenBuffer5.isClosed());
      assertFalse(tokenBuffer5.canWriteTypeId());
      assertEquals(0, tokenBuffer5.getHighestEscapedChar());
      assertNull(tokenBuffer5.firstToken());
      assertFalse(tokenBuffer5.canWriteObjectId());
      assertEquals(31, tokenBuffer5.getFeatureMask());
      
      try { 
        tokenBuffer4.writeObject(tokenBuffer1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class com.fasterxml.jackson.databind.util.TokenBuffer$Segment and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )
         //
         verifyException("com.fasterxml.jackson.databind.ser.impl.UnknownSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      tokenBuffer0.writeEndArray();
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser1, defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertNull(tokenBuffer2.firstToken());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      
      tokenBuffer2.writeStringField("')", "q&!\"zoTW");
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer2.firstToken());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      
      String string0 = tokenBuffer2.toString();
      assertEquals("[TokenBuffer: FIELD_NAME(')), VALUE_STRING]", string0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer2.firstToken());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      TokenBuffer tokenBuffer3 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl1);
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer3);
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertNull(tokenBuffer3.firstToken());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertEquals((-1), tokenBuffer3.getOutputBuffered());
      assertTrue(tokenBuffer3.canOmitFields());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer3.getFormatFeatures());
      assertFalse(tokenBuffer3.isClosed());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertEquals(31, tokenBuffer3.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      tokenBuffer3.writeTree((TreeNode) null);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertEquals((-1), tokenBuffer3.getOutputBuffered());
      assertTrue(tokenBuffer3.canOmitFields());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer3.getFormatFeatures());
      assertFalse(tokenBuffer3.isClosed());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer3.firstToken());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertEquals(31, tokenBuffer3.getFeatureMask());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
  }
}
