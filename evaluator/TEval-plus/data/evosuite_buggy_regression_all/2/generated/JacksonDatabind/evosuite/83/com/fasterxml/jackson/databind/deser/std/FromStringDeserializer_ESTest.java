/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:04:34 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.UUIDDeserializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import java.io.File;
import java.io.InputStream;
import java.io.PipedReader;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.time.chrono.HijrahEra;
import java.util.Currency;
import java.util.Locale;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FromStringDeserializer_ESTest extends FromStringDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Pattern> class0 = Pattern.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
      assertEquals(1, FromStringDeserializer.Std.STD_FILE);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      // Undeclared exception!
      try { 
        uUIDDeserializer0._deserializeEmbedded(hijrahEra0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.FromStringDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
      Object object0 = fromStringDeserializer_Std0._deserializeFromEmptyString();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<?>[] classArray0 = FromStringDeserializer.types();
      assertEquals(13, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<File> class0 = File.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
      assertEquals(10, FromStringDeserializer.Std.STD_TIME_ZONE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<URL> class0 = URL.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
      assertEquals(2, FromStringDeserializer.Std.STD_URL);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<URI> class0 = URI.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
      assertEquals(12, FromStringDeserializer.Std.STD_INET_SOCKET_ADDRESS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
      assertEquals(11, FromStringDeserializer.Std.STD_INET_ADDRESS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
      assertNull(fromStringDeserializer_Std0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
      assertEquals(12, FromStringDeserializer.Std.STD_INET_SOCKET_ADDRESS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Charset> class0 = Charset.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
      assertEquals(6, FromStringDeserializer.Std.STD_CURRENCY);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
      assertFalse(fromStringDeserializer_Std0.isCachable());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
      assertEquals(10, FromStringDeserializer.Std.STD_TIME_ZONE);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<InetSocketAddress> class0 = InetSocketAddress.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
      assertEquals(10, FromStringDeserializer.Std.STD_TIME_ZONE);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<StringBuilder> class0 = StringBuilder.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
      Object object0 = fromStringDeserializer_Std0._deserializeFromEmptyString();
      assertEquals("", object0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MapLikeType> class0 = MapLikeType.class;
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      IOContext iOContext0 = new IOContext((BufferRecycler) null, defaultDeserializationContext_Impl0, false);
      PipedReader pipedReader0 = new PipedReader();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 12, pipedReader0, objectReader0, charsToNameCanonicalizer0, (char[]) null, 5, 3, false);
      // Undeclared exception!
      try { 
        uUIDDeserializer0.deserialize((JsonParser) readerBasedJsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 1);
      MockFile mockFile0 = (MockFile)fromStringDeserializer_Std0._deserialize("[Don't know how to convert embedded Object of type %s into %s", (DeserializationContext) null);
      assertFalse(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
      MockInetSocketAddress mockInetSocketAddress0 = (MockInetSocketAddress)fromStringDeserializer_Std0._deserialize("[6{/0]>l+xScG", defaultDeserializationContext_Impl0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 2);
      try { 
        fromStringDeserializer_Std0._deserialize("[", (DeserializationContext) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: [
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Object> class0 = Object.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 3);
      URI uRI0 = (URI)fromStringDeserializer_Std0._deserialize("Z", defaultDeserializationContext_Impl0);
      assertNull(uRI0.getRawQuery());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<File> class0 = File.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 4);
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0._deserialize("-Mi1GC.", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.FromStringDeserializer$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<File> class0 = File.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 5);
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0._deserialize("n(PA>JsJA", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.FromStringDeserializer$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 6);
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0._deserialize("[", (DeserializationContext) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 7);
      Pattern pattern0 = (Pattern)fromStringDeserializer_Std0._deserialize("", (DeserializationContext) null);
      assertEquals("", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Module> class0 = Module.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
      Locale locale0 = (Locale)fromStringDeserializer_Std0._deserialize("[USE_WRAPPER_NAME_AS_PROPERTY_NAME", defaultDeserializationContext_Impl0);
      assertEquals("[use_WRAPPER_NAME_AS_PROPERTY_NAME", locale0.toString());
      assertEquals("NAME_AS_PROPERTY_NAME", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 9);
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0._deserialize(", problem: ", (DeserializationContext) null);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // , problem: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<StringBuilder> class0 = StringBuilder.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 10);
      ZoneInfo zoneInfo0 = (ZoneInfo)fromStringDeserializer_Std0._deserialize("9|>_P<=2:RhNd(v", (DeserializationContext) null);
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<InetSocketAddress> class0 = InetSocketAddress.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 11);
      Inet4Address inet4Address0 = (Inet4Address)fromStringDeserializer_Std0._deserialize("[", (DeserializationContext) null);
      assertFalse(inet4Address0.isLoopbackAddress());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 13);
      Object object0 = fromStringDeserializer_Std0._deserialize("[", (DeserializationContext) null);
      assertEquals("[", object0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, (-2867));
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0._deserialize("J!", (DeserializationContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
      Object object0 = fromStringDeserializer_Std0._deserialize("Don't know how to convert embedded Object of type %s into %s", (DeserializationContext) null);
      assertEquals("don't know how to convert embedded object of type %s into %s", object0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
      Object object0 = fromStringDeserializer_Std0._deserialize("9|>_P<=2:RNd(v", (DeserializationContext) null);
      assertEquals("9|>_P<=2:RND(V", object0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = fromStringDeserializer_Std0._deserialize(".;_:3:", defaultDeserializationContext_Impl0);
      assertEquals("/200.42.42.0:0", object0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0._deserialize("[", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.FromStringDeserializer$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
      Object object0 = fromStringDeserializer_Std0._deserialize("Z", (DeserializationContext) null);
      assertEquals("/200.42.42.0:0", object0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0._deserialize("Unresolved forward references for: ", (DeserializationContext) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 3);
      URI uRI0 = (URI)fromStringDeserializer_Std0._deserializeFromEmptyString();
      assertNull(uRI0.getScheme());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
      Locale locale0 = (Locale)fromStringDeserializer_Std0._deserializeFromEmptyString();
      assertEquals("", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 4);
      int int0 = fromStringDeserializer_Std0._firstHyphenOrUnderscore("O-';[KgQ1/C?h!V|dd");
      assertEquals(1, int0);
  }
}
