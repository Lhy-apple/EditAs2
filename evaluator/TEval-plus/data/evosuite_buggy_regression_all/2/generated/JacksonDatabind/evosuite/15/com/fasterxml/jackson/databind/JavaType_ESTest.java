/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:55:46 GMT 2023
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ClassKey;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.InputStream;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.Collection;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JavaType_ESTest extends JavaType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<ObjectReader> class0 = ObjectReader.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) simpleType0);
      assertFalse(simpleType0.useStaticType());
      assertTrue(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(";XlWSAdQ*-Yq.,}", "", 1536);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientConnectionException0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) sQLTransientException0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<ObjectReader> class0 = ObjectReader.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.getGenericSignature();
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<ObjectReader> class0 = ObjectReader.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.getErasedSignature();
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Throwable> class1 = Throwable.class;
      JavaType javaType0 = simpleType0.widenBy(class1);
      assertFalse(javaType0.isFinal());
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Collection> class0 = Collection.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Gd(^2e", "", 0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLTransientConnectionException0);
      boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<ObjectReader> class0 = ObjectReader.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.getContentType();
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      mapLikeType0.isInterface();
      assertFalse(mapLikeType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JavaType javaType0 = mapType0.narrowKey(class0);
      assertFalse(mapType0.useStaticType());
      assertFalse(javaType0.equals((Object)mapType0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      JavaType javaType0 = simpleType0.narrowBy(class0);
      assertSame(javaType0, simpleType0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<ObjectReader> class0 = ObjectReader.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType javaType0 = simpleType0.forcedNarrowBy(class0);
      assertSame(javaType0, simpleType0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Collection> class0 = Collection.class;
      Class<ObjectWriter> class1 = ObjectWriter.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      CollectionLikeType collectionLikeType0 = collectionType0.withValueHandler("NONE");
      JavaType javaType0 = collectionLikeType0.forcedNarrowBy(class1);
      assertFalse(collectionType0.useStaticType());
      assertFalse(javaType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Collection> class0 = Collection.class;
      Class<ObjectWriter> class1 = ObjectWriter.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      CollectionLikeType collectionLikeType0 = collectionType0.withTypeHandler(typeFactory0);
      JavaType javaType0 = collectionLikeType0.forcedNarrowBy(class1);
      assertFalse(collectionType0.useStaticType());
      assertTrue(javaType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<ObjectReader> class0 = ObjectReader.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType javaType0 = simpleType0.widenBy(class0);
      assertFalse(javaType0.useStaticType());
      assertSame(javaType0, simpleType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = SimpleType.construct(class0);
      boolean boolean0 = simpleType0.hasRawClass(class0);
      assertFalse(simpleType0.useStaticType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      boolean boolean0 = mapType0.isConcrete();
      assertFalse(boolean0);
      assertFalse(mapType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
      boolean boolean0 = arrayType0.hasGenericTypes();
      assertFalse(arrayType0.useStaticType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) mapType0);
      boolean boolean0 = arrayType0.hasGenericTypes();
      assertTrue(boolean0);
      assertFalse(arrayType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      JavaType javaType0 = mapLikeType0.containedTypeOrUnknown(1);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<ObjectReader> class0 = ObjectReader.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType javaType0 = simpleType0.containedTypeOrUnknown(6000);
      assertNotNull(javaType0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Collection> class0 = Collection.class;
      Class<ObjectWriter> class1 = ObjectWriter.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) collectionType0);
      Class<InputStream> class2 = InputStream.class;
      MapType mapType0 = MapType.construct(class2, arrayType0, collectionType0);
      Class<ClassKey> class3 = ClassKey.class;
      // Undeclared exception!
      try { 
        mapType0.narrowKey(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ClassKey is not assignable to [Ljava.util.Collection;
         //
         verifyException("com.fasterxml.jackson.databind.JavaType", e);
      }
  }
}
