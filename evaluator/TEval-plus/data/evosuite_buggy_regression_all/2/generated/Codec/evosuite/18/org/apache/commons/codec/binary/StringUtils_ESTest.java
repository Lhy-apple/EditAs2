/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:42:46 GMT 2023
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import org.apache.commons.codec.binary.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Be("0t:{S6VI7a");
      assertEquals(20, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUnchecked("UTF-16LE", "UTF-16LE");
      // Undeclared exception!
      try { 
        StringUtils.newString(byteArray0, "$HDNS?A$;0");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // $HDNS?A$;0: java.io.UnsupportedEncodingException: $HDNS?A$;0
         //
         verifyException("org.apache.commons.codec.binary.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.newStringUsAscii(byteArray0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.newStringIso8859_1(byteArray0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Le("6+bq#K ttfu],/AKt");
      String string0 = StringUtils.newStringUtf16Le(byteArray0);
      assertEquals("6+bq#K ttfu],/AKt", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Le("6+bq#K ttfu],/AKt");
      String string0 = StringUtils.newStringUtf16Be(byteArray0);
      assertEquals("\u3600\u2B00\u6200\u7100\u2300\u4B00\u2000\u7400\u7400\u6600\u7500\u5D00\u2C00\u2F00\u4100\u4B00\u7400", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = StringUtils.newStringUtf16((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesIso8859_1(">N");
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf8("r~r`sRBE7SS)OB");
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteBuffer byteBuffer0 = StringUtils.getByteBufferUtf8("");
      assertEquals(0, byteBuffer0.arrayOffset());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16("org.apache.commons.codec.binary.StringUtils");
      String string0 = StringUtils.newStringUtf8(byteArray0);
      assertEquals("\uFFFD\uFFFD\u0000o\u0000r\u0000g\u0000.\u0000a\u0000p\u0000a\u0000c\u0000h\u0000e\u0000.\u0000c\u0000o\u0000m\u0000m\u0000o\u0000n\u0000s\u0000.\u0000c\u0000o\u0000d\u0000e\u0000c\u0000.\u0000b\u0000i\u0000n\u0000a\u0000r\u0000y\u0000.\u0000S\u0000t\u0000r\u0000i\u0000n\u0000g\u0000U\u0000t\u0000i\u0000l\u0000s", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "org.apache.commons.codec.binary.StringUtils", (CharSequence) "\uFFFD\uFFFD\u0000o\u0000r\u0000g\u0000.\u0000a\u0000p\u0000a\u0000c\u0000h\u0000e\u0000.\u0000c\u0000o\u0000m\u0000m\u0000o\u0000n\u0000s\u0000.\u0000c\u0000o\u0000d\u0000e\u0000c\u0000.\u0000b\u0000i\u0000n\u0000a\u0000r\u0000y\u0000.\u0000S\u0000t\u0000r\u0000i\u0000n\u0000g\u0000U\u0000t\u0000i\u0000l\u0000s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) ">N", (CharSequence) ">N");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) ": ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "g<.Ctp{x", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        StringUtils.equals((CharSequence) charBuffer0, (CharSequence) "\uFEFForg.apache.commons.codec.binary.StringUtils");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) charBuffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUsAscii((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteBuffer byteBuffer0 = StringUtils.getByteBufferUtf8((String) null);
      assertNull(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUnchecked((String) null, (String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = StringUtils.newString((byte[]) null, "Cn+JP?");
      assertNull(string0);
  }
}
