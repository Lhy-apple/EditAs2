/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:21:48 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.Stack;
import java.util.Vector;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("Rtp(", "}Y>O\"MVRp");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = StringUtils.length("HHO73ASe@A+wMQdngO");
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("java.lang.String@0000000001");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, "T8`ueTeT@gI,e^|fj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringUtils0;
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", (-907));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Arry element ", "Arry element ", (-646));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("[2n:2zmmzfc#x", "SecurityException occurred during 1.6 backcompat code");
      assertEquals("[2n:2zmmzfc#x", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.center("", 256);
      assertEquals("                                                                                                                                                                                                                                                                ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(">eG Afo{Z");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("\"C", "&q", "\"C");
      assertEquals("\"C", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'T');
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.leftPad("java.runtime.name", 3);
      assertNotNull(string0);
      assertEquals("java.runtime.name", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 52);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Strings must not be null", " ", 2);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase(" ", "java.specification.name");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("TimeToLive of ", 'e');
      assertNotNull(string0);
      assertEquals(" of eToLiveTim", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "k,k7J}f7", 3768);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.replace("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("9", "9");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Mac OS X", (String) null);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty(":&EhBtTc($qdG(");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("5.1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "\\u00";
      String string1 = StringUtils.trimToNull(string0);
      assertNotNull(string1);
      assertEquals("\\u00", string1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match:", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.stripToNull("m~{");
      assertNotNull(string0);
      assertEquals("m~{", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Search and Replace array lengths dqn't match: ");
      assertEquals("Search and Replace array lengths dqn't match:", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.stripStart(" ", " ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.stripStart("a-L)", "");
      assertEquals("a-L)", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.strip("9   ", "9");
      assertEquals("   ", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.stripEnd("z?", "");
      assertEquals("z?", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = StringUtils.stripEnd("1nhh\"z,TwS", "1nhh\"z,TwS");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "jMhU<{TO$J/%");
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = StringUtils.stripAccents("java.vm.specification.nameyP3] Ns;8EcREsYEQ>D");
      assertEquals("java.vm.specification.nameyP3] Ns;8EcREsYEQ>D", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "bW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("9   ", "9   ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.indexOf("T8`useTeT@gI,e^|fj", '\'');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 't');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.indexOf("OhY#4NyfKF{\"nA", 'B', 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, ',', (-3473));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.indexOf("IllegalAccessException occurred during 1.6 backcompat code", "IllegalAccessException occurred during 1.6 backcompat code");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.indexOf("6PZD't_>qQ,Cx,", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "B\"2e}Tw:z{1[Y\"1Jf", 8192);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.indexOf("W", "uyOZ_R>h~(PZ;YX[", (-1288));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.indexOf("IllegalAccessException occurred during 1.6 backcompat code", (String) null, (-1288));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, "java.vm.specification.name", 1612);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("NoSuchFieldException occurred during 1.6 backcompat code", (String) null, 25);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("org.apache.", "org.apache.", (-5845));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("b-2;m1-* q7A/gHx", "", 65);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("IllegalAccessException occurred during 1.6 backcompat code", "IllegalAccessException occurred during 1.6 backcompat code", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("_vlYpivpD<;dg_n", "_vlYpivpD<;dg_n", 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("p{InCombiningDiacriticalMarks}+", (String) null, (-1582));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("IllegalAccessException occurred during 1.6 backcompat code", "Can't find a public method for ", (-1551));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("NgljcYEb!}S2B.Y", "", (-177));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("OhY#4NyfKF{\"n", "OhY#4NyfKF{\"n", (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("b#\"@ lC?Vtr", 'G');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", '?');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("x]6j}Ya*M", '_', 305);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, 'v', (-3015));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("Strings must not be null", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, (String) null, (-652));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("[z", "[z", 566);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("dJ#2YqA", (String) null, 1351);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("Px[+8'pr_l;\u0001", "Px[+8'pr_l;\u0001");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("b>&0iu3_ sn,tcxg", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, (String) null, (-1101));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("z?", (String) null, 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("9   ", "9", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("p{InCombiningDiacriticalMarks}+", "wyEh=\"Jfks");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("W", 'w');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, 'T');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("org.apache.commons.lang3.SystemUtils", 'c');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, "ClassNotFoundException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("Cannot get the toString of a null identity", "Cannot get the toString of a null identity");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("java.compiler", "java.compiler");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("Tx$(SXFFt|V,", "=Vx+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "T8`ueTeT@gI,e^|fj", "    ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "~MBlCS8~heXO+1R$~", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "bWe", "bWe");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "bWe", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", "T8`ueTeT@gI,e^|fj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "@gI,e^|fjTeT8`ue", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "illegalaccessexception can't find a public method for\\u000";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Q", string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "VQuWb{/!Iys:#ji#gFU", "illegalaccessexception can't find a public method for code");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "T8`ueTeT@gI,e^|fj", "h}^'7U4G.dbR@V{d.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "=Oh,fRtujtm", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "2BCR_6@S9SpDOCtC6h", "2BCR_6@S9SpDOCtC6h");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("l", "0y");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("9   ", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("0[   ", "0[   ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "^w");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " =q],+_SPv8`", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Windows");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "user.country", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone(charSequenceArray0[0], charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "ackcompat code$$$$$$$$$$$$$$$$", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Z?", "{! jt}Q(P");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "T8`useTeT@gI,e^|fj", "T8`useTeT@gI,e^|fj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "K-2d<#h4Z8BRm");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "java.util.prefs.PreferencesFactory", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[4];
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("]>", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int int0 = StringUtils.indexOfAny("IllegalAccessException occurred during 1.6 backcompat code", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Can't find a public method for ";
      int int0 = StringUtils.indexOfAny("IllegalAccessException occurred during 1.6 backcompat code", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("IllegalAccessException occurred during 1.6 backcompat code");
      int int0 = StringUtils.indexOfAny("IllegalAccessException occurred during 1.6 backcompat code", stringArray0);
      assertEquals(0, int0);
      assertEquals(18, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "", 1373);
      int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("T8`useTeT@gI,e^|fj", "T8`useTeT@gI,e^|fj", 1373);
      int int0 = StringUtils.lastIndexOfAny("T8`useTeT@gI,e^|fj", stringArray0);
      assertEquals(18, int0);
      assertEquals(19, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny(", Length: 0", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[6];
      int int0 = StringUtils.lastIndexOfAny("1.2", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 2213);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.substring("", 2);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.substring("klmnopqrstuvwxyz", (-82));
      assertEquals("klmnopqrstuvwxyz", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.substring("&i", (-637), (-637));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 2610, 2610);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.substring(" ", 5, 5);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.substring("*IF^t^bnUL}h&2p}L N", 4, 23);
      assertEquals("t^bnUL}h&2p}L N", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.left(" ", 127);
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.left((String) null, (-708));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.left("BUka6^(ey~=c'&6$M", (-5845));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.left("f2q. LU", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.right("HP-UXHP-UXHP-UXHP-UX", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.right(" |S", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.right("6.h", 's');
      assertEquals("6.h", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.mid("", (-593), (-593));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, '~', 1211);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.mid("3&w", 8, 8);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.mid("java.io.tmpdir", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.mid("Xy&2@", (-1), 16);
      assertEquals("Xy&2@", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.substringBefore(" ", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.substringBefore(" is not in the range '0' - '9'", (String) null);
      assertNotNull(string0);
      assertEquals(" is not in the range '0' - '9'", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.substringBefore(" ", "  ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.substringBefore("k", "k");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substringAfter("IxKd( l5]N'')", "IxKd( l5]N'')");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.rightPad("p{InCombiningDiacriticalMarks}+", 8192, '_');
      String string1 = StringUtils.substringAfter(string0, (String) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.substringAfter("java.runtime.version", "7%v");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("a-L)", (String) null);
      assertEquals("a-L)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("9   ", "@@@@@@@@@@@9   ");
      assertEquals("9   ", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Mac OS X", "Mac OS X");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("L1<+[F", "{}");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("@*7(VOke}f5", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("z?", "z?");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("q*wu9_q]/98W%ulVz", "u");
      assertEquals("lVz", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.substringBetween("4.14.14.1", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.substringBetween("G2#Azpz", "", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.substringBetween("NoSuchMethodException occurred during 1.6 backcompat code", "MN5", "MN5");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Mac OS X", "Mac OS X");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "jFva.lbrary.&I _hh", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "%j", "%j");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("M%x'`g", "M%x'`g", "java.vm.version");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Can't find a public method for ", "Can't find a public method for ", "z?");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Cannot get the toString of a null identityIT8`ueTeT@gCI,e^mfj", "Cannot get the toString of a null identity", "I");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Array and element cannot both be null", "", (-1));
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("SecurityException occurred during 1.6 backcompat code", " ", 5);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Can't find a public method for ", "Can't find a public method for ", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, 'l');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited(" ", ' ');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("9   9   ", (String) null, 2);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("9   ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("9   ", "9", 2);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("NoSuchMethodException occurred during 1.6 backcompat code", "The stripAccents(String) method is not supported until Java 1.6");
      assertEquals(52, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("QJ' JnNy&0oU+Nhyd", "QJ' JnNy&0oU+Nhyd");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("T8`ueTeT@gI,e^|fj", "T8`ueTeT@gI,e^|fj", 7);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("[DRbt");
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '\\');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'r', 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0, ';');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "1gU =FJe=%u7'");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "", 2046, 2046);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "Z~qv4WI$d$a?v", 4, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Object[] objectArray0 = new Object[19];
      String string0 = StringUtils.join(objectArray0, "IllegalAccessException occurred during 1.6 backcompat code", 8192, 8192);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      String string0 = StringUtils.join((Iterable<?>) arrayDeque0, 'B');
      assertFalse(arrayDeque0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '/');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StringUtils.chop("}Y->O\"MVRp");
      StringUtils.rightPad("", 0);
      StringUtils.splitPreserveAllTokens("", "");
      boolean boolean0 = StringUtils.isAllLowerCase("}Y->O\"MVRp");
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Index: ", "Index: ");
      StringUtils.equals((CharSequence) "Index: ", (CharSequence) "Index: ");
      int int0 = StringUtils.indexOfAnyBut("", " ");
      assertEquals((-1), int0);
      
      StringUtils.equalsIgnoreCase((String) null, "kEs>ZvTQbQ^x)t");
      String string0 = StringUtils.uncapitalize("");
      String string1 = StringUtils.strip("java.awt.headless");
      assertEquals("java.awt.headless", string1);
      
      int int1 = StringUtils.lastIndexOf("", "");
      assertEquals(0, int1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "9$sggOYj7|S45Ds");
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.chomp("'[+Y3yW##>3&Q]java.lang.Object@774a8fa09", "}Y->O\"MVR");
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.chop("Index: ");
      assertNotNull(string3);
      assertEquals("Index:", string3);
      
      boolean boolean1 = StringUtils.contains("Index:", "g 1.6 backcompat code$$$$$$$$$");
      assertTrue(boolean1 == boolean0);
      
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string4 = StringUtils.join(iterator0, '}');
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode0, locale_FilteringMode1);
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, '6');
      assertEquals("IGNORE_EXTENDED_RANGES6MAP_EXTENDED_RANGES", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      String string0 = StringUtils.join((Iterable<?>) vector0, "e");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "IllegalArgumentException occurred during 1.6 backcompat code");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("e");
      String string0 = StringUtils.join((Iterable<?>) vector0, "e");
      assertFalse(vector0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("9   ");
      vector0.add("9   ");
      String string0 = StringUtils.join((Iterable<?>) vector0, (String) null);
      assertNotNull(string0);
      assertEquals("9   9   ", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add((String) null);
      stack0.add("9");
      String string0 = StringUtils.join((Iterable<?>) stack0, "i");
      assertEquals("i9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("4.9");
      vector0.add((String) null);
      String string0 = StringUtils.join((Iterable<?>) vector0, "4.9");
      assertEquals("4.94.9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, ':');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("9   ");
      assertEquals("9", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.removeStart("IllegalAccessException occurred during 1.6 backcompat code", "Ch?ow^K Dk<Rl`6");
      assertEquals("IllegalAccessException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.removeStart("Y", (String) null);
      assertEquals("Y", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.removeStart("7n<YRfgEw-dxu'UDM", "7n<YRfgEw-dxu'UDM");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Arguments cannot both be null", (String) null);
      assertNotNull(string0);
      assertEquals("Arguments cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("9   ", "9   ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.repeat(" ", " ", (-38));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.repeat("                                                       ;                                   P                                  i@v9          i@v9           5                                                                                                    ", "                                                       ;                                   P                                  i@v9          i@v9           5                                                                                                    ", 1);
      assertEquals("                                                       ;                                   P                                  i@v9          i@v9           5                                                                                                    ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.removeEnd("^)acKV]|@ncMni)*", (String) null);
      assertEquals("^)acKV]|@ncMni)*", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.removeEnd("j_qf-0ruf[567w", "j_qf-0ruf[567w\"");
      assertEquals("j_qf-0ruf[567w", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("bW", "");
      assertEquals("bW", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Minimum abbreviation width is 4", "Minimum abbreviation width is 4");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.remove("R   ", "R   ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.remove("B", (String) null);
      assertNotNull(string0);
      assertEquals("B", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.remove("", 'k');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.remove(" +sn", ' ');
      assertEquals("+sn", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.remove("3MO a<Yn'K,a", '$');
      assertEquals("3MO a<Yn'K,a", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("NoSuchMethodException occurred during 1.6 backcompat code", "", "MN5");
      assertEquals("NoSuchMethodException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String[] stringArray0 = new String[20];
      String string0 = StringUtils.replace(" ", " ", stringArray0[0]);
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.replace("java.specification.vendor", "java.specification.vendor", "IllegalArgumentException occurred during 1.6 backcompat code", 0);
      assertEquals("java.specification.vendor", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.replace("0: than less is", "0: than less is", "0: than less is", 261);
      assertEquals("0: than less is", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Cannot pad a negative amount: ", "Cannot pad a negative amount: ", "Cannot pad a negative amount: ");
      assertEquals("Cannot pad a negative amount: ", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("Qc@EgYXDjra@:X3%j=", (String[]) null, (String[]) null);
      assertEquals("Qc@EgYXDjra@:X3%j=", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.replaceEachRepeatedly(stringArray0[0], stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("JvX3(", stringArray0, stringArray0);
      assertEquals("JvX3(", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEachRepeatedly("},P>o\"mv", stringArray0, (String[]) null);
      assertEquals("},P>o\"mv", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("?87 iJ", stringArray0, stringArray1);
      assertEquals("?87 iJ", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[2];
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("9   ", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("  ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0:   
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      stringArray0[1] = "Index: ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Index: ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: Index: 
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9   ";
      stringArray0[1] = "9   ";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "9   ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("9   ", stringArray0, stringArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: 9   
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "\\u00";
      stringArray0[1] = "K%";
      String[] stringArray1 = new String[2];
      stringArray1[1] = string0;
      String string1 = StringUtils.replaceEachRepeatedly("K%", stringArray0, stringArray1);
      assertEquals("\\u00", string1);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[2] = " ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("ust not be nul", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: ust not be nul
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "\\u00";
      stringArray0[0] = string0;
      stringArray0[1] = "K%";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("K%", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: K%
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.compiler";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("java.compiler", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: java.compiler
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[5] = "@gI,e^|fjTeT8`ue";
      String string0 = StringUtils.replaceEach("@gI,e^|fjTeT8`ue", stringArray0, stringArray0);
      assertEquals("@gI,e^|fjTeT8`ue", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.replaceChars("dvf;eotcv(*c/5g[b", '_', '_');
      assertNotNull(string0);
      assertEquals("dvf;eotcv(*c/5g[b", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'T', 'T');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "dvf;eotcv(*c/5g[b", "dvf;eotcv(*c/5g[b");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.replaceChars("wyeh=\"jfksingdiacriticalmarks}+", "p{InCombiningDiacriticalMarks}+", (String) null);
      assertEquals("wyeh=\"jfd", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.replaceChars("TimeToLive of ", "", "TimeToLive of ");
      assertEquals("TimeToLive of ", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.replaceChars("9kq", "1t2.4", "1t2.4");
      assertEquals("9kq", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.replaceChars("TimeToLive of ", "T8`ueTe6@gI,e^|fj", "TimeToLive of ");
      assertEquals("TimTToLivT o ", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.overlay("                                                                                                                              i@v9                                   i@v9                                                                                       ", "                                                                                                                              i@v9                                   i@v9                                                                                       ", (-894), (-894));
      assertEquals("                                                                                                                              i@v9                                   i@v9                                                                                                                                                                                                                     i@v9                                   i@v9                                                                                       ", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "java.awt.printerjob", 2762, (-2879));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.overlay("9   ", (String) null, 34, 34);
      assertEquals("9   ", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.overlay("xoekp5m1e;*bcoublic method for ", "CdYip}LdS", 820, (-2811));
      assertEquals("CdYip}LdS", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.chomp(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.chomp("^we0!m?&v+#itx");
      assertEquals("^we0!m?&v+#itx", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "G2#Azpz");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.chomp("IllegalAccessException occurred during 1.6 backcompat code", (String) null);
      assertNotNull(string0);
      assertEquals("IllegalAccessException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.chomp("J&]'uB/8 *_/OTe$", "J&]'uB/8 *_/OTe$");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.chop("l");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, (String) null, (-2987));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.repeat("BgfxE&?.&3|y;C", 166);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 8192);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.repeat("9", 8205);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.repeat("z?", 16);
      assertNotNull(string0);
      assertEquals("z?z?z?z?z?z?z?z?z?z?z?z?z?z?z?z?", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.repeat("e", (String) null, 2);
      assertNotNull(string0);
      assertEquals("ee", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 8192, 'v');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 8205, 't');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 649, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.rightPad("", (-5198), "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.rightPad("mzSM+V=C!a:p", 2637, "can't find a public method for ");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.center("org.apache.commons.lang3.stringutils", 48, "org.apache.commons.lang3.stringutils");
      assertEquals("org.aporg.apache.commons.lang3.stringutilsorg.ap", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 2, 'p');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.leftPad(", LengYh: 0", 8207, 'T');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 14, "c!w");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.leftPad("EK7\"lxWeQiy", (-708), (String) null);
      assertEquals("EK7\"lxWeQiy", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.center("", 10, "");
      assertEquals("          ", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.center("tX3%b", 15, "tX3%b");
      assertEquals("tX3%btX3%btX3%b", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-2987));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.center("", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.center("1gU =FJe=%u7'", 6);
      assertEquals("1gU =FJe=%u7'", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 256, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.center("Wj_Mjw^<0_Q2EY", (-1884), "Wj_Mjw^<0_Q2EY");
      assertEquals("Wj_Mjw^<0_Q2EY", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.center("The stripAccents(String) method is not supported until Java 1.6", 19, "The stripAccents(String) method is not supported until Java 1.6");
      assertEquals("The stripAccents(String) method is not supported until Java 1.6", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.upperCase("ClassNotFoundException occurred during 1.6 backcompat code");
      assertNotNull(string0);
      assertEquals("CLASSNOTFOUNDEXCEPTION OCCURRED DURING 1.6 BACKCOMPAT CODE", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      String string0 = StringUtils.upperCase("*B(/5\"oLcQF#y:ii", locale0);
      assertEquals("*B(/5\"OLCQF#Y:II", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("Windows 9", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.capitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = StringUtils.capitalize("    ");
      assertEquals("    ", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("9");
      assertEquals("9", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = StringUtils.swapCase("[@QrH>-4C|gY+_w63");
      assertEquals("[@qRh>-4c|Gy+_W63", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      int int0 = StringUtils.countMatches((String) null, (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      int int0 = StringUtils.countMatches("M!9L  ", "M!9L  ");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      int int0 = StringUtils.countMatches("6.0", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("InvocationTargetException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("minimum abbreviation width with offset is 7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("8Mv}<lDy^N");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("NoSuchMethodException occurred during 1.6 backcompat codeNoSuchMethodException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("Rbt");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("IllegalAccessException occurred during 1.6 backcompat code");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("bW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("2)a#%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("                                                                                                                              i@v9                                                                                                                              ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.isNumericSpace(stringArray0[1]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("6OXZMx7z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" VS ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("d,$s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "B";
      boolean boolean0 = StringUtils.isAllUpperCase(charSequenceArray0[1]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.defaultString("d,$s");
      assertEquals("d,$s", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = StringUtils.defaultString("can't find a public method for nd a public method for code", "can't find a public method for nd a public method for code");
      assertEquals("can't find a public method for nd a public method for code", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty("T8`useTeT@gI,e^|fj", "T8`useTeT@gI,e^|fj");
      assertEquals("T8`useTeT@gI,e^|fj", charSequence0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty("", "NoSuchMethodException occurred during 1.6 backcompat code");
      assertEquals("NoSuchMethodException occurred during 1.6 backcompat code", charSequence0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'q');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 3, 3);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("java.vm.specification.nameyP3] Ns;8EcREsYEQ>D", (int) 'O', 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 10);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width is 4", 14, 14);
      assertEquals("...iation w...", string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.abbreviate("replace array lengths", 97, 11);
      assertEquals("... lengths", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 2);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("c%%\twZg0$2", "h<q+", 8192);
      assertEquals("c%%\twZg0$2", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("*A2R=,qRH~TJ&mn]p'", "", (-1));
      assertEquals("*A2R=,qRH~TJ&mn]p'", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Ca8not pad a negative amoun3: ", "Ca8not pad a negative amoun3: ", (-45));
      assertEquals("Ca8not pad a negative amoun3: ", string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("The stripAccents(String) method is not supported until Java 1.6", "wyeh=\"jfkstica", 25);
      assertEquals("The stwyeh=\"jfksticaa 1.6", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = StringUtils.difference("QD\"by''o%~^S\"nN%i", "p{iwyeh=\"jfksdiacriticalmarks}+");
      assertEquals("p{iwyeh=\"jfksdiacriticalmarks}+", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.difference(" ", (String) null);
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.difference("can't find a public method for ", "can't find a public method for ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.indexOfDifference((CharSequence) stringArray0[0], (CharSequence) "Array and element cannot both be null");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.difference("b-2;m1-* q7A/gHx", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "9", (CharSequence) "9   ");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Array and element cannot both be null", "Array and element cannot both be null");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "T8`useTeT@gI,e^|f";
      stringArray0[1] = "T8`useTeT@gI,e^|f";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("T8`useTeT@gI,e^|f", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("illegacan't find a public method for g 1.6 backcompat code", " ", 1856);
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(10, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "mWf9/Ydv}e";
      stringArray0[1] = "mWf9/Ydv}e";
      stringArray0[2] = "mWf9/Ydv}eV";
      stringArray0[3] = "mWf9/Ydv}e";
      stringArray0[4] = "mWf9/Ydv}e";
      stringArray0[5] = "mWf9/Ydv}eV";
      stringArray0[6] = "mWf9/Ydv}eV";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("mWf9/Ydv}e", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "uyOZ_R>h~(PZ;YX[");
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("9   ", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("NoSuchMethodException occurred during 1.6 backcompat code", "user.dir");
      assertEquals(52, int0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("@gI,e^|fjTeT8`ue", "");
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("...iation w...", "IllegalAccessException occurred during 1.6 backcompat code");
      assertEquals(51, int0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String[] stringArray0 = new String[6];
      boolean boolean0 = StringUtils.startsWithAny((String) null, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("O@7tr/3Tsz", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String[] stringArray0 = new String[4];
      boolean boolean0 = StringUtils.startsWithAny("e", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "";
      boolean boolean0 = StringUtils.startsWithAny("vbDsVpbU}N2zf#%:8n", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith("Frn=_<s5", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }
}
