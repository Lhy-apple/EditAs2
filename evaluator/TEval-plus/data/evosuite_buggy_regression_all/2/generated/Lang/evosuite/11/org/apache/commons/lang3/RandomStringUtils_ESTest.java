/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:19:21 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(128);
      assertEquals("                                                                                                                                ", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(1, 1, 1677, true, false, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(57343);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(37381);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomStringUtils.randomAlphanumeric(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = RandomStringUtils.random(1, charArray0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(881, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1, 0, 0, false, false, charArray0, (Random) mockRandom0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomStringUtils.random(128, 37336, 0, true, false);
      assertEquals("\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8\u91D8", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomStringUtils.random((int) '9', (int) '9', (int) '', true, true);
      assertEquals("999999999999999999999999999999999999999999999999999999999", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = RandomStringUtils.random(14, (-3292), 14, false, false);
      assertEquals("\uF324\uF324\uF324\uF324\uF324\uF324\uF324\uF324\uF324\uF324\uF324\uF324\uF324\uF324", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.random(37336, 57333, 37385, false, false);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RandomStringUtils.random(1731, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-301), (char[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -301 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }
}
