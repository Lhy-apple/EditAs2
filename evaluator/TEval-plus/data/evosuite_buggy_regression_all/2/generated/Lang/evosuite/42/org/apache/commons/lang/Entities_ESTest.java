/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:21:55 GMT 2023
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Entities_ESTest extends Entities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.unescape("M>x&;>&s;Va");
      assertEquals("M>x&;>&s;Va", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      String string0 = entities0.unescape("M&gt;x&gt;&amp;s;@&lt;");
      assertEquals("M>x>&s;@<", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      String string0 = entities0.escape("M>x>&s;@<");
      assertEquals("M&gt;x&gt;&amp;s;@&lt;", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      entities_ArrayEntityMap0.add("7/VN", (-560));
      int int0 = entities_ArrayEntityMap0.value("7/VN");
      assertEquals((-560), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(107);
      entities_BinaryEntityMap0.add("Illegal Capacity: ", 0);
      entities_BinaryEntityMap0.add("Illegal Capacity: ", 107);
      entities_BinaryEntityMap0.add("sbquo", 107);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Entities entities0 = Entities.XML;
      Entities.fillWithHtml40Entities(entities0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      entities_HashEntityMap0.add("e1", (-4));
      int int0 = entities_HashEntityMap0.value("e1");
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "&|KbV0X;e~p+");
      assertEquals("&|KbV0X;e~p+", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      int int0 = entities_HashEntityMap0.value((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      String string0 = entities0.entityName(557);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Entities entities0 = Entities.XML;
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      entities0.map = (Entities.EntityMap) entities_ArrayEntityMap0;
      Entities.fillWithHtml40Entities(entities0);
      String string0 = entities0.unescape("|`&$'L;@p");
      assertEquals("|`&$'L;@p", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(107);
      entities_BinaryEntityMap0.add("Illegal Capacity: ", 107);
      // Undeclared exception!
      try { 
        entities_BinaryEntityMap0.add("sbquo", 107);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      String string0 = entities0.unescape("Illegal Capacity: ");
      assertEquals("Illegal Capacity: ", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, ")?wugC[1.3V3rhyt1WP");
      assertEquals(")?wugC[1.3V3rhyt1WP", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.unescape("qC>$_K<2&?");
      assertEquals("qC>$_K<2&?", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.unescape("M>x&&s;@a");
      assertEquals("M>x&&s;@a", string0);
  }
}
