/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:26:34 GMT 2023
 */

package org.apache.commons.math3.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Log1p;
import org.apache.commons.math3.analysis.function.Sin;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(316.0036, (-1662.5119202943806));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,662.512 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(8.974417915105033E-9, 8.974417915105033E-9);
      Log1p log1p0 = new Log1p();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1316968644, (UnivariateFunction) log1p0, goalType0, 8.974417915105033E-9, 87353.35390150797, (double) 1316968644);
      assertEquals(2.451891137983148E-8, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Log1p log1p0 = new Log1p();
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.19541901350021362, 0.19541901350021362);
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1316968621, (UnivariateFunction) log1p0, goalType0, (double) 1316968621, (double) 1316968621, 0.19541901350021362);
      assertEquals(20.695883372400775, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Sin sin0 = new Sin();
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(2.380738071335498E-8, 2.380738071335498E-8);
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1842, (UnivariateFunction) sin0, goalType0, (-216.74936520269904), (double) 1842, (-549.10232631));
      assertEquals(579.6238575196269, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(316.00358798755383, 316.00358798755383);
      Log1p log1p0 = new Log1p();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(647, (UnivariateFunction) log1p0, goalType0, (double) 647, (-1354011.4792869373), (double) 647);
      assertEquals((-516786.49593936454), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(316.00358798755383, 316.00358798755383);
      Log1p log1p0 = new Log1p();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2071, (UnivariateFunction) log1p0, goalType0, 316.00358798755383, 316.00358798755383, 316.00358798755383);
      assertEquals(316.00358798755383, univariatePointValuePair0.getPoint(), 0.01);
      assertEquals(5.758913092385951, univariatePointValuePair0.getValue(), 0.01);
      assertNotNull(univariatePointValuePair0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(5.18, 5.18);
      Log1p log1p0 = new Log1p();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1143, (UnivariateFunction) log1p0, goalType0, (double) 1143, (-1249.0392665989932), 1.8213182714695995);
      assertEquals((-24.804795656658367), univariatePointValuePair0.getPoint(), 0.01);
  }
}
