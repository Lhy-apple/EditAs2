/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:28:45 GMT 2023
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asin;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asin asin0 = new Asin();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2146534274, (UnivariateRealFunction) asin0, (double) 2146534274, (double) 2146534274, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [2,146,534,274, 2,146,534,274]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(3391.976755007334, 1.1081403499701992E-5, 1.1081403499701992E-5);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1030, 1030, 1.1081403499701992E-5);
      double double0 = illinoisSolver0.solve(1030, (UnivariateRealFunction) harmonicOscillator0, (-1833.0), 3391.976755007334, 1.1081403499701992E-5);
      assertEquals((-1833.0), illinoisSolver0.getMin(), 0.01);
      assertEquals(1237.7045150133627, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1330.29191192031, 1330.29191192031);
      assertEquals(1330.29191192031, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1030, 1030, 1.1081403499701992E-5);
      double double0 = illinoisSolver0.solve(1030, (UnivariateRealFunction) harmonicOscillator0, (-1833.0), 3389.841696120307, 26.64834);
      assertEquals(3389.841696120307, illinoisSolver0.getMax(), 0.01);
      assertEquals((-1654.8491807388982), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      double double0 = regulaFalsiSolver0.solve(2323, (UnivariateRealFunction) sin0, 0.0, (double) 2323);
      assertEquals(2323.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      double double0 = regulaFalsiSolver0.solve(1696, (UnivariateRealFunction) sin0, (double) 1696, (double) 0);
      assertEquals(1696.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      double double0 = regulaFalsiSolver0.solve(2515, (UnivariateRealFunction) sin0, (-1.0), 1.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(668, (UnivariateRealFunction) sin0, (-3.141592653589793), 1.0E-6, 1.1503568376335144E-11, allowedSolution0);
      assertEquals(1.1503568376335144E-11, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1.1228119128903202E-12), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(668, (UnivariateRealFunction) sin0, 12.0, (double) 668, 12.0, allowedSolution0);
      assertEquals(12.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(182.212372908208, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      double double0 = regulaFalsiSolver0.solve(668, (UnivariateRealFunction) sin0, 12.0, (double) 668);
      assertEquals(340.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(182.212373908208, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(668, (UnivariateRealFunction) sin0, 1.0, 180.1583665, (double) 668, allowedSolution0);
      assertEquals(668.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(91.106186954104, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(1761, (UnivariateRealFunction) sin0, (-3.141592653589793), 1.0, 1.0, allowedSolution0);
      assertEquals(1.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(5.7361306078564534E-9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1691, (UnivariateRealFunction) sin0, (-1226077.4727855835), 1.3460521586239338E-9, (-1226077.4727855835), allowedSolution0);
      assertEquals((-1226077.4727855835), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-6.522560269672795E-16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1691, (UnivariateRealFunction) sin0, (-1226077.4727855835), 1.3460521586239338E-9, (-1226077.4727855835), allowedSolution0);
      assertEquals((-1226077.4727855835), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.3460521586239338E-9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(668, (UnivariateRealFunction) sin0, 1.0, 180.1583665, 12.0, allowedSolution0);
      assertEquals(12.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(91.106186954104, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(1761, (UnivariateRealFunction) sin0, (-3.141592653589793), 0.10786044817911056, 0.10786044817911056, allowedSolution0);
      assertEquals(0.10786044817911056, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0483832667284882E-17, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1691, (UnivariateRealFunction) sin0, (-1226077.4727855835), (double) 1691, (-1226077.4727855835), allowedSolution0);
      assertEquals((-1226077.4727855835), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-527523.6720201838), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1685, (UnivariateRealFunction) sin0, (double) 668, 1159.550449122, 0.08713622391223907, allowedSolution0);
      assertEquals(0.08713622391223907, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1127.8317626387359, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(120, (UnivariateRealFunction) sin0, (-1.0025906298649578), (double) 120, (-1.0025906298649578), allowedSolution0);
      assertEquals((-1.0025906298649578), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(31.41592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(1691, (UnivariateRealFunction) sin0, (-1.0025906298649578), (double) 1691, (-1.0025906298649578), allowedSolution0);
      assertEquals((-1.0025906298649578), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1300.6193585861745, double0, 0.01);
  }
}
