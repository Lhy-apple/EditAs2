/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:31:16 GMT 2023
 */

package org.apache.commons.math.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;
import org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm;
import org.apache.commons.math.optimization.ConvergenceChecker;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.univariate.BaseUnivariateRealOptimizer;
import org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer;
import org.apache.commons.math.optimization.univariate.UnivariateRealPointValuePair;
import org.apache.commons.math.random.JDKRandomGenerator;
import org.apache.commons.math.random.Well1024a;
import org.apache.commons.math.random.Well19937a;
import org.apache.commons.math.random.Well44497b;
import org.apache.commons.math.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiStartUnivariateRealOptimizer_ESTest extends MultiStartUnivariateRealOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3267, jDKRandomGenerator0);
      double[] doubleArray0 = new double[6];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, 0.0, (double) 3267);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // none of the 3,267 start points lead to convergence: convergence failed
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, well512a0);
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well19937a well19937a0 = new Well19937a(intArray0);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 744, well19937a0);
      int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      Well44497b well44497b0 = new Well44497b();
      MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, (-3669), well44497b0);
      int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(691);
      MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>((BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) null, 691, well1024a0);
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.setConvergenceChecker((ConvergenceChecker<UnivariateRealPointValuePair>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(691);
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, well1024a0);
      ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
      assertNull(convergenceChecker0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(0.087, 3172.8786618);
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(1141, 85, 45, 45, 85).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn((-1239), 1, 188, 68, 4701).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      double[] doubleArray0 = new double[6];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      Well19937a well19937a0 = new Well19937a(0L);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4701, well19937a0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, 234.0, 1024.0, 0.0);
      multiStartUnivariateRealOptimizer0.getOptima();
      assertEquals(400561, multiStartUnivariateRealOptimizer0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(0.0, 0.0);
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 219).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(0, 0, 0, 220, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      GoalType goalType0 = GoalType.MINIMIZE;
      Well19937a well19937a0 = new Well19937a((-669));
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2385, well19937a0);
      multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (double) 219, (double) 220, (double) 220);
      assertEquals(521439, multiStartUnivariateRealOptimizer0.getEvaluations());
  }
}
