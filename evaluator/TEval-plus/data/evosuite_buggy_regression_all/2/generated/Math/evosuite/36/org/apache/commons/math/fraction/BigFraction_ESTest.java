/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:28:01 GMT 2023
 */

package org.apache.commons.math.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2465.79, 2465.79, 1);
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(0, int0);
      assertEquals((byte) (-95), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2147451676, 288);
      double double0 = bigFraction0.MINUS_ONE.pow((double) 2147451676);
      assertEquals(1.0, double0, 0.01);
      assertEquals((short) (-14675), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      long long0 = bigFraction0.THREE_QUARTERS.getNumeratorAsLong();
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3277.15980634128);
      BigFraction bigFraction1 = bigFraction0.add(221183);
      assertEquals((short)27852, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3276.159727);
      BigFraction bigFraction1 = bigFraction0.ONE.multiply((-1522L));
      assertEquals((short)3276, bigFraction0.shortValue());
      assertEquals((byte)14, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      long long0 = bigFraction0.TWO_QUARTERS.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2147451676, 288);
      double double0 = bigFraction0.percentageValue();
      assertEquals(7.456429430555556E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3277.15980634128);
      BigFraction bigFraction1 = bigFraction0.multiply(664);
      assertEquals((short)13346, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      int int0 = bigFraction0.FOUR_FIFTHS.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      int int0 = bigFraction0.ONE_QUARTER.getDenominatorAsInt();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals((short)4, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.subtract(1073741824);
      assertEquals((short)1, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(52);
      assertEquals((short)52, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3183605296591799669L));
      assertEquals((short) (-1397), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2147451676, 288);
      bigFraction0.getField();
      assertEquals((byte) (-83), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3.6897084415718804E137));
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      float float0 = bigFraction0.ONE_QUARTER.floatValue();
      assertEquals(0.25F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3277.15980634128);
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals((short)763, bigInteger0.shortValue());
      assertEquals((short)3277, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3277.15980634128);
      BigFraction bigFraction1 = bigFraction0.add(3277L);
      assertEquals((short)6554, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3283.2426944260474);
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.bigDecimalValue(1771);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((byte)1, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertTrue(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2465.79, 2465.79, 1);
      BigFraction bigFraction1 = bigFraction0.divide(1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)2465, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2465.79, 2465.79, 1);
      bigFraction0.TWO.getDenominatorAsLong();
      assertEquals((byte) (-95), bigFraction0.byteValue());
      assertEquals((short)2465, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2147451676, 288);
      BigFraction bigFraction1 = bigFraction0.subtract(1966276608L);
      assertEquals((short) (-14674), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3276.159727);
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertEquals((short)3276, bigFraction0.shortValue());
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3.6897084415718804E137));
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3276.159727);
      bigFraction0.hashCode();
      assertEquals((short)3276, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) 3L, (-2366));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 3 to fraction (9,223,372,036,854,775,806/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1632L), (-1632L));
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(615, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(4.184049381430498E220, (-2534.161682564801), (-5011));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 41,840,493,814,304,980,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1527.6156526477866, (-1));
      BigFraction bigFraction1 = new BigFraction(6.943684261645378E-10, 0.05279999999993379, (-1));
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertSame(bigFraction2, bigFraction0);
      assertEquals((short)1527, bigFraction2.shortValue());
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) (-826), (-826));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -826 to fraction (827/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1425.000067263, (-1602.46854843822), (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 1,425 to fraction after -1 iterations
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(876.07, 773);
      assertEquals((byte)108, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1505.0528, (-1));
      bigFraction0.MINUS_ONE.abs();
      assertEquals((byte) (-31), bigFraction0.byteValue());
      assertEquals((short)1505, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2465.79, 2465.79, 1);
      bigFraction0.ONE_THIRD.abs();
      assertEquals((byte) (-95), bigFraction0.byteValue());
      assertEquals((short)2465, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3.6897084415718804E137));
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2465.79, 2465.79, 1);
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.add(bigFraction0);
      assertEquals((byte) (-95), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.divide(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 2040109465);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      boolean boolean0 = bigFraction0.TWO.equals(bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(777, 777);
      boolean boolean0 = bigFraction1.equals(bigFraction0);
      assertFalse(boolean0);
      assertEquals((byte)1, bigFraction1.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3276.159727);
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3283.2426944260474);
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertSame(bigFraction2, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3276.159727);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.pow(2147483595);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow((-432));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(3277.15980634128);
      BigFraction bigFraction1 = bigFraction0.pow((long) 664);
      assertEquals((byte)67, bigFraction1.byteValue());
      assertEquals((short)3277, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.pow((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exponent (-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2147451676, 288);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.pow(bigInteger0);
      assertEquals((short) (-14675), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.ONE_THIRD.subtract(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction2.byteValue());
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      String string0 = bigFraction0.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3.6897084415718804E137));
      String string0 = bigFraction0.toString();
      assertEquals("-368970844157188042902112587975932932878512469936511343922661534821043272473072274965507587659038866492737552592082913173959399000636391424", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
  }
}
