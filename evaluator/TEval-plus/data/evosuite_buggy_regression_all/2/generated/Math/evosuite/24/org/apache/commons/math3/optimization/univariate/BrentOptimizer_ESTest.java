/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:26:34 GMT 2023
 */

package org.apache.commons.math3.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Atanh;
import org.apache.commons.math3.analysis.function.Ceil;
import org.apache.commons.math3.analysis.function.Log1p;
import org.apache.commons.math3.analysis.function.Sin;
import org.apache.commons.math3.analysis.function.Sinc;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.3332717989863478, 0.3332717989863478);
      GoalType goalType0 = GoalType.MAXIMIZE;
      Atanh atanh0 = new Atanh();
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2248, (UnivariateFunction) atanh0, goalType0, (double) 2248, 0.3332717989863478, 0.3332717989863478);
      assertEquals(1.0393055576921355, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer((-31.57143748027618), (-31.57143748027618));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -31.571 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(1.9868161777724352E-8, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.4342944622, 0.4342944622);
      GoalType goalType0 = GoalType.MINIMIZE;
      Ceil ceil0 = new Ceil();
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2144896318, (UnivariateFunction) ceil0, goalType0, (double) 2144896318, (double) 2144896318, 0.4342944622);
      assertEquals(2.0, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.4342944622, 0.4342944622);
      Sin sin0 = new Sin();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(178, (UnivariateFunction) sin0, goalType0, 0.4342944622, (double) 178, 0.919733242262907);
      assertEquals(0.8450090332497893, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.4342944622, 0.4342944622);
      Sinc sinc0 = new Sinc();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1562, (UnivariateFunction) sinc0, goalType0, 0.0, (-1512.1), 2201.598175748163);
      assertEquals((-44.73752812536823), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.4342944622, 0.4342944622);
      Sin sin0 = new Sin();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(178, (UnivariateFunction) sin0, goalType0, 0.4342944622, (double) 178, 3.0);
      assertEquals(0.31403480036755116, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.4342944622, 0.4342944622);
      Sin sin0 = new Sin();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(178, (UnivariateFunction) sin0, goalType0, (double) 178, (double) 178, 0.4342944622);
      assertEquals(0.9945647140488243, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariatePointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(convergenceChecker0).converged(anyInt() , any(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class) , any(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class));
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(2.1598038637945765, 2.1598038637945765, convergenceChecker0);
      Log1p log1p0 = new Log1p();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2143766220, (UnivariateFunction) log1p0, goalType0, 2.1598038637945765, (double) 2143766220, 2.1598038637945765);
      assertEquals(8.188458334409475E8, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariatePointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(convergenceChecker0).converged(anyInt() , any(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class) , any(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair.class));
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(2.1598038637945765, 2.1598038637945765, convergenceChecker0);
      Log1p log1p0 = new Log1p();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2143766195, (UnivariateFunction) log1p0, goalType0, 2.1598038637945765, (double) 2143766195, 2.1598038637945765);
      assertEquals(20.523406376101104, univariatePointValuePair0.getValue(), 0.01);
  }
}
