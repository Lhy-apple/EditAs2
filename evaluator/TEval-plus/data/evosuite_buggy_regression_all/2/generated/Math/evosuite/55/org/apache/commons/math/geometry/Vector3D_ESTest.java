/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:27:44 GMT 2023
 */

package org.apache.commons.math.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.orthogonal();
      Vector3D vector3D2 = vector3D1.orthogonal();
      vector3D1.equals(vector3D2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(1.0, vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.add((-0.859744078097857), vector3D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01);
      assertFalse(vector3D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = Vector3D.distanceInf(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(0.9999, vector3D0, (-1914.4), vector3D0, 1.0, vector3D0);
      assertEquals(3657274.14248001, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      double double0 = Vector3D.distance1(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.negate();
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.getX(), 0.01);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      double double0 = vector3D0.ZERO.getAlpha();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      double double0 = Vector3D.distance(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      String string0 = vector3D0.PLUS_J.toString();
      assertEquals("{0; 1; 0}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = vector3D0.PLUS_I.add(vector3D0);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D1.getX(), 0.01);
      assertEquals(1.0, vector3D1.getY(), 0.01);
      assertEquals(2.0, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = vector3D0.getDelta();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      double double0 = vector3D0.NEGATIVE_INFINITY.getNorm1();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D(6.15213717949719, vector3D0);
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertFalse(boolean0);
      assertEquals(37.848791875351644, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals((-6.15213717949719), vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      double double0 = vector3D0.getNormSq();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      double double0 = Vector3D.distanceSq(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      double double0 = vector3D0.NEGATIVE_INFINITY.getNormInf();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D(727.5506889444962, vector3D0, (-21.693195), vector3D0);
      assertEquals(498234.8017576045, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D((-1.9841269659586505E-4), vector3D0, Double.NEGATIVE_INFINITY, vector3D0, 0.087, vector3D0, Double.NEGATIVE_INFINITY, vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.scalarMultiply(0.0);
      Vector3D vector3D2 = vector3D1.orthogonal();
      assertEquals(0.0, vector3D2.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
      assertEquals(Double.NaN, vector3D2.getY(), 0.01);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = vector3D0.normalize();
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertFalse(vector3D1.isNaN());
      assertTrue(boolean0);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);
      // Undeclared exception!
      try { 
        vector3D1.normalize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      // Undeclared exception!
      try { 
        vector3D0.ZERO.orthogonal();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = vector3D0.orthogonal();
      Vector3D vector3D2 = vector3D1.PLUS_K.subtract(1.5707963267948966, vector3D1);
      double double0 = Vector3D.angle(vector3D1, vector3D2);
      assertEquals(3.141592653589793, double0, 0.01);
      assertEquals(1.0, vector3D1.getZ(), 0.01);
      assertEquals(-0.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.5707963267948966, 1.5707963267948966, 0.9999);
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals((-0.7071067811865475), vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.7071067811865475, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      // Undeclared exception!
      try { 
        Vector3D.angle(vector3D0, vector3D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      vector3D0.hashCode();
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();
      boolean boolean0 = vector3D1.isNaN();
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(106.0, 0.06666666666666667, Double.NaN);
      boolean boolean0 = vector3D0.isInfinite();
      assertEquals(0.06666666666666667, vector3D0.getY(), 0.01);
      assertFalse(boolean0);
      assertEquals(106.0, vector3D0.getX(), 0.01);
      assertTrue(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      boolean boolean0 = vector3D0.isInfinite();
      assertFalse(vector3D0.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      boolean boolean0 = vector3D0.isInfinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, Double.POSITIVE_INFINITY, 0.0);
      boolean boolean0 = vector3D0.isInfinite();
      assertTrue(boolean0);
      assertEquals(1.0, vector3D0.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(3121.0919363, 3121.0919363, Double.NEGATIVE_INFINITY);
      boolean boolean0 = vector3D0.isInfinite();
      assertEquals(3121.0919363, vector3D0.getY(), 0.01);
      assertEquals(3121.0919363, vector3D0.getX(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      boolean boolean0 = vector3D0.equals(vector3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Object object0 = new Object();
      boolean boolean0 = vector3D0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.normalize();
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
      assertTrue(vector3D1.isNaN());
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.normalize();
      vector3D1.hashCode();
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
      assertTrue(vector3D1.isNaN());
      assertTrue(vector3D0.isInfinite());
  }
}
