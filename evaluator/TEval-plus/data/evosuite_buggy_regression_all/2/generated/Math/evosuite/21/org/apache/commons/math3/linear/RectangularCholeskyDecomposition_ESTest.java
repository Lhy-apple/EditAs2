/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:24:41 GMT 2023
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RectangularCholeskyDecomposition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RectangularCholeskyDecomposition_ESTest extends RectangularCholeskyDecomposition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(openMapRealVector0);
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, 0.0);
      int int0 = rectangularCholeskyDecomposition0.getRank();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(openMapRealVector0);
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, 0.0);
      RealMatrix realMatrix1 = rectangularCholeskyDecomposition0.getRootMatrix();
      assertEquals(7, realMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2446.593942123787);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) 1.0E-12;
      doubleArray1[1] = (Double) doubleArray0[2];
      doubleArray1[2] = (Double) (-2446.593942123787);
      doubleArray1[3] = (Double) (-2446.593942123787);
      doubleArray1[4] = (Double) 0.0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray1, (-2442.9784348403514));
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(openMapRealVector1);
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
      try {
        rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, 1444.432);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (1,444.432): not positive definite matrix: value 0 at index 2
         //
         verifyException("org.apache.commons.math3.linear.RectangularCholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2446.593942123787);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) 1.0E-12;
      doubleArray1[1] = (Double) (-2446.593942123787);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray1, 1355.0255575006706);
      RealMatrix realMatrix0 = openMapRealVector1.outerProduct(openMapRealVector0);
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
      try {
        rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, (-646.700247));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -\u221E is smaller than, or equal to, the minimum (-646.7): not positive definite matrix: value -\u221E at index 1
         //
         verifyException("org.apache.commons.math3.linear.RectangularCholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2446.593942123787);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(openMapRealVector0);
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, openMapRealVector0.DEFAULT_ZERO_TOLERANCE);
      assertEquals(2, rectangularCholeskyDecomposition0.getRank());
  }
}
