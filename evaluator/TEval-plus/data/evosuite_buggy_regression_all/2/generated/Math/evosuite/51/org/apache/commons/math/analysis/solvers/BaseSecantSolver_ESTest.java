/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 15:28:53 GMT 2023
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1.0986122886682692), (-1.0986122886682692));
      Signum signum0 = new Signum();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(85, (UnivariateRealFunction) signum0, (-1.0986122886682692), 399.12047893835074);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (85) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Log log0 = new Log();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(4481, (UnivariateRealFunction) log0, 0.333333, (double) 4481, allowedSolution0);
      assertEquals(0.333333, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0000000000231022, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Log log0 = new Log();
      PegasusSolver pegasusSolver0 = new PegasusSolver(3349, 3349, 3349);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(3349, (UnivariateRealFunction) log0, 1.0, (double) 3349, allowedSolution0);
      assertEquals(3349.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Log log0 = new Log();
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.333333, 3347, 3347);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(3347, (UnivariateRealFunction) log0, 0.333333, 1.0, allowedSolution0);
      assertEquals(0.333333, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Log log0 = new Log();
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.3242138921463264E-21);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(3271, (UnivariateRealFunction) log0, 1.3242138921463264E-21, (double) 3271, allowedSolution0);
      assertEquals(1.3242138921463264E-21, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Inverse inverse0 = new Inverse();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(52, (UnivariateRealFunction) inverse0, (-3185.8), (double) 52, (-2913.084));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (52) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Log log0 = new Log();
      PegasusSolver pegasusSolver0 = new PegasusSolver(3349, 3349, 3349);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(3349, (UnivariateRealFunction) log0, 0.3333333333332802, (double) 3349, allowedSolution0);
      assertEquals(1674.6666666666665, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(399.56009717187544, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Log log0 = new Log();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(4481, (UnivariateRealFunction) log0, 0.333333, (double) 4481, allowedSolution0);
      assertEquals(0.333333, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.9999999999999999, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Log log0 = new Log();
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.333333, 3349, 3349);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(3349, (UnivariateRealFunction) log0, 0.333333, (double) 3349, allowedSolution0);
      assertEquals(0.333333, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.333333, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Log log0 = new Log();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(3322, (UnivariateRealFunction) log0, 0.3, (double) 3322, allowedSolution0);
      assertEquals(0.3, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.00000000023792, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Log log0 = new Log();
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.3333333333332802, 3349, 3349);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(3349, (UnivariateRealFunction) log0, 0.3333333333332802, (double) 3349, allowedSolution0);
      assertEquals(0.3333333333332802, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.3333333333332802, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Log log0 = new Log();
      PegasusSolver pegasusSolver0 = new PegasusSolver(3310, 3310, 3310);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(3310, (UnivariateRealFunction) log0, 0.3333333333332802, (double) 3310, allowedSolution0);
      assertEquals(0.3333333333332802, pegasusSolver0.getMin(), 0.01);
      assertEquals(395.4127337781824, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Log log0 = new Log();
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.4061831191876, 0.4061831191876, 0.4061831191876);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(3339, (UnivariateRealFunction) log0, 0.4061831191876, (double) 3339, allowedSolution0);
      assertEquals(1669.7030915595938, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.8854867937280493, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Log log0 = new Log();
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.333333, 3349, 3349);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(3349, (UnivariateRealFunction) log0, 0.333333, (double) 3349, allowedSolution0);
      assertEquals(0.333333, pegasusSolver0.getMin(), 0.01);
      assertEquals(399.5604169467779, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Log log0 = new Log();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(3322, (UnivariateRealFunction) log0, 0.3333333333332802, (double) 3322, allowedSolution0);
      assertEquals(0.3333333333332802, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.9999999997139933, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Log log0 = new Log();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(3349, (UnivariateRealFunction) log0, 0.3333333333332802, (double) 3349, allowedSolution0);
      assertEquals(1674.6666666666665, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.9999999997479412, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Log log0 = new Log();
      PegasusSolver pegasusSolver0 = new PegasusSolver(3349, 3349, 0.3333333333332802);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(3349, (UnivariateRealFunction) log0, 0.3333333333332802, (double) 3349, allowedSolution0);
      assertEquals(0.3333333333332802, pegasusSolver0.getMin(), 0.01);
      assertEquals(399.56009717187544, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Log log0 = new Log();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(3349, (UnivariateRealFunction) log0, 1.0E-6, (double) 3349, allowedSolution0);
      assertEquals(1674.5000005000002, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.9999999999975374, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Log log0 = new Log();
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.333333, 0.333333);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(3349, (UnivariateRealFunction) log0, 0.333333, (double) 3349, allowedSolution0);
      assertEquals(0.333333, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.04761323646101, double0, 0.01);
  }
}
