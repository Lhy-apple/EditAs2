/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:41:05 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSTypeRegistry_ESTest extends JSTypeRegistry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) linkedList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.identifyNonNullableName("RegExp");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorReporter errorReporter0 = jSTypeRegistry0.getErrorReporter();
      assertSame(simpleErrorReporter0, errorReporter0);
      assertSame(errorReporter0, simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorReporter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, true, jSTypeArray0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isCheckedUnknownType());
      assertNotNull(functionType0);
      assertEquals(0, jSTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = (NoType)jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, (String) null);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesNumberContext());
      assertNull(noType0.getReferenceName());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertNull(noType0.getTemplateTypeName());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.hasInstanceType());
      assertNotNull(noType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) noType0, (JSType) noType0, (List<JSType>) linkedList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesNumberContext());
      assertNull(noType0.getReferenceName());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertNull(noType0.getTemplateTypeName());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.hasInstanceType());
      assertEquals(0, linkedList0.size());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertNull(functionType0.getTemplateTypeName());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertNotNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "?U/F2HoP+S");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(errorFunctionType0, errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertNotNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertTrue(booleanType0.matchesStringContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isVoidType());
      assertTrue(booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNoObjectType());
      assertNotNull(booleanType0);
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)booleanType0.autoboxesTo();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertTrue(booleanType0.matchesStringContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isVoidType());
      assertTrue(booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertNotNull(instanceObjectType0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createNullableType(instanceObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertTrue(booleanType0.matchesStringContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isVoidType());
      assertTrue(booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isOrdinaryFunction());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalConstructor());
      assertNotNull(unionType0);
      
      Node node0 = Node.newString("4H.lu;of1L8xye", 0, 46);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertEquals(46, node0.getCharno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNot());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(46, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(40, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertNotNull(node0);
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, unionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertTrue(booleanType0.matchesStringContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isVoidType());
      assertTrue(booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isOrdinaryFunction());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertEquals(46, node0.getCharno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNot());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(46, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(40, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isStringValueType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.isEnumType());
      assertNotNull(enumType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "\"");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertNotNull(errorFunctionType0);
      
      ObjectType objectType0 = errorFunctionType0.getInstanceType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isUnionType());
      assertTrue(objectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.hasCachedValues());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEnumElementType());
      assertNotNull(objectType0);
      
      Collection<FunctionType> collection0 = jSTypeRegistry0.getDirectImplementors(objectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isUnionType());
      assertTrue(objectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.hasCachedValues());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEnumElementType());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      jSTypeRegistry0.forwardDeclareType("{-!<`Ik.[mU]#j/!");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(noResolvedType0, noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertNotNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = (NamedType)jSTypeRegistry0.createNamedType("Not declared as a type name", "Named type with empty name component", 0, 1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isNoResolvedType());
      assertEquals("Not declared as a type name", namedType0.getReferenceName());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertTrue(namedType0.hasReferenceName());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isOrdinaryFunction());
      assertNotNull(namedType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      jSTypeRegistry0.clearTemplateTypeName();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNoResolvedType());
      assertNotNull(noType0);
      
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isResolved());
      assertNotNull(objectType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isStringValueType());
      assertNotNull(objectType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionType(objectType0, (JSType) objectType0, (List<JSType>) linkedList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isInterface());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isStringValueType());
      assertEquals(0, linkedList0.size());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertNull(functionType0.getTemplateTypeName());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertNotNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isInterface());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertNotNull(recordType0);
      
      ObjectType objectType0 = recordType0.getImplicitPrototype();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isInterface());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isFunctionType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isAllType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isNoObjectType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isInterface());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.hasCachedValues());
      assertTrue(objectType0.isNativeObjectType());
      assertNotNull(objectType0);
      
      ObjectType objectType1 = jSTypeRegistry0.findCommonSuperObject(recordType0, objectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(objectType0, objectType1);
      assertSame(objectType1, objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isInterface());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isFunctionType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isAllType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isNoObjectType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isInterface());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.hasCachedValues());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, objectType1.getPossibleToBooleanOutcomes());
      assertFalse(objectType1.isOrdinaryFunction());
      assertFalse(objectType1.isRecordType());
      assertFalse(objectType1.isAllType());
      assertFalse(objectType1.isBooleanValueType());
      assertFalse(objectType1.isTemplateType());
      assertFalse(objectType1.isEnumElementType());
      assertFalse(objectType1.isFunctionPrototypeType());
      assertTrue(objectType1.isNominalType());
      assertFalse(objectType1.isNominalConstructor());
      assertFalse(objectType1.isConstructor());
      assertFalse(objectType1.isNoType());
      assertTrue(objectType1.isInstanceType());
      assertFalse(objectType1.isNullType());
      assertFalse(objectType1.isNoObjectType());
      assertFalse(objectType1.isCheckedUnknownType());
      assertTrue(objectType1.isObject());
      assertFalse(objectType1.isStringValueType());
      assertFalse(objectType1.isUnionType());
      assertFalse(objectType1.isNumberValueType());
      assertTrue(objectType1.matchesObjectContext());
      assertFalse(objectType1.isVoidType());
      assertFalse(objectType1.isEnumType());
      assertFalse(objectType1.isNoResolvedType());
      assertFalse(objectType1.isInterface());
      assertTrue(objectType1.hasCachedValues());
      assertTrue(objectType1.hasReferenceName());
      assertTrue(objectType1.isNativeObjectType());
      assertFalse(objectType1.isResolved());
      assertNotNull(objectType1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = Node.newString("global this", 131, 131);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isFromExterns());
      assertEquals(536707, node0.getSourcePosition());
      assertEquals(131, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertEquals(131, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertNotNull(node0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSType jSType0 = jSTypeRegistry0.createFromTypeNodes(node0, "com.google.common.collect.ForwardingCollection", (StaticScope<JSType>) null);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isFromExterns());
      assertEquals(536707, node0.getSourcePosition());
      assertEquals(131, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertEquals(131, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isEnumType());
      assertNotNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("q", (Node) null);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isObject());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertNull(functionType0.getTemplateTypeName());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isResolved());
      assertNotNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<NullType> linkedList0 = new LinkedList<NullType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isEnumType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isAllType());
      assertNotNull(recordType0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) recordType0, (List<JSType>) linkedList1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isEnumType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isAllType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNotNull(functionType0);
      
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(recordType0, functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isEnumType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isAllType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isResolved());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isEnumElementType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isAllType());
      assertNotNull(objectType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertNotNull(noObjectType0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesObjectContext());
      assertNotNull(allType0);
      
      JSType jSType0 = allType0.forceResolve(simpleErrorReporter0, noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(allType0, jSType0);
      assertSame(jSType0, allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesObjectContext());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.canBeCalled());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.isResolved());
      assertTrue(jSType0.matchesStringContext());
      assertNotNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      jSTypeRegistry0.clearNamedTypes();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      jSTypeRegistry0.setLastGeneration(true);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNumberValueType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertNotNull(objectType0);
      
      boolean boolean0 = jSTypeRegistry0.resetImplicitPrototype(objectType0, objectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNumberValueType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.registerTypeImplementingInterface((FunctionType) null, (ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertNotNull(noResolvedType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(parameterizedType0.isNoResolvedType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNoType());
      assertFalse(parameterizedType0.isNominalType());
      assertFalse(parameterizedType0.isNoObjectType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isConstructor());
      assertFalse(parameterizedType0.isCheckedUnknownType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isNativeObjectType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isAllType());
      assertFalse(parameterizedType0.isInterface());
      assertFalse(parameterizedType0.hasReferenceName());
      assertFalse(parameterizedType0.isOrdinaryFunction());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isTemplateType());
      assertNotNull(parameterizedType0);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(parameterizedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(parameterizedType0.isNoResolvedType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNoType());
      assertFalse(parameterizedType0.isNominalType());
      assertFalse(parameterizedType0.isNoObjectType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isConstructor());
      assertFalse(parameterizedType0.isCheckedUnknownType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isNativeObjectType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isAllType());
      assertFalse(parameterizedType0.isInterface());
      assertFalse(parameterizedType0.hasReferenceName());
      assertFalse(parameterizedType0.isOrdinaryFunction());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertNotNull(jSType0);
      
      boolean boolean0 = jSTypeRegistry0.resetImplicitPrototype(jSType0, parameterizedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(parameterizedType0.isNoResolvedType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNoType());
      assertFalse(parameterizedType0.isNominalType());
      assertFalse(parameterizedType0.isNoObjectType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isConstructor());
      assertFalse(parameterizedType0.isCheckedUnknownType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isNativeObjectType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isAllType());
      assertFalse(parameterizedType0.isInterface());
      assertFalse(parameterizedType0.hasReferenceName());
      assertFalse(parameterizedType0.isOrdinaryFunction());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeRegistry.ResolveMode jSTypeRegistry_ResolveMode0 = JSTypeRegistry.ResolveMode.IMMEDIATE;
      jSTypeRegistry0.setResolveMode(jSTypeRegistry_ResolveMode0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = Node.newString("", 591, 591);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals(591, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isInc());
      assertTrue(node0.isString());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertEquals(591, node0.getLineno());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(2421327, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertNotNull(node0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertNull(functionType0.getTemplateTypeName());
      assertNotNull(functionType0);
      
      UnknownType unknownType0 = (UnknownType)jSTypeRegistry0.createFromTypeNodes(node0, "YV_9<*5$_?Xs0nsJ", functionType0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals(591, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isInc());
      assertTrue(node0.isString());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertEquals(591, node0.getLineno());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(2421327, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertNull(functionType0.getTemplateTypeName());
      assertTrue(unknownType0.matchesObjectContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.hasDisplayName());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNominalConstructor());
      assertTrue(unknownType0.isObject());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertNotNull(unknownType0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      jSTypeRegistry0.declareType("m33'&RL.%/*vZ52pW6", recordType0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      jSTypeRegistry0.registerPropertyOnType("Named type with empty name component", noType0);
      jSTypeRegistry0.registerPropertyOnType("Named type with empty name component", noType0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      jSTypeRegistry0.registerPropertyOnType("Not declared as a constructor", allType0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, "Not declared as a constructor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNullableType(noResolvedType0);
      jSTypeRegistry0.registerPropertyOnType("Not declared as a constructor", jSType0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "72uF");
      jSTypeRegistry0.unregisterPropertyOnType("72uF", errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noType0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.unregisterPropertyOnType("prototype", jSType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.canPropertyBeDefined((JSType) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "REFERENCE_ERROR_FUNCTION_TYPE");
      Node node0 = Node.newString("Not declared as a constructor", 4, 31);
      JSType jSType0 = jSTypeRegistry0.createFromTypeNodes(node0, "", errorFunctionType0);
      jSTypeRegistry0.canPropertyBeDefined(jSType0, "prototype");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "a!8");
      jSTypeRegistry0.canPropertyBeDefined(errorFunctionType0, "prototype");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.getTypesWithProperty("And(");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.getEachReferenceTypeWithProperty((String) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.getEachReferenceTypeWithProperty("prototype");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.findCommonSuperObject((ObjectType) null, (ObjectType) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.incrementGeneration();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.declareType("Not declared as a tpe name", (JSType) null);
      jSTypeRegistry0.declareType("Not declared as a tpe name", (JSType) null);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.overwriteDeclaredType("1hOXMxcu]\"NP~S*7", recordType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "*M}qovI1Bg)>");
      jSTypeRegistry0.overwriteDeclaredType("Number", errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.hasNamespace("zTPLW");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("n{i5)PrK", 989, (-2878));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.setTemplateTypeName("n{i5)PrK");
      jSTypeRegistry0.createFromTypeNodes(node0, "n{i5)PrK", (StaticScope<JSType>) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.resolveTypesInScope((StaticScope<JSType>) null);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("NoObject", 5, (-7));
      jSTypeRegistry0.createFromTypeNodes(node0, ":~!Td5}-CH,H8y.s", (StaticScope<JSType>) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.resolveTypesInScope((StaticScope<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.NamedType", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      jSTypeRegistry0.resolveTypesInScope(noType0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "?U/F2HoP+S");
      jSTypeRegistry0.resolveTypesInScope(errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      jSTypeRegistry0.createOptionalType(noType0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[17];
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeRegistry0.createFunctionType(jSTypeArray0[1], false, jSTypeArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createConstructorType((JSType) instanceObjectType0, false, jSTypeArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "REFERENCE_ERROR_FUNCTION_TYPE");
      Node node0 = errorFunctionType0.getParametersNode();
      JSTypeRegistry.ResolveMode jSTypeRegistry_ResolveMode0 = JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
      jSTypeRegistry0.setResolveMode(jSTypeRegistry_ResolveMode0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFromTypeNodes(node0, (String) null, (StaticScope<JSType>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node in type expression: PARAM_LIST
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "REFERENCE_ERROR_FUNCTION_TYPE");
      Node node0 = errorFunctionType0.getParametersNode();
      JSTypeRegistry.ResolveMode jSTypeRegistry_ResolveMode0 = JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
      jSTypeRegistry0.setResolveMode(jSTypeRegistry_ResolveMode0);
      Node node1 = Node.newString("Unknown class name", 4095, 43);
      Node node2 = new Node((-1176), node1, node0);
      jSTypeRegistry0.createFromTypeNodes(node2, "Unknown class name", errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node((-955), (-955), 911);
      Node node1 = new Node(122, node0, node0, node0, node0);
      jSTypeRegistry0.createFromTypeNodes(node1, "@Ri", (StaticScope<JSType>) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(1, 3, 120);
      Node node1 = new Node(124, node0, node0, node0, (-812), 16);
      jSTypeRegistry0.createFromTypeNodes(node1, "com.google.javascript.rhino.jstype.JSTypeRegistry", (StaticScope<JSType>) null);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(301, 302, 301);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "*M}qovI1Bg)>");
      jSTypeRegistry0.createFromTypeNodes(node0, "1U", errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(302, (-1342), (-1342));
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      jSTypeRegistry0.createFromTypeNodes(node0, "Not declared as a type name", errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("void", 8198, 15);
      jSTypeRegistry0.createFromTypeNodes(node0, "void", (StaticScope<JSType>) null);
  }
}
