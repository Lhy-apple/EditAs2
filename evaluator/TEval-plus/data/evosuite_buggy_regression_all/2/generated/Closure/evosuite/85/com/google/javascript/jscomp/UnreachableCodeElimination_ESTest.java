/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:32:58 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.UnreachableCodeElimination;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UnreachableCodeElimination_ESTest extends UnreachableCodeElimination_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "9", "9");
      unreachableCodeElimination0.process(node0, node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = Node.newString(105, "TaWECkaK'", 105, 1308);
      unreachableCodeElimination0.visit((NodeTraversal) null, node0, node0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "!e=S", "!e=S");
      Node node1 = new Node(11, node0);
      unreachableCodeElimination0.process(node0, node1);
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("/:p0)", "/:p0)");
      Node node1 = new Node(4);
      node0.addChildToFront(node1);
      unreachableCodeElimination0.process(node1, node0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "~", "~");
      Node node1 = new Node(114, node0);
      unreachableCodeElimination0.process(node0, node1);
      assertEquals(125, node0.getType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "~^I", "~^I");
      Node node1 = new Node(0);
      node1.addChildAfter(node0, node0);
      node0.addChildToFront(node1);
      node1.setType(4);
      // Undeclared exception!
      try { 
        unreachableCodeElimination0.process(node1, node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("/:p0)", "/:p0)");
      Node node1 = Node.newString("");
      Node node2 = new Node(4);
      node2.addChildrenToFront(node1);
      node0.addChildToFront(node2);
      unreachableCodeElimination0.process(node2, node0);
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "9", "9");
      Node node1 = new Node(0);
      node0.addChildToFront(node1);
      node1.setType(4);
      unreachableCodeElimination0.process(node0, node0);
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
      Node node1 = new Node(0);
      node1.addChildAfter(node0, node0);
      node0.addChildToFront(node1);
      node1.setType(4);
      unreachableCodeElimination0.process(node0, node0);
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("~^I", "~^I");
      Node node1 = Node.newString(45, "~^I", 4, 21);
      Node node2 = new Node(124);
      node1.addChildToFront(node2);
      unreachableCodeElimination0.process(node0, node1);
      assertEquals(49, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseTestCode("ld|");
      Node node1 = new Node(39, node0);
      unreachableCodeElimination0.process(node1, node1);
      assertEquals(49, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
      Node node1 = new Node(43);
      node1.addChildToFront(node0);
      node0.setType(120);
      // Undeclared exception!
      try { 
        unreachableCodeElimination0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }
}
