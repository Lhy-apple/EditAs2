/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:24:38 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSlot;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamedType_ESTest extends NamedType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", (-1353), (-1353));
      boolean boolean0 = namedType0.isNamedType();
      assertTrue(boolean0);
      assertEquals("", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Not declared as a constructor", 1, 0);
      String string0 = namedType0.toAnnotationString();
      assertEquals("Not declared as a constructor", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "@9V0>", "@9V0>", (-2836), (-2836));
      boolean boolean0 = namedType0.isNominalType();
      assertTrue(boolean0);
      assertEquals("@9V0>", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.NamedType", "com.google.javascript.rhino.jstype.NamedType", 20, 20);
      jSTypeRegistry0.resolveTypesInScope(namedType0);
      assertEquals("com.google.javascript.rhino.jstype.NamedType", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "T8-~3<:#H.+c8", "T8-~3<:#H.+c8", (-5), 1786);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      namedType0.setReferencedType(errorFunctionType0);
      Node node0 = new Node((-5), 1786, (-5));
      namedType0.defineDeclaredProperty("Named type with empty name component", errorFunctionType0, node0);
      namedType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      assertTrue(namedType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Cycle detected in inheritance chain of type ", "Cycle detected in inheritance chain of type ", 0, 213);
      JSType[] jSTypeArray0 = new JSType[1];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) namedType0, jSTypeArray0);
      Node node0 = new Node(1);
      namedType0.defineProperty("Named type with empty name component", jSTypeArray0[0], false, node0);
      boolean boolean0 = namedType0.defineProperty("Cycle detected in inheritance chain of type ", functionType0, false, node0);
      assertEquals("Cycle detected in inheritance chain of type ", namedType0.getReferenceName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Not declared as a type name", 1, 0);
      namedType0.setReferencedType(noResolvedType0);
      namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertTrue(namedType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.setLastGeneration(false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "string", "string", (-97), (-97));
      NamedType namedType1 = (NamedType)namedType0.resolveInternal(simpleErrorReporter0, namedType0);
      assertEquals("string", namedType1.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.setLastGeneration(false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "tring", "tring", 689, 689);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      NamedType namedType1 = (NamedType)namedType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      assertEquals("tring", namedType1.getReferenceName());
      assertFalse(namedType1.isNativeObjectType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      Node node0 = Node.newString("Unknown class name");
      ObjectType objectType0 = errorFunctionType0.getInstanceType();
      errorFunctionType0.defineDeclaredProperty("Unknown class name", objectType0, node0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Not declared as a constructor", 31, 53);
      namedType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "tring", "tring", 689, 689);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      Node node0 = Node.newString("Unknown class name");
      errorFunctionType0.defineDeclaredProperty("Unknown class name", namedType0, node0);
      NamedType namedType1 = new NamedType(jSTypeRegistry0, "Unknown class name", "Unknown class name", 0, 0);
      namedType1.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      assertEquals("Unknown class name", namedType1.getReferenceName());
      assertFalse(namedType1.isConstructor());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", (-97), (-97));
      namedType0.resolveInternal(simpleErrorReporter0, namedType0);
      assertFalse(namedType0.isNoResolvedType());
      assertEquals("", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      Node node0 = new Node(689);
      errorFunctionType0.defineDeclaredProperty("Unknown class name", (JSType) null, node0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Unknown class name", 1, 0);
      namedType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      assertEquals("Unknown class name", namedType0.getReferenceName());
      assertFalse(namedType0.isNativeObjectType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      AllType allType0 = new AllType(jSTypeRegistry0);
      Node node0 = new Node(1);
      errorFunctionType0.defineDeclaredProperty("rwv$9Iu", allType0, node0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "rwv$9Iu", "", 30, 765);
      namedType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      assertFalse(namedType0.isNoResolvedType());
      assertEquals("rwv$9Iu", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "string", "string", 1, 1);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      boolean boolean0 = namedType0.setValidator(predicate0);
      assertTrue(boolean0);
      
      namedType0.resolveInternal(simpleErrorReporter0, namedType0);
      assertEquals("string", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "5@iV0>", "5@iV0>", (-2805), (-2805));
      SimpleSlot simpleSlot0 = new SimpleSlot("Not declared as a type name", (JSType) null, true);
      // Undeclared exception!
      try { 
        namedType0.getTypedefType((ErrorReporter) null, simpleSlot0, "Not declared as a type name");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.NamedType", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "4(~ ", "4(~ ", 0, 0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      namedType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      // Undeclared exception!
      try { 
        namedType0.setValidator((Predicate<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }
}
