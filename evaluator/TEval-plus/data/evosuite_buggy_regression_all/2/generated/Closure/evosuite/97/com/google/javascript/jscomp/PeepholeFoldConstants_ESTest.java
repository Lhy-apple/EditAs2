/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:34:28 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newString("\f|VebY~");
      Node node1 = new Node(27, node0, node0, node0, 45, 29);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = new Node(29, node0, node0, node0, 11, 46);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(12, 12, 12);
      Node node1 = new Node(32, node0, node0, 1638, 23);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(32, node2.getType());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(35, "5z=w*1p[<");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = new Node(36, node0, node0, node0, 11, 46);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertEquals(1, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(12, 12, 12);
      Node node1 = new Node(37, node0, node0, node0, 47, (-2429));
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertEquals(1, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("+");
      Node node1 = Node.newString(42, "+");
      Node node2 = new Node(16, node1, node0, node0, node0, 40, 51);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 17, 18);
      Node node2 = new Node(9, node1, node0, 12, 14);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(31, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = new Node(23);
      Node node2 = new Node(10, node1, node1, node0, 34, 19);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(10, node3.getType());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 17, 18);
      Node node2 = new Node(11, node1, node0, 25, 20);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("/I_>/:Y;YbfL}k+");
      Node node1 = Node.newString("/I_>/:Y;YbfL}k+", 68, 23);
      Node node2 = new Node(12, node0, node1, (-1327), 101);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString("|>xVeY~");
      Node node1 = Node.newString("|>xVeY~");
      Node node2 = new Node(13, node1, node0, 12, 34);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(23);
      Node node1 = Node.newString(2, "3lpJkV1jY,[");
      Node node2 = new Node(14, node0, node0, node1, node1, 35, 12);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(35, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(".8Q@");
      Node node1 = Node.newString(3, ".8Q@");
      Node node2 = new Node(15, node0, node1, node1, 1, 48);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(15, node3.getType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = Node.newString("", 4, 32);
      Node node2 = new Node(17, node0, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("ZQC");
      Node node1 = Node.newString("length", 19, 3);
      Node node2 = new Node(18, node0, node1, node1, 20, 4);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(20, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(">)pnYX+x");
      Node node1 = Node.newString(">)pnYX+x", 17, 18);
      Node node2 = new Node(19, node1, node1, node0, 2, 12);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(19, node3.getType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 17, 18);
      Node node2 = new Node(20, node1, node0, 12, 26);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(20, node3.getType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(12);
      Node node1 = new Node(1);
      Node node2 = new Node(21, node1, node0, node0, 43, 21);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(">)pnYX+x");
      Node node1 = Node.newString(">)pnYX+x", 17, 18);
      Node node2 = new Node(22, node1, node0, 11, 24);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newString("w6Q=?ce2jHy", 35, 35);
      Node node1 = Node.newString("w6Q=?ce2jHy", 4095, 36);
      Node node2 = new Node(23, node0, node1, node1, 386, 28);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("BINDNAME");
      Node node1 = Node.newString("BINDNAME", 0, 49);
      Node node2 = new Node(24, node1, node0, node0, 8, 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(12, 12, 12);
      Node node1 = new Node(38);
      Node node2 = new Node(25, node1, node1, node0, (-3), 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString(35, "\f|VbY~");
      Node node1 = Node.newString((-3), "\f|VbY~", 19, 4095);
      Node node2 = new Node(28, node0, node1, node1, 14, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("O|VeY!~");
      Node node1 = Node.newString("O|VeY!~", 17, 18);
      Node node2 = new Node(30, node0, node1, 45, 3);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 17, 18);
      Node node2 = new Node(31, node0, node1, node0, node1, 3, 13);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(293);
      Node node1 = Node.newString(1, "com.google.javascript.jscomp.PeepholeFoldConstants");
      Node node2 = new Node(33, node1, node1, node0, 51, (-3));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(57);
      Node node1 = new Node(47);
      Node node2 = new Node(34, node1, node0, node0, (-3), 27);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(34, node3.getType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(12, 12, 12);
      Node node1 = new Node(38);
      Node node2 = new Node(35, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = Node.newString("", 4, 32);
      Node node2 = new Node(36, node0, node0, node1, 11, 46);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~");
      Node node2 = new Node(38, node1, node0, 4095, 26);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(38, node3.getType());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = new Node(21, 29, 43);
      Node node2 = new Node(39, node1, node0, node0, node0, 48, 2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(12, 12, 12);
      Node node1 = new Node(17, 0, 12);
      Node node2 = new Node(40, node0, node1, 1, 71);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(40, node3.getType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 17, 18);
      Node node2 = new Node(41, node1, node0, 12, 26);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(12, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(12, 12, 12);
      Node node1 = new Node(17, 0, 12);
      Node node2 = new Node(42, node0, node1, node1, 15, 18);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1924);
      Node node1 = new Node(97);
      Node node2 = new Node(43, node1, node1, node0, 5, 43);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(12);
      Node node1 = Node.newString(0, "hJ1Msp;!*[");
      Node node2 = new Node(44, node0, node1, node1, 29, 4095);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(44, node3.getType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("C");
      Node node1 = Node.newNumber((double) 46);
      Node node2 = new Node(45, node0, node1, 26, 4);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("length");
      Node node1 = Node.newString("\f|VebY~", 90, 6);
      Node node2 = new Node(46, node0, node0, node1, 48, 28);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 619, 10);
      Node node2 = new Node(47, node1, node0, 18, (-3));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 17, 18);
      Node node2 = new Node(78, node1, node0, 12, 26);
      node2.setType(48);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(26, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 2, 47);
      Node node2 = new Node(49, node0, node1, node1, (-50), 5);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(49, node3.getType());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("sD4UjE1(h@upBN");
      Node node1 = Node.newString("sD4UjE1(h@upBN");
      Node node2 = new Node(50, node0, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newString(326, "\f|VebY~");
      Node node1 = Node.newString("\f|VebY~", 35, 25);
      Node node2 = new Node(51, node1, node1, node0, 1, 37);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(51, node3.getType());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString(326, "\f|VeY~");
      Node node1 = Node.newString((-560), "\f|VeY~", 3257, 10);
      Node node2 = new Node(52, node0, node0, node1, (-536870912), 40);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(67, "&IQ@");
      Node node1 = Node.newString(3, "&IQ@");
      Node node2 = new Node(55, node0, node1, node1, 1, 48);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(105, "&IQ@");
      Node node1 = Node.newString(3, "&IQ@");
      Node node2 = new Node(56, node0, node1, node1, 1, 48);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(">)pnYX+x");
      Node node1 = Node.newString(">)pnYX+x", 17, 18);
      Node node2 = new Node(57, node0, node0, node1, 45, 19);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString(35, "\f|VebY~");
      Node node1 = Node.newString((-217), "\f|VebY~");
      Node node2 = new Node(58, node0, node0, node1, 26, 101);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(26, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString("Q@");
      Node node1 = Node.newString(64, "Q@");
      Node node2 = new Node(59, node1, node1, node0, 51, 33);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(59, node3.getType());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Q@");
      Node node1 = Node.newString(3, "Q@");
      Node node2 = new Node(60, node0, node1, node1, 1, 48);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(48, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(12, 12, 12);
      Node node1 = Node.newString((-3515), "");
      Node node2 = new Node(62, node1, node0, node0, 12, 56);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 619, 10);
      Node node2 = new Node(63, node1, node0, 18, (-3));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(63, node3.getType());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(">)pnYX+x");
      Node node1 = Node.newString(">)pnYX+x", 17, 18);
      Node node2 = new Node(65, node1, node0, 11, 24);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString(7, "\f|VeY~");
      Node node2 = new Node(66, node1, node0, 11, 47);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 17, 18);
      Node node2 = new Node(67, node1, node0, 11, 47);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(47, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(74);
      Node node1 = Node.newString(3, "\f|VebY~");
      Node node2 = new Node(68, node1, node1, node0, 0, 2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(68, node3.getType());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Q@");
      Node node1 = Node.newString(3, "Q@");
      Node node2 = new Node(69, node1, node0, node0, 19, (-2624));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 17, 18);
      Node node2 = new Node(70, node1, node0, 11, 47);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("|VeN~", 53, 53);
      Node node1 = Node.newString(49, "|VeN~");
      Node node2 = new Node(71, node1, node0, 1, 4095);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4095, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(57);
      Node node1 = new Node(47);
      Node node2 = new Node(72, node0, node0, node1, 2, 64);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(64, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 17, 18);
      Node node2 = new Node(73, node1, node0, 11, 24);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(73, node3.getType());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(12);
      Node node1 = Node.newNumber(0.0);
      Node node2 = new Node(74, node0, node0, node1, 20, 43);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(20, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newString(35, "\f|VebY~");
      Node node1 = Node.newString("\f|VebY~", 23, 70);
      Node node2 = new Node(75, node0, node0, node1, 48, 19);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(75, node3.getType());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(32, "\f|VeYN~");
      Node node1 = Node.newString(49, "\f|VeYN~");
      Node node2 = new Node(76, node1, node0, node0, 85, 18);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(85, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1096, 1096, 1096);
      Node node1 = Node.newString(40, "Q@");
      Node node2 = new Node(77, node0, node0, node1, 42, 0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 17, 18);
      Node node2 = new Node(78, node1, node0, 12, 26);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(12, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("QveZBo]'R0");
      Node node1 = Node.newString("QveZBo]'R0", 17, 18);
      Node node2 = new Node(79, node1, node0, 12, 11);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|V'bKY~", 131072, 131072);
      Node node1 = Node.newString(35, "\f|V'bKY~", 4, 0);
      Node node2 = new Node(80, node0, node0, node1, 48, 19);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(48, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(12, 12, 12);
      Node node1 = new Node(38);
      Node node2 = new Node(81, node1, node0, node0, (-3), 92);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(12);
      Node node1 = new Node(734);
      Node node2 = new Node(82, node1, node0, node0, 23, 108);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(108, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[2];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(83, node1.getType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("BINDNAME");
      Node node1 = Node.newString("BINDNAME", 15, 49);
      Node node2 = new Node(84, node1, node0, node0, 8, 38);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("com.google.javascript.jscomp.DefaultPassConfig$8");
      Node node1 = Node.newString("com.google.javascript.jscomp.DefaultPassConfig$8", 17, 18);
      Node node2 = new Node(85, node1, node0, 12, 46);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(85, node3.getType());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(74);
      Node node1 = Node.newString(3, "Q@");
      Node node2 = new Node(86, node1, node1, node0, 15, 27);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 619, 10);
      Node node2 = new Node(87, node1, node0, 18, (-3));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(".8h@");
      Node node1 = Node.newString(3, ".8h@");
      Node node2 = new Node(88, node0, node1, node1, 1, 48);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(88, node3.getType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 17, 18);
      Node node2 = new Node(89, node1, node0, 12, 11);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(12, 12, 12);
      Node node1 = new Node(38);
      Node node2 = new Node(90, node0, node1, 34, 3722);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("com.google.javascript.jscomp.VariableShadowDeclarationCheck$ShadowDeclarationCheckingCallback");
      Node node1 = Node.newString("com.google.javascript.jscomp.VariableShadowDeclarationCheck$ShadowDeclarationCheckingCallback", 17, 18);
      Node node2 = new Node(91, node1, node0, 12, 26);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(">)pnYX+x");
      Node node1 = new Node(764);
      Node node2 = new Node(92, node0, node0, node1, 18, 46);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 17, 18);
      Node node2 = new Node(93, node1, node1, node0, 192, 31);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString(35, "\f|VebY~");
      Node node1 = Node.newString(5, "{");
      Node node2 = new Node(94, node0, node0, node1, 48, 19);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(48, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 17, 18);
      Node node2 = new Node(95, node1, node0, 12, 26);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(".8Q@");
      Node node1 = Node.newString(3, ".8Q@");
      Node node2 = new Node(96, node0, node1, 22, 35);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(97, "O|VeY!~");
      Node node1 = Node.newString("O|VeY!~", 20, 7);
      Node node2 = new Node(97, node1, node0, 2, 4);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(57);
      Node node1 = new Node(32, 840, 89);
      Node node2 = new Node(98, node1, node1, node0, 24, 2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|Veh[~");
      Node node1 = Node.newString("\f|Veh[~", 4095, 36);
      Node node2 = new Node(99, node1, node0, 49, 3);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(99, node3.getType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(57);
      Node node1 = Node.newString(2, "3lpJkV1jY,[");
      Node node2 = new Node(100, node0, node1, 11, 33);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("QveZBo]'R0");
      Node node1 = Node.newString("QveZBo]'R0", 17, 18);
      Node node2 = new Node(101, node1, node0, 12, 11);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(12);
      Node node1 = new Node(1);
      Node node2 = new Node(4, node0, node0, node1, 21, 15);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(32, "-z7Op1|/!~=>F5");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(51, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~", 13, 13);
      Node node1 = new Node(32, node0, node0, node0, 1067, 108);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Fractional bitwise operand: {0}");
      Node node1 = new Node(26, node0);
      Node node2 = Node.newString("Fractional bitwise operand: {0}", 32, 4);
      Node node3 = new Node(43, node1, node2, node2, 9, (-3));
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Fractional bitwise operand: {0}");
      Node node1 = new Node(26, node0);
      Node node2 = new Node(43, node1, node1, node1, 9, (-3));
      node0.setType(81);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(26, node3.getType());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(57);
      Node node1 = new Node(43, node0, node0, 45, 45);
      Node node2 = Node.newString(2, "3lpJkV1jY,[");
      Node node3 = new Node(100, node1, node2, 11, 33);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(57);
      Node node1 = Node.newString("3lpJkV1jY,[", 46, 50);
      Node node2 = new Node(100, node1, node1, node0, 29, 51);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(57);
      Node node1 = new Node(43, node0, node0, 45, 45);
      Node node2 = Node.newString(2, "3lpJkV1jY,[");
      Node node3 = new Node(100, node2, node2, node1, 29, 51);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 17, 18);
      Node node2 = new Node(78, node1, node0, 12, 26);
      node2.setType(21);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(23);
      Node node1 = new Node(43, node0, node0, 45, 45);
      Node node2 = Node.newString(2, "3lpJkV1jY,[");
      Node node3 = Node.newString(76, "\f|VeY~");
      Node node4 = new Node(14, node1, node3, node2, node2, 35, 12);
      Node node5 = peepholeFoldConstants0.optimizeSubtree(node4);
      assertEquals(12, node5.getCharno());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Of|VeY~");
      Node node1 = Node.newString("Of|VeY~", 17, 18);
      Node node2 = new Node(45, node1, node1, node0, 73, 31);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(37, "");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(12, 12, 12);
      Node node1 = new Node(1);
      Node node2 = new Node(37, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("\f|VeY~");
      Node node1 = Node.newString("\f|VeY~", 17, 18);
      Node node2 = new Node(33, node1, node0, 12, 97);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }
}
