/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:38:39 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.NameAnonymousFunctionsMapped;
import com.google.javascript.jscomp.RenameVars;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.RecordType;
import java.util.HashMap;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RenameVars_ESTest extends RenameVars_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      char[] charArray0 = new char[3];
      Node node0 = compiler0.parseTestCode("GJAfuOM--;");
      RenameVars renameVars0 = new RenameVars(compiler0, "x", true, false, true, variableMap0, charArray0, compilerOptions0.aliasableStrings);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("SET_REF_OP");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      renameVars_ProcessVars0.incCount("SET_REF_OP", compilerInput0);
      renameVars0.process(node0, node0);
      renameVars0.process(node0, node0);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      char[] charArray0 = new char[6];
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, variableMap0, charArray0, compilerOptions0.stripTypePrefixes);
      VariableMap variableMap1 = renameVars0.getVariableMap();
      assertNotSame(variableMap0, variableMap1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      char[] charArray0 = new char[7];
      RenameVars renameVars0 = new RenameVars(compiler0, "lKAf%z\"vj/Wm6Mh ", false, false, false, variableMap0, charArray0, (Set<String>) null);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Ked9[k%g~vAqYs", "com.google.javascript.jscomp.RenameVars$2");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      RenameVars.Assignment renameVars_Assignment0 = renameVars0.new Assignment("lKAf%z\"vj/Wm6Mh ", compilerInput0);
      renameVars_Assignment0.setNewName("5p)M8)E=J*~[a=68");
      // Undeclared exception!
      try { 
        renameVars_Assignment0.setNewName("%xWTT3~");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[2];
      RenameVars renameVars0 = new RenameVars(compiler0, "YF", true, true, true, (VariableMap) null, charArray0, (Set<String>) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[2];
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      jSTypeArray0[1] = (JSType) recordType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      renameVars0.process(node0, node0);
      assertEquals(1, Node.SPECIALCALL_EVAL);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[1];
      RenameVars renameVars0 = new RenameVars(compiler0, "com.google.javascript.jscomp.RenameVars$2", false, true, false, (VariableMap) null, charArray0, (Set<String>) null);
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.RenameVars$2");
      // Undeclared exception!
      try { 
        renameVars0.process(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prefix has invalid characters, must be one of: [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, _, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $]
         //
         verifyException("com.google.javascript.jscomp.NameGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      RenameVars renameVars0 = new RenameVars(compiler0, "com.google.javascript.jscomp.RenameVars$1", false, false, false, (VariableMap) null, (char[]) null, (Set<String>) null);
      Node node0 = compiler0.parseTestCode("UYFaZ%_sFF");
      // Undeclared exception!
      try { 
        renameVars0.process(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prefix has invalid characters, must be one of: [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, _, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $]
         //
         verifyException("com.google.javascript.jscomp.NameGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[1];
      RenameVars renameVars0 = new RenameVars(compiler0, "", false, true, true, (VariableMap) null, charArray0, (Set<String>) null);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(true);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(") vGQ8");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      renameVars_ProcessVars0.incCount("E$/F/Pcn8", compilerInput0);
      renameVars_ProcessVars0.incCount("E$/F/Pcn8", compilerInput0);
      assertTrue(compilerInput0.isExtern());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      Node node0 = new Node((-871));
      char[] charArray0 = new char[1];
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, variableMap0, charArray0, compilerOptions0.stripTypePrefixes);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      renameVars_ProcessVars0.incCount("L com.google.javascript.jscomp.RenameVars$ProcessVars", compilerInput0);
      renameVars0.process(node0, node0);
      assertEquals(31, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      char[] charArray0 = new char[3];
      Node node0 = compiler0.parseTestCode("GJAfuOM--;");
      RenameVars renameVars0 = new RenameVars(compiler0, "x", true, false, true, variableMap0, charArray0, compilerOptions0.aliasableStrings);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("SET_REF_OP");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      renameVars_ProcessVars0.incCount("SET_REF_OP", compilerInput0);
      renameVars_ProcessVars0.incCount("com.google.javascript.jscomp.PhaseOptimizer$NamedPass", compilerInput0);
      renameVars0.process(node0, node0);
      assertEquals(41, Node.BRACELESS_TYPE);
  }
}
