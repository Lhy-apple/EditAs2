/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:24:49 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.ScopedAliases;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeValidator_ESTest extends TypeValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.getMismatches();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      Node node0 = Node.newString(0, "Not declared as a constructor", 1, 1);
      DiagnosticType diagnosticType0 = TypedScopeCreator.CTOR_INITIALIZER;
      String[] stringArray0 = new String[13];
      JSError jSError0 = JSError.make("Total Static Functions: ", node0, diagnosticType0, stringArray0);
      JSType jSType1 = modificationVisitor0.caseStringType();
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType1, jSType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch((JSType) null, (JSType) null, (JSError) null);
      String string0 = typeValidator_TypeMismatch0.toString();
      assertEquals("(null, null)", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      Node node0 = Node.newString("Not declared as a constructor");
      DiagnosticType diagnosticType0 = TypedScopeCreator.CTOR_INITIALIZER;
      String[] stringArray0 = new String[13];
      JSError jSError0 = JSError.make("Total Static Functions: ", node0, diagnosticType0, stringArray0);
      JSType jSType1 = modificationVisitor0.caseStringType();
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType1, jSType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(simpleErrorReporter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      Node node0 = Node.newNumber((-1.0), 1, 183);
      DiagnosticType diagnosticType0 = ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS;
      String[] stringArray0 = new String[13];
      JSError jSError0 = JSError.make("Total Static Functions: ", node0, diagnosticType0, stringArray0);
      JSType jSType1 = modificationVisitor0.caseStringType();
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType1, jSType0, jSError0);
      JSType[] jSTypeArray0 = new JSType[6];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, jSTypeArray0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(jSType0, functionType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
      assertTrue(functionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      Node node0 = Node.newString(0, "Not declared as a constructor", 1, 1);
      DiagnosticType diagnosticType0 = TypedScopeCreator.CTOR_INITIALIZER;
      String[] stringArray0 = new String[13];
      JSError jSError0 = JSError.make("Total Static Functions: ", node0, diagnosticType0, stringArray0);
      JSType jSType1 = modificationVisitor0.caseStringType();
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType1, jSType0, jSError0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(jSType1, jSType1, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
      assertFalse(boolean0);
      assertFalse(typeValidator_TypeMismatch1.equals((Object)typeValidator_TypeMismatch0));
  }
}
