/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:35:20 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AstParallelizer;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckMissingGetCssName;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DeadAssignmentsElimination;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.FoldConstants;
import com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.MoveFunctionDeclarations;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SymbolTable;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FoldConstants_ESTest extends FoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber((-15.446891670446638));
      AstParallelizer astParallelizer0 = AstParallelizer.createNewFileLevelAstParallelizer(node0);
      List<Node> list0 = astParallelizer0.split();
      GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions gatherSideEffectSubexpressionsCallback_CopySideEffectSubexpressions0 = new GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions(compiler0, list0);
      GatherSideEffectSubexpressionsCallback gatherSideEffectSubexpressionsCallback0 = new GatherSideEffectSubexpressionsCallback(compiler0, gatherSideEffectSubexpressionsCallback_CopySideEffectSubexpressions0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherSideEffectSubexpressionsCallback0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.process((Node) null, (Node) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((-24), "AoP?");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      boolean boolean0 = foldConstants0.hasBreakOrContinue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("AoP?");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newNumber((-3412.699174775), 793, 47);
      foldConstants0.visit(nodeTraversal0, node1, node0);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((-16), "AoP?");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(32, node0, node0);
      foldConstants0.visit(nodeTraversal0, node1, node1);
      assertFalse(node1.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("~;");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(32, node0, node0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("~;", "~;");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newNumber((double) 0, 1, 108);
      Node node2 = new Node(32, node1, node0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node2, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "Array");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
      Node node0 = compiler0.parseTestCode("Array");
      Node node1 = new Node(26, node0, node0, node0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.visit(nodeTraversal0, node1, node1);
      assertEquals(43, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((-24), "AoP?");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(29, node0, node0);
      foldConstants0.visit(nodeTraversal0, node1, node1);
      assertEquals(1, Node.PROPERTY_FLAG);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(931, "AoP?");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(27, node0, node0);
      foldConstants0.visit(nodeTraversal0, node1, node0);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
      Node node0 = compiler0.parseTestCode("[].joiDn()");
      Node node1 = new Node(30, node0, 32, 39);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.visit(nodeTraversal0, node1, node1);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(917505, "S");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(130, node0, node0);
      foldConstants0.visit(nodeTraversal0, node1, node1);
      assertEquals(0, Node.LABEL_ID_PROP);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(917509, 917509, 917509);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(4, node0, node0);
      foldConstants0.visit(nodeTraversal0, node1, node1);
      assertEquals(2, Node.BREAK_PROP);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("AoP?");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newNumber((-3412.699174775), 793, 47);
      Node node2 = new Node(16, node1, node0);
      foldConstants0.visit(nodeTraversal0, node2, node0);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((byte)22);
      Node node1 = compiler0.parseTestCode("YOInDlR) 9<a^QV4\";v");
      Node node2 = new Node(101, node0, node0, node1, node1, 2, (-2));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.visit((NodeTraversal) null, node2, node2);
      assertFalse(node2.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(100, "AoP?");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newString(375, "AoP?", 17, 141);
      Node node2 = new Node(11, node0, node1);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertFalse(node2.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(917499, 917499, 917499);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = Node.newString(3, "gXKl");
      Node node2 = new Node(20, node1, node1, node1, node0, 8, 6);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertEquals(6, Node.TEMP_PROP);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(27, (-6024), (-2661));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = Node.newString(1, "^ngnX:Klq");
      Node node2 = new Node(37, node1, node1, node1, node0, 9, 34);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertFalse(node2.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(917499, 917499, 917499);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = Node.newString(3, "gXKl");
      Node node2 = new Node(46, node1, node1, node1, node0, 8, 6);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber(2691.95297, 4095, 887);
      Node node1 = Node.newNumber((double) (-1), 189, 16);
      Node node2 = new Node(34, node1, node0);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertEquals(2, Node.BREAK_PROP);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseSyntheticCode("AoP?", "lastIndexOf");
      foldConstants0.tryFoldBlock(nodeTraversal0, node0, node0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(917505, "S");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(33, node0, node0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldBlock(nodeTraversal0, node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(10.0, 0, (-2122));
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      MemoizedScopeCreator memoizedScopeCreator0 = defaultPassConfig0.typedScopeCreator;
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, memoizedScopeCreator0);
      foldConstants0.tryFoldBlock(nodeTraversal0, node0, (Node) null);
      assertEquals(19, Node.LABEL_PROP);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("~;", "~;");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = new Node(2, node0, node0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, defaultCodingConvention0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, typedScopeCreator0);
      foldConstants0.visit(nodeTraversal0, node0, node0);
      assertEquals(7, Node.LOCAL_PROP);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DeadAssignmentsElimination deadAssignmentsElimination0 = new DeadAssignmentsElimination(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, deadAssignmentsElimination0);
      Node node0 = new Node(2001);
      Node node1 = compiler0.parseTestCode("YOInDlR) 9<a^QV4\";v");
      Node node2 = new Node(2, node1, node1, node1, node0, 29, (-3));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldHookIf(nodeTraversal0, node2, node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((byte)22);
      Node node1 = compiler0.parseTestCode("YOInDlR) 9<a^QV4\";v");
      Node node2 = new Node(101, node0, node0, node1, node1, 2, (-2));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryMinimizeIf((NodeTraversal) null, node2, node0);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DeadAssignmentsElimination deadAssignmentsElimination0 = new DeadAssignmentsElimination(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, deadAssignmentsElimination0);
      Node node0 = new Node(100);
      Node node1 = Node.newString("^[gmi]*$", (-1), 25);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node1, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DeadAssignmentsElimination deadAssignmentsElimination0 = new DeadAssignmentsElimination(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, deadAssignmentsElimination0);
      Node node0 = new Node(100);
      Node node1 = new Node(43, node0, node0, node0, node0, 49, 4);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node1, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber((double) (-1), 821, 7);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, typedScopeCreator0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(115);
      Node node1 = new Node(44);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, (CodingConvention) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, typedScopeCreator0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed 'for' statement FOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(114);
      Node node1 = Node.newNumber((double) (-3), 1, 125);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, (CodingConvention) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, typedScopeCreator0);
      foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node1, node0);
      assertFalse(node1.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(100, "AoP?");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newNumber((-2519.7363345315766), 4095, 10);
      foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node1, node0);
      assertEquals(11, Node.USES_PROP);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Node node0 = new Node(1753, 1753, 1753);
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldLeftChildAdd(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(1753, node0.getType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions gatherSideEffectSubexpressionsCallback_CopySideEffectSubexpressions0 = new GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions(compiler0, linkedList0);
      GatherSideEffectSubexpressionsCallback gatherSideEffectSubexpressionsCallback0 = new GatherSideEffectSubexpressionsCallback(compiler0, gatherSideEffectSubexpressionsCallback_CopySideEffectSubexpressions0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherSideEffectSubexpressionsCallback0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber((double) 0, 0, 0);
      foldConstants0.tryFoldLeftChildAdd(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(31, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(100, "l.;zJ,/>,+");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(26, Node.DIRECTCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      SymbolTable symbolTable0 = new SymbolTable(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(symbolTable0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, memoizedScopeCreator0);
      Node node0 = Node.newNumber((-1.0), 41, (-9));
      Node node1 = Node.newString(".cAT+rA&");
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAdd(nodeTraversal0, node1, node0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      SymbolTable symbolTable0 = new SymbolTable(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(symbolTable0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, memoizedScopeCreator0);
      Node node0 = Node.newNumber((-1.0), 41, (-9));
      Node node1 = Node.newString(".cAT+rA&");
      Node node2 = new Node(25, 4, 43);
      foldConstants0.tryFoldAdd(nodeTraversal0, node1, node2, node1, node0);
      assertFalse(node2.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions gatherSideEffectSubexpressionsCallback_CopySideEffectSubexpressions0 = new GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions(compiler0, linkedList0);
      GatherSideEffectSubexpressionsCallback gatherSideEffectSubexpressionsCallback0 = new GatherSideEffectSubexpressionsCallback(compiler0, gatherSideEffectSubexpressionsCallback_CopySideEffectSubexpressions0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherSideEffectSubexpressionsCallback0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(10.0, 272, (-2122));
      Node node1 = new Node(0, node0, 38, 0);
      Node node2 = Node.newString(">5LH'[qb-H17@i");
      foldConstants0.tryFoldAdd(nodeTraversal0, node1, node2, node1, node0);
      assertEquals(27, Node.SPECIALCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(93, "S");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = Node.newNumber((double) 4095, 49, (-722));
      foldConstants0.tryFoldArithmetic((NodeTraversal) null, node1, node1, node0, node1);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber((double) 2712, 2712, 109);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldArithmetic((NodeTraversal) null, node0, node0, node0, node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown arithmetic operator
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(100, "\"+h8Hn3:'&Zgl8");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newNumber(2691.95297, 4095, 887);
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node1, node0, (Node) null);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber(2691.95297, 4095, 887);
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, (Node) null);
      assertFalse(node0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber((-1.0), 824, 824);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldBitAndOr((NodeTraversal) null, node0, node0, node0, node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown bitwise operator
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(917505, "k`_");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(39, node0, node0);
      foldConstants0.tryFoldShift(nodeTraversal0, node1, node1, node0, node1);
      assertEquals(26, Node.DIRECTCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY, (-409), (-349));
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber((double) 0, 1, 43);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Unknown shift operator: number
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Node node0 = Node.newNumber(1769.0, 57, 57);
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber((-15.446891670446638));
      AstParallelizer astParallelizer0 = AstParallelizer.createNewFileLevelAstParallelizer(node0);
      List<Node> list0 = astParallelizer0.split();
      GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions gatherSideEffectSubexpressionsCallback_CopySideEffectSubexpressions0 = new GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions(compiler0, list0);
      GatherSideEffectSubexpressionsCallback gatherSideEffectSubexpressionsCallback0 = new GatherSideEffectSubexpressionsCallback(compiler0, gatherSideEffectSubexpressionsCallback_CopySideEffectSubexpressions0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherSideEffectSubexpressionsCallback0);
      Node node1 = Node.newNumber((double) 13, (-1), 18);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldShift(nodeTraversal0, node1, node0, node1, node1);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DeadAssignmentsElimination deadAssignmentsElimination0 = new DeadAssignmentsElimination(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, deadAssignmentsElimination0);
      Node node0 = new Node(114);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = Node.newString(38, ";zWG_|\"(R7");
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node1, node0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(114);
      Node node1 = Node.newString("+j`e)|:JVv$zz9");
      SymbolTable symbolTable0 = compiler0.acquireSymbolTable();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, symbolTable0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node1, node1, node1, node0);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Node node0 = new Node(41, 41, 41);
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(31, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
      Node node0 = new Node(26);
      Node node1 = compiler0.parseTestCode("[].joiDn()");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node2 = new Node(42, node0, node1, 3836, 3226);
      foldConstants0.tryFoldComparison(nodeTraversal0, node1, node2, node1, node1);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      DeadAssignmentsElimination deadAssignmentsElimination0 = new DeadAssignmentsElimination(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, deadAssignmentsElimination0);
      Node node0 = new Node(114);
      Node node1 = compiler0.parseTestCode("");
      Node node2 = new Node(43, node0, node0, node0, node0, (-153), 4);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node2, node1, node1);
      assertEquals(20, Node.FINALLY_PROP);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString(44, ":&8VxZ^$[ t6_");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, (Node) null);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((-16), "AoP?");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(1, Node.PROPERTY_FLAG);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(43, "jz");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(114);
      Node node1 = Node.newString("+j`e)|:JVv$zz9");
      SymbolTable symbolTable0 = compiler0.acquireSymbolTable();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, symbolTable0);
      Node node2 = new Node(45, node0, node1, node1);
      foldConstants0.tryFoldComparison(nodeTraversal0, node1, node1, node2, node0);
      assertFalse(node2.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      Node node0 = new Node((byte)22);
      Node node1 = Node.newNumber((double) 25, 13, 2096);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node1, node0);
      assertEquals(22, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(917505, "S");
      Node node1 = Node.newString(38, "zJ");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node1, node1, node0, node0);
      assertFalse(node1.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(100, "AoP?");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(33, node0, node0);
      foldConstants0.tryFoldStringIndexOf(nodeTraversal0, node0, node1, node0, node1);
      assertEquals(13, Node.CASES_PROP);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(917509, 917509, 917509);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(33, node0, node0);
      foldConstants0.tryFoldStringJoin(nodeTraversal0, node1, node1, node0, node0);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(33, node0, node0);
      Node node2 = Node.newString("");
      foldConstants0.tryFoldStringJoin(nodeTraversal0, node2, node1, node2, node2);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Node node0 = Node.newNumber((-1088.2639), 24, 1723);
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldGetElem(nodeTraversal0, node0, node0, node0, node0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      SymbolTable symbolTable0 = new SymbolTable(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, symbolTable0);
      Node node0 = Node.newNumber(3664.0);
      foldConstants0.tryFoldGetProp(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(7, Node.LOCAL_PROP);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      Node node0 = Node.newString(2136, "is_constant_name");
      Node node1 = Node.newString("length", (-495), 27);
      foldConstants0.tryFoldGetProp(nodeTraversal0, node1, node0, node1, node0);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(100);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = Node.newString("QN2o5%i:`&IlfH");
      foldConstants0.tryFoldGetProp((NodeTraversal) null, node0, node1, node1, node1);
      assertFalse(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("length", (-409), (-409));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldGetProp((NodeTraversal) null, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(917505, "S");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(130, node0, node0);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node1, node0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      Node node0 = new Node((byte)22);
      Node node1 = compiler0.parseTestCode("mx4$tghHf*$jv%!B)U");
      Node node2 = new Node(2791, node0, node0, node1, node1, 2, (-2));
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node2, node2);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("", (-409), (-409));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = Node.newString("length");
      Node node2 = new Node(21, node1, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node2, node2);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(22, "com.google.javascript.jscomp.FoldConstants");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newString("com.google.protobuf.DescriptorProtos$ServiceOptions$Builder");
      Node node2 = new Node(23, node0, node1);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
      Node node0 = new Node(26);
      Node node1 = compiler0.parseTestCode("[].joiDn()");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldWhile(nodeTraversal0, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(931, "AoP?");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldFor(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(100, "l.;zJ,/>,+");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldDo(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(114);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldDo(nodeTraversal0, node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "Array");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
      Node node0 = compiler0.parseTestCode("Array");
      Node node1 = new Node(26, node0, node0, node0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryMinimizeCondition(nodeTraversal0, node1, node1);
      assertEquals(17, Node.TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(100, "l.;zJ,/>,+");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      foldConstants0.tryMinimizeCondition(nodeTraversal0, node0, node0);
      assertEquals(5, Node.FUNCTION_PROP);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(101, "r}9AVW{UQ");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryMinimizeCondition((NodeTraversal) null, node0, node0);
      assertFalse(node0.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions gatherSideEffectSubexpressionsCallback_CopySideEffectSubexpressions0 = new GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions(compiler0, linkedList0);
      GatherSideEffectSubexpressionsCallback gatherSideEffectSubexpressionsCallback0 = new GatherSideEffectSubexpressionsCallback(compiler0, gatherSideEffectSubexpressionsCallback_CopySideEffectSubexpressions0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherSideEffectSubexpressionsCallback0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber((double) 0, 0, 0);
      foldConstants0.tryMinimizeCondition(nodeTraversal0, node0, node0);
      assertEquals(7, Node.LOCAL_PROP);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString(".|?P&?");
      // Undeclared exception!
      try { 
        foldConstants0.tryMinimizeCondition(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = Node.newString("");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node2 = new Node(30, node0, node1, node1, node1, 27, 42);
      foldConstants0.tryMinimizeIf((NodeTraversal) null, node2, node0);
      assertFalse(node2.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((byte)22);
      Node node1 = compiler0.parseTestCode("YOInDlR) 9<a^QV4\";v");
      Node node2 = new Node(101, node0, node0, node1, node1, 2, (-2));
      node1.addChildrenToFront(node2);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryMinimizeIf((NodeTraversal) null, node2, node0);
      assertFalse(node0.isSyntheticBlock());
  }
}
