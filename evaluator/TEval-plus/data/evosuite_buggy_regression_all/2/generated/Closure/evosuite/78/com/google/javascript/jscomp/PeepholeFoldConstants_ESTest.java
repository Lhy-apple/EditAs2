/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:32:28 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(33, 33, 33);
      Node node1 = new Node(29, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newString("t");
      Node node1 = new Node(26, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = new Node(28);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(40, 40, 40);
      Node node1 = new Node(32, node0, node0, 2, 6);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString(37, "com.google.common.collect.ImmutableEntry");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(4, Node.DESCENDANTS_FLAG);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node(100);
      Node node1 = new Node(122, node0, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-2973));
      Node node1 = new Node(21);
      Node node2 = new Node(12, node1, node0, 21, 47);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(21, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString((-21), "~+ jnI");
      Node node1 = new Node(28);
      Node node2 = new Node(9, node0, node1, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node(61, 61, 329);
      Node node1 = new Node((-2362));
      Node node2 = new Node(10, node1, node0, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(60, "GE");
      Node node1 = Node.newString(53, "GE");
      Node node2 = new Node(11, node1, node0, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(11, node3.getType());
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("f");
      Node node1 = new Node(2, 36, 21);
      Node node2 = new Node(13, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(88, "undefined");
      Node node1 = Node.newString(38, "undefined");
      Node node2 = new Node(14, node0, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(6, Node.TEMP_PROP);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newString("INH) ERIT_DOC");
      Node node1 = Node.newString("INH) ERIT_DOC");
      Node node2 = new Node(15, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, Node.DESCENDANTS_FLAG);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newString(31, "f", 31, 31);
      Node node1 = Node.newString("com.google.javascript.jscomp.VariableShadowDeclarationCheck$ShadowDeclarationCheckingCallback");
      Node node2 = new Node(16, node1, node1, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newString(61, "C");
      Node node1 = Node.newString("C");
      Node node2 = new Node(17, node1, node1, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(3921, 3921, 3921);
      Node node1 = Node.newString(20, "Rc_lK=eFobg11 Z1p_");
      Node node2 = new Node(18, node0, node1, node0, node1, 47, 12);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(91, 91, (-892));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(23);
      Node node2 = new Node(19, node0, node1, node0, node1, 1, 43);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(19, node3.getType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(73);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(19, 40, 2);
      Node node2 = new Node(20, node0, node1, node1, node1, 14, 4);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString(15, "f", 15, 15);
      Node node1 = Node.newString("f");
      Node node2 = new Node(21, node1, node1, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newString(105, "~+ jnI");
      Node node1 = Node.newString(31, "~+ jnI");
      Node node2 = new Node(22, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(56, 56, 56);
      Node node1 = Node.newString(13, "join");
      Node node2 = new Node(23, node1, node0, 2, 2293);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(23, node3.getType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString((-1253), "object");
      Node node1 = new Node((-6715), 25, 4);
      Node node2 = new Node(24, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node(91, 91, (-892));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(23);
      Node node2 = new Node(25, node0, node1, 91, 34);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString("d");
      Node node1 = Node.newString(2, "d");
      Node node2 = new Node(31, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, Node.LABEL_ID_PROP);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString(37, "f", 37, 37);
      Node node1 = new Node(30, 19, 11);
      Node node2 = new Node(33, node0, node1, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newString("f");
      Node node1 = new Node(7);
      Node node2 = new Node(34, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(35, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(100);
      Node node1 = new Node(31);
      Node node2 = new Node(35, node1, node0, 18, 1240);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString("f");
      Node node1 = Node.newString("f");
      Node node2 = new Node(36, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newString(15, "f");
      Node node1 = Node.newString("f");
      Node node2 = new Node(38, node0, node0, node1, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(31, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newString("f");
      Node node1 = new Node(2, 36, 21);
      Node node2 = new Node(39, node1, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.SPECIALCALL_EVAL);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(43, 43, 43);
      Node node1 = new Node(83, 72, 31);
      Node node2 = new Node(40, node1, node0, node1, node0, 495, 39);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(40, Node.BRACELESS_TYPE);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(61, 61, 320);
      Node node1 = new Node(2);
      Node node2 = new Node(41, node1, node0, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(49, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newString("t");
      Node node1 = new Node(93, 26, 1);
      Node node2 = new Node(42, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newString(80, "f", 80, 80);
      Node node1 = new Node(30, 19, 11);
      Node node2 = new Node(43, node0, node1, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node(91, 91, (-892));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(23);
      Node node2 = new Node(44, node1, node0, node0, node0, 59, 37);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString("C", (-64), (-64));
      Node node1 = Node.newString("C");
      Node node2 = new Node(45, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(61, 6, 6);
      Node node1 = Node.newString(14, "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList");
      Node node2 = new Node(46, node1, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString("Unepected arithme-c operator");
      Node node1 = Node.newString(35, "Unepected arithme-c operator");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(47, node0, node1, 2, 1505);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(40, Node.BRACELESS_TYPE);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newString(37, "HwPV9S{|fVI~");
      Node node1 = new Node(39);
      Node node2 = new Node(48, node1, node1, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(12, Node.REGEXP_PROP);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newString((-1253), "object");
      Node node1 = new Node(49);
      Node node2 = new Node(49, node1, node1, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(49, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString(105, "");
      Node node1 = Node.newString(96, "");
      Node node2 = new Node((-28), node1, 25, 66);
      Node node3 = new Node(50, node0, node0, node2);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node4 = exploitAssigns0.optimizeSubtree(node3);
      Node node5 = peepholeFoldConstants0.optimizeSubtree(node4);
      assertEquals(4, Node.ENUM_PROP);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newString(61, "C");
      Node node1 = Node.newString(35, "C");
      Node node2 = new Node(51, node0, node1, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(26, Node.DIRECTCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newString((-64), "C");
      Node node1 = Node.newString("C");
      Node node2 = new Node(53, node0, node1, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, node3.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newString("&5^k|");
      Node node1 = new Node(24, 41, 30);
      Node node2 = new Node(54, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = Node.newString(9, "*E4MFF[iZ");
      Node node2 = new Node(55, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(55, node3.getType());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString("%");
      Node node1 = new Node(56, 26, 1);
      Node node2 = new Node(56, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(20, Node.FINALLY_PROP);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString(31, "bject", 31, 31);
      Node node1 = new Node(30, 19, 11);
      Node node2 = new Node(57, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(7, Node.LOCAL_PROP);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(100);
      Node node1 = new Node(32);
      Node node2 = new Node(58, node1, node0, 2, 39);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(100);
      Node node1 = new Node(31);
      Node node2 = new Node(59, node1, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("<e*00yH't'yex#L");
      Node node1 = Node.newString(37, "<e*00yH't'yex#L");
      Node node2 = new Node(61, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(20, Node.FINALLY_PROP);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString(105, "~+ jnI");
      Node node1 = new Node(42);
      Node node2 = new Node(62, node0, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-12), (-12), (-12));
      Node node1 = Node.newString(4, "com.google.common.collect.UnmodifiableListIterator");
      Node node2 = new Node(63, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newString("f");
      Node node1 = new Node(2, 36, 21);
      Node node2 = new Node(64, node1, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(19, Node.LABEL_PROP);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newString("t");
      Node node1 = Node.newString("undefined");
      Node node2 = new Node(65, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(25, Node.ISNUMBER_PROP);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(66, 26, 1);
      Node node2 = new Node(66, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = Node.newString(45, "");
      Node node2 = new Node(67, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString("f");
      Node node1 = new Node(2, 36, 21);
      Node node2 = new Node(68, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString("t");
      Node node1 = new Node(69, 26, 1);
      Node node2 = new Node(69, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString((-1275), "subst}ring");
      Node node1 = Node.newString(2, "subst}ring");
      Node node2 = new Node(70, node0, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(9, Node.FIXUPS_PROP);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString("t");
      Node node1 = new Node(71, 26, 1);
      Node node2 = new Node(71, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString(61, "C");
      Node node1 = Node.newString("Sg-SfsqX5");
      Node node2 = new Node(72, node0, node1, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(34, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(74, 26, 1);
      Node node2 = new Node(74, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString("&5^k|");
      Node node1 = new Node(24, 41, 30);
      Node node2 = new Node(75, node0, node1, 1, 305);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(76, 26, 1);
      Node node2 = new Node(76, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(15, Node.CASEARRAY_PROP);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString((-1289), "subst}ring");
      Node node1 = Node.newString(2, "subst}ring");
      Node node2 = new Node(77, node0, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, Node.LABEL_ID_PROP);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(13);
      Node node1 = Node.newString("");
      Node node2 = new Node(78, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString((-64), "");
      Node node1 = new Node(2);
      Node node2 = new Node(79, node0, node1, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString("h\"");
      Node node1 = new Node(81, 26, 1);
      Node node2 = new Node(81, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString((-64), "");
      Node node1 = Node.newString((-478), "");
      Node node2 = new Node(82, node0, node0, node1, node1, 59, 68);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node(131, 131, 131);
      Node node1 = Node.newString(14, "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList");
      Node node2 = new Node(83, node0, node1, 23, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(36, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-12), 72, 72);
      Node node1 = new Node(37, 0, 23);
      Node node2 = new Node(84, node0, node1, node1, node1, 40, 37);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(61, 61, 61);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString(1, "(M]\"9Gg]Ao ", 32, 6);
      Node node2 = new Node(85, node0, node1, 4, 2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(45, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newString("-f");
      Node node1 = new Node(2, 36, 21);
      Node node2 = new Node(86, node1, node0, 0, 31);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString(141, "~+ jnI");
      Node node1 = new Node(29, 28, 20);
      Node node2 = new Node(87, node1, node1, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotSame(node1, node3);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newString((-64), "");
      Node node1 = new Node(2);
      Node node2 = new Node(88, node0, node1, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node(1825, 1825, 1825);
      Node node1 = new Node((-3));
      Node node2 = new Node(89, node0, node1, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, node3.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString("t");
      Node node1 = new Node(90, 26, 1);
      Node node2 = new Node(90, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(22, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("<e*00yH't'yex#L");
      Node node1 = Node.newString(37, "<e*00yH't'yex#L");
      Node node2 = new Node(92, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-12), (-12), (-12));
      Node node1 = new Node(2, 46, 22);
      Node node2 = new Node(93, node0, node0, node0, node1, (-12), 23);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(48, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node(61, 61, 329);
      Node node1 = Node.newString(14, "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList");
      Node node2 = new Node(95, node0, node1, 23, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(20, Node.FINALLY_PROP);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newString("&5^k|");
      Node node1 = Node.newString((-1035), "/'mw$_1QcD9K");
      Node node2 = new Node(96, node0, node1, 13, 25);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(24, Node.LASTUSE_PROP);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newString("&5^k|");
      Node node1 = new Node(24, 2, 30);
      Node node2 = new Node(98, node1, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(31, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node(131, 131, 131);
      Node node1 = Node.newString(14, "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList");
      Node node2 = new Node(99, node0, node1, 23, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(29, Node.JSDOC_INFO_PROP);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString("&5^k|");
      Node node1 = new Node(24, 2, 30);
      Node node2 = new Node(100, node0, node1, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString(1680, "");
      Node node1 = Node.newString(12, "f");
      Node node2 = new Node(101, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString("f");
      Node node1 = new Node(2, 36, 21);
      Node node2 = new Node(1, node1, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(52, "com.google.javascript.jscomp.mozilla.rhino.Parser");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(21, Node.LOCALCOUNT_PROP);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node(60);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(4, Node.DESCENDANTS_FLAG);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(73, "fdK*4p%~^.");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(80);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(91, 91, (-892));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(38);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(94, node0, node0, node0, node0, 93, 43);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = new Node(22, 22, 22);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(21, node0, node0, node0, node0, 35, 22);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertEquals(1, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(22, 22, 22);
      Node node1 = Node.newString(94, "AqyOvr+]Gi");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(21, node0, node0, node0, node1, 35, 22);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(35, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(39, "undefined");
      Node node1 = new Node(24, node0, 43, 28);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node(85, (-20), 340);
      Node node1 = new Node(97, node0, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(100);
      Node node1 = new Node(11, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString("&5^k|");
      Node node1 = new Node(27, node0, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(43, 43, 43);
      Node node1 = new Node(18, node0, node0, node0, node0, 4, 14);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newString(32, "Rc_lK=eFobg11 Z1p_");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(0, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-1412), (-1412), (-1412));
      Node node1 = new Node(32, node0, node0, 2, 6);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(1, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(43);
      Node node1 = new Node(32, node0, node0, 2, 6);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString("unexpected.");
      Node node1 = new Node(0, 0, 8);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(21, node1, node0, 4696, 4696);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4095, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(88, "");
      Node node1 = Node.newString(38, "");
      Node node2 = new Node(14, node0, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(30, 30, 30);
      Node node1 = new Node(29, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node(61, 61, 61);
      Node node1 = Node.newString(30, "d");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(35, node0, node1, node0, node1, 15, 1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newString("d");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(37, node0, node0, node0, node0, 43, 0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(37, node2.getType());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString(35, "d");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(37, node0, node0, node0, node0, 43, 0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }
}
