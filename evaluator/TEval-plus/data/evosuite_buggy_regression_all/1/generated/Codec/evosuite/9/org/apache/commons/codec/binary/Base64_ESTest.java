/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:23:40 GMT 2023
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base64 base64_0 = new Base64();
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("a y.O|qo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("79*t'!=LvjA)'.E~/");
      Base64 base64_0 = new Base64();
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("79s=", string0);
      
      base64_0.encode(byteArray0, 64, 64);
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-37)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(259L);
      BigInteger bigInteger0 = new BigInteger(3440, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("QVFBQUFBSUFBQUFEQUFBQUJBQUFBQVVBQUFBR0FBQUFCd0FBQUFnQUFBQUpBQUFBQ2dBQUFBc0FBQUFNQUFBQURRQUFBQTRBQUFBUEFBQUFFQUFBQUJFQUFBQVNBQUFBRXdBQUFCUUFBQUFWQUFBQUZnQUFBQmNBQUFBWUFBQUFHUUFBQUJvQUFBQWJBQUFBSEFBQUFCMEFBQUFlQUFBQUh3QUFBQ0FBQUFBaEFBQUFJZ0FBQUNNQUFBQWtBQUFBSlFBQUFDWUFBQUFuQUFBQUtBQUFBQ2tBQUFBcUFBQUFLd0FBQUN3QUFBQXRBQUFBTGdBQUFDOEFBQUF3QUFBQU1RQUFBRElBQUFBekFBQUFOQUFBQURVQUFBQTJBQUFBTndBQUFEZ0FBQUE1QUFBQU9nQUFBRHNBQUFBOEFBQUFQUUFBQUQ0QUFBQS9BQUFBUUFBQUFFRUFBQUJDQUFBQVF3QUFBRVFBQUFCRkFBQUFSZ0FBQUVjQUFBQklBQUFBU1FBQUFFb0FBQUJMQUFBQVRBQUFBRTBBQUFCT0FBQUFUd0FBQUZBQUFBQlJBQUFBVWdBQUFGTUFBQUJVQUFBQVZRQUFBRllBQUFCWEFBQUFXQUFBQUZrQUFBQmFBQUFBV3dBQUFGd0FBQUJkQUFBQVhnQUFBRjhBQUFCZ0FBQUFZUUFBQUdJQUFBQmpBQUFBWkFBQUFHVUFBQUJtQUFBQVp3QUFBR2dBQUFCcEFBQUFhZ0FBQUdzQQ==", string0);
      assertEquals(568, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(259L);
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(3440, mockRandom0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)27392, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(568, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)27392, bigInteger0.shortValue());
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(568, byteArray0.length);
      assertEquals(758, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)27392, bigInteger0.shortValue());
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray0);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)81, (byte)111, (byte)61}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(259L);
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(3440, mockRandom0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)27392, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(568, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)27392, bigInteger0.shortValue());
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(568, byteArray0.length);
      assertEquals(780, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)27392, bigInteger0.shortValue());
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64 base64_0 = new Base64((-2088), (byte[]) null, true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.encode((byte[]) null, (-2088), (-1));
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = base64_0.hasData();
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("^Cvy4Z$z3vW4gl=");
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-4), (byte) (-72), (byte)103, (byte)61, (byte) (-17), (byte)91, (byte) (-120), (byte)37}, byteArray0);
      assertNotNull(byteArray0);
      
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(5, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [
         // \uFFFD\uFFFDg=\uFFFD[\uFFFD%]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = new Base64((-3223), (byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      int int0 = base64_0.avail();
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray0);
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64(17, byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      int int0 = base64_0.readResults(byteArray0, 17, 17);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray0);
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64(17, byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      Object object0 = base64_0.decode((Object) "orgYapache.commons.codec.binary.Base64");
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(object0);
      assertNotSame(byteArray0, object0);
      
      int int0 = base64_0.readResults(byteArray0, 17, 17);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)object0));
      assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray0);
      assertNotNull(byteArray0);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray0);
      assertNotNull(string0);
      assertEquals("DQo", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("UTF-8");
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)81, (byte)49, (byte)126}, byteArray0);
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.encode(byteArray0, (-5178), (-5178));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)81, (byte)49, (byte)126}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((byte)4, byteArray0, true);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(39, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("UTF-16BE");
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)81, (byte)49, (byte)126, (byte) (-41), (byte) (-96), (byte)68}, byteArray0);
      assertNotNull(byteArray0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)81, (byte)49, (byte)126, (byte) (-41), (byte) (-96), (byte)68}, byteArray0);
      assertEquals((byte)80, bigInteger0.byteValue());
      assertEquals((short)17232, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertEquals(37, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertEquals(37, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("UTF-8");
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)81, (byte)49, (byte)126}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)81, (byte)49, (byte)126}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64((-3223), (byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.binary.Base64");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(object0);
      
      Object object1 = base64_0.decode(object0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(object1);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Base64 base64_0 = new Base64(76);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64(6);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertEquals(37, byteArray0.length);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 40);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (54) than the specified maxium size of 40
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("^Cvy4Z$z3vW4gl=");
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-4), (byte) (-72), (byte)103, (byte)61, (byte) (-17), (byte)91, (byte) (-120), (byte)37}, byteArray0);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)10, (byte) (-4), (byte) (-72), (byte)103, (byte)61, (byte) (-17), (byte)91, (byte) (-120), (byte)37}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-4), (byte) (-72), (byte)103, (byte)61, (byte) (-17), (byte)91, (byte) (-120), (byte)37}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("I:O-8859-1");
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-17), (byte) (-68), (byte) (-13), (byte) (-97), (byte)126}, byteArray0);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)32, (byte) (-17), (byte) (-68), (byte) (-13), (byte) (-97), (byte)126}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-68), (byte) (-13), (byte) (-97), (byte)126}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray0);
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64(17, byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      Object object0 = base64_0.decode((Object) "orgYapache.commons.codec.binary.Base64");
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(object0);
      assertNotSame(byteArray0, object0);
      
      Object object1 = base64_0.encode(object0);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(object1.equals((Object)object0));
      assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(object1);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, object0);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      try { 
        base64_0.encode((Object) "=W\",}}H].A.45Y1tR");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64((byte) (-38), (byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      String string0 = base64_0.encodeToString((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
