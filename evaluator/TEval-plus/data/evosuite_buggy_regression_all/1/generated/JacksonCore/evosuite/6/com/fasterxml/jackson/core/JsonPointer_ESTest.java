/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:30:18 GMT 2023
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonPointer_ESTest extends JsonPointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.hashCode();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf("");
      String string0 = jsonPointer0.getMatchingProperty();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = jsonPointer0.tail();
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = new JsonPointer("5579471469", "5579471469", jsonPointer0);
      assertFalse(jsonPointer1.matches());
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertTrue(jsonPointer1.mayMatchProperty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.toString();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      int int0 = jsonPointer0.getMatchingIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf((String) null);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("/oTK");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("/oTK", jsonPointer0.toString());
      assertEquals("oTK", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer.valueOf("sDp~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"sDp~\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("\" can not be represented as BigDecimal");
      boolean boolean0 = jsonPointer0.matches();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("\" can not be represented as BigDecimal", jsonPointer0.toString());
      assertFalse(boolean0);
      assertEquals(" can not be represented as BigDecimal", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.matches();
      assertTrue(boolean0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      boolean boolean0 = jsonPointer0.mayMatchProperty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = new JsonPointer("7969", "7969", jsonPointer0);
      boolean boolean0 = jsonPointer1.mayMatchElement();
      assertFalse(jsonPointer0.mayMatchElement());
      assertTrue(boolean0);
      assertFalse(jsonPointer1.matches());
      assertTrue(jsonPointer1.mayMatchProperty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty("}_{RG_qX(0UJ");
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("com.fasterxml.jackson.core.io.NumberInput", 3);
      assertTrue(jsonPointer0.mayMatchProperty());
      
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty("com.fasterxml.jackson.core.io.NumberInput");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertNull(jsonPointer1);
      assertEquals("o~.fasterxml.jackson.core.io.NumberInput", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("com.fasterxml.jackson.core.io.NumberInput", 3);
      JsonPointer jsonPointer1 = new JsonPointer("com.fasterxml.jackson.core.io.NumberInput", "com.fasterxml.jackson.core.io.NumberInput", jsonPointer0);
      JsonPointer jsonPointer2 = jsonPointer1.matchProperty("com.fasterxml.jackson.core.io.NumberInput");
      assertEquals((-1), jsonPointer2.getMatchingIndex());
      assertNotNull(jsonPointer2);
      assertEquals("com.fasterxml.jackson.core.io.NumberInput", jsonPointer0.toString());
      assertEquals("o~.fasterxml.jackson.core.io.NumberInput", jsonPointer2.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.matchElement((-2317));
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("969");
      JsonPointer jsonPointer1 = jsonPointer0.matchElement(69);
      assertEquals("69", jsonPointer0.getMatchingProperty());
      assertEquals("969", jsonPointer0.toString());
      assertNotNull(jsonPointer1);
      assertTrue(jsonPointer1.matches());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = jsonPointer0.matchElement((-1));
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.equals((Object) null);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      boolean boolean0 = jsonPointer0.equals(jsonPointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = new JsonPointer();
      boolean boolean0 = jsonPointer0.equals(jsonPointer1);
      assertTrue(boolean0);
      assertEquals((-1), jsonPointer1.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      Object object0 = new Object();
      boolean boolean0 = jsonPointer0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("3");
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals("3", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("Invalid i&put: JSON Pointer expression must ~tart with '/': \"");
      assertEquals("nvalid i&put: JSON Pointer expression must ~tart with '", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("Invalid i&put: JSON Pointer expression must ~tart with '/': \"", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("Invalid input: JSON Pointer expression must start with '/': \"");
      assertFalse(jsonPointer0.matches());
      assertEquals("nvalid input: JSON Pointer expression must start with '", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("Invalid input: JSON Pointer expression must start with '/': \"", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("_Z5wSfO{xe$0&y~");
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("Z5wSfO{xe$0&y~", jsonPointer0.getMatchingProperty());
      assertEquals("_Z5wSfO{xe$0&y~", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("m~89|0lcK-zKj4)4>.");
      assertEquals("~89|0lcK-zKj4)4>.", jsonPointer0.getMatchingProperty());
      assertEquals("m~89|0lcK-zKj4)4>.", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("DN~a0Ml~");
      assertFalse(jsonPointer0.matches());
      assertEquals("N~a0Ml~", jsonPointer0.getMatchingProperty());
      assertEquals("DN~a0Ml~", jsonPointer0.toString());
      assertFalse(jsonPointer0.mayMatchElement());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("M[}U[=pw\"04$?~EQ]Ul", 9);
      assertEquals("[}U[=pw~4$?~EQ]Ul", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.mayMatchElement());
      assertEquals("M[}U[=pw\"04$?~EQ]Ul", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("bu+1FgCl&jPiFv", 3);
      assertEquals("u/FgCl&jPiFv", jsonPointer0.getMatchingProperty());
      assertEquals("bu+1FgCl&jPiFv", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
  }
}
