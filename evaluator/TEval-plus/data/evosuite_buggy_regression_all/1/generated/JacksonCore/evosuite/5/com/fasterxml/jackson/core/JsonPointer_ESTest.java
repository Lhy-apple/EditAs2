/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:30:10 GMT 2023
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonPointer_ESTest extends JsonPointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      jsonPointer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.getMatchingProperty();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("C3_`nOx7X.k");
      JsonPointer jsonPointer1 = jsonPointer0.tail();
      assertEquals("3_`nOx7X.k", jsonPointer0.getMatchingProperty());
      assertEquals("C3_`nOx7X.k", jsonPointer0.toString());
      assertTrue(jsonPointer1.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(jsonPointer0.mayMatchProperty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      String string0 = jsonPointer0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf("/IZ<-G})~Z=ysfNKOX");
      assertEquals("IZ<-G})~Z=ysfNKOX", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      int int0 = jsonPointer0.getMatchingIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf((String) null);
      assertEquals("", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      try { 
        JsonPointer.compile("j,hdAzQvV<>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"j,hdAzQvV<>\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("@'#~4{rJJ");
      boolean boolean0 = jsonPointer0.matches();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("'#~4{rJJ", jsonPointer0.getMatchingProperty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.matches();
      assertTrue(boolean0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.mayMatchProperty();
      assertTrue(boolean0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("Q9");
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertEquals("9", jsonPointer0.getMatchingProperty());
      assertEquals("Q9", jsonPointer0.toString());
      assertTrue(boolean0);
      assertTrue(jsonPointer0.mayMatchProperty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty("");
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = new JsonPointer(".225073^585>720y2e-308", ".225073^585>720y2e-308", jsonPointer0);
      assertTrue(jsonPointer1.mayMatchProperty());
      
      JsonPointer jsonPointer2 = jsonPointer1.matchProperty(".225073^585>720y2e-308");
      assertNotNull(jsonPointer2);
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertTrue(jsonPointer2.matches());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("d0^kqvVt*iFhl");
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty("d0^kqvVt*iFhl");
      assertEquals("0^kqvVt*iFhl", jsonPointer0.getMatchingProperty());
      assertEquals("d0^kqvVt*iFhl", jsonPointer0.toString());
      assertNull(jsonPointer1);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.matchElement(1);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer("", "9", (JsonPointer) null);
      JsonPointer jsonPointer1 = jsonPointer0.matchElement(9);
      assertEquals("9", jsonPointer0.getMatchingProperty());
      assertEquals(9, jsonPointer0.getMatchingIndex());
      assertEquals("", jsonPointer0.toString());
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.matchElement((-1));
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("@'#~4{rJJ");
      jsonPointer0.equals("@'#~4{rJJ");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
      assertEquals("@'#~4{rJJ", jsonPointer0.toString());
      assertEquals("'#~4{rJJ", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      boolean boolean0 = jsonPointer0.equals(jsonPointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.equals((Object) null);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      JsonPointer jsonPointer1 = new JsonPointer("", "", jsonPointer0);
      boolean boolean0 = jsonPointer0.equals(jsonPointer1);
      assertFalse(jsonPointer1.matches());
      assertTrue(boolean0);
      assertEquals((-1), jsonPointer1.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseTail("E9?7]9=1^0O/;Pc,kyY");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9?7]9=1^0O\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("Z6*~");
      assertFalse(jsonPointer0.matches());
      assertEquals("6*~", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("S~:~[-3n!o-x*5N_(}");
      assertEquals("S~:~[-3n!o-x*5N_(}", jsonPointer0.toString());
      assertEquals("~:~[-3n!o-x*5N_(}", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("8sTH~", 2);
      assertFalse(jsonPointer0.matches());
      assertEquals("~TH~", jsonPointer0.getMatchingProperty());
      assertEquals("8sTH~", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("E7]0O/,yYT", 3);
      assertEquals("7~O", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("~$)`uC1n_T:lZAKSE[", 6);
      assertEquals("~$)`uC1n_T:lZAKSE[", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("$)`u/n_T:lZAKSE[", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
  }
}
