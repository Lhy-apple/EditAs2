/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:08:25 GMT 2023
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.sampling.DummyStepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      EventState eventState0 = new EventState(eventHandler0, 1559.68505080431, Double.POSITIVE_INFINITY, 0);
      eventState0.getEventHandler();
      assertFalse(eventState0.stop());
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, eventState0.getConvergence(), 0.01);
      assertEquals(1559.68505080431, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 1711.6037517478, 618.933, 219);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(219, int0);
      assertEquals(618.933, eventState0.getConvergence(), 0.01);
      assertEquals(1711.6037517478, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-3130.486), (-3130.486), (-1));
      double double0 = eventState0.getEventTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-3130.486), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals((-1), eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 1298.2583436762325, 1298.2583436762325, 2739);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(2739, eventState0.getMaxIterationCount());
      assertEquals(1298.2583436762325, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, 0);
      double double0 = eventState0.getConvergence();
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1563.10959754584), (-1.0), 1.0E-6, (-1563.10959754584), 2.2250738585072014E-308).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 0.0, (-957.4362166600856), Integer.MAX_VALUE);
      double[] doubleArray0 = new double[1];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      boolean boolean0 = eventState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(Integer.MAX_VALUE, eventState0.getMaxIterationCount());
      assertTrue(boolean0);
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(957.4362166600856, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1563.10959754584), (-1.0), 1.0E-6, (-1563.10959754584), 2.2250738585072014E-308).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, Integer.MAX_VALUE);
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted((-217.00741), doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.evaluateStep(dummyStepInterpolator0);
      assertEquals((-217.00741), dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      
      boolean boolean0 = eventState0.reset((-1.0), doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1563.10959754584), (-1.0), 1.0E-6, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 0.0, (-957.4362166600856), Integer.MAX_VALUE);
      double[] doubleArray0 = new double[1];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      // Undeclared exception!
      eventState0.evaluateStep(dummyStepInterpolator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(665).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((-1563.10959754584), (-1.0), 1.0E-6, (-1563.10959754584), 2.2250738585072014E-308).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, Integer.MAX_VALUE);
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted((-217.00741), doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.reinitializeBegin(2362.35, doubleArray0);
      dummyStepInterpolator0.storeTime(1042.6360866045911);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.stepAccepted((-613.66175635), doubleArray0);
      boolean boolean0 = eventState0.evaluateStep(dummyStepInterpolator0);
      assertEquals((-613.6617555787262), dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(665).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((-1563.10959754584), (-1.0), 1.0E-6, (-1563.10959754584), 2.2250738585072014E-308).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, Integer.MAX_VALUE);
      double[] doubleArray0 = new double[26];
      eventState0.stepAccepted((-217.00741), doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.reinitializeBegin(579.691243027094, doubleArray0);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.stepAccepted(Double.NEGATIVE_INFINITY, doubleArray0);
      boolean boolean0 = eventState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(Double.NEGATIVE_INFINITY, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1563.10959754584), (-1.0), 1.0E-6, (-1563.10959754584), 2.2250738585072014E-308).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, (-1563.10959754584), (-957.4362166600856), Integer.MAX_VALUE);
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted(2.2250738585072014E-308, doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      eventState0.reinitializeBegin((-1.0), doubleArray0);
      dummyStepInterpolator0.storeTime(Integer.MAX_VALUE);
      eventState0.evaluateStep(dummyStepInterpolator0);
      boolean boolean0 = eventState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(2.1474826895637834E9, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1563.10959754584), (-1.0), 1.0E-6).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 2.2250738585072014E-308, (-957.4362166600856), Integer.MAX_VALUE);
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted((-2706.0774), doubleArray0);
      eventState0.reinitializeBegin((-1.0), doubleArray0);
      eventState0.stepAccepted((-1.0), doubleArray0);
      assertEquals(Integer.MAX_VALUE, eventState0.getMaxIterationCount());
      assertEquals(957.4362166600856, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(2.2250738585072014E-308, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, Integer.MAX_VALUE);
      boolean boolean0 = eventState0.stop();
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(Integer.MAX_VALUE, eventState0.getMaxIterationCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((-1563.10959754584), (-1.0), 1.0E-6, (-1563.10959754584), 2.2250738585072014E-308).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 0.0, (-957.4362166600856), Integer.MAX_VALUE);
      double[] doubleArray0 = new double[1];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      eventState0.evaluateStep(dummyStepInterpolator0);
      assertFalse(eventState0.stop());
      
      eventState0.stepAccepted((-2706.0774), doubleArray0);
      boolean boolean0 = eventState0.stop();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, Integer.MAX_VALUE);
      double[] doubleArray0 = new double[1];
      boolean boolean0 = eventState0.reset(0.0, doubleArray0);
      assertEquals(Integer.MAX_VALUE, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((-1563.10959754584), (-1.0), 1.0E-6, (-1563.10959754584), 2.2250738585072014E-308).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 0.0, (-957.4362166600856), Integer.MAX_VALUE);
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted((-2706.0774), doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.stepAccepted(0.0, doubleArray0);
      assertEquals((-2706.0774), eventState0.getEventTime(), 0.01);
      
      boolean boolean0 = eventState0.reset(2327.883964867, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1563.10959754584), (-1.0), 1.0E-6, (-1563.10959754584), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 0.0, (-1.0), (byte) (-120));
      double[] doubleArray0 = new double[2];
      eventState0.stepAccepted(0.0, doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.reinitializeBegin(0.0, doubleArray0);
      // Undeclared exception!
      try { 
        eventState0.evaluateStep(dummyStepInterpolator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs.  Endpoints: [\uFFFD, 0], Values: [-1,563.11, -1,563.11]
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
