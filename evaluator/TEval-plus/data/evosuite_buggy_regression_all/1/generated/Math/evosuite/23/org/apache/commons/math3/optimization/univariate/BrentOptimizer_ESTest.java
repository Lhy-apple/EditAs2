/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:03:24 GMT 2023
 */

package org.apache.commons.math3.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Asin;
import org.apache.commons.math3.analysis.function.Ulp;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.378531159569044, 0.378531159569044);
      Ulp ulp0 = new Ulp();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1023, (UnivariateFunction) ulp0, goalType0, (double) 1023, 0.378531159569044, (double) 1023);
      assertEquals(632.393356528297, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer((-402.0300720407), (-402.0300720407));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -402.03 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(2542.9329150574004, (-5.275210583909726E-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(2.0734340706476473E-9, 2.0734340706476473E-9);
      Ulp ulp0 = new Ulp();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(994, (UnivariateFunction) ulp0, goalType0, 2.0734340706476473E-9, (double) 994, 2.0734340706476473E-9);
      assertEquals(614.3257869901422, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(2.0734340706476473E-9, 2.0734340706476473E-9);
      Ulp ulp0 = new Ulp();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1019, (UnivariateFunction) ulp0, goalType0, (-109.23186), (double) 1019, 2.0734340706476473E-9);
      assertEquals((-8.171344391635525E-10), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(2.0734340706476473E-9, 2.0734340706476473E-9);
      Ulp ulp0 = new Ulp();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1023, (UnivariateFunction) ulp0, goalType0, 2.0734340706476473E-9, (double) 1023, 2.0734340706476473E-9);
      assertEquals(4.146868145594424E-9, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.378531159569044, 0.378531159569044);
      Ulp ulp0 = new Ulp();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1023, (UnivariateFunction) ulp0, goalType0, 0.378531159569044, (double) 1023, (double) 1023);
      assertEquals(4.391307829560841, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(2.073E-9, 2.073E-9);
      Asin asin0 = new Asin();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1023, (UnivariateFunction) asin0, goalType0, (-5421.55228445), 2.073E-9, (-5421.55228445));
      assertEquals((-5421.55226075711), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(2.0734E-9, 2.0734E-9);
      Ulp ulp0 = new Ulp();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1023, (UnivariateFunction) ulp0, goalType0, (double) 1023, (double) 1023, (double) 1023);
      assertEquals(1023.0, univariatePointValuePair0.getPoint(), 0.01);
      assertEquals(1.1368683772161603E-13, univariatePointValuePair0.getValue(), 0.01);
  }
}
