/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:06:06 GMT 2023
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Log10;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sigmoid sigmoid0 = new Sigmoid();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      pegasusSolver0.solve(191, (UnivariateRealFunction) sigmoid0, (double) 191, (-1986.34068469009), allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1281.6220665367139), (-1281.6220665367139));
      assertEquals((-1281.6220665367139), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 0.0, 0.0);
      Expm1 expm1_0 = new Expm1();
      double double0 = illinoisSolver0.solve(100, (UnivariateRealFunction) expm1_0, 0.0, 0.0, (double) 100);
      assertEquals(100.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      pegasusSolver0.solve(2147483564, (UnivariateRealFunction) inverse0, (-8.0E298), (double) 2147483564, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Log10 log10_0 = new Log10();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1281.6220665367139), (-1281.6220665367139), (-1281.6220665367139));
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(3444, (UnivariateRealFunction) log10_0, 0.1538461446762085, (double) 3444, 0.1538461446762085, allowedSolution0);
      assertEquals(0.1538461446762085, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Logit logit0 = new Logit(2147463227, 0.3333333333333333);
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      illinoisSolver0.setup(2147463227, univariateRealFunction0, (-945.798212), 1.0, 1.0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(0.3333329177782309, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(215, (UnivariateRealFunction) inverse0, (-8.0E298), (double) 215, allowedSolution0);
      assertEquals(215.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-7.999999999999999E298), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(232, 232, 232);
      double double0 = regulaFalsiSolver0.solve(232, (UnivariateRealFunction) inverse0, (-1.0), (double) 232, (double) 232, allowedSolution0);
      assertEquals(232.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1720.7999054994, 226, 226);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(226, (UnivariateRealFunction) inverse0, (-7.802612221731387E-4), 1720.7999054994, (-7.802612221731387E-4), allowedSolution0);
      assertEquals((-7.802612221731387E-4), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-7.802612221731387E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(215, (UnivariateRealFunction) inverse0, (-8.0E298), (double) 215, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (215) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(215, (UnivariateRealFunction) inverse0, (-8.0E298), (double) 215, allowedSolution0);
      assertEquals((-4.0E298), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-7.999999999999999E298), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(232, 232, 232);
      double double0 = regulaFalsiSolver0.solve(232, (UnivariateRealFunction) inverse0, (-1.0), (double) 232, (double) 232, allowedSolution0);
      assertEquals(232.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(231.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(216, (UnivariateRealFunction) inverse0, (-8.0E298), (double) 216, allowedSolution0);
      assertEquals((-4.0E298), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-8.0E298), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(263, 263, 263);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(263, (UnivariateRealFunction) inverse0, (-1.0), (double) 263, (-1.0), allowedSolution0);
      assertEquals((-1.0), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(262.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(229, (UnivariateRealFunction) inverse0, (-1758.43645), (double) 229, allowedSolution0);
      assertEquals(229.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(3.433610598153242E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(211, (UnivariateRealFunction) inverse0, (-1758.43645), (double) 211, allowedSolution0);
      assertEquals((-773.718225), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(6.004065778309485E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(232, (UnivariateRealFunction) inverse0, (-2.1799793026018516E-5), (double) 232, allowedSolution0);
      assertEquals(115.99998910010348, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-6.651573206751604E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(232, (UnivariateRealFunction) inverse0, (-1758.43645), (double) 232, allowedSolution0);
      assertEquals(232.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(5.88641277974037E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(192, (UnivariateRealFunction) inverse0, (-1758.3731890427412), (double) 192, allowedSolution0);
      assertEquals((-783.1865945213706), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-4.744277204262865E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(244, (UnivariateRealFunction) inverse0, (-1758.43645), (double) 244, allowedSolution0);
      assertEquals(244.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(6.648134807238978E-8, double0, 0.01);
  }
}
