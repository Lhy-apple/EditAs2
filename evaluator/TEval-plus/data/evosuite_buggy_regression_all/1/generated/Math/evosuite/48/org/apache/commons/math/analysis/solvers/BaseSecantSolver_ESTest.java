/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:05:54 GMT 2023
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asin;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      illinoisSolver0.solve(1406047547, (UnivariateRealFunction) asinh0, (-121.62170550645332), (double) 1406047547, (-121.62170550645332));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Asinh asinh0 = new Asinh();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(1406047547, (UnivariateRealFunction) asinh0, (-145.0436255901867), (double) 1406047547, allowedSolution0);
      assertEquals(1.406047547E9, pegasusSolver0.getMax(), 0.01);
      assertEquals(7.858267049500479E-12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      double double0 = illinoisSolver0.solve(1406047547, (UnivariateRealFunction) asinh0, 0.0, (double) 1406047547, 0.0);
      assertEquals(1.406047547E9, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asin asin0 = new Asin();
      double double0 = illinoisSolver0.solve(1406047547, (UnivariateRealFunction) asin0, (double) 1406047547, 0.0, (double) 1406047547);
      assertEquals(1.406047547E9, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1827.129886483848), (-1827.129886483848), (-1827.129886483848));
      Asinh asinh0 = new Asinh();
      double double0 = illinoisSolver0.solve(1406047547, (UnivariateRealFunction) asinh0, (-1827.129886483848), (double) 1406047547, (-1827.129886483848));
      assertEquals((-1827.129886483848), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.4570552814483742E-11, 1.4570552814483742E-11, (-652.5));
      Log log0 = new Log();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(4, (UnivariateRealFunction) log0, 1.4570552814483742E-11, (double) 4, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (4) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Asinh asinh0 = new Asinh();
      double double0 = illinoisSolver0.solve(1406047547, (UnivariateRealFunction) asinh0, (-1827.129886483848), (double) 1406047547, (-1827.129886483848));
      assertEquals((-1827.129886483848), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1.263735520585545E-18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Asinh asinh0 = new Asinh();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(1406047547, (UnivariateRealFunction) asinh0, (-196.16725468351615), (double) 1406047547, allowedSolution0);
      assertEquals(7.030236754163727E8, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(6.9187066837188304E-12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Asinh asinh0 = new Asinh();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(1406047547, (UnivariateRealFunction) asinh0, (-179.99462059357182), (double) 1406047547, allowedSolution0);
      assertEquals(7.030236835026897E8, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1.5143684066617168E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Asinh asinh0 = new Asinh();
      PegasusSolver pegasusSolver0 = new PegasusSolver((-196.16725468351615), (-196.16725468351615), 1406047547);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(1406047547, (UnivariateRealFunction) asinh0, (-196.16725468351615), (double) 1406047547, allowedSolution0);
      assertEquals(7.030236754163727E8, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-14.447608258570654), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Asinh asinh0 = new Asinh();
      PegasusSolver pegasusSolver0 = new PegasusSolver((-145.0436255901867), (-145.0436255901867), 1406047547);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(1406047547, (UnivariateRealFunction) asinh0, (-145.0436255901867), (double) 1406047547, allowedSolution0);
      assertEquals(7.030237009781872E8, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(2.906787303250873E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Asinh asinh0 = new Asinh();
      PegasusSolver pegasusSolver0 = new PegasusSolver((-179.55412752314132), (-179.55412752314132), 1406047547);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(1406047547, (UnivariateRealFunction) asinh0, (-179.55412752314132), (double) 1406047547, allowedSolution0);
      assertEquals(1.406047547E9, pegasusSolver0.getMax(), 0.01);
      assertEquals((-8.8090327629061), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Asinh asinh0 = new Asinh();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(1406047547, (UnivariateRealFunction) asinh0, (-179.99462059357182), (double) 1406047547, allowedSolution0);
      assertEquals(7.030236835026897E8, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(3.1377540775903015E-16, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Asinh asinh0 = new Asinh();
      PegasusSolver pegasusSolver0 = new PegasusSolver(1406047592, (-342.8));
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(1406047592, (UnivariateRealFunction) asinh0, (-342.8), (double) 1406047592, allowedSolution0);
      assertEquals(1.406047592E9, pegasusSolver0.getMax(), 0.01);
      assertEquals((-342.8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Asinh asinh0 = new Asinh();
      PegasusSolver pegasusSolver0 = new PegasusSolver(1406047592, (-342.8));
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(1406047592, (UnivariateRealFunction) asinh0, (-342.8), 1.0, allowedSolution0);
      assertEquals((-170.9), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-39.88366533796374), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Asinh asinh0 = new Asinh();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(1633951492, (UnivariateRealFunction) asinh0, (-2.6033824355191673E-8), (double) 1633951492, allowedSolution0);
      assertEquals(8.16975746E8, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(7.466506746212076E-9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      double double0 = pegasusSolver0.solve(264, (UnivariateRealFunction) asinh0, (-1.0), 0.027840789099802338, allowedSolution0);
      assertEquals(0.027840789099802338, pegasusSolver0.getMax(), 0.01);
      assertEquals((-8.942036498687736E-13), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Asinh asinh0 = new Asinh();
      PegasusSolver pegasusSolver0 = new PegasusSolver(1406047547);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(1406047547, (UnivariateRealFunction) asinh0, (-145.0436255901867), (double) 1406047547, allowedSolution0);
      assertEquals(1.406047547E9, pegasusSolver0.getMax(), 0.01);
      assertEquals(2.906787303250873E8, double0, 0.01);
  }
}
