/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:28:13 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.io.ByteArrayInputStream;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLSyntaxErrorException;
import java.util.ArrayList;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("CSVRecord [comment=");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(mockFileWriter0, appendable0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) quoteMode0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("CSVRecord [comment=");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockFileWriter0);
      assertNotNull(cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("f%rmTt");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("f%rmTt");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(3258);
      CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("CSVRecord [comment=");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CharBuffer charBuffer0 = CharBuffer.allocate(934);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\"\",\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("PxFII!4tx;@WF=");
      CSVFormat cSVFormat0 = CSVFormat.newFormat(';');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fo3maF");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('m');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fo3maF");
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fo3maF");
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("@hDJ2'hJ|=sus66");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Q[dWFf32+hxb<%CJ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("}@Sf");
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("\"}@Sf\",}@Sf", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\r\n");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\r\n");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.Assertions");
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('5');
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("w'l5G!%.d");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      cSVPrinter0.printRecords((Iterable<?>) sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("PxFII!4tx;@WF=");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('E');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.printComment("The escape character and the delimiter cannot be the same ('");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("PxFII!4tx;@WF=");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('E');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.print("org.apache.commons.csv.CSVPrinter");
      cSVPrinter0.printComment("The escape character and the delimiter cannot be the same ('");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P<swetk");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      ArrayList<ByteArrayInputStream> arrayList0 = new ArrayList<ByteArrayInputStream>(120);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)123, (byte)20);
      arrayList0.add(byteArrayInputStream0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertTrue(arrayList0.contains(byteArrayInputStream0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("format");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) sQLSyntaxErrorException0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockFileWriter mockFileWriter0 = new MockFileWriter("CSVRecord [comment=");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }
}
