/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:01:01 GMT 2023
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Entities_ESTest extends Entities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Entities entities0 = new Entities();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      Entities.fillWithHtml40Entities(entities0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      entities_TreeEntityMap0.add("Z(aOBk", (-3175));
      int int0 = entities_TreeEntityMap0.value("Z(aOBk");
      assertEquals((-3175), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.unescape("r((f&$/Xo2;Nf");
      assertEquals("r((f&$/Xo2;Nf", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      String string0 = entities0.entityName(3169);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      entities0.map = (Entities.EntityMap) entities_ArrayEntityMap0;
      Entities.fillWithHtml40Entities(entities0);
      String string0 = entities0.escape(">&)Wv,(");
      assertEquals("&gt;&amp;)Wv,(", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      entities0.map = (Entities.EntityMap) entities_ArrayEntityMap0;
      Entities.fillWithHtml40Entities(entities0);
      String string0 = entities0.unescape("&gt;&amp;)Wv,(");
      assertEquals(">&)Wv,(", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(43);
      entities_BinaryEntityMap0.size = 43;
      entities_BinaryEntityMap0.add("Illegal Load: ", 43);
      entities_BinaryEntityMap0.add("Illegal Load: ", 43);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      StringWriter stringWriter0 = new StringWriter();
      entities0.escape((Writer) stringWriter0, "\"CTPHi={o=;g)");
      assertEquals("&quot;CTPHi={o=;g)", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.unescape("8658");
      assertEquals("8658", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.unescape("}>A0&005]cU~uf");
      assertEquals("}>A0&005]cU~uf", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      String string0 = entities0.HTML32.unescape("xglSI8`;b}&;HV/u");
      assertEquals("xglSI8`;b}&;HV/u", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "}&gt;A0&amp;005]cU~uf");
      assertEquals("}>A0&005]cU~uf", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Entities entities0 = Entities.XML;
      entities0.unescape((Writer) stringWriter0, "\"CTPHi={o=;g)");
      assertEquals("\"CTPHi={o=;g)", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "}>A0&005]cU~uf");
      assertEquals("}>A0&005]cU~uf", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Entities entities0 = Entities.HTML40;
      entities0.unescape((Writer) stringWriter0, "xglSI8`;b}&;HV/u");
      assertEquals("xglSI8`;b}&;HV/u", stringWriter0.toString());
  }
}
