/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 14:01:45 GMT 2023
 */

package org.apache.commons.lang.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.AttributedCharacterIterator;
import java.text.ParseException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.TemporalQuery;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (Locale) null);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.toString();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("FastDateFormat[M/d/yy h:mm a]", string0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.getTimeZoneOverridesCalendar();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
      fastDateFormat0.getTimeZone();
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, timeZone0);
      String string0 = fastDateFormat0.format((long) 1);
      assertEquals("January 1, 1970 12:00:00 AM GMT", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      
      Long long0 = new Long(3);
      String string0 = fastDateFormat0.format((Object) long0);
      assertEquals("1/1/70 12:00 AM", string0);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2);
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("M?MM zd,yyZ h: a");
      String string0 = fastDateFormat0.format((long) 3);
      assertEquals("1?01 GMT1,70+0000 12: AM", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2718), "M?MM zd,yyZ h:a");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("M?MM zd,yyZ h:a", (TimeZone) simpleTimeZone0);
      String string0 = fastDateFormat0.format((long) (-2718));
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("12?12 GMT+00:0031,69-0000 11:PM", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 0, 0);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertEquals("December 31, 0002 12:00:00 AM GMT", string0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, timeZone0);
      assertNotNull(fastDateFormat0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      
      try { 
        fastDateFormat0.parseObject("^N");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2856), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2856
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      String string0 = fastDateFormat0.getPattern();
      assertNotNull(string0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("M/d/yy h:mm a", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("^k");
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("^k", fastDateFormat0.getPattern());
      
      String string0 = fastDateFormat0.format((-1L));
      assertNotNull(string0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("^k", fastDateFormat0.getPattern());
      assertEquals("^23", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(74, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 74
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) null);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotNull(fastDateFormat1);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertEquals(31, fastDateFormat1.getMaxLengthEstimate());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, MMMM d, yyyy", fastDateFormat1.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(30, fastDateFormat0.getMaxLengthEstimate());
      
      boolean boolean0 = fastDateFormat0.equals(locale0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(30, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(boolean0);
      
      int int0 = 1705;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
      assertNotNull(simpleTimeZone0);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(3, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale1 = Locale.JAPAN;
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("\u65E5\u672C\u8A9E", string0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      assertNotNull(zoneOffset0);
      
      TemporalQuery<Long> temporalQuery0 = (TemporalQuery<Long>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(java.time.temporal.TemporalAccessor.class));
      Long long0 = zoneOffset0.query(temporalQuery0);
      assertNull(long0);
      
      Locale locale2 = fastDateFormat0.getLocale();
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale2, locale1);
      assertSame(locale2, locale0);
      assertNotNull(locale2);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(30, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JP", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("ja_JP", locale2.toString());
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      Locale.setDefault(locale0);
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        simpleTimeZone0.setDSTSavings(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal daylight saving value: 0
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotNull(fastDateFormat1);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
      assertEquals("M/d/yy h:mm a", fastDateFormat1.getPattern());
      assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("zA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("BWr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("6_a8]\"GCkZSn(7i6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("F12^%.Z.Kv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("I-(%K-m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("8/whJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("ZLs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Negative values should not be possible");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("zO}H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("S{P2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Q[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("3y| %RBFQ)gO%&JvD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("The validated collection is empty");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("V9:Su");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("!d X_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("`<dYG1u9%^[C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("b{,KN0[3.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("cWB8j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("^mk3D!e;=5A:<}}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("f$rm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("!2=}ggkJRJ1\" Cb6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: gg
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("wE>i8w_w1MyqM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("j1R?`bL`+oBBK6? C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("l2z[fq2:>5ftm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("6_F8]\"G6kZSn(7i6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("H$o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("451p9.(&8&V$!GF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("#qu{Ab^o[:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("&r`232~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Zt@s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("u>S-A,.@>^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("HxrE@';Zy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("a h'\uC2DC' mm'\uBD84' ss'\uCD08'");
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("a h'\uC2DC' mm'\uBD84' ss'\uCD08'", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      
      MockDate mockDate0 = new MockDate((-811), (-811), 1, 1, (-811), (-811));
      assertNotNull(mockDate0);
      
      String string0 = fastDateFormat0.format((Object) mockDate0);
      assertNotNull(string0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals("Wed May 31 11:15:29 GMT 1021", mockDate0.toString());
      assertEquals("5/31/21 11:15 AM", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      assertNotNull(fastDateFormat0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, 0);
      assertNotNull(mockGregorianCalendar0);
      
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockGregorianCalendar0);
      assertNotNull(attributedCharacterIterator0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62135856000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=366,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(41, attributedCharacterIterator0.getRunLimit());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals(41, attributedCharacterIterator0.getEndIndex());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("|!WD(");
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals("|!WD(", fastDateFormat0.getPattern());
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) "|!WD(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("|!WD(");
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals("|!WD(", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotNull(fastDateFormat1);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertEquals("MMM d, yyyy h:mm:ss a z", fastDateFormat1.getPattern());
      assertEquals(33, fastDateFormat1.getMaxLengthEstimate());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals("MMM d, yyyy h:mm:ss a z", fastDateFormat1.getPattern());
      assertEquals(33, fastDateFormat1.getMaxLengthEstimate());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("MMMM d, yyyy h:mm a");
      assertNotNull(fastDateFormat0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("MMMM d, yyyy h:mm a", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("MMMM d, yyyy h:mm a");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat1 = new FastDateFormat("MMMM d, yyyy h:mm a", timeZone0, locale0);
      assertNotNull(fastDateFormat1);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("MMMM d, yyyy h:mm a", fastDateFormat1.getPattern());
      assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
      
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertEquals("MMMM d, yyyy h:mm a", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("MMMM d, yyyy h:mm a", fastDateFormat1.getPattern());
      assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("M?MM zd,yyZ h:a");
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(30, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M?MM zd,yyZ h:a", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("M?MM zd,yyZ h:a");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDateFormat fastDateFormat1 = new FastDateFormat("M?MM zd,yyZ h:a", timeZone0, (Locale) null);
      assertNotNull(fastDateFormat1);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("M?MM zd,yyZ h:a", fastDateFormat1.getPattern());
      assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
      
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertEquals(30, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M?MM zd,yyZ h:a", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("M?MM zd,yyZ h:a", fastDateFormat1.getPattern());
      assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("|!WD(");
      assertNotNull(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("|!WD(", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      
      String string0 = fastDateFormat0.format((long) (-1021));
      assertNotNull(string0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("|!WD(", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("|!5365(", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-838), (-838), (-838), 1, (-838), (-838));
      assertNotNull(mockDate0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 1);
      assertNotNull(fastDateFormat0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("MMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
      
      String string0 = fastDateFormat0.format((Date) mockDate0);
      assertNotNull(string0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals("Tue Nov 12 10:48:02 GMT 989", mockDate0.toString());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("MMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("Nov 12, 0989 10:48:02 AM GMT", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("^k");
      assertNotNull(fastDateFormat0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("^k", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      String string0 = fastDateFormat0.format(0L);
      assertNotNull(string0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("^k", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("^24", string0);
  }
}
