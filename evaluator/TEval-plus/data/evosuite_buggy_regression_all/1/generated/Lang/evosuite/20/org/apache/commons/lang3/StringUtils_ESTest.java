/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:58:18 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("GYX", "b)T'b.FJqk+=C", (-900));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Cannot store ");
      String string0 = StringUtils.replaceEach("Cannot store ", stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("Cannot store ", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (-20));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("-", "-", 1029);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 88);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" vs ");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(" vs ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0:  vs 
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "X", 34);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "8ytH3iBv}oZB!{Mjc", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("The CharScter must not be null", "The CharScter must not be null", 6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.replaceOnce("]*y<pM2Y>J", (String) null, string0);
      assertNotNull(string1);
      assertEquals("]*y<pM2Y>J", string1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.rightPad("eC>j{L", 4720);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Zp1dB(#IePf22^", "', has a length less than 2");
      assertEquals("Zp1dB(#IePf22^", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.leftPad("BuE\u0004YL9]6j-j.ZQ\"", 8);
      assertEquals("BuE\u0004YL9]6j-j.ZQ\"", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = StringUtils.strip("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("The charcter ", " ");
      String string0 = StringUtils.replaceEach(" ", stringArray0, stringArray0);
      assertEquals(" ", string0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("9Z@2/)3ikRI`/?Kz", "org.apache.commons.lang3.CharUtils", (-1));
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("&{+V+1|c:h", stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, " vs ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(10, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", '\'');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.replace("F/fc0#Zm2B<u<", "F/fc0#Zm2B<u<", "F/fc0#Zm2B<u<");
      assertEquals("F/fc0#Zm2B<u<", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", "X");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" ", " ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("BhYa(bx\"q1n:g<g}>;");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "  ", (CharSequence) "  ");
      assertEquals("  ", charSequence0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "SecuritException occured", (CharSequence) "SecuritException occured");
      assertEquals("SecuritException occured", charSequence0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("The String must not be empty");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.trimToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.trimToNull("java.text.Normalizer is not available");
      assertEquals("java.text.Normalizer is not available", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty(" ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" vs ");
      assertEquals("vs", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("v,$E~Rj} vs ");
      assertEquals("v,$E~Rj} vs", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.chop("o");
      String string1 = StringUtils.stripStart("", string0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.strip("SeurityException occurred", "SeurityException occurred");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.stripStart("'!vvhQ2*Xz%u3Wcn.I", "");
      assertEquals("'!vvhQ2*Xz%u3Wcn.I", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.stripStart("...", "he,,G;h@H");
      assertEquals("...", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = StringUtils.stripEnd("normalize", "");
      assertEquals("normalize", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = StringUtils.stripEnd("sun.text.Normalizer is not available", "cgR4.kH=kI;n");
      assertEquals("sun.text.Normalizer is not available", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = StringUtils.stripEnd("$,NtX((pM-\u0005-I", "$,NtX((pM-\u0005-I");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, ":[sMbnmJE[n3$'v., Length: 0");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = StringUtils.stripAccents("4");
      assertNotNull(string0);
      assertEquals("4", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "9Z@2/)3ikRI`/?K", (CharSequence) "9Z@2/)3ikRI`/?Kz");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "3VrBW +%5V# '");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("java.text.Normalizer", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "$e 6+Td>", 8192);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "yNe;Q#XRb&7$L", 65, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", 616, 1414);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) ")O;/jj", (CharSequence) ")O;/jj");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "pKGB5GjYq/LE(ZXgW.", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "java.text.Normalizer", 551);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "j<~|X[|=^Dv#`,8J7g", (CharSequence) "', IS NEITHER OF TYPE MAP.ENTRY NOR AN ARRAY", 4560);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>((SortedSet<? extends CharBuffer>) treeSet0);
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, '|');
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) string0, (CharSequence) null, (-3129));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("kfHXy@6U", (CharSequence) null, (-1152));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("The Character must not be null", ">nO-'.\"", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(", Length: 0, Length: 0", "", 127);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 34);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = StringUtils.repeat("j$", 1809);
      int int0 = StringUtils.ordinalIndexOf(string0, "j$", 269);
      assertEquals(536, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "", (-3852));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "2xoUngth: 0", (CharSequence) ":[sMbnmJE[n3$'v.", (-1263));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "J]Jppu%r?:,8G@Fo`;", 353);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Cannot get the toString of a null identity", (CharSequence) "Cannot get the toString of a null identity");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "U%m; ", (CharSequence) "H");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "kCJUQO;o}iP7>*r", 3968);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = StringUtils.lastIndexOf((CharSequence) charBuffer0, 945, 945);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 5, 28);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "eC>j{L", (CharSequence) "NFD");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "q#T", 2115);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "The Character must not be null", (CharSequence) "The Character must not be null", 1230);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "@", (CharSequence) null, 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " is less than 0: ", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "*CbFC.8,B66xHxii", (CharSequence) "*CbFC.8,B66xHxii");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, 1069);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = StringUtils.rightPad("t+{@fHX7<CDHDjqfX1", 3, (String) null);
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) "", 3);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "`j{", (CharSequence) "`j{", (-1812));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Exception cloning Cloneable type ", (CharSequence) "*CbFCxB6y6xkHmxii");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "j<~|X[|=^Dv#`,8J7g", 2557);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "", (int) '5');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "|osc$5,yDO8E&rd", 53);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[4];
      boolean boolean0 = StringUtils.contains((CharSequence) stringArray0[2], (CharSequence) stringArray0[2]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "b@ u.CXwfeo] 8$cGw", (CharSequence) " 8vs ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[7];
      boolean boolean0 = StringUtils.contains((CharSequence) " has no clone method", (CharSequence) stringArray0[3]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "\"", (CharSequence) "\"");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "$RL9r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("sun.text.Normalizer", "qa");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("Index: ", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("H", "H");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("C'^ NFDL@&lUd~7Z[P");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("*CbFCxB6y6xkHmxii");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = StringUtils.indexOfAny((CharSequence) "^G~L9C=>0(P", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = StringUtils.center(string0, 4, "jUF;");
      assertEquals("\\u000", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string1, (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      int int0 = StringUtils.indexOfAny((CharSequence) "^G~L9C=>0(P", charArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "}", "}");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = 'g';
      int int0 = StringUtils.indexOfAny((CharSequence) "AInvocationTarget#xcepion}occuWredrguments cannot both be null", charArray0);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "SecurityException occurred", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkD", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "a", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "...", (CharSequence) "...");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "'P", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "0A+M@,|K-0A+M@,|K-", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ps ", " ps ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " pjs ", "L9 ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "(\"$\u0002>p'Qp", (CharSequence) "sun.text.Normalizer is not available");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " Vps ", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "BuE\u0004YL9]6j-j.ZQ\"", (CharSequence) "BuE\u0004YL9]6j-j.ZQ\"");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "decompose", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "InvocationTargetException occurred");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "qa", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) " vs ", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Minimum abbrevition width with offset is 7", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "decompose", "decompose");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) ">9I5{'S@a", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[4];
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" s:6");
      int int0 = StringUtils.indexOfAny((CharSequence) "kCJUQO;o}iP7>*r", (CharSequence[]) stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) " is less than 0: ", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.indexOfAny((CharSequence) "Array element ", charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "9";
      charSequenceArray0[1] = (CharSequence) "9";
      int int0 = StringUtils.indexOfAny((CharSequence) "9", charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1175);
      int int0 = StringUtils.lastIndexOfAny(charBuffer0, (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "XdA'2#w}e&Q318yZsO3";
      int int0 = StringUtils.lastIndexOfAny(". ,_}-:=2erbmaroN%", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>((SortedSet<? extends CharBuffer>) treeSet0);
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, '|');
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny(string0, charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.substring(" Vps ", 1820);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 4079);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.substring("qa", (-1170));
      assertEquals("qa", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (-111), (-111));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.substring("The character ", (-3153), (-3153));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.substring(" ps ", 1261, 1261);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.substring("", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.left("ma4+F!?,F1", 9);
      assertNotNull(string0);
      assertEquals("ma4+F!?,F", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 74);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.left("", (-773));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.left("!*mk?", 7);
      assertEquals("!*mk?", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.right("{ e3zLw2F7{|A ", (-40));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 114);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.right(" p ", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.right(" ", 8192);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.mid("decompose", 2, 2);
      assertNotNull(string0);
      assertEquals("co", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, (-19), (-19));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.mid("", (-2), (-2));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.mid(" ", 569, 569);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.mid(":B=*O1O-F%30qrX5l~&", (-40), 299);
      assertNotNull(string0);
      assertEquals(":B=*O1O-F%30qrX5l~&", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.substringBefore("g7UhYK=#n>NpbqcW4", "g7UhYK=#n>NpbqcW4");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringBefore("org.apache.commons.lang3.StringUtils", (String) null);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.substringBefore("1", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.substringBefore("The Character must not be null", "THE CHARACTER MUST NOT BE NULL");
      assertEquals("The Character must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.substringAfter("_$", "C'^ NFDL@&lUd~7Z[P");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.substringAfter("The Character must not be null", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.substringAfter(" 8ivs ", " 8ivs ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("OfI&>B]GT|", "g^c:7UMd)g^c:7UMd)");
      assertEquals("OfI&>B]GT|", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("\"wM'Tlmu^Iu$fU<OV", (String) null);
      assertEquals("\"wM'Tlmu^Iu$fU<OV", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("4", "4");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("VQ:O", "_HYE5");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "RrIJ)UX6D-");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("C'^ NFDL@&lUd~7Z[P", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(" ", " ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("The CharScter must not be null", " ");
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = StringUtils.substringBetween("s+", (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.substringBetween("bBa=>6SW8", "!_8\"=6V=_,|", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = StringUtils.substringBetween(",|k-", "j$", "j$");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" ", " ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("gDO~_juO!_bK+Z?", "KTm_k.R%mfKCO", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("9Z@2/)3IKRI`/?KZ", "9Z@2/)3ikRI`/?Kz", "sun.text.Normalizer");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("~M}ehJM9w}zYHa|nakw", "hB3B|w$II", "hB3B|w$II");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Cannot get the toString of a null identity", " ", " ");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("~oA&XkyY5]i2!#L", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("The charcter ", "");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'u');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("SecurityException occurred", 'd');
      assertNotNull(string0);
      assertEquals("SecurityException occurre", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("SecurityException occurred", 'S');
      assertEquals("ecurityException occurred", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("X", "X");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("a", "a", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The CharScter must not be null", " is less than 0: ", 3);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("r3oQ%*CIx}+\"Hd>a&{E");
      assertEquals(16, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'n');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'B', (-1473), (-1473));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.join(objectArray0, 'j');
      assertNotNull(string0);
      assertEquals("j", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "", 6, 6);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", Length: 0, Length: 0", ", Length: 0, Length: 0");
      String string0 = StringUtils.join((Object[]) stringArray0, "k3b");
      assertEquals("k3b", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = StringUtils.join(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'B');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer((-1));
      hashSet0.add(integer0);
      Iterator<Integer> iterator0 = hashSet0.iterator();
      String string0 = StringUtils.join(iterator0, 'C');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer((-1));
      hashSet0.add(integer0);
      hashSet0.add((Integer) null);
      Iterator<Integer> iterator0 = hashSet0.iterator();
      String string0 = StringUtils.join(iterator0, 'C');
      assertEquals("-1C", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.swapCase("O[9i`tMtATov0");
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      stack0.add((Object) string0);
      String string1 = StringUtils.join((Iterable<?>) stack0, 'b');
      assertEquals("[null, o[9I`TmTatOV0]", stack0.toString());
      assertEquals("bo[9I`TmTatOV0", string1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "(\"$\u0002>p'Qp");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "java.text.Normalizer");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "(\"$\u0002>p'Qp");
      assertFalse(arrayList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      arrayList0.add("6s&!qR2thGz=");
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "(\"$\u0002>p'Qp");
      assertFalse(listIterator0.hasNext());
      assertEquals("(\"$\u0002>p'Qp6s&!qR2thGz=", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.add("&c/w9%_T9TK[481AB");
      treeSet0.add("O#4?pK`mH");
      String string0 = StringUtils.join((Iterable<?>) treeSet0, (String) null);
      assertEquals("&c/w9%_T9TK[481ABO#4?pK`mH", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      linkedList0.push("...");
      Iterator<String> iterator0 = linkedList0.iterator();
      String string0 = StringUtils.join(iterator0, "yNe;Q#XRb&7$L");
      assertEquals("...yNe;Q#XRb&7$L", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'c');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, " vs ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("9");
      assertEquals("9", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("The character ");
      assertEquals("Thecharacter", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.removeStart("s+", (String) null);
      assertNotNull(string0);
      assertEquals("s+", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.removeStart("Strings must not be null", "k3b");
      assertEquals("Strings must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.removeStart("`dC!XIodQqc*3)G", "`dC!XIodQqc*3)G");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase(":[sMbnmJE[n3$'v., Length: 0", (String) null);
      assertEquals(":[sMbnmJE[n3$'v., Length: 0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase(" in an a_ray of ", " in an a_ray of ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.removeEnd("sun.text.Normalizer", (String) null);
      assertNotNull(string0);
      assertEquals("sun.text.Normalizer", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.removeEnd("6(giO~ DB^", "6(GIo~ db^");
      assertEquals("6(giO~ DB^", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("]", (String) null);
      assertNotNull(string0);
      assertEquals("]", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("{o", "{o");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.remove("=", "");
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.remove("The Character must not be null", "The Character must not be null");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'k');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.remove("SecurityExceptiod occuYred", 'S');
      assertEquals("ecurityExceptiod occuYred", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.remove("java.text.Normalizer$Form", 'M');
      assertEquals("java.text.Normalizer$Form", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.replaceOnce((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.replaceOnce(">nO-'.\"", "The Character must not be null", (String) null);
      assertEquals(">nO-'.\"", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.replace("*CbFC.8,B66xHxii", "*CbFC.8,B66xHxii", "0!AM(X8;@hA", 0);
      assertEquals("*CbFC.8,B66xHxii", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("qa", "2tb1;I=asbowFY", "qa");
      assertEquals("qa", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.replaceOnce(" ps ", " ps ", " ps ");
      assertEquals(" ps ", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.replace("sun.Text.Normalizer  s not available", "sun.Text.Normalizer  s not available", "sun.Text.Normalizer  s not available", 4939);
      assertEquals("sun.Text.Normalizer  s not available", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly(" ps ", (String[]) null, (String[]) null);
      assertEquals(" ps ", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("2D*#c$", stringArray0, stringArray0);
      assertEquals("2D*#c$", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.replaceEach("yl*=T", stringArray0, (String[]) null);
      assertEquals("yl*=T", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[0];
      String string0 = StringUtils.replaceEach(" pxGjs ", stringArray0, stringArray1);
      assertEquals(" pxGjs ", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[6];
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("SecurityException occurred", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEach("qa", stringArray0, stringArray0);
      assertEquals("qa", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      // Undeclared exception!
      StringUtils.replaceEachRepeatedly("Arguments cannot both be null", stringArray0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "qa";
      String string0 = StringUtils.replaceEach("qa", stringArray0, stringArray0);
      assertEquals("qa", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = " ";
      String[] stringArray1 = new String[4];
      stringArray1[0] = ";p1YAd[Uv";
      String string0 = StringUtils.replaceEach(" ", stringArray0, stringArray1);
      assertEquals(";p1YAd[Uv", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.replaceChars("I+`N(OT3]Y&ec", 'y', 'F');
      assertNotNull(string0);
      assertEquals("I+`N(OT3]Y&ec", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 't', 't');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.replaceChars("$'H*yB=2$$d:t4", (String) null, "g6>e%6!*}NF:[");
      assertNotNull(string0);
      assertEquals("$'H*yB=2$$d:t4", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.replaceChars(">vDkf#~qB;*Ka;g:", "  ", "k0#vid,vKKQ\"$.j");
      assertEquals(">vDkf#~qB;*Ka;g:", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" v) ", " v) ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.replaceChars("T CarScter mwst not be null", "T CarScter mwst not be null", "T CarScter mwst not be null");
      assertEquals("T CarScter mwst not be null", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, (String) null, 1, 127);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.overlay("\"CXV", (String) null, 624, 624);
      assertNotNull(string0);
      assertEquals("\"CXV", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.overlay("v`5aJQ", "v`5aJQ", (-944), (-944));
      assertEquals("v`5aJQv`5aJQ", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.overlay(" ", " ", 31, (-2646));
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.chomp(".T!Ozt");
      assertEquals(".T!Ozt", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.chomp("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.chomp("sun.text.Normalizer", " pjs 8");
      assertEquals("sun.text.Normalizer", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.chomp("-Ba=>6SW8", (String) null);
      assertNotNull(string0);
      assertEquals("-Ba=>6SW8", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.chomp("/sPV\"_WT)", "/sPV\"_WT)");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.chop("bBa=>6SW8");
      assertEquals("bBa=>6SW", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "(;U&t$w%+}/l\"L", (-350));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.repeat("...", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.repeat("0lmdJ<|StUc", 1);
      assertEquals("0lmdJ<|StUc", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.repeat("", 4031);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.repeat("4", 8203);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.repeat("o", 12);
      assertNotNull(string0);
      assertEquals("oooooooooooo", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.repeat(":[sMbnmJE[n3$'v., Length: 0", (String) null, 50);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.repeat("4", "4", 8192);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 3323, '}');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.rightPad("6s&!qR2thGz=", (-742), '8');
      assertEquals("6s&!qR2thGz=", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.rightPad("fu:jBk|yvq", 9975, '*');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 16, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.center(string0, 4, string0);
      assertNotNull(string1);
      assertEquals("\\u0\\", string1);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.center("}ONM*Uw", 15, (String) null);
      assertEquals("    }ONM*Uw    ", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.rightPad("T CarScter mwst not be null", (int) '*', "TimeToLive of! ");
      assertEquals("T CarScter mwst not be nullTimeToLive of! ", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 40);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8196, '?');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-50), "x(i}3N-m");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.leftPad("', is neither of type Map.Entry nor an Array", 568, (String) null);
      assertEqualsis neither of type Map.Entry nor an Array", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.leftPad("...", 97, "...");
      assertEquals(".................................................................................................", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.leftPad("java.text.Normalizer", 97, "The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM");
      assertEquals("The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVMjava.text.Normalizer", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.leftPad("@", 4, "G?a,app^@B-%jSvZ");
      assertEquals("G?a@", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      int int0 = StringUtils.length("9");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.center("", 6, 'P');
      assertEquals("PPPPPP", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.center("T CarScter must not be null", (-688));
      assertEquals("T CarScter must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = StringUtils.repeat("j$", 1809);
      String string1 = StringUtils.center(string0, 1809);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-1631), "U`17HN.:v}HnD@][`");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = StringUtils.upperCase("0A+M@,|k-0A+M@,|k-");
      assertNotNull(string0);
      assertEquals("0A+M@,|K-0A+M@,|K-", string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      String string0 = StringUtils.upperCase("Strings must not be null", locale0);
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = StringUtils.lowerCase("{9Trz+|TX(}JLT>2]x");
      assertEquals("{9trz+|tx(}jlt>2]x", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      String string0 = StringUtils.lowerCase("Cannot get the toString of a null identity", locale0);
      assertEquals("cannot get the tostring of a null identity", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = StringUtils.capitalize("Q=m_c}b(Vx?ugUVS&k~T$<Pk6$&_|");
      assertEquals("Q=m_c}b(Vx?ugUVS&k~T$<Pk6$&_|", string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Minimum abbreviation width with offset is 7");
      assertEquals("minimum abbreviation width with offset is 7", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      int int0 = StringUtils.countMatches("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      int int0 = StringUtils.countMatches("UgUVS&k~T$<", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      int int0 = StringUtils.countMatches("9", "9");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("~vUpJY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace(" has no clone method");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("kCJUQO;o}iP7>*rk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("qa");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("org.apache.commons.lang3.CharUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("decompose");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("0 Zss~djPm;Le=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("mPvCPPQY8}Q{og* 2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("The character ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.isNumeric(charSequenceArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("Arguments cannot both be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("0/0LW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" vs ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("Threshold must not be negative");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("qa");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("org.apache.commons.lang3.CharUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("TimeToLive of ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("P");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.defaultString("Sdl*hX\bP&K+DF,n/@,");
      assertEquals("Sdl*hX\bP&K+DF,n/@,", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.defaultString("P", "IllegalAccessException occurred");
      assertEquals("P", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) " ", (CharSequence) " ");
      assertEquals(" ", charSequence0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.reverse(".)[");
      assertNotNull(string0);
      assertEquals("[).", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'N');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.abbreviate("sun.text.Normalizer pjs 8", 2478, 10);
      assertEquals("...r pjs 8", string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(", Length: 0, Length: 0", 3, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.abbreviate("\"f.q;&AqN.", (-1), 1207);
      assertEquals("\"f.q;&AqN.", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = StringUtils.abbreviate("'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P", 52, 52);
      assertEquals("...'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P'P...", string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" as fBc3onfRmeod", 79, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle((String) null, (String) null, 2413);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Arguments cannot both be null", "&srr\"va@FNKPNZr7", Integer.MAX_VALUE);
      assertEquals("Arguments cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle(";2h,|f", "", 4);
      assertEquals(";2h,|f", string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle(" has no clone method", "9", 7);
      assertEquals(" ha9hod", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("o1JPiJ7v$", "o1JPiJ7v$", 3);
      assertEquals("o1JPiJ7v$", string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = StringUtils.difference("i{\"ns}WrhiSj", (String) null);
      assertEquals("i{\"ns}WrhiSj", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = StringUtils.difference("Minimum abbreviation width with offset is 7", " as nB c3oneRmeod");
      assertEquals(" as nB c3oneRmeod", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "The Character must not be null");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) ", Length: 0", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "Q=m_c}b(Vx?ugUVS&k~T$<Pk6$&_|", (CharSequence) "Q=m_c}b(Vx?ugUVS&k~T$<Pk6$&_|");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "NFD", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("9Z@2/)3ikRI`/?Kz", "9Z@2/)3ikRI`/?Kz");
      StringUtils.getCommonPrefix(stringArray0);
      assertEquals(17, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "B0Ex58y%lYWi=}";
      stringArray0[1] = "5Ixp;Pf~0-Eg8xZX~yt";
      stringArray0[2] = "B0Ex58y%lYWi=}";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "vJ[";
      stringArray0[1] = "vJ[cccccccccccccccccccccccccccccccccccccccccc";
      stringArray0[2] = "vJ[";
      stringArray0[3] = "vJ[cccccccccccccccccccccccccccccccccccccccccc";
      stringArray0[4] = "vJ[cccccccccccccccccccccccccccccccccccccccccc";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("vJ[", string0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "SecurityExce8tion ozcurred", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "0 Zss~djPm;Le=", (CharSequence) "p{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+");
      assertEquals(60, int0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 4096, '#');
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) "");
      assertEquals(4096, int0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Threshold must not be negative", (CharSequence) ")^[Jh3cP~wP|/i[dL");
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) ", '", 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "t both be null", (CharSequence) "", 40);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) ":? g%Zb", (CharSequence) null, 827);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String string0 = StringUtils.chomp("9");
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) "yQ+DfN.3H", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "3VrBW +%5V# '", 64);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "<ryi`G", 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "/tEKwR", (CharSequence) "", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "W-mEpt_didXW0 Zss~djPm", 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "9Z@2/)3ikRI`/?K", (CharSequence) "9Z@2/)3ikRI`/?Kz", 1824);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Array element ", (CharSequence) "O[9i`tMtATov0", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("uU9-N?2t.=\"", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, "7M79,,r]PwLrC<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("psMq*1WC^WJpl", "<(e(aX{#YylH%rW");
      assertEquals("psMq*1WC^WJpl", string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("j<~|X[|=^Dv#`,8J7g", ":M/C&=X2p!nd,5}gvMP");
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = StringUtils.center("java.text.Normalizer", (-1055), "java.text.Normalizer");
      assertEquals("java.text.Normalizer", string0);
      
      boolean boolean0 = StringUtils.startsWithAny(string0, (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("IllegalArgumentException occurred", (String) null, 2777);
      boolean boolean0 = StringUtils.startsWithAny("IllegalArgumentException occurred", stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" vs ");
      assertNotNull(string0);
      assertEquals("vs", string0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "NFD", "'P");
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String string0 = StringUtils.chomp("9");
      assertEquals("9", string0);
      
      String[] stringArray0 = new String[4];
      boolean boolean0 = StringUtils.endsWithAny(string0, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("@~", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = StringUtils.chomp("9");
      String[] stringArray0 = new String[4];
      stringArray0[1] = "9";
      boolean boolean0 = StringUtils.endsWithAny(string0, stringArray0);
      assertTrue(boolean0);
  }
}
