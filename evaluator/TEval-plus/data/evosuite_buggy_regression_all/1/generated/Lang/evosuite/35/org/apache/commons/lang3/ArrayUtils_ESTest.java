/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:58:40 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, '4');
      assertArrayEquals(new char[] {'4'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (-1), (long) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, 3516.5307);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, 2270);
      assertArrayEquals(new int[] {2270}, intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short) (-1295);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1295));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-477.34602846651), (double) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long[] longArray0 = new long[4];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String string0 = ArrayUtils.toString((Object) arrayUtils0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, 'h');
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, 4756, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4756, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (short)2317);
      assertArrayEquals(new short[] {(short)2317}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (int) (byte)2, (byte)64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEquals(arrayUtils0, arrayUtils0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Z3K";
      String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) "Z3K");
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, 0, (short)7);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertArrayEquals(new short[] {(short)7}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, (-1759L));
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2208);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'h';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'h');
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), 1050.579);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)33);
      assertArrayEquals(new byte[] {(byte)33}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.add((float[]) null, (int) (short)0, (-2184.5513F));
      assertArrayEquals(new float[] {(-2184.5513F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 899.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 899.0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {899.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String[] stringArray1 = ArrayUtils.toArray(stringArray0);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_INT_ARRAY, 2074);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2074, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), 'Y');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null, "Jd");
      assertEquals("Jd", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(object0, (Integer) null);
      AbstractMap.SimpleEntry<Object, Integer>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Integer>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 12);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(abstractMap_SimpleEntryArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 1, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-2204));
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, (float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (-1));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String[] stringArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_STRING_ARRAY, 0, (-1));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) null, (-3187), 5);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String[] stringArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_STRING_ARRAY, (-1), 48);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) longArray0, (-1411), 2);
      assertNotSame(longArray0, objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 4, 4);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 5, 1419);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short) (-1), 1);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-1085), (int) (short)0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, 720);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, (int) (short)7, (-1));
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (int) (short) (-732), (-2145561026));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-18681));
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (-1759), 2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short) (-18681)}, shortArray2);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) (byte)100, (-1826));
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_CHAR_ARRAY, 512, (-1));
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[6];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2141669625), 2440);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, (-1), (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 614, (-2363));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, (int) (byte)0, 3209);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, 3209);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2118), 1268);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-786), (-786));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, 2145011041, (-3037));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), (-1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 3134);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)2208, 4);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 2082, 1268);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1983), 2276);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, arrayUtils0.EMPTY_OBJECT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_STRING_ARRAY, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) shortArray0, (Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = new Object[5];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long[] longArray0 = new long[6];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long[] longArray0 = new long[3];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[9];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[6];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = new char[7];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[8];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = new double[4];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      float[] floatArray0 = new float[5];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(14, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((AbstractMap.SimpleEntry<Object, Object>[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.isSameType(arrayUtils0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(object0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ArrayUtils.reverse((Object[]) stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long[] longArray0 = new long[4];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      short[] shortArray0 = new short[6];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[9];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      float[] floatArray0 = new float[2];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, (Object) "java.lang.String");
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Object object0 = new Object();
      int int0 = ArrayUtils.indexOf((Object[]) stringArray0, object0, (-577));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String[] stringArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_STRING_ARRAY, (Object) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-2618));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 4);
      Integer integer0 = new Integer((-1));
      int int0 = ArrayUtils.lastIndexOf((Object[]) comparableArray0, (Object) integer0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 1071);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Object[] objectArray0 = new Object[14];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[3], 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (Object) null, 1148);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[4] = objectArray0[0];
      objectArray0[5] = objectArray0[4];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 4242);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, (Object) arrayUtils0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 1071);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, 1824L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (-189L), (-1206));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      long[] longArray0 = new long[6];
      int int0 = ArrayUtils.indexOf(longArray0, (-1L));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[4] = 1316L;
      int int0 = ArrayUtils.indexOf(longArray0, 1316L);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (short)1, (int) (short)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_LONG_ARRAY, 0L, (-1358));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      long[] longArray0 = new long[2];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1878L), 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (short)16);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = ArrayUtils.indexOf(intArray0, 13, (-1502));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-2185);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-2185));
      assertArrayEquals(new int[] {(-2185), 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-2054114792), (-2054114792));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1064;
      boolean boolean0 = ArrayUtils.contains(intArray0, 1064);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-3742));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      short[] shortArray0 = new short[3];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)22, (int) (short) (-4));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3742), 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-3742);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3742), 3);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, '}');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, '@', (-3823));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'L', (int) (short) (-3717));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'h', (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      char[] charArray0 = new char[9];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '1', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '%');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-50), (-3043));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)90, (-651));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)89, (-2146189202));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)3);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-72);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-72));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-4199.0), (-4199));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, 387.3765, (double) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-2677), (-1), (-1482.0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-4199.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-4199.0), (-1.0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 887.119747;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1718.0, 887.119747);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-2146963394), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), (int) (short) (-3742));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 424.6183929573, 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 185.12197227, 1, 1927.30478);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (-1156), (-516.2706679436325));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3417.7971);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-424.0), 5206, (-424.0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      float[] floatArray0 = new float[9];
      int int0 = ArrayUtils.indexOf(floatArray0, 35.0F, (-1059));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1.0F, 55);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      float[] floatArray0 = new float[2];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 513.51F, (int) (short)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) 4;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-1629));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 2418);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[14];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-5419));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      Character character0 = Character.valueOf(',');
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = characterArray0[0];
      characterArray0[3] = character0;
      characterArray0[4] = characterArray0[2];
      characterArray0[5] = character0;
      characterArray0[6] = characterArray0[3];
      characterArray0[7] = characterArray0[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {',', ',', ',', ',', ',', ',', ',', ','}, charArray0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'S');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'S'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, ')');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'z');
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('}');
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'e');
      assertArrayEquals(new char[] {'}'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-179L));
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = longArray0[2];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {(-179L), (-179L), (-179L), (-179L), (-179L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (byte)62);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, 1L);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Long long0 = new Long(9);
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 9);
      assertArrayEquals(new long[] {9L, 9L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2421L));
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertEquals(2, longArray2.length);
      assertArrayEquals(new long[] {(-2421L), (-2421L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 2869;
      integerArray0[1] = (Integer) 2;
      integerArray0[2] = (Integer) 2858;
      integerArray0[3] = (Integer) 2;
      integerArray0[4] = (Integer) 2858;
      integerArray0[5] = (Integer) 2869;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {2869, 2, 2858, 2, 2858, 2869}, intArray0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1));
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 523);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Integer integer0 = new Integer(719);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[2] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[2]);
      assertArrayEquals(new int[] {719, 719, 719, 719}, intArray0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer[] integerArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((short)247);
      shortArray0[0] = short0;
      shortArray0[1] = shortArray0[0];
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = shortArray0[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)247, (short)247, (short)247, (short)247, (short)247}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)0);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (short)7);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Short short0 = new Short((short)2208);
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short)2208, (short) (-1)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Short[] shortArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      short[] shortArray0 = new short[2];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Byte byte0 = new Byte((byte)28);
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)28}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)1);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)124);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)108);
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-17));
      assertArrayEquals(new byte[] {(byte)108, (byte) (-17), (byte) (-17)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Byte[] byteArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Double double0 = new Double(2380.8516114334197);
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {2380.8516114334197, 2380.8516114334197, 2380.8516114334197}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (-3417.7971));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Long long0 = new Long(9);
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) long0);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Double[] doubleArray1 = new Double[12];
      doubleArray1[0] = (Double) doubleArray0[1];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (-3417.7971));
      assertEquals(12, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(0.0);
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (float) (-1));
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 1.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float((-1482.0));
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 346.1F);
      assertArrayEquals(new float[] {346.1F, (-1482.0F), 346.1F, 346.1F, 346.1F, 346.1F, 346.1F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Float[] floatArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      float[] floatArray0 = new float[2];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = (Boolean) false;
      booleanArray0[1] = (Boolean) false;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, false);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf((String) null);
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((Integer[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      boolean boolean0 = ArrayUtils.isEmpty(integerArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2421L));
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertArrayEquals(new long[] {(-2421L), (-2421L)}, longArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      short[] shortArray0 = new short[5];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      char[] charArray0 = new char[9];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-651), (-741), (double) (-651));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, (Object[]) null);
      assertNotNull(objectArray1);
      assertEquals(5, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = new Object[14];
      objectArray0[1] = (Object) arrayUtils0;
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Object in an array of java.lang.Long
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (boolean[]) null);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, (char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, (byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, (short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, (int[]) null);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertNotNull(longArray1);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, (Object) null);
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (Object) arrayUtils0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.lang3.ArrayUtils
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.add((String[]) null, "java.lang.Object");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      int[] intArray0 = new int[2];
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(intArray0[0], (Integer) 0);
      // Undeclared exception!
      try { 
        ArrayUtils.add((AbstractMap.SimpleImmutableEntry<Object, Integer>[]) null, 2858, abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2858, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (-1), object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Object, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.add((AbstractMap.SimpleImmutableEntry<Object, Integer>[]) null, 3134, (AbstractMap.SimpleImmutableEntry<Object, Integer>) null);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)2, (byte)64);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)64, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(7, longArray1.length);
  }
}
