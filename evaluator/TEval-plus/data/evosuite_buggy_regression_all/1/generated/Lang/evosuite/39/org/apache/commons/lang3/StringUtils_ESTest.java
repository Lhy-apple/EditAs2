/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:59:59 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.ServiceLoader;
import java.util.Vector;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("3oaE$We", "3oaE$We", 1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith("#X1O;!,", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = StringUtils.abbreviate("W", 11);
      assertEquals("W", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(", Length: ", ", Length: ");
      String[] stringArray1 = new String[1];
      // Undeclared exception!
      try { 
        StringUtils.replaceEach(", Length: ", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 11 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K6|K", "6|K", 31);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Y1yw`1qoHb-hs^7{ Kb", "6_^k4cqQqS{\"Q");
      assertEquals("Y1yw`1qoHb-hs^7{ Kb", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.center("yBU/2", 7);
      assertEquals(" yBU/2 ", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("RawfJGgH\"");
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string0);
      assertEquals("ADAEAFAGAIALAMANAOAQARASATAUAWAXAZBABBBDBEBFBGBHBIBJBLBMBNBOBQBRBSBTBVBWBYBZCACCCDCFCGCHCICKCLCMCNCOCRCUCVCWCXCYCZDEDJDKDMDODZECEEEGEHERESETFIFJFKFMFOFRGAGBGDGEGFGGGHGIGLGMGNGPGQGRGSGTGUGWGYHKHMHNHRHTHUIDIEILIMINIOIQIRISITJEJMJOJPKEKGKHKIKMKNKPKRKWKYKZLALBLCLILKLRLSLTLULVLYMAMCMDMEMFMGMHMKMLMMMNMOMPMQMRMSMTMUMVMWMXMYMZNANCNENFNGNINLNONPNRNUNZOMPAPEPFPGPHPKPLPMPNPRPSPTPWPYQARERORSRURWSASBSCSDSESGSHSISJSKSLSMSNSOSRSSSTSVSXSYSZTCTDTFTGTHTJTKTLTMTNTOTRTTTVTWTZUAUGUMUSUYUZVAVCVEVGVIVNVUWFWSYEYTZAZMZW", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("1.7", "java.vendor", "1.7");
      assertEquals("1.7", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.rightPad("1.7", 8200);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("wRL*3S&mz", 'z');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.leftPad("}IYyb9$<", (-1));
      assertNotNull(string0);
      assertEquals("}IYyb9$<", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.strip("1.7");
      assertEquals("1.7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("X", "X");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" vs ", " vs ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("wRL*S&mz", 'z');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("5Jw>lZ|Gz_i@~%\"", "l");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("i0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8192, "");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("2x*3S.Zf");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.trimToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.trimToNull("P3!6rD.");
      assertNotNull(string0);
      assertEquals("P3!6rD.", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("L^sXW6");
      assertEquals("L^sXW6", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.stripToNull("P3!6rD.");
      assertEquals("P3!6rD.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty(" ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.strip(" ", "*de");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.stripStart("`2 pQ_2OYI@8e9'6O", "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.strip("InvocationTargetException occurred during 1.6 backcompat code", "InvocationTargetException occurred during 1.6 backcompat code");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" :3LeJ:w", "");
      assertEquals(" :3LeJ:w", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.stripEnd("pK", "pK");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "file.separator");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = StringUtils.equals(", Length: 0", "(kXXu'Ka 8387");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, "oGxDTCwNg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "LINUX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.indexOf("D", 'o');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 'M');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.indexOf("AAvrJ]JpS[2K", 'z', 8);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.chop(stringArray0[2]);
      int int0 = StringUtils.indexOf(string0, '1', (-1450));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.indexOf("(8pTW>lr_1wM8q", "\")q");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.indexOf("java.io.tmpdir", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, (String) null, 91);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = StringUtils.repeat("C", 8192);
      int int0 = StringUtils.ordinalIndexOf(string0, "C", 8192);
      assertEquals(8191, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("aH&", (String) null, 8192);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("SI", "[v@{ e&uz={0j", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("{&n%", "", 256);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("7e:@6WX?,", "7e:@6WX?,", 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "Wu", 29);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.indexOf("IC[c`36N-y", (String) null, 125);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.indexOf("java.lang.Object@183d0e80", "d#ey}8!en(+", 517);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.indexOf("IllegalArgumentException occurred during 1.6 backcompat code", "", 19);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.indexOf("", "", 59);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("5mQ>iJ.b&$-'tf;d", 'X');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, 'J');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("d#ey}8!en(+", 'G', 14);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, 'l', (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", "C)");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("scupsep}", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, (String) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf(".C|D4>P3H", (String) null, 893);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("y2 )5", "y2 )5", 3603);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("a;BOP6X&a{&,fX}{p", '@');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", 'J');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("/3j$l0'\u0002EV 'DU", '0');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("&=&x,b$3$djava.lang.object@39dc164d&=&x,b$3$dnfdjava.lang5h@b>:@~#e2i9,b", "&=&x,b$3$djava.lang.object@39dc164d&=&x,b$3$dnfdjava.lang5h@b>:@~#e2i9,b");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = StringUtils.contains(" is less than 0: ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", "InvocationTargetException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, "~EPtRPtM&a.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("(kXXu'Ka 8387", ", Length: 0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("i0", "i0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((String) null, (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("LINUX", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("Minimum abbreviation width with offset is 7", "...");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = StringUtils.indexOfAny(">5qP/INv/XClU\"6]23", "Rl");
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("", "...");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("NFD", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((String) null, "...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("4h)*^Lp*IC", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsAny("", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("ECHbmA~OmTlq(", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("~ENIPT/R4PITM&A.", "~ENIPT/R4PITM&A.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsAny("h|=h=bW3x&", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("J", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = StringUtils.indexOfAnyBut((String) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("VvbFFKR", "VvbFFKR");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("java.vendor", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((String) null, "java.specification.name");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("##", "##");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("U+DU+DU+DU+DU+D", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("##", "g,nRGfbL");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsOnly((String) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly("java.runtime.name", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsOnly("java.specification.name", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("~EPtRPtM&a.", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsNone((String) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("xjJ\u0006KA=G t8", "7e:@6WX?,");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((String) null, "=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("IllegalArgumentException occurred during 1.6 backcompat code", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((String) null, (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("the character must not be null", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[3] = ";";
      int int0 = StringUtils.indexOfAny("JIGEFvSXXgHjj", stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "JIGEFvSXXgHjj";
      stringArray0[4] = "";
      int int0 = StringUtils.indexOfAny("JIGEFvSXXgHjj", stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny((String) null, (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("java.specification.name", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(q";
      int int0 = StringUtils.lastIndexOfAny("AIX", stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("scupsYp}", "scupsYp}");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("scupsYp}", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width with offset is 7", 3281);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width with offset is 7", (-182));
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is 7", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.substring("44h}\"Y>DJ~", (-608), (-608));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 247, 3751);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.substring(")n", 2, 2);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.substring("}i!2,AuQ.yj}g_.k", 1416, 1416);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.left("MM1p", 22);
      assertNotNull(string0);
      assertEquals("MM1p", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 1725);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.left("qFL^&ZO#F>7", (-2863));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.left("7S-+`&a{1UN5g_9W5", 7);
      assertNotNull(string0);
      assertEquals("7S-+`&a", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.right("Ul", (-13));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.repeat("C", 8231);
      assertNotNull(string0);
      
      String string1 = StringUtils.right(string0, 8231);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.right("9.$ZAHB#>G=|", 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.mid("{", (-2590), (-2590));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 124, (-1598));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.mid(">ND", 7, 7);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.mid("OY'yf#,FE[", 0, 59);
      assertNotNull(string0);
      assertEquals("OY'yf#,FE[", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.mid("U+D", (-2216), 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.substringBefore("1sNUNm", (String) null);
      assertNotNull(string0);
      assertEquals("1sNUNm", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.substringBefore("MFZ|HyB#X ", "7S-+`&a{1UN5g_9W5");
      assertNotNull(string0);
      assertEquals("MFZ|HyB#X ", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substringBefore("~ENiPt/R4PItM&a.", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.substringBefore("{&n%", "{&n%");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.substringAfter("NoSuchFieldException occurred during 1.6 backcompat code", "");
      assertNotNull(string0);
      assertEquals("NoSuchFieldException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.substringAfter("c^basf/&[#just not be null.", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.substringAfter(" is 9esU than 0: ", "~A90I-#|VC");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("?", "Qee%4-ActcvmzP");
      assertNotNull(string0);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.substringBeforeLast("3)nu&MM", stringArray0[0]);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("3)nu&MM", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("KpctqF;'V3r\"lI:n5", "KpctqF;'V3r\"lI:n5");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("/Cg@?GK^", "@");
      assertNotNull(string0);
      assertEquals("?GK^", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("d6Y!kFY?:zb6*a", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("os.version", "`935}:rk>F#f@EH]Q");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("?\",fm4q{P]{*\u0003`7z.5", "?\",fm4q{P]{*\u0003`7z.5");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.substringBetween("1.5", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.substringBetween("T}Y'4X3jSP4l8<)`", " /6Dh", "o&8s2GJxY1b8w~[K");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("l|!", "m?~8Zzz;G3*(VxDJ", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("The Array must not be null", "l", "l");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", ";", ";");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("java.specification.name", "%v6RNH-Y^l$A", "scupep}");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("3)nu&MM", "3)nu&MM", "bOu;");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("l", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Minimum abbreviation width is 4", "", 2);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'X');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'W');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The stripAcceWts(String) method is not supported until Java 1.6", 'c');
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("InvocationTargetException occurred during 1.6 backcompat code", 'r');
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" >");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("?", "?");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("*Aorg.apache.commons.lang3.ClassUtilsorg.apache.commons.lang3.ClassUtils", "l");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("l", "l");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("scupsYp}", "Y4*IP>i");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("java.runtime.version", "java.class.path", 7);
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("[v@{ e&uzq={0j");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("jpzQn!#3gp:O@y&i#");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("1.7", 'p');
      assertNotNull(string0);
      assertEquals("1.7", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'S');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'o', 744, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String string0 = StringUtils.join(objectArray0, '/', Integer.MAX_VALUE, 0);
      assertEquals(3, objectArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.join(objectArray0, '}');
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      assertEquals("}", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, (String) null, 3979, 47);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("OY'yf#,FE[", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "2x*3S.Zf", 90, 32);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>(2847, 2847);
      assertEquals(2847, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      String string0 = StringUtils.join((Iterable<?>) vector0, 'l');
      assertEquals(2847, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'r');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      assertEquals(2, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(2, enumSet0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, '.');
      assertEquals(2, enumSet0.size());
      assertNotNull(string0);
      assertEquals("DISPLAY.FORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, 'q');
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "");
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add(" ");
      assertTrue(linkedHashSet0.contains(" "));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, " ");
      assertTrue(linkedHashSet0.contains(" "));
      assertFalse(linkedHashSet0.contains(string0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      assertEquals(2, enumSet0.size());
      assertNotNull(enumSet0);
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, (String) null);
      assertEquals(2, enumSet0.size());
      assertNotNull(string0);
      assertEquals("DISPLAYFORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      assertEquals(2, enumSet0.size());
      assertNotNull(enumSet0);
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, "J");
      assertEquals(2, enumSet0.size());
      assertNotNull(string0);
      assertEquals("DISPLAYJFORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'j');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "EAV");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.removeStart("J", "[");
      assertNotNull(string0);
      assertEquals("J", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.removeStart(" is less than 0: ", (String) null);
      assertNotNull(string0);
      assertEquals(" is less than 0: ", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.removeStart("7^", "7^");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase(":avzu@c6aogox", "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("\")q", "]#%U,^5W/O");
      assertNotNull(string0);
      assertEquals("\")q", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.repeat("*A", "org.apache.commons.lang3.ClassUtils", 1);
      assertNotNull(string0);
      assertEquals("*A", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.repeat("Cnov", "", 755);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Cnod", "_F");
      assertNotNull(string0);
      assertEquals("Cnod", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Mby:.={lyV!Wm}oA{T", "");
      assertNotNull(string0);
      assertEquals("Mby:.={lyV!Wm}oA{T", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("org.apache.commons.lang3.ClassUtils", "org.apache.commons.lang3.ClassUtils");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.remove("org.apache.commons.lang3.jlassUt!ls", "org.apache.commons.lang3.jlassUt!ls");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.remove("J:([zTz3", (String) null);
      assertNotNull(string0);
      assertEquals("J:([zTz3", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.remove("", 'r');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.remove("KW')FTG%Y(/", '~');
      assertNotNull(string0);
      assertEquals("KW')FTG%Y(/", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.remove("NoSuchFieldException occurred during 1.6 backcompat code", 'd');
      assertNotNull(string0);
      assertEquals("NoSuchFielException occurre uring 1.6 backcompat coe", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.replace("3h!gK:t^<", (String) null, (String) null);
      assertNotNull(string0);
      assertEquals("3h!gK:t^<", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.replace("vwg", "ot be null", (String) null, (-1395));
      assertNotNull(string0);
      assertEquals("vwg", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.replace("P3!6rD.", "P3!6rD.", "P3!6rD.", 0);
      assertNotNull(string0);
      assertEquals("P3!6rD.", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.replace(".", ".", ".", 1568);
      assertNotNull(string0);
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("gj8t_gzb^r", "gj8t_gzb^r", "LINUX");
      assertNotNull(string0);
      assertEquals("LINUX", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("C)", (String[]) null, (String[]) null);
      assertNotNull(string0);
      assertEquals("C)", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("wqrS`D{Z-R_", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("wqrS`D{Z-R_", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEach(" is not in the range '0' - '9'", stringArray0, (String[]) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals(" is not in the range '0' - '9'", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.replaceEach("NoSuchMethodException occurred during 1.6 backcompat code", stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string0);
      assertEquals("NoSuchMethodException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      String string0 = StringUtils.replaceEach("Searc and Replace array lengths doJ't :atch: ", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Searc and Replace array lengths doJ't :atch: ", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#oL/#=oL~v+*Y)%Z";
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.replaceEach("#oL/#=oL~v+*Y)%Z", stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string0);
      assertEquals("#oL/#=oL~v+*Y)%Z", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ClassNotFoundException occurred during 1.6 backcompat code", "6 :", (-1));
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("IlleFalAccessException occurred during 1.6 backcompat code", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: IlleFalAccessException occurred during 1.6 backcompat code
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "l";
      stringArray0[1] = "Search and Replace array lengths doJ't match: ";
      String string0 = StringUtils.replaceEach("Search and Replace array lengths doJ't match: ", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths doJ't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("(k, length: 0", "The Array must not be null");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "Y4*IP>i";
      stringArray1[1] = "(k, length: 0";
      stringArray1[2] = "P3!6r>Dj.";
      stringArray1[3] = "(k, length: 0";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("(k, length: 0", stringArray0, stringArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: Y4*IP>i lenY4*IP>i lenY4*IP>i lenY4*IP>i lenY4*IP>i len(k, length: 0thP3!6r>Dj. (k, length: 0thP3!6r>Dj. Y4*IP>i len(k, length: 0thP3!6r>Dj. (k, length: 0thP3!6r>Dj. Y4*IP>i lenY4*IP>i len(k, length: 0thP3!6r>Dj. (k, length: 0thP3!6r>Dj. Y4*IP>i len(k, length: 0thP3!6r>Dj. (k, length: 0thP3!6r>Dj. Y4*IP>i lenY4*IP>i lenY4*IP>i len(k, length: 0thP3!6r>Dj. (k, length: 0thP3!6r>Dj. Y4*IP>i len(k, length: 0thP3!6r>Dj. (k, length: 0thP3!6r>Dj. Y4*IP>i lenY4*IP>i len(k, length: 0thP3!6r>Dj. (k, length: 0thP3!6r>Dj. Y4*IP>i len(k, length: 0thP3!6r>Dj. (k, length: 0thP3!6r>Dj. Y4*IP>i lenY4*IP>i lenY4*IP>i lenY4*IP>i len(k, length: 0thP3!6r>Dj. (k, length: 0thP3!6r>Dj. Y4*IP>i len(k, length: 0thP3!6r>Dj. (k, length: 0thP3!6r>Dj. Y4*IP>i lenY4*IP>i len(k, length: 0thP3!6r>Dj. (k, length: 0thP3!6r>Dj. Y4*IP>i len(k, length: 0thP3!6r>Dj. (k, length: 0thP3!6r>Dj. Y4*IP>i lenY4*IP>i lenY4*IP>i len(k, length: 0thP3!6r>Dj. (k, length: 0thP3!6r>Dj. Y4*IP>i len(k, length: 0thP3!6r>Dj. (k, length: 0thP3!6r>Dj. Y4*IP>i lenY4*IP>i len(k, length: 0thP3!6r>Dj. (k, length: 0thP3!6r>Dj. Y4*IP>i len(k, length: 0thP3!6r>Dj. (k, length: 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "l";
      String string0 = StringUtils.replaceEach("M'S$ml09L3G", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("M'S$ml09L3G", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.replaceChars("InvocationTargetException occurred during 1.6 backcompat code", '=', '=');
      assertNotNull(string0);
      assertEquals("InvocationTargetException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, '&', 'q');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.replaceChars("4h)*^Lp*IC", "", "Cnov");
      assertNotNull(string0);
      assertEquals("4h)*^Lp*IC", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.replaceChars("=CR#YM\"kg'.", "'QDB#$#`C)HD;}7O", "'QDB#$#`C)HD;}7O");
      assertNotNull(string0);
      assertEquals("=CR#YM\"kg'.", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.replaceChars("[", "&E#", (String) null);
      assertNotNull(string0);
      assertEquals("[", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.replaceChars("p{InCombiningDiacriticalMarks}+", "kaHL{t", "");
      assertNotNull(string0);
      assertEquals("pInCombiningDicriiclMrs}+", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.overlay("U+D", "(q", 32, (-2216));
      assertNotNull(string0);
      assertEquals("(q", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.overlay(stringArray0[1], (String) null, 18, 533);
      assertEquals(5, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.overlay("Hi", (String) null, 533, 2740);
      assertNotNull(string0);
      assertEquals("Hi", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.overlay("p:)sSxF", "p:)sSxF", (-567), (-567));
      assertNotNull(string0);
      assertEquals("p:)sSxFp:)sSxF", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.chomp("l|!");
      assertNotNull(string0);
      assertEquals("l|!", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.chomp("h");
      assertNotNull(string0);
      assertEquals("h", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.chomp("5Jw>lZ|Gz_i@~%\"", "l");
      assertNotNull(string0);
      assertEquals("5Jw>lZ|Gz_i@~%\"", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("SecurityException occurred during 1.6 backcompat code");
      assertNotNull(string0);
      assertEquals("SecurityExceptionoccurredduring1.6backcompatcode", string0);
      
      String string1 = StringUtils.chomp(string0, (String) null);
      assertNotNull(string1);
      assertEquals("SecurityExceptionoccurredduring1.6backcompatcode", string1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.chomp("w~c&?[o_odb", "w~c&?[o_odb");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.chop(".");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.chop("1;0--R>{^POw");
      assertNotNull(string0);
      assertEquals("1;0--R>{^PO", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.repeat(" vs ", (String) null, (-1700));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.repeat("", 31);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.repeat("i0", 31);
      assertNotNull(string0);
      assertEquals("i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "iu5%})Hx8", 10);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 127);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.rightPad("o=``do7k@ZK%yrs", (-1), 'G');
      assertNotNull(string0);
      assertEquals("o=``do7k@ZK%yrs", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 1646, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 2, "");
      assertNotNull(string0);
      assertEquals("  ", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.rightPad("Kh$;X3>J3&)", 5, "Kh$;X3>J3&)");
      assertNotNull(string0);
      assertEquals("Kh$;X3>J3&)", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.center("&E#", 13, " )d ]t%*EBxIJU");
      assertNotNull(string0);
      assertEquals(" )d ]&E# )d ]", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.center("kO2l0==UswfYB4|7", 54, "kO2l0==UswfYB4|7");
      assertNotNull(string0);
      assertEquals("kO2l0==UswfYB4|7kkO2l0==UswfYB4|7kO2l0==UswfYB4|7kO", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 34, 'F');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.leftPad("^n", 8200, 'K');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 561, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.leftPad(" vs ", (-1700), "");
      assertNotNull(string0);
      assertEquals(" vs ", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      int int0 = StringUtils.length("scupsYp}");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      int int0 = StringUtils.length((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-3158), '(');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.center("IllegalAccessException occurred during 1.6 backcompat code", (-925));
      assertNotNull(string0);
      assertEquals("IllegalAccessException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.center("InvocationTargetException occurred during 1.6 backcompat code", 1, '5');
      assertNotNull(string0);
      assertEquals("InvocationTargetException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-3250), (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.center("", (-1166), "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.center("", 2, "");
      assertNotNull(string0);
      assertEquals("  ", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.center("Wx UWId^pHp%0I6", 2, "Wx UWId^pHp%0I6");
      assertNotNull(string0);
      assertEquals("Wx UWId^pHp%0I6", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.upperCase("MM1p");
      assertNotNull(string0);
      assertEquals("MM1P", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = StringUtils.upperCase(";", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertNotNull(string0);
      assertEquals(";", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("hv[!Pk#@=r<05{,E;");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase("", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.capitalize("(q");
      assertNotNull(string0);
      assertEquals("(q", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.uncapitalize(" /6Dh");
      assertNotNull(string0);
      assertEquals(" /6Dh", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.swapCase("*S~Dt||F{");
      assertNotNull(string0);
      assertEquals("*s~dT||f{", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String[] stringArray0 = new String[5];
      int int0 = StringUtils.countMatches(stringArray0[1], "(q");
      assertEquals(5, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      int int0 = StringUtils.countMatches("(q", "(q");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      int int0 = StringUtils.countMatches("IllegalArgumentException occurred during 1.6 backcompat code", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("LRCtD-wXGw1+Wl1w$w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("short");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("ClassNotFoundException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("Ks>pyBr");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("i0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("DISPLAYi0FORMAT");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace(" w\"9Ro?em-4>gpd\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("java.runtime.version");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("r<gs^^<e!E:SCV");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = StringUtils.stripAccents("2x*3S.Zf");
      assertNotNull(string0);
      assertEquals("2x*3S.Zf", string0);
      
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("1.5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" /6Dh");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" is less than 0: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("AAvrJ]JpS[2K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("name");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("J");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = StringUtils.defaultString("P3!6rD.");
      assertNotNull(string0);
      assertEquals("P3!6rD.", string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = StringUtils.defaultString("EfAGtKA?A~3 UC", "EfAGtKA?A~3 UC");
      assertNotNull(string0);
      assertEquals("EfAGtKA?A~3 UC", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("(", "(");
      assertNotNull(string0);
      assertEquals("(", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = StringUtils.reverse("F_");
      assertNotNull(string0);
      assertEquals("_F", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, ':');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (-1330), (-1330));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("9j", 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.abbreviate("TZC}]g(:t?2", 9, 9);
      assertNotNull(string0);
      assertEquals("...(:t?2", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("P3!6rD.", (int) 'x', 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = StringUtils.abbreviate("7S-+`&a{1UN5g_9W5", 7, 7);
      assertNotNull(string0);
      assertEquals("...{...", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = StringUtils.difference("jj", (String) null);
      assertNotNull(string0);
      assertEquals("jj", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = StringUtils.difference("i0", "i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0");
      assertNotNull(string0);
      assertEquals("i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0i0", string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String) null, "UL@GJ~uH}v8~Z=");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("~EdiPtR4PItM&a.", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference(";", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("normalize", "HP-UX");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("scupsYp}", "scupsYp}");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "]lGC'";
      stringArray0[1] = "]lGC";
      stringArray0[2] = "]lGC";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      assertEquals("]lGC", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ",q+~Ml";
      stringArray0[1] = ",q+~Ml";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((String) null, "q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("b", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "user.name");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("#X1O;!,", "");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("`O o#fi", "n62");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance(" i*rH}J>Ii*X ?_", " i*rH}J>Ii*X ?_");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.startsWithAny("oKXt&|p~Hf6vy2 )5", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, "Caught a SecurityException reading the system property '");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny((String) null, (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "IllegalAccessException occurred during 1.6 backcompat code");
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.startsWithAny("oKXt&|p~Hf6vy2 )5", stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "InvocationTargetException occurred during 1.6 backcompat code";
      boolean boolean0 = StringUtils.startsWithAny("InvocationTargetException occurred during 1.6 backcompat code", stringArray0);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("[v@{ e&uz={0j", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, "YQ{ TYFv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("_F", "Oe:lNP/o4<IJY5=");
      assertFalse(boolean0);
  }
}
