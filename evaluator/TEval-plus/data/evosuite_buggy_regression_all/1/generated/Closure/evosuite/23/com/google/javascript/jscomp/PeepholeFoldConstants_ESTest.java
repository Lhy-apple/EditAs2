/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:05:21 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newNumber((-70.65341));
      Node node1 = new Node(27, node0, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newString(">,AX-9`@");
      Node node1 = new Node(28, node0, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(160);
      Node node1 = new Node(29, node0, node0, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node(47, 47, 47);
      Node node1 = new Node(32, node0, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(56, 56, 56);
      Node node1 = new Node(122, node0, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString(";p&v?<}%qUHxs}.[", (-5133), (-5133));
      Node node1 = Node.newString(";p&v?<}%qUHxs}.[");
      Node node2 = new Node(45, node1, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString((-1132), "2L*<;K+7", (-1132), (-1132));
      Node node1 = Node.newString("2L*<;K+7");
      Node node2 = new Node(12, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(398, 147, 398);
      Node node1 = new Node(4, 437, 1589);
      Node node2 = new Node(13, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node(123, 123, 123);
      Node node1 = new Node(31, 123, 15);
      Node node2 = new Node(14, node0, node1, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("C*A9']0ja0`#+TH");
      Node node1 = Node.newString("C*A9']0ja0`#+TH");
      Node node2 = new Node(15, node1, node0, node1, node0, 47, 53);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isDefaultCase());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(63, 63, 63);
      Node node1 = new Node(50, 63, 4095);
      Node node2 = new Node(16, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isLocalResultCall());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = new Node(3888, 1262, 1137);
      Node node1 = Node.newString("i/@h'$ZSa4-|oD xTW", 143, 2991);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node2 = new Node(21, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.isAdd());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(1268, 1268, 1268);
      Node node1 = Node.newString("function");
      Node node2 = new Node(31, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(1114, 1114, 1114);
      Node node1 = new Node(44, 40, 52);
      Node node2 = new Node(35, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node((-646));
      Node node1 = new Node(85, 39, 49);
      Node node2 = new Node(36, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(88, 88, 88);
      Node node1 = new Node(50, 88, 4095);
      Node node2 = new Node(37, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertSame(node3, node2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node((-4368), (-4368), (-4368));
      Node node1 = new Node(50, (-4368), 4095);
      Node node2 = new Node(38, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isThis());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(197);
      Node node1 = new Node(54, 51, 16);
      Node node2 = new Node(39, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isTypeOf());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node((-4368), (-4368), (-4368));
      Node node1 = new Node(50, (-4368), 4095);
      Node node2 = new Node(40, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(52, Node.LENGTH);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(56, 56, 56);
      Node node1 = new Node(50, 56, 4095);
      Node node2 = new Node(41, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isGetProp());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(160);
      Node node1 = Node.newString("*^W4|w_=Q(VD");
      Node node2 = new Node(42, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isTry());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(53, 53, 53);
      Node node1 = new Node(50, 53, 4095);
      Node node2 = new Node(43, node1, node0, 4, 38);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(56, 56, 56);
      Node node1 = new Node(50, 56, 4095);
      Node node2 = new Node(44, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(37, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(1280, 1280, 1280);
      Node node1 = new Node(36, 46, 37);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node2 = new Node(46, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = new Node(1262);
      Node node1 = new Node(36, 46, 37);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node2 = new Node(47, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(42, "2L*<;K+7", 42, 42);
      Node node1 = Node.newString("2L*<;K+7");
      Node node2 = new Node(48, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isDebugger());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(56, (-12), (-12));
      Node node1 = new Node(50, 56, 4095);
      Node node2 = new Node(49, node1, node0, node0, 32, 16);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(39, Node.EMPTY_BLOCK);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(63, 63, 63);
      Node node1 = new Node(50, 63, 4095);
      Node node2 = new Node(50, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isWith());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(1327);
      Node node1 = new Node(31, 16, 47);
      Node node2 = new Node(51, node0, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(102, 102, 102);
      Node node1 = new Node((-38), 3436, 36);
      Node node2 = new Node(52, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(102);
      Node node1 = new Node(52, 45, 16);
      Node node2 = new Node(53, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(53, Node.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(1327, 1327, 1327);
      Node node1 = new Node(48, 30, 37);
      Node node2 = new Node(54, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(54, node3.getType());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(1327, 1327, 1327);
      Node node1 = new Node(1102, 41, 164);
      Node node2 = new Node(56, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getSourceOffset());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(56, (-12), (-12));
      Node node1 = new Node(50, 56, 4095);
      Node node2 = new Node(57, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(93);
      Node node1 = Node.newString(";p&v?<}%qUHxs}.[");
      Node node2 = new Node(58, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isThrow());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(1268, 1268, 1268);
      Node node1 = new Node(36, 46, 37);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node2 = new Node(59, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(35, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(88, 88, 88);
      Node node1 = Node.newString("+2I1LrgJ%`_VrS+O_y", 44, 51);
      Node node2 = new Node(60, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(88, 88, 88);
      Node node1 = new Node(50, 88, 4095);
      Node node2 = new Node(61, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, node3.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("*9QtHL(BWqH", 3829, 3829);
      Node node1 = Node.newString("Z,AX-9`@");
      Node node2 = new Node(62, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isAssignAdd());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(82, 82, 82);
      Node node1 = new Node(48, 54, 16);
      Node node2 = new Node(63, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString("", 601, (-5067));
      Node node1 = Node.newString("");
      Node node2 = new Node(64, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(56, 1, 1);
      Node node1 = new Node(50, 56, 4095);
      Node node2 = new Node(65, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, node3.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node((-4368), (-4368), (-4368));
      Node node1 = new Node(50, (-4368), 4095);
      Node node2 = new Node(67, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotSame(node1, node3);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newString("2#DWd Ud!fYg+~A(", 408, 408);
      Node node1 = Node.newString("2#DWd Ud!fYg+~A(");
      Node node2 = new Node(68, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(37, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node((-953), (-5106), (-2249));
      Node node1 = Node.newString("com.google.javascript.rhino.jstype.JSTypeRegistry");
      Node node2 = new Node(69, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(82, 82, 82);
      Node node1 = new Node(48, 54, 16);
      Node node2 = new Node(70, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(82, 82, 82);
      Node node1 = new Node(48, 54, 16);
      Node node2 = new Node(71, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(37);
      Node node1 = new Node((-330), 39, 42);
      Node node2 = new Node(72, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isTypeOf());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(88, 88, 88);
      Node node1 = new Node(2, (-2240), 276);
      Node node2 = new Node(73, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(54, Node.SLASH_V);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(586);
      Node node1 = new Node(41, 13, 41);
      Node node2 = new Node(74, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(74, node3.getType());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(2263, 123, 2263);
      Node node1 = new Node(77, 54, (-1977));
      Node node2 = new Node(75, node0, node1, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(82, 82, 82);
      Node node1 = new Node(48, 54, 16);
      Node node2 = new Node(76, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(35, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(88, 88, 88);
      Node node1 = new Node(50, 88, 4095);
      Node node2 = new Node(78, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isHook());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(88, 88, (-1329));
      Node node1 = new Node(612, (-1061), 26);
      Node node2 = new Node(79, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isReturn());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node((-5106), (-2535), (-2535));
      Node node1 = new Node(49, 42, 12);
      Node node2 = new Node(80, node0, node1, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("C*A9']0ja0`#+TH", 349, 81);
      Node node1 = Node.newString("!373ig.Z~q$z$k");
      Node node2 = new Node(81, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isDefaultCase());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node((-1135));
      Node node1 = new Node(47, 51, 1);
      Node node2 = new Node(82, node0, node1, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotSame(node3, node0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(56, (-12), (-12));
      Node node1 = new Node(50, 56, 4095);
      Node node2 = new Node(83, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newString(";p&v?<}%qUHxs}.[", (-5089), (-5089));
      Node node1 = Node.newString("~{Bn", 35, 48);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node2 = new Node(84, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(32, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(1268, 1268, 1268);
      Node node1 = new Node(36, 46, 37);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node2 = new Node(85, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(48, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(56, (-12), (-12));
      Node node1 = new Node(50, 56, 4095);
      Node node2 = new Node(86, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(102, 102, 102);
      Node node1 = Node.newString("+2I1Lr7J%`_VrS+O_y", 44, 51);
      Node node2 = new Node(87, node1, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(1327, 1327, 1327);
      Node node1 = new Node(48, 30, 37);
      Node node2 = new Node(88, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(88, 88, 88);
      Node node1 = new Node(50, 88, 4095);
      Node node2 = new Node(89, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(398, (-5106), 398);
      Node node1 = new Node(39);
      Node node2 = new Node(90, node0, node1, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node((-5106), (-2535), (-2535));
      Node node1 = new Node(49, 42, 12);
      Node node2 = new Node(92, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(62);
      Node node1 = new Node(31);
      Node node2 = new Node(93, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("Jz?,GxN>N$gmx^IYz", 77, 77);
      Node node1 = new Node(16, 50, 31);
      Node node2 = new Node(94, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(94, node3.getType());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node((-1151));
      Node node1 = new Node(47, 51, 1);
      Node node2 = new Node(95, node0, node1, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(88, 88, 88);
      Node node1 = new Node(50, 88, 4095);
      Node node2 = new Node(96, node0, node0, node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(82, 997, (-2827));
      Node node1 = new Node(30, 4, 16);
      Node node2 = new Node(98, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isDefaultCase());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(88, 88, 88);
      Node node1 = new Node(50, 88, 4095);
      Node node2 = new Node(100, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals((-1), node3.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(1033, 56, 61);
      SyntheticAst syntheticAst0 = new SyntheticAst("t\"OSLr");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(101, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(88, 88, 88);
      Node node1 = new Node(50, 88, 4095);
      Node node2 = new Node(4, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(54, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(122);
      Node node1 = new Node(122, node0, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(122);
      Node node1 = new Node(10, node0, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(11, 11, 11);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isLabelName());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(17, 15, 49);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(19, 15, 49);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isScript());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(20, 2, 49);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(22, 22, 22);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isInstanceOf());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(23, 23, 23);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(">,AX-9`@");
      Node node1 = new Node(24, node0, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(25);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(48, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("");
      Node node1 = new Node(33, node0, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.isGetProp());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node((-5706));
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertEquals(55, node2.getType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(66, 66, 66);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isWith());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(77, 77, 77);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(54, Node.SLASH_V);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(91, 91, 91);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(97, 51, 93);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(1327, 1327, 1006);
      Node node1 = new Node(38, 43, 1556);
      Node node2 = new Node(90, node0, node1, node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 43 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(98, 98, 98);
      Node node1 = new Node(88, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(32, 32, 32);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(131104, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(57);
      Node node1 = new Node(32, node0, 4095, 48);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertTrue(node2.isTypeOf());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newNumber((-5542.204699339));
      Node node1 = new Node(32, node0, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("setCssNameMapping", 44, 51);
      Node node1 = new Node(32, node0, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(63, 63, 63);
      Node node1 = new Node(32, node0, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node(64, 64, 64);
      Node node1 = new Node(32, node0, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newString(">,AX-9`@");
      Node node1 = new Node(26, node0, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newString(">", 408, (-5106));
      Node node1 = Node.newString(">", 40, 53);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node2 = new Node(52, node0, node1, node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString(",+DcpyB", 398, 398);
      Node node1 = Node.newString(54, ",+DcpyB");
      Node node2 = new Node(86, node0, node1, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(44);
      Node node1 = new Node(50, 44, 4095);
      Node node2 = new Node(16, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString("", 408, (-5106));
      Node node1 = new Node(39);
      Node node2 = new Node(45, node0, node1, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isContinue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(";p&v?<}%qUHxs}.[", (-5106), (-5106));
      Node node1 = Node.newString("O}}");
      Node node2 = new Node(45, node0, node0, node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node((-12));
      Node node1 = new Node(30, 1, 47);
      Node node2 = new Node(29, node0, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(53, Node.INPUT_ID);
  }
}
