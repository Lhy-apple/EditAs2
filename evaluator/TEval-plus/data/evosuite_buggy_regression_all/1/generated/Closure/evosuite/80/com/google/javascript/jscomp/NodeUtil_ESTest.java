/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:11:44 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node(20);
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "?!sq?f/5np0r{16m F'", 27, 99);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.getRoot();
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString("RegExp", (-4), (-4));
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = new Node(45, 45, 45);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node(45, 45, 45);
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(12, nodeArray0, 12, 76);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertNotNull(node0);
      
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("m+<^q/a}Jq7= +G", 143, 41);
      boolean boolean0 = NodeUtil.containsCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = Node.newString("com.google.javascript.jscomp.GoogleCodingConvention");
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, "com.google.javascript.jscomp.GoogleCodingConvention", node0, "com.google.javascript.jscomp.GoogleCodingConvention");
      NodeUtil.getPrototypeClassName(node1);
      assertEquals(33, node1.getType());
      assertTrue(node1.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node((-4));
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 49);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = Node.newString("com.google.javascript.jscomp.GoogleCodingConvention");
      Node node1 = NodeUtil.newName(defaultCodingConvention0, "com.google.javascript.jscomp.GoogleCodingConvention", node0, "com.google.javascript.jscomp.GoogleCodingConvention");
      assertTrue(node1.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node(0);
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(65, 65, 65);
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "m+<^q/aJq7=+G");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newString((-4654), "debugsource");
      int int0 = NodeUtil.getNameReferenceCount(node0, "1R)+7dS");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(12, nodeArray0, 12, 76);
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 43, nodeUtil_BooleanResultPredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString("RegExp", (-4), (-4));
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(127, 127, 127);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newNumber(10.0);
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(96);
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "i|q'La&bTmbH", 27, 115);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertEquals(27, node0.getLineno());
      assertEquals(115, node0.getCharno());
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      Node node0 = new Node(116, 116, 105);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeBREAK 116
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString(26, ":-SQQ^=9>2aZhf&Z", 26, 16);
      // Undeclared exception!
      try { 
        NodeUtil.getExpressionBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newString(113, "^HDbKYsGfG(kW");
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node(86);
      // Undeclared exception!
      try { 
        NodeUtil.getExpressionBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString(45, ":-SQQ^=9>2aZhf&Z");
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node1 = NodeUtil.newFunctionNode(":-SQQ^=9>2aZhf&Z", linkedList0, node0, (-1802), 34);
      assertTrue(node1.hasMoreThanOneChild());
      
      Node node2 = node1.removeChildren();
      NodeUtil.getExpressionBooleanValue(node2);
      assertEquals(105, node1.getType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 2357, 59);
      NodeUtil.getBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newString("S+?aJN7=?G");
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(41);
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString("m+^q/a}Jq7= +G", (-2660), (-2660));
      Node node1 = new Node(47, node0, node0, 12, 23);
      NodeUtil.getExpressionBooleanValue(node1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      Node node1 = new Node(710, node0, node0, 0, 5);
      Node node2 = node1.removeChildren();
      NodeUtil.getExpressionBooleanValue(node2);
      assertEquals(122, node2.getType());
      assertEquals(122, node0.getType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newNumber((double) 28, 460, 19);
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node(45, 45, 45);
      Node node1 = NodeUtil.newExpr(node0);
      String string0 = NodeUtil.arrayToString(node1);
      assertEquals(130, node1.getType());
      assertNull(string0);
      assertNotSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newNumber(115.0, 1195, 102);
      Node node1 = new Node(28, node0, node0, node0, node0);
      String string0 = NodeUtil.arrayToString(node1);
      assertNotNull(string0);
      assertEquals("115", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString("M+<^q/}9qL +G");
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("M+<^q/}9qL +G", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString(45, "^HDbKYsGfG(3kW");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      String string0 = NodeUtil.getStringValue(node1);
      assertEquals("undefined", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newNumber(1521.3594387542987, 1448, 44);
      String string0 = NodeUtil.getObjectLitKeyName(node0);
      assertEquals("1521.3594387542987", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      // Undeclared exception!
      try { 
        NodeUtil.getNumberValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newNumber(115.0, 1195, 102);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(115.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newString("S+?aJN7=?G");
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node(45, 45, 45);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("^=");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$AncestorIterable", 1323, 1323);
      node0.addChildToBack(node0);
      String string0 = NodeUtil.getFunctionName(node0);
      assertEquals("com.google.javascript.rhino.Node$AncestorIterable", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newString(":-SQQ^=9>2aZhf&Z", (-140), (-140));
      Node node1 = new Node(26, node0, node0, 39, 0);
      boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newNumber((double) 115, 115, 110);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node(41, 41, 3);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node0 = new Node(1012);
      Node node1 = NodeUtil.newFunctionNode(">>=", linkedList0, node0, 2, (-2604));
      boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
      assertEquals(3, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(boolean0);
      assertEquals(105, node1.getType());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "a$D.J4I!kDF*J", " does not have a condition.");
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(127, 127, 127);
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(17);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(19);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(22);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString(":-SQQ^=9>2aZhf&Z", (-144), (-144));
      Node node1 = new Node(26, node0, node0, 39, 0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newNumber(115.0, 1195, 102);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node1 = new Node(28, node0, node0, node0, node0);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(29);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.rhino.Node$AncestorIterable", (-1783), (-1783));
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(34);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newString("M+<^q/}9qL +G");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(43);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(46);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(48);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(49);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(55);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(65, 65, 65);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeGET_REF 65
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(74);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(75);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(81);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(86);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(102);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(103);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(104);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(109);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(111);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(112);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(113);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(115);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(120);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(45, 45, 45);
      Node node1 = NodeUtil.newExpr(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeEXPR_RESULT 45
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" does not have a condition.");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "^HDbKYsGfG(3kW", "b[T}");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newString((-3228), "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Ljava/lang/Object;", (-3), (-3228));
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newString(97, "i|q'La&bTmbH");
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0, compiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got ASSIGN_MOD
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString(13, "[object Object]", 115, 13);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(20);
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("vksL:e'+{Q'jB}", "vksL:e'+{Q'jB}");
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.rhino.Node$AncestorIterable", " does not have a condition.");
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "NaN", " does not have a condito.");
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-1286));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=-1286> (type -1286)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = NodeUtil.precedence(35);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString(86, "&F", 18, 21);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeStringHelper(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString(98, "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Ljava/lang/Object;");
      // Undeclared exception!
      try { 
        NodeUtil.isBooleanResult(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node(10, 3886, 1008);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)23, "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Ljava/lang/Object;", (int) (byte) (-23), 140);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(24);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newString(25, "|81;#jY/-N^F!p.E^");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newNumber(53.0, 14, 14);
      Node node1 = new Node(27, node0, node0, node0, node0, 13, 2);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "infinity", (-1974), (-1974));
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertTrue(boolean0);
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newNumber((double) 115, 115, 110);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString(13, "[object Object]", 153, 13);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(14, 36, 4);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newNumber((double) 115, 115, 110);
      Node node1 = new Node(15, node0, node0, node0, node0, 18, 1);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newString(18, ":-SQQ^=9>2aZhf&Z", 23, 2168);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      int int0 = NodeUtil.getCount(node0, nodeUtil_BooleanResultPredicate0, nodeUtil_BooleanResultPredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)23, ":-SQQ^=9>2aZhf&Z");
      boolean boolean0 = NodeUtil.isBooleanResult(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(26, 26, 26);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = new Node(31, 31, 3);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(34, 1921, 7);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(35, 36, 694);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node(37, (-2661), 103);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newNumber((double) 23, 4, 14);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      int int0 = NodeUtil.getCount(node0, nodeUtil_BooleanResultPredicate0, nodeUtil_BooleanResultPredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newString("RegExp", (-4), (-4));
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = new Node(41, 41, 3);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newString(158, "Constructor expepted as first argument");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      Node node1 = new Node(44, node0, node0);
      int int0 = NodeUtil.getCount(node1, nodeUtil_BooleanResultPredicate0, nodeUtil_BooleanResultPredicate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(45, 45, 45);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString(51, ":-SQQ^=9>2aZhf&Z");
      boolean boolean0 = NodeUtil.isBooleanResult(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(45);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node(96);
      int int0 = NodeUtil.getOpFromAssignmentOp(node0);
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newString("m+<^q/a}Jq7= +G", (-2660), 120);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(41, 41, 3);
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.isExpressionNode(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javasceipt.jscomp.Nod1Util$MatchShallowStatement", 0, 0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.has(node0, sourceMap_DetailLevel0, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
      assertTrue(node0.isUnscopedQualifiedName());
      assertEquals(33, node0.getType());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString(99, "com.google.javascript.rhino.Node$AncestorIterable");
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_NumbericResultPredicate0, sourceMap_DetailLevel0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newString((-140), ":-SQQ^=92aZhf&Z");
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "infinity", (-1974), (-1974));
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newString("RegExp", (-4), (-4));
      boolean boolean0 = NodeUtil.isVar(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newString("m+<^q/a}Jq7= +G", (-2643), 0);
      boolean boolean0 = NodeUtil.isString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newNumber(2.0);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
      assertFalse(boolean0);
      assertEquals(130, node1.getType());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newNumber((double) 115, 115, 110);
      boolean boolean0 = NodeUtil.isAssign(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = new Node(45, 45, 45);
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(116, 116, 105);
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.isExprCall(node1);
      assertFalse(boolean0);
      assertEquals(130, node1.getType());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(12);
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = new Node(115, 115, 92);
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFallThrough(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newString(113, "^HDbKYsGfG(kW");
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newString(":-SQQ^=9>2aZhf&Z", (-144), (-144));
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "infinity", (-1974), (-1974));
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertEquals(38, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString(":-SQQ^=9>2aZhf&Z", (-140), (-140));
      Node node1 = new Node(26, node0, node0, 39, 0);
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newString("m+<^q/aJq7=+G", 112, 10);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // INC 102 does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      Node node0 = Node.newString("RegExp", (-4), (-4));
      Node node1 = NodeUtil.newFunctionNode("RegExp", arrayList0, node0, 8, 47);
      // Undeclared exception!
      try { 
        NodeUtil.isEmptyFunctionExpression(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(192, 65377, 192);
      Node node1 = NodeUtil.newExpr(node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 192
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newNumber((double) 115, 115, 110);
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLabelName((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.rhino.Node$AncestorIterable", " does not have a condition.");
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newString(0, "m+<^q/a}Jq7= +G");
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newString(13, "[object Object]", 115, 13);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "dt|&g", "dt|&g");
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      Node node0 = new Node((-4));
      Node node1 = NodeUtil.newFunctionNode("RegExp", arrayList0, node0, 8, 47);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node1);
      assertEquals(3, node1.getChildCount());
      assertEquals(8, node1.getLineno());
      assertEquals(47, node1.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString("S+?aJN7=?G");
      boolean boolean0 = NodeUtil.isThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = new Node(45, 45, 45);
      boolean boolean0 = NodeUtil.isArrayLiteral(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newNumber((double) 115, 115, 110);
      Vector<Node> vector0 = new Vector<Node>();
      Node node1 = NodeUtil.newFunctionNode("qU'XH`Gp\"4V3D$OP", vector0, node0, 31, 19);
      // Undeclared exception!
      try { 
        NodeUtil.isHoistedFunctionDeclaration(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.rhino.Node$AncestorIterable", (-1783), (-1783));
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertTrue(node0.isUnscopedQualifiedName());
      assertEquals(33, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = new Node(9, 9, 9);
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newString(45, "^HDbKYsGfG(3kW");
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString("_'B1$WAX;o`i`?=!,hA", 125, 125);
      Node node1 = Node.newNumber(520.483233327956);
      boolean boolean0 = NodeUtil.isObjectLitKey(node1, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = new Node(450, 450, 450);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 450
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "a=='812?", "+Qm:8)yn\"[<S%IG.~yX");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
      JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, functionType0);
      assertFalse(jSType0.isEnumElementType());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newNumber(1123.0, 38, 90);
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = NodeUtil.opToStr(9);
      assertEquals("|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = NodeUtil.opToStr(10);
      assertNotNull(string0);
      assertEquals("^", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = NodeUtil.opToStr(11);
      assertNotNull(string0);
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = NodeUtil.opToStr(12);
      assertEquals("==", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = NodeUtil.opToStr(13);
      assertEquals("!=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = NodeUtil.opToStr(14);
      assertEquals("<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = NodeUtil.opToStr(15);
      assertNotNull(string0);
      assertEquals("<=", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = NodeUtil.opToStr(16);
      assertNotNull(string0);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = NodeUtil.opToStr(17);
      assertNotNull(string0);
      assertEquals(">=", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = NodeUtil.opToStr(19);
      assertNotNull(string0);
      assertEquals(">>", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = NodeUtil.opToStr(21);
      assertNotNull(string0);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = NodeUtil.opToStr(22);
      assertEquals("-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = NodeUtil.opToStr(23);
      assertNotNull(string0);
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = NodeUtil.opToStr(24);
      assertEquals("/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = NodeUtil.opToStr(25);
      assertEquals("%", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = NodeUtil.opToStr(26);
      assertEquals("!", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = NodeUtil.opToStr(27);
      assertNotNull(string0);
      assertEquals("~", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = NodeUtil.opToStr(28);
      assertEquals("+", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = NodeUtil.opToStr(29);
      assertNotNull(string0);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = NodeUtil.opToStr(30);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = NodeUtil.opToStr(31);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = NodeUtil.opToStr(32);
      assertEquals("typeof", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = NodeUtil.opToStr(33);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = NodeUtil.opToStr(34);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = NodeUtil.opToStr(35);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = NodeUtil.opToStr(36);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = NodeUtil.opToStr(37);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = NodeUtil.opToStr(38);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = NodeUtil.opToStr(39);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = NodeUtil.opToStr(40);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = NodeUtil.opToStr(41);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = NodeUtil.opToStr(42);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = NodeUtil.opToStr(43);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = NodeUtil.opToStr(44);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = NodeUtil.opToStr(45);
      assertEquals("===", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = NodeUtil.opToStr(46);
      assertNotNull(string0);
      assertEquals("!==", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = NodeUtil.opToStr(47);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = NodeUtil.opToStr(48);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = NodeUtil.opToStr(49);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = NodeUtil.opToStr(50);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = NodeUtil.opToStr(52);
      assertNotNull(string0);
      assertEquals("instanceof", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = NodeUtil.opToStr(57);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = NodeUtil.opToStr(58);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = NodeUtil.opToStr(60);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = NodeUtil.opToStr(61);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = NodeUtil.opToStr(71);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = NodeUtil.opToStr(72);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = NodeUtil.opToStr(76);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = NodeUtil.opToStr(77);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = NodeUtil.opToStr(78);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = NodeUtil.opToStr(79);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = NodeUtil.opToStr(86);
      assertEquals("=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = NodeUtil.opToStr(88);
      assertEquals("^=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = NodeUtil.opToStr(90);
      assertNotNull(string0);
      assertEquals("<<=", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = NodeUtil.opToStr(92);
      assertEquals(">>>=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = NodeUtil.opToStr(93);
      assertNotNull(string0);
      assertEquals("+=", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = NodeUtil.opToStr(95);
      assertEquals("*=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = NodeUtil.opToStr(96);
      assertEquals("/=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = NodeUtil.opToStr(97);
      assertNotNull(string0);
      assertEquals("%=", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = NodeUtil.opToStr(98);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = NodeUtil.opToStr(99);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = NodeUtil.opToStr(100);
      assertEquals("||", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = NodeUtil.opToStr(101);
      assertEquals("&&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = NodeUtil.opToStr(102);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = NodeUtil.opToStr(103);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = NodeUtil.opToStr(105);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = NodeUtil.opToStr(107);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = NodeUtil.opToStr(108);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = NodeUtil.opToStr(109);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = NodeUtil.opToStr(110);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = NodeUtil.opToStr(111);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = NodeUtil.opToStr(112);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = NodeUtil.opToStr(113);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = NodeUtil.opToStr(114);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = NodeUtil.opToStr(115);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = NodeUtil.opToStr(116);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = NodeUtil.opToStr(117);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = NodeUtil.opToStr(119);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = NodeUtil.opToStr(120);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = NodeUtil.opToStr(121);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = NodeUtil.opToStr(122);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(20);
      assertEquals(">>>", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op -1: ERROR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 2357, 59);
      Node node1 = NodeUtil.newVarNode("", node0);
      // Undeclared exception!
      try { 
        NodeUtil.redeclareVarsInsideBranch(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = Node.newString("M+<^q/}9qL +G");
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javasceipt.jscomp.Nod1Util$MatchShallowStatement", 0, 0);
      assertTrue(node0.isUnscopedQualifiedName());
      
      Node node1 = NodeUtil.getRootOfQualifiedName(node0);
      assertEquals(0, node1.getCharno());
      assertEquals(0, node0.getLineno());
      assertEquals(2, node0.getChildCount());
      assertEquals(0, node1.getLineno());
      assertEquals(0, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = Node.newString("ijyY?=S.7", 86, 86);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.newName(googleCodingConvention0, "OFF", (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("+infinity");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("global");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Vector<Node> vector0 = new Vector<Node>();
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "a=='812?", "a=='812?");
      Node node1 = NodeUtil.newFunctionNode("n]hRMT~5S", vector0, node0, 25, 1);
      assertEquals(3, node1.getChildCount());
      
      Node node2 = node1.removeChildren();
      boolean boolean0 = NodeUtil.isPrototypeProperty(node2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = new Node(41, 41, 3);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("m+<^q/aJq7=+G", (Node) null);
      assertEquals(118, node0.getType());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = Node.newNumber(1406.891737993546, (-3194), 2048);
      node0.addChildAfter(node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.newVarNode("*m]z /<:m,~]", node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newString((-3228), "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Ljava/lang/Object;", (-3), (-3228));
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = NodeUtil.valueCheck(node0, nodeUtil_MatchDeclaration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newString((-140), "msg.bad.jsdoc.tag");
      Node node1 = NodeUtil.newVarNode("AFTER_OPTIMIZATION_LOOP", node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
      assertTrue(boolean0);
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = new Node((-56));
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newString("kON#5|d", 1323, 1323);
      node0.addChildToBack(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = Node.newString("m=<oxgt}Jq7= +G", (-2669), 120);
      Node node1 = new Node(2, node0, node0, 42, 28);
      boolean boolean0 = NodeUtil.containsFunction(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.rhino.Node$AncestorIterable", " does not have a condition.");
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = new Node(96);
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = new Node((-56));
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, " bk1s'm}jFgn:eB06_", " bk1s'm}jFgn:eB06_");
      boolean boolean0 = NodeUtil.hasCatchHandler(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = Node.newString(113, "^HDbKYsGfG(3kW");
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      NodeUtil.getInfoForNameNode(node0);
      assertEquals(122, node0.getType());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = Node.newString("", 120, 120);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("vksL:e'+{Q'jB}", "vksL:e'+{Q'jB}");
      String string0 = NodeUtil.getSourceName(node0);
      assertNotNull(string0);
      assertEquals("vksL:e'+{Q'jB}", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
      assertEquals(122, node0.getType());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = new Node(10, 3886, 1008);
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertEquals(37, node1.getType());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = Node.newString("_'B1$WAX;o`i`?=!,hA", 125, 125);
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.rhino.Node$AncestorIterable", (-1783), (-1783));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(node0.isQualifiedName());
      assertTrue(boolean0);
      assertTrue(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = new Node(45, 45, 45);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }
}
