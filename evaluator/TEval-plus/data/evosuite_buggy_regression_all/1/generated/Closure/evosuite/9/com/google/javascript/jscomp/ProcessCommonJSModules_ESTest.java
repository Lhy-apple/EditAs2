/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:03:47 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProcessCommonJSModules_ESTest extends ProcessCommonJSModules_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("exports");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "android");
      processCommonJSModules0.process(node0, node0);
      processCommonJSModules0.process(node0, node0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "87*{ w}YWUZ'");
      JSModule jSModule0 = processCommonJSModules0.getModule();
      assertNull(jSModule0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("android", "android");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "android");
      Node node1 = compiler0.parseTestCode("module.exports");
      processCommonJSModules0.process(node0, node1);
      assertFalse(node1.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("./", "./");
      assertEquals("module$", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("../android", "../android");
      assertEquals("module$..$..$android", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("<R@F\"b-", "<R@F\"b-");
      assertEquals("module$<R@F\"b_", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "|9x/");
      String string0 = processCommonJSModules0.guessCJSModuleName("|9x/");
      assertEquals("module$", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("M]7y");
      Node node1 = new Node(37, node0, 1, 1);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "M]7y", false);
      processCommonJSModules0.process(node0, node1);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }
}
