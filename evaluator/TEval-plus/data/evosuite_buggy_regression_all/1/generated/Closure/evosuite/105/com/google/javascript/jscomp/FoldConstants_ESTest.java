/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:13:43 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FoldConstants;
import com.google.javascript.jscomp.InferJSDocInfo;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.MakeDeclaredNamesUnique;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.ScriptOrFnNode;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FoldConstants_ESTest extends FoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber(2183.53275705);
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("LP");
      foldConstants0.process(node0, node0);
      assertEquals(13, Node.CASES_PROP);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.hasBreakOrContinue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("Dk4{'\u00018A<~*o*}H");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      nodeTraversal0.traverse(node0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      Node node0 = Node.newString(":");
      Node node1 = new Node(32, node0, node0, node0, 25, 27);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverse(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("cm-r/tbFcXwgV");
      Node node1 = new Node(32, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      nodeTraversal0.traverse(node1);
      assertEquals(19, Node.LABEL_PROP);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      Node node0 = Node.newString((-1355), "");
      Node node1 = Node.newString(41, "");
      Node node2 = new Node(32, node1, node1, node0, node0);
      Scope scope0 = typedScopeCreator0.createInitialScope(node2);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverseAtScope(scope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      Node node0 = Node.newString((-1355), "");
      Node node1 = new Node(26, node0, node0, node0, node0);
      Scope scope0 = typedScopeCreator0.createInitialScope(node1);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverseAtScope(scope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode("QL<$G");
      Node node1 = new Node(29, node0, node0, 11, 27);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverse(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString((-1355), "");
      Node node1 = new Node(27, node0);
      foldConstants0.visit(nodeTraversal0, node1, node1);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode("[tgy|x");
      nodeTraversal0.traverse(node0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      SourceFile sourceFile0 = SourceFile.fromCode("Oh8:kdH&FKPAVzLnY78", "Oh8:kdH&FKPAVzLnY78");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, typedScopeCreator0);
      nodeTraversal0.traverse(node0);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString((-1346), "");
      Node node1 = Node.newString(41, "");
      Node node2 = new Node(19, node1, node1, node0, node0);
      nodeTraversal0.traverse(node2);
      assertFalse(node2.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("msg.eval.nonstring");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      nodeTraversal0.traverse(node0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      Node node0 = Node.newString((-1355), "");
      Node node1 = Node.newString(41, "");
      Node node2 = new Node(30, node1, node1, node0, node0);
      Scope scope0 = typedScopeCreator0.createInitialScope(node2);
      nodeTraversal0.traverseAtScope(scope0);
      assertFalse(scope0.isLocal());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString(122, "`X");
      Node node1 = Node.newString("`X", 4095, 36);
      Node node2 = new Node(40, node1, node0, node1, node0);
      nodeTraversal0.traverse(node2);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      Node node0 = Node.newString(93, "");
      Node node1 = compiler0.parseTestCode("");
      Node node2 = new Node(21, node0, node0, node1, node1);
      Scope scope0 = typedScopeCreator0.createInitialScope(node2);
      nodeTraversal0.traverseAtScope(scope0);
      assertEquals(" [testcode] ", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("cm-r/tbFcXwgV");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldBlock(nodeTraversal0, node0, node0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("cm-r/tbFcXwgV");
      Node node1 = new Node(23, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldBlock(nodeTraversal0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("Dk4{'\u00018A<~*o*}H");
      Node node1 = new Node(4, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      nodeTraversal0.traverse(node1);
      assertFalse(node1.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      JSType[] jSTypeArray0 = new JSType[3];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldHookIf(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      JSType[] jSTypeArray0 = new JSType[3];
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        foldConstants0.tryMinimizeIf(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString("REGEXP_TYPE", (-1355), (-1355));
      Node node1 = Node.newString((-2), "REGEXP_TYPE");
      Node node2 = new Node(9, node1, node0, node0, node0, 40, 34);
      foldConstants0.tryMinimizeIf(nodeTraversal0, node2, node2);
      assertEquals(35, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode("cm-r/tbFcXwgV");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldAndOr(nodeTraversal0, scriptOrFnNode0, scriptOrFnNode0, scriptOrFnNode0, scriptOrFnNode0);
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("cm-r/tbFcXwgV", (-301), (-301));
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString((-1355), "");
      Node node1 = Node.newString("");
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node1, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = new Node(98, 1601, 1601);
      Node node1 = Node.newString("JSC_NEGATING_A_NON_NUMBER_ERROR");
      foldConstants0.tryFoldAndOr(nodeTraversal0, node1, node0, node1, node0);
      assertEquals(0, Node.LABEL_ID_PROP);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = new Node(108, 108, 108);
      Node node1 = Node.newString("R#0N%s");
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = new Node(113, 113, 14);
      Node node1 = Node.newString("UP)q[^*?C|s!B&JF");
      foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node1, node0);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(Double.NaN);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(45, node0, node0, node0, 3965, 29);
      foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node1, node0, node1);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      Node node0 = Node.newString(93, "");
      Node node1 = Node.newString(41, "");
      Node node2 = compiler0.parseTestCode("");
      Node node3 = new Node(21, node0, node1, node2, node2);
      Scope scope0 = typedScopeCreator0.createInitialScope(node3);
      nodeTraversal0.traverseAtScope(scope0);
      assertFalse(scope0.isLocal());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("}A{_JaZ4Sqm~0S\u0000C'9");
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      Node node1 = Node.newString(21, "}A{_JaZ4Sqm~0S\u0000C'9");
      foldConstants0.tryFoldLeftChildAdd(nodeTraversal0, node1, node1, node0, node1);
      assertEquals(11, Node.USES_PROP);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString((-1355), "");
      Node node1 = Node.newString("");
      foldConstants0.tryFoldAdd(nodeTraversal0, (Node) null, node1, node0, (Node) null);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber(0.0, 0, 1169);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown arithmetic operator
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("`O9cv]4ZH 6s", 939, 939);
      Node node1 = compiler0.parseSyntheticCode(":8ZDQI),7<R", "`O9cv]4ZH 6s");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldAdd(nodeTraversal0, node0, node1, node0, node0);
      assertEquals(12, Node.REGEXP_PROP);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString("Lf3aN#N(EHEi| T", 13, 13);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString("var t;", 2748, 2748);
      foldConstants0.tryFoldArithmetic(nodeTraversal0, node0, node0, node0, node0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inferJSDocInfo0, typedScopeCreator0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseSyntheticCode("", "UP)q[^*?C|s!B&JF");
      Node node1 = Node.newNumber((double) 2, 3, 15);
      foldConstants0.tryFoldArithmetic(nodeTraversal0, node1, node1, node0, node0);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString(114, "JSC_INDEX_OUT_OF_BOUNDS_ERROR");
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      Node node1 = Node.newNumber(1976.02, 29, 37);
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node1, node0, node1);
      assertEquals(0, Node.NON_SPECIALCALL);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber(0.0, 0, 40);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown bitwise operator
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber((-339.9), 0, 1169);
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(12, Node.REGEXP_PROP);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("UP){[^*?C|s!B&JF");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newNumber((double) 48);
      foldConstants0.tryFoldShift(nodeTraversal0, node1, node1, node0, node0);
      assertFalse(node1.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber((-638.576));
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber((double) 2);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Unknown shift operator: number
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString((-1355), "");
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString(122, "`X");
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber((double) 2228, 2228, 2228);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertFalse(node0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseTestCode("QL<$G");
      Node node1 = new Node(40, node0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node1, node1, node0, node1);
      assertEquals(27, Node.SPECIALCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString((-1355), "");
      Node node1 = Node.newString(41, "");
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node1, node1);
      assertEquals(17, Node.TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString(110, "");
      Node node1 = new Node(42, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node0, node0);
      assertEquals(48, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString(43, "{9]F*WKSv[WU");
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(36, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString(44, "9]F*WS#GU");
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = new Node(122);
      Node node1 = Node.newString(270, "JSC_INDEX_OUT_OF_BOUNDS_ERROR");
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldComparison(nodeTraversal0, node1, node0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString(42, "", 42, 42);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(36, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("cm-r/tbFcXwgV", (-301), (-301));
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(31, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber((double) 0, 0, 2228);
      Node node1 = Node.newString("");
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node1, node0);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString(38, "LP");
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString(47, "rx#^8Dp%U';>#j}");
      foldConstants0.tryFoldStringIndexOf(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(7, Node.LOCAL_PROP);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("cm-r/tbFcXwgV");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldStringJoin(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("cm-r/tbFcXwgV");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldGetElem(nodeTraversal0, node0, node0, node0, node0);
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber((double) (-2237), (-2237), (-2237));
      foldConstants0.tryFoldGetProp(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(2, Node.BREAK_PROP);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("length", 945, (-1631));
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldGetProp(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseTestCode("cm-r/tFcXwgV");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node0, node0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString((-1355), "REGEXP+TYPE");
      Node node1 = Node.newString((-2), "REGEXP+TYPE");
      Node node2 = new Node(9, node1, node0, node0, node0, 40, 34);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node2, node2);
      assertEquals(7, Node.LOCAL_PROP);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      JSType[] jSTypeArray0 = new JSType[3];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node0, node0);
      assertEquals(33, Node.NAME_PROP);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[6];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node0, node0);
      assertEquals(1, Node.PROPERTY_FLAG);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = FoldConstants.containsUnicodeEscape("`O9cv]4ZH 6s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "\\u";
      boolean boolean0 = FoldConstants.containsUnicodeEscape(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString("REGEXP_TYPE", (-1355), (-1355));
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldWhile(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(113, 113, 14);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldWhile(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString((-1355), "REGEXP+TYPE");
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldFor(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString((-1355), "");
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldDo(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString(114, "JSC_INDEX_OUT_OF_BOUNDS_ERROR");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldDo(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseSyntheticCode("ENUM_NEXT", "1");
      nodeTraversal0.traverse(node0);
      assertEquals(1, nodeTraversal0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newString(43, "{9]F*WKSv[WU");
      // Undeclared exception!
      try { 
        foldConstants0.tryMinimizeCondition(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      Node node0 = new Node(102, 1526, 1526);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(101, nodeArray0);
      foldConstants0.tryMinimizeCondition(nodeTraversal0, node1, node0);
      assertEquals(2, Node.POST_FLAG);
  }
}
