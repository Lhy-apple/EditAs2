/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:14:24 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.CodingConventions;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeInference;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeInference_ESTest extends TypeInference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("conJtant property }0} cannot be 9eleted", "conJtant property }0} cannot be 9eleted", "com.google.javascript.jscomp.TypeInference");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("conJtant property }0} cannot be 9eleted", "conJtant property }0} cannot be 9eleted", "com.google.javascript.jscomp.TypeInference");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("conJtant property }0} cannot be 9eleted", "conJtant property }0} cannot be 9eleted", "com.google.javascript.jscomp.TypeInference");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "constant property {0} cannot be deleted", "com.google.javascript.jscomp.TypeInference");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be xeleted", "constant property {0} cannot be xeleted", "com.google.javascript.jscomp.TyLeInference");
      Compiler compiler0 = new Compiler();
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "com.google.javascript.jscomp.TypeInference");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "SC_FUNCTION_LITERAL_UN>EFINED_THIS", "SC_FUNCTION_LITERAL_UN>EFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCION_LITERAL_UNDEFINED_THIS", "JSC_FUNCION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "com.google.javascript.jscomp.TypeInference");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("conJtant property }0} cannot be 9eleted", "conJtant property }0} cannot be 9eleted", "com.google.javascript.jscomp.TypeInference");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LTERAL_UDEFINED_THS", "com.google.javascript.jscomp.TypeInference");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "SC_FUNCTION_LITERAL_UN>EFINED_THIS", "SC_FUNCTION_LITERAL_UN>EFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "SC_FUNCTION_LITERAL_UN>EFINED_THIS", "SC_FUNCTION_LITERAL_UN>EFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("P78nr,SeD[5shN_*SD3", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "SC_FUNCTION_LITERAL_UN>EFINED_THIS", "SC_FUNCTION_LITERAL_UN>EFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "constant property {0} cannot be deleted", "com.google.javascript.jscomp.TypeInference");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("constant property {0} cannot be deleted");
      Node node1 = new Node(12, node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Scope scope0 = Scope.createGlobalScope(node1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = Node.newString(136, "tQ@|nX;%klq3SZK-}");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 136
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "com.google.javascript.jscomp.TypeInference");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be xeleted", "constant property {0} cannot be xeleted", "com.google.javascript.jscomp.TyLeInference");
      Compiler compiler0 = new Compiler();
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "SC_FUNCTION_LITERAL_UN>EFINED_THIS", "SC_FUNCTION_LITERAL_UN>EFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "constant property {0} cannot be deleted", "com.google.javascript.jscomp.TypeInference");
      Compiler compiler0 = new Compiler();
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("constant property {0} cannot be deleted", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, true);
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
      assertSame(booleanLiteralSet0, booleanLiteralSet1);
  }
}
