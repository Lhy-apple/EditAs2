/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:16:49 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCommandLineRunner;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.PhaseOptimizer;
import com.google.protobuf.ByteString;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCommandLineRunner_ESTest extends AbstractCommandLineRunner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Compiler compiler0 = commandLineRunner0.createCompiler();
      assertNotNull(compiler0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      commandLineRunner0.setRunOptions(compilerOptions0);
      assertFalse(compilerOptions0.removeEmptyFunctions);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Compiler compiler0 = commandLineRunner0.getCompiler();
      assertNull(compiler0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      // Undeclared exception!
      try { 
        commandLineRunner0.run();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      try { 
        AbstractCommandLineRunner.createJsModules(list0, list0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected 2-4 colon-delimited parts in module spec: java.class
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.createJsModules((List<String>) null, (List<String>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.createJsModules(stack0, stack0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("-:5:,-/i+p=<|Fj");
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.createJsModules(stack0, (List<String>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("rYP:zLQ7!c\"");
      try { 
        AbstractCommandLineRunner.createJsModules(stack0, stack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid js file count 'zLQ7!c\"' for module: rYP
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("Expected module wrapper to have <name>:<wrapper> format: ");
      try { 
        AbstractCommandLineRunner.createJsModules(stack0, stack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid module name: 'Expected module wrapper to have <name>'
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.parseModuleWrappers((List<String>) null, (JSModule[]) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      JSModule[] jSModuleArray0 = new JSModule[0];
      try { 
        AbstractCommandLineRunner.parseModuleWrappers(list0, jSModuleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected module wrapper to have <name>:<wrapper> format: java.class
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSModule[] jSModuleArray0 = new JSModule[1];
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.parseModuleWrappers(linkedList0, jSModuleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSModule[] jSModuleArray0 = new JSModule[0];
      Map<String, String> map0 = AbstractCommandLineRunner.parseModuleWrappers(linkedList0, jSModuleArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push("^T Od6+V3C]!QAA:6");
      JSModule[] jSModuleArray0 = new JSModule[0];
      try { 
        AbstractCommandLineRunner.parseModuleWrappers(linkedList0, jSModuleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown module: '^T Od6+V3C]!QAA'
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.writeOutput((PrintStream) null, compiler0, "n)D8O!gfL}?OO_O;", "n)D8O!gfL}?OO_O;", "]5/w#3Nzy]!H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteString.Output byteString_Output0 = ByteString.newOutput(39);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteString_Output0, true);
      AbstractCommandLineRunner.writeOutput(mockPrintStream0, (Compiler) null, "", "", "");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Compiler compiler0 = new Compiler();
      AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, "H*Wo.S{#Kb30|ed", ".js", "");
      assertEquals("H*Wo.S{#Kb30|ed.js\n", byteArrayOutputStream0.toString());
      assertEquals(19, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("b{rMt+vb0R=.");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.createDefineReplacements(stack0, compilerOptions0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // --define flag syntax invalid: b{rMt+vb0R=.
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("=;F?;[^0I|)xAP$,");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.createDefineReplacements(stack0, compilerOptions0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // --define flag syntax invalid: =;F?;[^0I|)xAP$,
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      AbstractCommandLineRunner.createDefineReplacements(list0, compilerOptions0);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
  }
}
