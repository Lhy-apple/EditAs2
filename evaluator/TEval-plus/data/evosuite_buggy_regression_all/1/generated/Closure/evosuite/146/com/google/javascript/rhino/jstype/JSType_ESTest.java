/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:18:02 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isResolved();
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEmptyType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      boolean boolean0 = instanceObjectType0.isStringValueType();
      assertTrue(noType0.isEmptyType());
      assertFalse(boolean0);
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      boolean boolean0 = stringType0.isBooleanObjectType();
      assertFalse(stringType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      nullType0.findPropertyType("Unknown class name");
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      JSType.TypePair jSType_TypePair0 = unknownType0.getTypesUnderEquality(unknownType0);
      ParameterizedType parameterizedType0 = new ParameterizedType((JSTypeRegistry) null, unknownType0, jSType_TypePair0.typeA);
      parameterizedType0.getJSDocInfo();
      assertFalse(parameterizedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      String string0 = numberType0.toDebugHashCodeString();
      assertFalse(numberType0.isResolved());
      assertEquals("{1}", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      boolean boolean0 = stringType0.isRegexpType();
      assertFalse(stringType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        numberType0.isString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      boolean boolean0 = unknownType0.isDateType();
      assertFalse(boolean0);
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      boolean boolean0 = unknownType0.isStringObjectType();
      assertFalse(unknownType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(496, 496, 1184);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, (JSType) null);
      boolean boolean0 = arrowType0.matchesObjectContext();
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isEmptyType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      boolean boolean0 = stringType0.isNumberObjectType();
      assertFalse(stringType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEmptyType());
      assertFalse(voidType0.isUnionType());
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderShallowEquality(functionPrototypeType0);
      voidType0.testForEquality(jSType_TypePair0.typeA);
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        nullType0.testForEquality(stringType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      numberType0.unboxesTo();
      assertFalse(numberType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      unknownType0.canTestForEqualityWith(stringType0);
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      boolean boolean0 = templateType0.isConstructor();
      assertFalse(boolean0);
      assertFalse(templateType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      boolean boolean0 = numberType0.isArrayType();
      assertFalse(boolean0);
      assertFalse(numberType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) unknownType0, false, jSTypeArray0);
      boolean boolean0 = functionType0.isBooleanValueType();
      assertFalse(functionType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      boolean boolean0 = stringType0.canBeCalled();
      assertFalse(boolean0);
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        numberType0.isNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      boolean boolean0 = unknownType0.isTemplateType();
      assertFalse(boolean0);
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      boolean boolean0 = stringType0.isOrdinaryFunction();
      assertFalse(boolean0);
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoType noType0 = new NoType(jSTypeRegistry0);
      boolean boolean0 = noType0.isNamedType();
      assertTrue(noType0.isEmptyType());
      assertFalse(boolean0);
      assertFalse(noType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      stringType0.matchesInt32Context();
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      JSType.TypePair jSType_TypePair0 = unknownType0.getTypesUnderEquality(unknownType0);
      ParameterizedType parameterizedType0 = new ParameterizedType((JSTypeRegistry) null, unknownType0, jSType_TypePair0.typeA);
      boolean boolean0 = parameterizedType0.isInterface();
      assertFalse(boolean0);
      assertFalse(parameterizedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      boolean boolean0 = numberType0.isInstanceType();
      assertFalse(numberType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "#r@B,tvSk*u;Z@=");
      ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, errorFunctionType0);
      boolean boolean0 = parameterizedType0.isCheckedUnknownType();
      assertFalse(parameterizedType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertFalse(booleanType0.isResolved());
      
      booleanType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertTrue(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      boolean boolean0 = stringType0.isTheObjectType();
      assertFalse(stringType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.matchesUint32Context();
      assertFalse(allType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      JSType.TypePair jSType_TypePair0 = unknownType0.getTypesUnderEquality(stringType0);
      IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, jSType_TypePair0.typeB);
      ParameterizedType parameterizedType0 = new ParameterizedType((JSTypeRegistry) null, indexedType0, jSType_TypePair0.typeA);
      boolean boolean0 = parameterizedType0.isEnumType();
      assertFalse(boolean0);
      assertFalse(parameterizedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "$u-{");
      boolean boolean0 = errorFunctionType0.isNumberValueType();
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      stringType0.forgiveUnknownNames();
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      stringType0.clearResolved();
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MW2B6P");
      boolean boolean0 = errorFunctionType0.isFunctionPrototypeType();
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noObjectType0, noObjectType0, true);
      JSType jSType0 = functionPrototypeType0.getLeastSupertype(noObjectType0);
      assertFalse(jSType0.isResolved());
      assertFalse(noObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      JSType.TypePair jSType_TypePair0 = unknownType0.getTypesUnderInequality(unknownType0);
      ParameterizedType parameterizedType0 = new ParameterizedType((JSTypeRegistry) null, unknownType0, jSType_TypePair0.typeB);
      boolean boolean0 = unknownType0.isImplicitPrototype(parameterizedType0);
      assertTrue(boolean0);
      assertFalse(parameterizedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = JSType.isEquivalent(voidType0, voidType0);
      assertFalse(voidType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = JSType.isEquivalent(voidType0, (JSType) null);
      assertFalse(boolean0);
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      boolean boolean0 = stringType0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      boolean boolean0 = unknownType0.equals(stringType0);
      assertFalse(boolean0);
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.findPropertyType("Unknown class name");
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      boolean boolean0 = stringType0.canAssignTo(numberType0);
      assertFalse(boolean0);
      assertFalse(numberType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.add((JSType) stringType0);
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedList0);
      boolean boolean0 = unionType0.canAssignTo(stringType0);
      assertFalse(unionType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ObjectType objectType0 = booleanType0.dereference();
      assertFalse(objectType0.isResolved());
      assertNotNull(objectType0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      AllType allType0 = new AllType((JSTypeRegistry) null);
      stringType0.getTypesUnderInequality(allType0);
      assertFalse(allType0.isResolved());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      stringType0.getTypesUnderInequality(unknownType0);
      assertFalse(unknownType0.isResolved());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, unknownType0, "A");
      stringType0.getTypesUnderInequality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
      assertFalse(jSType0.isEnumElementType());
      
      voidType0.testForEquality(jSType0);
      assertFalse(jSType0.isResolved());
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "$u-{");
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = functionPrototypeType0.getLeastSupertype(booleanType0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.testForEquality(jSType0);
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.canTestForShallowEqualityWith(unknownType0);
      assertFalse(nullType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      boolean boolean0 = booleanType0.canTestForShallowEqualityWith(stringType0);
      assertFalse(booleanType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderInequality(voidType0);
      boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(noType0);
      assertTrue(noType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MW2B6P");
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      JSType jSType0 = functionPrototypeType0.getLeastSupertype(unionType0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      JSType jSType0 = JSType.getLeastSupertype((JSType) allType0, (JSType) allType0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      errorFunctionType0.getGreatestSubtype(recordType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      NoType noType1 = (NoType)voidType0.getGreatestSubtype(noType0);
      assertFalse(noType1.isResolved());
      assertFalse(noType1.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      AllType allType0 = new AllType((JSTypeRegistry) null);
      JSType jSType0 = numberType0.getGreatestSubtype(allType0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType((JSTypeRegistry) null, unknownType0);
      JSType jSType0 = proxyObjectType0.getGreatestSubtype(unknownType0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      // Undeclared exception!
      try { 
        booleanType0.getGreatestSubtype(unknownType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = booleanType0.getGreatestSubtype(booleanType0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = booleanType0.autoboxesTo();
      JSType jSType1 = booleanType0.getLeastSupertype(jSType0);
      Node node0 = Node.newString("", 0, 0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, jSType0);
      JSType jSType2 = JSType.getGreatestSubtype(jSType1, (JSType) arrowType0);
      assertTrue(jSType2.isEmptyType());
      assertFalse(jSType2.isResolved());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[6];
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.REGEXP_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      jSTypeNativeArray0[3] = jSTypeNativeArray0[2];
      jSTypeNativeArray0[4] = jSTypeNativeArray0[3];
      jSTypeNativeArray0[5] = jSTypeNativeArray0[4];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      JSType jSType1 = recordType0.getGreatestSubtype(jSType0);
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType1.isResolved());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = voidType0.getGreatestSubtype(numberType0);
      assertTrue(jSType0.isEmptyType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      errorFunctionType0.getGreatestSubtype(voidType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = voidType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      JSType jSType0 = stringType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
      // Undeclared exception!
      try { 
        unknownType0.getTypesUnderEquality(unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.UnionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      voidType0.getTypesUnderEquality(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Unknown class name");
      enumElementType0.getTypesUnderEquality(voidType0);
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "[.>#");
      ObjectType objectType0 = errorFunctionType0.getInstanceType();
      JSType jSType0 = errorFunctionType0.getLeastSupertype(objectType0);
      objectType0.getTypesUnderInequality(jSType0);
      assertFalse(jSType0.isResolved());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      voidType0.getTypesUnderInequality(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.getTypesUnderInequality(noType0);
      assertFalse(noType0.isResolved());
      assertTrue(noType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      unknownType0.getTypesUnderShallowInequality(unionType0);
      assertFalse(unionType0.isResolved());
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      JSType.TypePair jSType_TypePair0 = nullType0.getTypesUnderShallowInequality(unknownType0);
      assertFalse(nullType0.isVoidType());
      assertFalse(unknownType0.isNullType());
      
      jSType_TypePair0.typeA.getTypesUnderShallowInequality(nullType0);
      assertFalse(nullType0.isResolved());
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ObjectType objectType0 = voidType0.dereference();
      assertNotNull(objectType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderInequality(objectType0);
      assertFalse(objectType0.hasCachedValues());
      
      jSType_TypePair0.typeA.getTypesUnderShallowInequality(voidType0);
      assertTrue(objectType0.isEmptyType());
      assertFalse(objectType0.isResolved());
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      voidType0.getTypesUnderShallowInequality(unknownType0);
      assertFalse(unknownType0.isResolved());
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      boolean boolean0 = unknownType0.differsFrom(stringType0);
      assertFalse(unknownType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      boolean boolean0 = numberType0.differsFrom(stringType0);
      assertTrue(boolean0);
      assertFalse(numberType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      boolean boolean0 = nullType0.differsFrom(unknownType0);
      assertFalse(nullType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      ObjectType objectType0 = instanceObjectType0.getImplicitPrototype();
      boolean boolean0 = objectType0.differsFrom(objectType0);
      assertFalse(objectType0.isResolved());
      assertTrue(noType0.isEmptyType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = errorFunctionType0.isSubtype(allType0);
      assertTrue(boolean0);
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      EmptyScope emptyScope0 = new EmptyScope();
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      assertFalse(errorFunctionType0.isResolved());
      
      errorFunctionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
      assertTrue(errorFunctionType0.isResolved());
  }
}
