/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:12:57 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckAccidentalSemicolon;
import com.google.javascript.jscomp.CheckGlobalThis;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.GatherRawExports;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.GroupVariableDeclarations;
import com.google.javascript.jscomp.InferJSDocInfo;
import com.google.javascript.jscomp.LineNumberCheck;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SemanticReverseAbstractInterpreter;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeCheck_ESTest extends TypeCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkMissingReturn, compilerOptions0.checkGlobalNamesLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(35, node0, node0, node0, node0, 39, 1);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(1, Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(51, node0, node0, node0, node0, 6, 47);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "'&|^k6vmhyP.mx");
      Node node1 = new Node(2, node0, node0, node0, node0, 44, 19);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.brokenClosureRequiresLevel, compilerOptions0.checkMissingGetCssNameLevel);
      typeCheck0.processForTesting(node0, node0);
      // Undeclared exception!
      try { 
        typeCheck0.process(node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      Node node1 = new Node(51, node0, node0, node0, node0, 6, 47);
      typeCheck0.processForTesting(node0, node0);
      typeCheck0.process((Node) null, node0);
      assertEquals(36, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      Node node1 = new Node(37, node0, node0, node0, node0, 6, 47);
      typeCheck0.processForTesting(node0, node0);
      // Undeclared exception!
      try { 
        typeCheck0.process(node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      Node node1 = new Node(29, node0, node0, node0, node0, 6, 47);
      typeCheck0.processForTesting(node0, node0);
      // Undeclared exception!
      try { 
        typeCheck0.processForTesting(node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkUnreachableCode, compilerOptions0.brokenClosureRequiresLevel);
      // Undeclared exception!
      try { 
        typeCheck0.processForTesting(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "could not determine the type of this expression");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkUndefinedProperties, compilerOptions0.checkRequires);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(86, node0, node0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.brokenClosureRequiresLevel, compilerOptions0.brokenClosureRequiresLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(118, node0, node0, node0, node0, 1, 29);
      node1.detachChildren();
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(36, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      node0.addSuppression("@g");
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("i|w~?WXw;t ", "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkMissingGetCssNameLevel, compilerOptions0.checkGlobalThisLevel);
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);
      Node node1 = new Node(4, node0, node0, node0, node0, 15, 34);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode((String) null, "'&|^k6vmh(yPdmx");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkFunctions, compilerOptions0.checkMissingReturn);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(5, 49, 136);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkRequires);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(6, node0, node0, node0, node0, (-24), 2);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("M_6Bvb~1Mh~", "f\"ay.C.B$o@D}b2m");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.reportMissingOverride, compilerOptions0.checkUndefinedProperties);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(7, node0, node0, node0, node0, (-3), 0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("jUf}:O/=", "M\":ini");
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node1 = new Node(8, node0, node0, node0, node0, 438, 2);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(2, loggerErrorManager0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_HIDDEN_SUPERCLASS_PROPERTY", "IP:jzR4j,M");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkGlobalThisLevel, compilerOptions0.checkMissingGetCssNameLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(9, node0, node0, node0, node0, 1, 78);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("// Input %num%");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkFunctions, compilerOptions0.checkMissingReturn);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(10, node0, node0, node0, node0, 28, 1);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkShadowVars, compilerOptions0.checkUnreachableCode);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(11, node0, node0, node0, node0, 12, 4);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "'&|^k6vmhyP.mx");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(12, node0, node0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(20, Node.FINALLY_PROP);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(13, node0, node0, node0, node0, 6, 47);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(10, Node.VARS_PROP);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "'&|^k6vmh(yPdmx");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkFunctions, compilerOptions0.checkMissingReturn);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(14, node0, node0, node0, node0, 49, 24);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(14, Node.DEFAULT_PROP);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "could not determine the type of this expression");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkMissingGetCssNameLevel, compilerOptions0.checkMissingGetCssNameLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(15, node0, node0, node0, node0, 1386, 122);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(33, Node.NAME_PROP);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, ":init");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkRequires, compilerOptions0.checkMissingGetCssNameLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(16, node0, node0, node0, node0, (-720), 40);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(19, Node.LABEL_PROP);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("jUf}:O/=", ":init");
      Node node1 = new Node(17, node0, node0, node0, node0, (-1576), 14);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(6, Node.TEMP_PROP);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "3w_lI");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.reportUnknownTypes, compilerOptions0.checkUndefinedProperties);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(18, node0, node0, node0, node0, 39, 1);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(1, loggerErrorManager0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "deterministic instanceof yields false");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkShadowVars, compilerOptions0.checkShadowVars);
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
      Node node1 = new Node(19, node0, node0, node0, node0, 3, 12);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkUnreachableCode, compilerOptions0.checkGlobalThisLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(20, node0, node0, node0, node0, 3, 18);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(23, node0, node0, node0, node0, (-1431), 42);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "// Input %num%");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkRequires, compilerOptions0.checkMissingGetCssNameLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(24, node0, node0, node0, node0, 2696, (-1));
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(25, node0, node0, node0, node0, 4095, 62);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "could not determine the type of this expression");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkUnreachableCode, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(26, node0, node0, node0, node0, 16, 140);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertFalse(node0.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "'&|^k6vmh'yP.mx");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMissingReturn);
      Node node1 = new Node(27, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(10, Node.VARS_PROP);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(28, node0, node0, node0, node0, 6, 47);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(23, Node.VARIABLE_PROP);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(30, node0, node0, node0, node0, 6, 47);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "deterministic instanceof yields false");
      CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, compilerOptions0.brokenClosureRequiresLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
      Node node1 = new Node(31, node0, node0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(32, 1, 18);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("collection too large", "could not determine the type of this expression");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkRequires);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(33, node0, node0, node0, node0, 7, (-1));
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BLOCK [sourcename: java.lang.String@0000000781] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(34, 14, 1);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(0, loggerErrorManager0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(36, node0, node0, node0, node0, 42, (-483));
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(1, loggerErrorManager0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(37, node0, node0, node0, node0, 6, 47);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "'&|^k6vmh'yP.mx");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkRequires, compilerOptions0.checkMissingReturn);
      Node node1 = Node.newNumber(0.0, 14, 30);
      Node node2 = new Node((-2163), node0, node0, node0, node1, 42, 4);
      Scope scope0 = typeCheck0.processForTesting(node1, node0);
      assertEquals(33, scope0.getVarCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = Node.newString("");
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(41, 125, 0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(15, Node.CASEARRAY_PROP);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(42, 1, 18);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkRequires, compilerOptions0.checkUnreachableCode);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(43, node0, node0, node0, node0, (-1), 138);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(34, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode((String) null, "could not determine the type of this expression");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkUndefinedProperties, compilerOptions0.checkGlobalNamesLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(44, 115, 4095);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(31, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(45, node0, node0, node0, node0, 6, 47);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(46, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(46, node0, node0, node0, node0, 6, 47);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(35, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkGlobalThisLevel, compilerOptions0.checkMissingGetCssNameLevel);
      Node node1 = new Node(47, node0, node0, node0, node0, 8, 3124);
      typeCheck0.visit((NodeTraversal) null, node1, node0);
      assertEquals(49, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(48, node0, node0, node0, node0, 6, 47);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(0, loggerErrorManager0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(49, node0, node0, node0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(49, node1.getType());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(50, node0, node0, node0, node0, 6, 47);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(52, node0, node0, node0, node0, 6, 47);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(55, 1, 18);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode((String) null, "// Input %num%");
      CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, compilerOptions0.brokenClosureRequiresLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
      Node node0 = new Node(60, 4, 7);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("collection too large", "could not determine the type of this expression");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkGlobalNamesLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(63, node0, node0, node0, node0, 983, 23);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(40, Node.BRACELESS_TYPE);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(81, 1, 18);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("// Input %num%");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkGlobalThisLevel, compilerOptions0.checkMissingReturn);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(84, node0, node0, node0, node0, (-1316), 119);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_HIDDEN_SUPERCLASS_PROPERTY", "IP:jzR4j,M");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkGlobalThisLevel, compilerOptions0.checkRequires);
      Node node1 = new Node(43, node0, node0, node0, node0, 124, 86);
      Scope scope0 = typeCheck0.processForTesting(node0, node0);
      assertEquals(33, scope0.getVarCount());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkUnreachableCode, compilerOptions0.checkRequires);
      Node node1 = new Node(93, node0, node0, node0, node0, 29, 172);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("B\"iiRT}6<rit'2cC|a", "B\"iiRT}6<rit'2cC|a");
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(94, node0, node0, node0, node0, 25, (-1460));
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(1, loggerErrorManager0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "Lx|LRa}aN})v2n!gq)");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkShadowVars, compilerOptions0.reportMissingOverride);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(95, node0, node0, node0, node0, 2, 19);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "'&|^k6vmh(yPdmx");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkFunctions, compilerOptions0.checkMissingReturn);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(96, node0, node0, node0, node0, 49, 24);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("&F", "");
      CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, compilerOptions0.checkGlobalNamesLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
      Node node0 = new Node(98, 22, 21);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "// Input %num%");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkRequires, compilerOptions0.checkMissingGetCssNameLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(100, node0, node0, node0, node0, 26, 5);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(40, Node.BRACELESS_TYPE);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkShadowVars, compilerOptions0.reportMissingOverride);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(101, node0, node0, node0, node0, 2, 19);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(47, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(102, node0, node0, node0, node0, 1, (-3));
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(2, Node.RIGHT);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "could not determine the type of this expression");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.brokenClosureRequiresLevel, compilerOptions0.checkGlobalThisLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(104, node0, node0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "'&|^k6vmh(yPdmx");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkFunctions, compilerOptions0.checkMissingReturn);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = Node.newString(108, "xI!i/A Ap/G8$", 3, (-62));
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "'&|^k6vmhyP.mx");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMissingReturn);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(109, node0, node0, node0, node0, 44, 142);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(110, node0, node0, node0, node0, 105, 1);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(27, Node.SPECIALCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "deterministic instanceof yields false");
      CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, compilerOptions0.brokenClosureRequiresLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
      Node node1 = new Node(111, (-2142), 7);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("i|w~?WXw;t ", "");
      Node node1 = new Node(112, node0, node0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
      GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(46, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "Lx|LRa}aN})v2n!gq)");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkShadowVars, compilerOptions0.reportMissingOverride);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(113, node0, node0, node0, node0, 2, 19);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(21, Node.LOCALCOUNT_PROP);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "could not determine the type of this expression");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkShadowVars);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = Node.newString(114, "!RhIX|`]*c", 36, 126);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("", "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.reportMissingOverride, compilerOptions0.reportMissingOverride);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(116, node0, node0, node0, node0, (-55), 22);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(1, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "// Input %num%");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkRequires, compilerOptions0.checkMissingGetCssNameLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(117, node0, node0, node0, node0, 26, 5);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(46, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(119, node0, node0, node0, node0, 6, 47);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertFalse(node0.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode((String) null, "could not determine the type of this expression");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkUnreachableCode, compilerOptions0.checkRequires);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = Node.newString(120, "xI!i/A Ap/G8$", 0, 48);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "// Input %num%");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkRequires, compilerOptions0.checkMissingGetCssNameLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(122, node0, node0, node0, node0, 26, 5);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(124, 64, 32);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertFalse(node1.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("B\"iiRT}6<rit'2cC|a", "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkGlobalThisLevel, compilerOptions0.checkGlobalNamesLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(127, node0, node0, node0, node0, (-2162), (-885));
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(0, loggerErrorManager0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "could not determine the type of this expression");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkRequires, compilerOptions0.checkUnreachableCode);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(128, 172, 125);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(134, node0, node0, node0, node0, 6, 47);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(1, loggerErrorManager0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("B\"iiRT}6<rit'2cC|a", "B\"iiRT}6<rit'2cC|a");
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, checkLevel0, checkLevel0);
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      Node node1 = new Node(135, node0, node0, node0, node0, 4, 8);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(1, loggerErrorManager0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "&F");
      CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, compilerOptions0.checkRequires);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
      Node node1 = new Node(136, node0, node0, node0, 1085, 44);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("", "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkGlobalNamesLevel, compilerOptions0.checkUnreachableCode);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(138, node0, node0, node0, node0, (-50), 22);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertTrue(compiler0.hasErrors());
      assertEquals(0, loggerErrorManager0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "could not determine the type of this expression");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkShadowVars, compilerOptions0.checkRequires);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(139, 172, 125);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkRequires);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(140, node0, node0, node0, node0, 111, 44);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "'&|^k6vmh'yP.mx");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Node node1 = new Node(143, node0, node0, node0, node0, 16, 1193);
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "FO");
      Node node1 = new Node(145, node0, node0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
      GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0, (ScopeCreator) null);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkMethods, compilerOptions0.reportUnknownTypes);
      Node node0 = Node.newString(146, "", 7, (-2795));
      NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, loggerErrorManager0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("B\"iiRT}6<rit'2cC|a", "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkGlobalThisLevel, compilerOptions0.checkGlobalNamesLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(147, node0, node0, node0, node0, 127, 1393);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("", "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkMissingReturn, compilerOptions0.checkShadowVars);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(148, node0, node0, node0, node0, 4, 48);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkProvides, compilerOptions0.checkFunctions);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(149, node0, node0, node0, node0, (-55), 22);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("jUf}:O/=", "Lx|LRa}aN})v2On!gq)");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkShadowVars, compilerOptions0.reportMissingOverride);
      InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, inferJSDocInfo0);
      Node node1 = new Node(151, 23, (-2));
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 151
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.brokenClosureRequiresLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(152, node0, node0, node0, node0, 0, 9);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(40, Node.BRACELESS_TYPE);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode((String) null, "could not determine the type of this expression");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkUnreachableCode, compilerOptions0.checkUnreachableCode);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(120, 115, 4095);
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkUndefinedProperties, compilerOptions0.checkGlobalThisLevel);
      VarCheck varCheck0 = new VarCheck(compiler0, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.reportUnknownTypes, compilerOptions0.checkUnreachableCode);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(118, node0, node0, node0, node0, 1, 29);
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node1, node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("i|w~?WXw;t ", "");
      Node node1 = new Node(118, node0, node0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
      GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SCRIPT 1 [sourcename: java.lang.String@0000000779] [synthetic: 1] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("// Input %num%");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkFunctions, compilerOptions0.checkMissingReturn);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(0, 3, (-3));
      node1.addSuppression("!fTr&I$'Y5L");
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkMethods);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(29, node0, node0, node0, node0, 6, 47);
      Scope scope0 = typeCheck0.processForTesting(node0, node0);
      nodeTraversal0.traverseAtScope(scope0);
      assertEquals(6, nodeTraversal0.getLineNumber());
      
      double double0 = typeCheck0.getTypedPercent();
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.parseSyntheticCode((String) null, "");
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      double double0 = typeCheck0.getTypedPercent();
      assertEquals(0.0, double0, 0.01);
  }
}
