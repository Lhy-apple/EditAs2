/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:15:58 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.InlineGetters;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MethodCompilerPass_ESTest extends MethodCompilerPass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      // Undeclared exception!
      try { 
        inlineGetters0.process((Node) null, (Node) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(34, 34, 34);
      Node node1 = new Node(35, node0, node0, node0, 23, 3037);
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      // Undeclared exception!
      try { 
        inlineGetters0.process(node1, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = new Node((-977));
      Node node2 = new Node(33, node1, node0, node0, 26, 20);
      InlineGetters inlineGetters0 = new InlineGetters((AbstractCompiler) null);
      // Undeclared exception!
      try { 
        inlineGetters0.process(node2, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Node node0 = new Node(64);
      Node node1 = new Node(64, node0, node0, node0, 42, 2);
      InlineGetters inlineGetters0 = new InlineGetters((AbstractCompiler) null);
      // Undeclared exception!
      try { 
        inlineGetters0.process(node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.MethodCompilerPass");
      Node node1 = new Node(1, node0, node0, node0, 32, 2);
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      inlineGetters0.process(node0, node0);
      assertEquals(39, Node.EMPTY_BLOCK);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(64);
      Node node1 = new Node(2, node0, node0, node0, (-2), 14);
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      // Undeclared exception!
      try { 
        inlineGetters0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
