/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:16:57 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.RenameVars;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.HashMap;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RenameVars_ESTest extends RenameVars_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      VariableMap variableMap0 = VariableMap.fromMap(hashMap0);
      char[] charArray0 = new char[1];
      CompilerOptions compilerOptions0 = compiler0.options_;
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, variableMap0, charArray0, compilerOptions0.stripTypePrefixes);
      Node node0 = Node.newNumber((-1761.95797));
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("i6", (CompilerInput) null);
      renameVars0.process(node0, node0);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      RenameVars renameVars0 = new RenameVars(compiler0, "Upo}$u$li", true, true, true, (VariableMap) null, (char[]) null, compilerOptions0.stripNameSuffixes);
      VariableMap variableMap0 = renameVars0.getVariableMap();
      assertNotNull(variableMap0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      RenameVars renameVars0 = new RenameVars(compiler0, "Upo}$u$li", true, true, true, (VariableMap) null, (char[]) null, compilerOptions0.stripTypePrefixes);
      RenameVars.Assignment renameVars_Assignment0 = renameVars0.new Assignment((String) null, (CompilerInput) null);
      renameVars_Assignment0.setNewName("4\"Zg@52hsn*Z8*<Am}q");
      // Undeclared exception!
      try { 
        renameVars_Assignment0.setNewName((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
      Node node0 = compiler0.parseTestCode("fH");
      RenameVars renameVars0 = new RenameVars(compiler0, "", false, true, false, (VariableMap) null, (char[]) null, compilerOptions0.aliasableStrings);
      renameVars0.process(node0, node0);
      assertEquals(13, Node.CASES_PROP);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.options_;
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripNameSuffixes);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[4];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      renameVars0.process(node0, node0);
      assertEquals(35, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("H");
      RenameVars renameVars0 = new RenameVars(compiler0, "H", true, true, true, (VariableMap) null, (char[]) null, (Set<String>) null);
      renameVars0.process(node0, node0);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.options_;
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripNameSuffixes);
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded((String) null, "L ");
      JsAst jsAst0 = new JsAst(sourceFile_Preloaded0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      renameVars0.process(node0, node0);
      assertEquals(4, Node.DESCENDANTS_FLAG);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.options_;
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripNameSuffixes);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("", (CompilerInput) null);
      renameVars_ProcessVars0.incCount("", (CompilerInput) null);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.options_;
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripNameSuffixes);
      Node node0 = Node.newNumber((-1761.957973778119));
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("", (CompilerInput) null);
      renameVars0.process(node0, node0);
      renameVars0.process(node0, node0);
      assertEquals(15, Node.CASEARRAY_PROP);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
      Node node0 = Node.newNumber((-1761.95797));
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, true, true, (VariableMap) null, (char[]) null, compilerOptions0.stripTypePrefixes);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("L ", (CompilerInput) null);
      renameVars0.process(node0, node0);
      assertEquals(8, Node.CODEOFFSET_PROP);
  }
}
