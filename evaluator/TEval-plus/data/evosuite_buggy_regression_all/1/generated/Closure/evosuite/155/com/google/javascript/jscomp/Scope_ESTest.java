/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:19:45 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSlot;
import java.io.File;
import java.nio.charset.Charset;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Scope_ESTest extends Scope_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = new Node((-1));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", (String) null, 1, (-1));
      ObjectType objectType0 = ObjectType.cast(jSType0);
      Scope scope0 = new Scope(node0, objectType0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, objectType0, (CompilerInput) null, false);
      boolean boolean0 = scope_Var0.isLocal();
      assertFalse(scope_Var0.isTypeInferred());
      assertFalse(boolean0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = new Node((-1), (-1), (-4719));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", (String) null, 1, (-1));
      ObjectType objectType0 = ObjectType.cast(jSType0);
      Scope scope0 = new Scope(node0, objectType0);
      MockFile mockFile0 = new MockFile("com.google.common.collect.Iterators$6", "wDan.~o:a\"jSCtGlz");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      CompilerInput compilerInput0 = new CompilerInput(jsAst0, "", true);
      Scope.Var scope_Var0 = scope0.declare("adOI9LxRR!w", node0, objectType0, compilerInput0, false);
      boolean boolean0 = scope_Var0.isGlobal();
      assertFalse(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
      assertEquals("", scope_Var0.getInputName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = new Node(29, 29, (-4719));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("V&/72uO0M}h\"B+QRF;o", "com.google.javascript.rhino.jstype.JSType$1", 3582, 62);
      ObjectType objectType0 = ObjectType.cast(jSType0);
      Scope scope0 = new Scope(node0, objectType0);
      MockFile mockFile0 = new MockFile("Not declared as a constructor", "");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      CompilerInput compilerInput0 = new CompilerInput(jsAst0, "Z{6*{) Wb4Yi6/o", true);
      Scope.Var scope_Var0 = scope0.declare("}f#bfbE@&u:", node0, jSType0, compilerInput0, true);
      scope_Var0.getJSDocInfo();
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
      assertEquals("Z{6*{) Wb4Yi6/o", scope_Var0.getInputName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node node0 = new Node(29, 29, (-4719));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("V&/72uO0M}h\"B+QRF;o", "com.google.javascript.rhino.jstype.JSType$1", 3582, 62);
      ObjectType objectType0 = ObjectType.cast(jSType0);
      Scope scope0 = new Scope(node0, objectType0);
      MockFile mockFile0 = new MockFile("Not declared as a constructor", "");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      CompilerInput compilerInput0 = new CompilerInput(jsAst0, "Z{6*{) Wb4Yi6/o", true);
      Scope.Var scope_Var0 = scope0.declare("}f#bfbE@&u:", node0, jSType0, compilerInput0, true);
      String string0 = scope_Var0.getName();
      assertTrue(scope_Var0.isTypeInferred());
      assertEquals("Z{6*{) Wb4Yi6/o", scope_Var0.getInputName());
      assertNotNull(string0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = new Node((-1), (-1), (-4719));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "", 1, (-1));
      ObjectType objectType0 = ObjectType.cast(jSType0);
      Scope scope0 = new Scope(node0, objectType0);
      MockFile mockFile0 = new MockFile("com.google.common.collect.Iterators$6", "wDan.~o:a\"jSCtGlz");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      CompilerInput compilerInput0 = new CompilerInput(jsAst0);
      Scope.Var scope_Var0 = scope0.declare("adOI9LxRR!w", node0, objectType0, compilerInput0, false);
      Node node1 = scope_Var0.getNameNode();
      assertFalse(scope_Var0.isDefine());
      assertFalse(scope_Var0.isTypeInferred());
      assertNotNull(node1);
      assertEquals("/data/lhy/TEval-plus/com.google.common.collect.Iterators$6/wDan.~o:a\"jSCtGlz", scope_Var0.getInputName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", (Node) null, (JSType) null, (CompilerInput) null);
      scope_Var0.getScope();
      assertFalse(scope_Var0.isDefine());
      assertTrue(scope_Var0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = new Node(29, 29, (-4719));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("V&/72uO0M}h\"B+QRF;o", "com.google.javascript.rhino.jstype.JSType$1", 3582, 62);
      ObjectType objectType0 = ObjectType.cast(jSType0);
      Scope scope0 = new Scope(node0, objectType0);
      MockFile mockFile0 = new MockFile("Not declared as a constructor", "");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a constructor", node0, jSType0, compilerInput0);
      scope_Var0.getType();
      assertTrue(scope_Var0.isTypeInferred());
      assertEquals("/data/lhy/TEval-plus/Not declared as a constructor", scope_Var0.getInputName());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Node node0 = new Node(29, 29, (-4719));
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("5s5*cQU2M}2Mz", node0, (JSType) null, (CompilerInput) null);
      assertTrue(scope_Var0.isTypeInferred());
      
      scope_Var0.setType((JSType) null);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", (Node) null, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isDefine();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, (JSType) null, (CompilerInput) null);
      // Undeclared exception!
      try { 
        scope_Var0.isBleedingFunction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, (JSType) null, (CompilerInput) null, true);
      String string0 = scope_Var0.toString();
      assertFalse(scope_Var0.isDefine());
      assertEquals("Scope.Var Not declared as a type name", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(29, 29, (-4719));
      Scope scope0 = null;
      try {
        scope0 = new Scope(node0, compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      boolean boolean0 = scope0.isBottom();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      StaticSlot<JSType> staticSlot0 = scope0.getSlot("inlineVariables");
      assertNull(staticSlot0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      Node node0 = scope0.getRootNode();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      int int0 = scope0.getDepth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = new Node(29, 29, (-4719));
      Scope scope0 = new Scope(node0, (ObjectType) null);
      int int0 = scope0.getVarCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      ObjectType objectType0 = scope0.getTypeOfThis();
      assertNull(objectType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      StaticSlot<JSType> staticSlot0 = scope0.getOwnSlot("Optimization level outside [-1..9]: ");
      assertNull(staticSlot0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(118, nodeArray0, 118, 0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = (NoType)jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, "gGD!oi&");
      Scope scope0 = new Scope(node0, noType0);
      Iterator<Scope.Var> iterator0 = scope0.getVars();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Node node0 = new Node(29, 29, (-4719));
      Scope scope0 = new Scope(node0, (ObjectType) null);
      StaticScope<JSType> staticScope0 = scope0.getParentScope();
      assertNull(staticScope0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Not declared as a type name", (Charset) null);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", (Node) null, (JSType) null, compilerInput0);
      // Undeclared exception!
      try { 
        scope_Var0.getInitialValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Scope$Var", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("-+Vsg", (Node) null, (JSType) null, (CompilerInput) null, false);
      boolean boolean0 = scope_Var0.isExtern();
      assertFalse(scope_Var0.isDefine());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Node node0 = new Node((-1), (-1), (-4719));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", (String) null, 1, (-1));
      ObjectType objectType0 = ObjectType.cast(jSType0);
      Scope scope0 = new Scope(node0, objectType0);
      MockFile mockFile0 = new MockFile("com.google.common.collect.Iterators$6", "wDan.~o:a\"jSCtGlz");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      CompilerInput compilerInput0 = new CompilerInput(jsAst0);
      Scope.Var scope_Var0 = scope0.declare("Named type with empty name component", node0, objectType0, compilerInput0, false);
      boolean boolean0 = scope_Var0.isExtern();
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      MockFile mockFile0 = new MockFile("Not declared as a constructor", "Unknown class name");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      Scope.Var scope_Var0 = scope0.declare("u/x:N", (Node) null, (JSType) null, compilerInput0, true);
      boolean boolean0 = scope_Var0.isExtern();
      assertFalse(scope_Var0.isDefine());
      assertEquals("/data/lhy/TEval-plus/Not declared as a constructor/Unknown class name", scope_Var0.getInputName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Not declared as a constructor", "Unknown class name");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", (Node) null, (JSType) null, compilerInput0);
      boolean boolean0 = scope_Var0.isConst();
      assertFalse(scope_Var0.isDefine());
      assertEquals("Not declared as a constructor", scope_Var0.getInputName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, (JSType) null, (CompilerInput) null, true);
      boolean boolean0 = scope_Var0.isConst();
      assertFalse(boolean0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Node node1 = new Node(39, node0, node0, node0, node0);
      Scope.Var scope_Var0 = scope0.declare("// Input %num%", node0, (JSType) null, (CompilerInput) null, false);
      Node node2 = scope_Var0.getInitialValue();
      assertNull(node2);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Not declared as a type name", (Charset) null);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", (Node) null, (JSType) null, compilerInput0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      scope_Var0.resolveType(simpleErrorReporter0);
      assertEquals("Not declared as a type name", scope_Var0.getInputName());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Node node0 = new Node((-1));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", (String) null, 1, (-1));
      ObjectType objectType0 = ObjectType.cast(jSType0);
      Scope scope0 = new Scope(node0, objectType0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, objectType0, (CompilerInput) null, false);
      scope_Var0.resolveType(simpleErrorReporter0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Not declared as a type name", (Charset) null);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", (Node) null, (JSType) null, compilerInput0);
      String string0 = scope_Var0.getInputName();
      assertFalse(scope_Var0.isDefine());
      assertEquals("Not declared as a type name", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Node node0 = new Node((-1));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", (String) null, 1, (-1));
      ObjectType objectType0 = ObjectType.cast(jSType0);
      Scope scope0 = new Scope(node0, objectType0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, objectType0, (CompilerInput) null, false);
      String string0 = scope_Var0.getInputName();
      assertFalse(scope_Var0.isDefine());
      assertEquals("<non-file>", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Not declared as a type name", (Charset) null);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", (Node) null, (JSType) null, compilerInput0);
      boolean boolean0 = scope_Var0.isNoShadow();
      assertEquals("Not declared as a type name", scope_Var0.getInputName());
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      node0.addSuppression((String) null);
      Scope.Var scope_Var0 = scope0.declare("// Input %num%", node0, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isNoShadow();
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.equals(scope_Var0);
      assertFalse(scope_Var0.isDefine());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, (JSType) null, (CompilerInput) null, true);
      boolean boolean0 = scope_Var0.equals((Object) null);
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      Node node1 = new Node(39, node0, node0, node0, node0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node1, (JSType) null, (CompilerInput) null);
      Scope.Var scope_Var1 = scope0.declare("// Input %num%", node0, (JSType) null, (CompilerInput) null, false);
      boolean boolean0 = scope_Var0.equals(scope_Var1);
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      Scope scope1 = null;
      try {
        scope1 = new Scope(scope0, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      Node node1 = new Node(44, node0);
      Scope scope0 = new Scope(node1, (ObjectType) null);
      Scope scope1 = new Scope(scope0, node0);
      Scope scope2 = scope1.getGlobalScope();
      assertTrue(scope2.isGlobal());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      Scope scope0 = new Scope(node0, (ObjectType) null);
      // Undeclared exception!
      try { 
        scope0.declare((String) null, node0, (JSType) null, (CompilerInput) null, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      MockFile mockFile0 = new MockFile("Not declared as a constructor", "Unknown class name");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      // Undeclared exception!
      try { 
        scope0.declare("", (Node) null, (JSType) null, compilerInput0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      scope0.declare("Not declared as a constructor", (Node) null, (JSType) null, (CompilerInput) null);
      // Undeclared exception!
      try { 
        scope0.declare("Not declared as a constructor", (Node) null, (JSType) null, (CompilerInput) null, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      Node node1 = new Node(44, node0);
      Scope scope0 = new Scope(node1, (ObjectType) null);
      Scope scope1 = new Scope(scope0, node0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, (JSType) null, (CompilerInput) null);
      // Undeclared exception!
      try { 
        scope1.undeclare(scope_Var0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Node node0 = new Node(29, 29, (-4719));
      Scope scope0 = new Scope((Node) null, (ObjectType) null);
      Scope.Var scope_Var0 = scope0.declare("5s5*cQU2M}2Mz", node0, (JSType) null, (CompilerInput) null);
      scope0.undeclare(scope_Var0);
      // Undeclared exception!
      try { 
        scope0.undeclare(scope_Var0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Node node0 = new Node(29, 29, 29);
      Node node1 = new Node(44, node0);
      Scope scope0 = new Scope(node1, (ObjectType) null);
      Scope scope1 = new Scope(scope0, node0);
      Scope.Var scope_Var0 = scope1.getVar("Not declared as a constructor");
      assertNull(scope_Var0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Node node0 = new Node(1, 1, (-4719));
      Node node1 = new Node(2, node0);
      Scope scope0 = new Scope(node1, (ObjectType) null);
      Scope scope1 = new Scope(scope0, node0);
      boolean boolean0 = scope1.isDeclared("9`N_Ok51I\"olu", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Node node0 = new Node(21, 21, 21);
      Node node1 = new Node(12, 29, 28);
      Scope scope0 = new Scope(node1, (ObjectType) null);
      Scope scope1 = new Scope(scope0, node0);
      boolean boolean0 = scope1.isDeclared("Not declared as a type name", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Node node0 = new Node(1, 1, (-4719));
      Node node1 = new Node(2, node0);
      Scope scope0 = new Scope(node1, (ObjectType) null);
      Scope scope1 = new Scope(scope0, node0);
      boolean boolean0 = scope1.isGlobal();
      assertFalse(boolean0);
  }
}
