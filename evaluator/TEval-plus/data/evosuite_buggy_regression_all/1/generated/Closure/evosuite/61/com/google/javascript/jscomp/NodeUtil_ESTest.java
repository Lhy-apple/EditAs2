/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:10:04 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      Vector<Node> vector0 = new Vector<Node>();
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_UNDEFINED_NAME", "?fd");
      Node node1 = NodeUtil.newFunctionNode("?fd", vector0, node0, 511, 31);
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node1);
      assertEquals(3, node1.getChildCount());
      assertFalse(boolean0);
      assertEquals(2093087, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "infinity", "~");
      int int0 = NodeUtil.getNameReferenceCount(node0, "m$T/+~-r]n@[");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", 119, 148);
      boolean boolean0 = NodeUtil.containsCall(node0);
      assertEquals(487572, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node((-2349), 0, 1349);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString(47, "+infinity", 47, 47);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_?3W}ivh0jUuZ4C'h", "zR Jo'0q3K");
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got BLOCK
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = Node.newString("-infinity", 106, 106);
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, "Zn.fy}]", node0, (String) null);
      assertEquals(33, node1.getType());
      assertFalse(node1.hasOneChild());
      assertEquals(434282, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newString((-1207), "TU=gI", (-1207), 138);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 33);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "PiO9_A4hw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 1406, predicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node((-400), 108, 694);
      Stack<Node> stack0 = new Stack<Node>();
      Node node1 = NodeUtil.newFunctionNode("&G#MGC~NDdtzq", stack0, node0, 26, 42);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got SCRIPT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newNumber((double) 65519, 65519, 65519);
      Node node1 = NodeUtil.newExpr(node0);
      String string0 = NodeUtil.arrayToString(node1);
      assertNotNull(string0);
      assertEquals("65519", string0);
      assertEquals(130, node1.getType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newNumber(1407.5559183913329, 106, 106);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "base", 519, 519);
      NodeUtil.getImpureBooleanValue(node0);
      assertEquals(2126343, node0.getSourcePosition());
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newNumber((double) 65519, 65519, 65519);
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.AliasExternals$GlobalGatherer");
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString(41, "_c", 41, 75);
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(106);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getImpureBooleanValue(node1);
      assertEquals(122, node1.getType());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString("");
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = new Node(26, node0, node0, 114, 15);
      String string0 = NodeUtil.getStringValue(node1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "base", 519, 519);
      Node node1 = NodeUtil.newExpr(node0);
      String string0 = NodeUtil.arrayToString(node1);
      assertNull(string0);
      assertEquals(2126343, node1.getSourcePosition());
      assertEquals(130, node1.getType());
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newNumber((double) 9, 187, 9);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("9", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newString("", 116, 25);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Node node1 = new Node(63, node0, node0, 44, (-1168074457));
      Double double0 = NodeUtil.getNumberValue(node1);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newNumber((double) 106, 106, 106);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      String string0 = NodeUtil.getStringValue(node1);
      assertEquals(122, node1.getType());
      assertEquals("undefined", string0);
      assertEquals(106, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = NodeUtil.getStringValue(633.334);
      assertEquals("633.334", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newString(41, "_c", 41, 75);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node(6870, 110, (-2363));
      String string0 = NodeUtil.arrayToString(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = new Node(26, node0, node0, 114, 15);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString(29, "[A-Z0-9][A-Z0-9_]*", (-878), (-878));
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", 119, 148);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNotNull(double0);
      assertEquals(Double.POSITIVE_INFINITY, (double)double0, 0.01);
      assertEquals(487572, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newNumber((double) 65519, 65519, 65519);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(65519.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "8UF'$k", 3276, 118);
      Node node1 = new Node(41, node0, node0, 27, 16);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(13418614, node0.getSourcePosition());
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", 119, 148);
      Node node1 = new Node(43, node0, node0, (-3172), 1527);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertEquals(487572, node0.getSourcePosition());
      assertEquals(38, node0.getType());
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newNumber(1407.5559183913329, 106, 106);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(106, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2325));
      Node node1 = new Node(96, node0, node0, 26, 9);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "base", 519, 519);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
      assertEquals(38, node0.getType());
      assertEquals(2126343, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("");
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("%");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString("-infinity");
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("\n parent:  ");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(9);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(12);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(13);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(8232);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = new Node(26, node0, node0, 114, 15);
      boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newString(29, "[A-Z0-9][A-Z0-9_]*", (-878), (-878));
      // Undeclared exception!
      try { 
        NodeUtil.isLiteralValue(node0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "base", 519, 519);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
      assertEquals(2126343, node0.getSourcePosition());
      assertEquals(38, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2325));
      Node node1 = new Node(96, node0, node0, 26, 9);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newString("", (-2205), (-2205));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString(44, "+infinity", 44, 44);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString(47, "t", 47, 47);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(64);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.TightenTypes$ConcreteSlot", 3276, 519);
      Node node1 = new Node(47, node0, (-1), 5);
      boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
      assertFalse(boolean0);
      assertEquals(13419015, node0.getSourcePosition());
      assertEquals(2, node0.getChildCount());
      assertTrue(node0.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.AliasExternals$GlobalGatherer");
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newNumber(1407.8163198695, 106, 106);
      node0.setType(21);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypes);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString(29, "[A-Z0-9][A-Z0-9_]*", (-878), (-878));
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "/}X1g]#Ka;4V", 122, 132);
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertFalse(boolean0);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(499844, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newNumber((double) 65519, 65519, 65519);
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString(108, "_", 77, 75);
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("8:->-xVc21_OpfDH9");
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString("yk<5/ph$q", 2252, 2252);
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newString(11, "_c", (-878), (-878));
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(14);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(17);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = new Node(18, 17, 35);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(19);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(20);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(22);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(25);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(26);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newString(29, "[A-Z0-9][A-Z0-9_]*", (-878), (-878));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(31);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newNumber((-728.1444646997), (-3961), (-3961));
      node0.setType(32);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.TightenTypes$ConcreteSlot", 3276, 519);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(node0.hasOneChild());
      assertFalse(boolean0);
      assertEquals(13419015, node0.getSourcePosition());
      assertEquals(33, node0.getType());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(34);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(35);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString(36, "T%):zA,}u-a2QA", 9, 70);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSETELEM T%):zA,}u-a2QA 9
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newNumber((-728.1444646997), (-3961), (-3961));
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(43);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(45, 9, 1369);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(46);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(48);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(49);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString(50, "base", 117, 101);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeRETHROW base 117
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(56);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(58);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(62);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString(75, "ab*dmW)<'/UojA", 75, 75);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(76);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = new Node(77, 2, 14);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeTRY 2
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(78);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(79);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(80);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString(82, "u,", 8, 114);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLP
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = new Node(84, 2, 14);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(85);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(86);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(88);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(89);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(90);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.AliasExternals$GlobalGatherer");
      Node node1 = new Node(91, node0, node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(92);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(93);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(94);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(97);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(99);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString(102, "Infinity", 1105, 105);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(103);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(104);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(107);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newString(108, "_c", 41, 75);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeIF _c 41
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(109);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newString(111, "com.google.javascript.jscomp.TightenTypes$ConcreteSlot", 93, 768);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeCASE com.google.javascript.jscomp.TightenTypes$ConcreteSlot 93
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(112);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(113);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(114);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node(115, 110, 638);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeFOR 110
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      node0.setType(116);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newString(118, "T%):zA,}u-a2QA");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeVAR T%):zA,}u-a2QA
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(119);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newNumber(106.0, 24, (-2737));
      node0.setType(120);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(121);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newNumber(1407.5559183913329, 106, 106);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(boolean0);
      assertEquals(434282, node1.getSourcePosition());
      assertEquals(1, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newString("II,[wsyI");
      Node node1 = new Node(37, node0, node0, 35, 3);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(42, 1105, 4);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(49, 0, 2);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString(77, "infinity", 77, 75);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newNumber((double) 83);
      Node node1 = new Node(83, node0, node0, node0, node0, 103, 33);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newString(108, "_", 77, 75);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(110, 919, 147);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString(118, "T%):zA,}u-a2QA");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString(123, "com.google.javascript.jscomp.AliasExternals$GlobalGatherer", 50, (-815));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newNumber((-728.1444646997), (-3961), (-3961));
      Node node1 = new Node(125, node0, node0, 2, 0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2325));
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertEquals(130, node1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString("Ftm+=HjZ");
      Node node1 = NodeUtil.newVarNode("Ftm+=HjZ", node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
      assertEquals(118, node1.getType());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.AliasExternals$GlobalGatherer");
      Node node1 = new Node(3, (-2380), 16);
      Node node2 = new Node(91, node1, node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = new Node(694);
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertEquals(130, node1.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newNumber(1364.8927242119);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newString("II,[wsyI");
      Node node1 = new Node(37, node0, node0, 35, 3);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNotFunction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2325));
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "CCEEP=Vf.d.+xy2$!W ", 40, 10000);
      Node node1 = NodeUtil.getRootOfQualifiedName(node0);
      NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertEquals(167935, node1.getSourcePosition());
      assertEquals(167935, node0.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(33, node0.getType());
      assertEquals(40, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.TightenTypes$ConcreteSlot", 3276, 519);
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertEquals(13419015, node0.getSourcePosition());
      assertTrue(boolean0);
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newString((-2), "t]SYgCrOqgJ\"}{rT");
      node0.setType(37);
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString(",RNM-ks|S@2Im*l'");
      Node node1 = NodeUtil.newVarNode("/@Pcnk#_", node0);
      boolean boolean0 = NodeUtil.canBeSideEffected(node1);
      assertEquals(118, node1.getType());
      assertFalse(node0.hasChildren());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = Node.newNumber(1407.8163198695, 106, 106);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.canBeSideEffected(node1);
      assertEquals(122, node1.getType());
      assertEquals(106, node1.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = NodeUtil.precedence(9);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for return (type 4)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = NodeUtil.precedence(10);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = NodeUtil.precedence(11);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = NodeUtil.precedence(12);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = NodeUtil.precedence(13);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = NodeUtil.precedence(14);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = NodeUtil.precedence(15);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = NodeUtil.precedence(16);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = NodeUtil.precedence(17);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = NodeUtil.precedence(18);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = NodeUtil.precedence(19);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = NodeUtil.precedence(20);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int int0 = NodeUtil.precedence(21);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = NodeUtil.precedence(22);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = NodeUtil.precedence(23);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int int0 = NodeUtil.precedence(24);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = NodeUtil.precedence(25);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = NodeUtil.precedence(26);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = NodeUtil.precedence(27);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = NodeUtil.precedence(28);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = NodeUtil.precedence(29);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int int0 = NodeUtil.precedence(30);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = NodeUtil.precedence(31);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = NodeUtil.precedence(32);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = NodeUtil.precedence(33);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setprop (type 34)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int int0 = NodeUtil.precedence(35);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setelem (type 36)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = NodeUtil.precedence(37);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = NodeUtil.precedence(38);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = NodeUtil.precedence(39);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = NodeUtil.precedence(40);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = NodeUtil.precedence(41);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = NodeUtil.precedence(42);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = NodeUtil.precedence(43);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int int0 = NodeUtil.precedence(44);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = NodeUtil.precedence(45);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = NodeUtil.precedence(46);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = NodeUtil.precedence(47);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for bindname (type 48)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for throw (type 49)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(50);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=50> (type 50)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = NodeUtil.precedence(52);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(53);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=53> (type 53)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = NodeUtil.precedence(64);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(75);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=75> (type 75)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(76);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=76> (type 76)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(78);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for semi (type 78)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(79);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lb (type 79)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(80);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rb (type 80)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rc (type 82)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(83);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lp (type 83)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rp (type 84)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int int0 = NodeUtil.precedence(85);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = NodeUtil.precedence(88);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = NodeUtil.precedence(90);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int int0 = NodeUtil.precedence(91);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = NodeUtil.precedence(92);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      int int0 = NodeUtil.precedence(93);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int int0 = NodeUtil.precedence(94);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = NodeUtil.precedence(96);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = NodeUtil.precedence(97);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      int int0 = NodeUtil.precedence(98);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(99);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for colon (type 99)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = NodeUtil.precedence(100);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int int0 = NodeUtil.precedence(101);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      int int0 = NodeUtil.precedence(102);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(106);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for export (type 106)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(107);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for import (type 107)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(108);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for if (type 108)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(109);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for else (type 109)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for switch (type 110)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(111);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for case (type 111)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for default (type 112)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for do (type 114)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(115);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for for (type 115)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for break (type 116)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for continue (type 117)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(118);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for var (type 118)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for with (type 119)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for catch (type 120)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(121);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for finally (type 121)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newString(10, "y7,LRl>H@", (-40), (-40));
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = Node.newString(11, "_c", (-878), (-878));
      boolean boolean0 = NodeUtil.isNumericResult(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = new Node(18, 17, 35);
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = Node.newString(23, "noshadow", 64, 64);
      boolean boolean0 = NodeUtil.isNumericResult(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "prepareAst", 10, 50);
      Node node1 = new Node(24, node0, node0, node0);
      boolean boolean0 = NodeUtil.isNumericResultHelper(node1);
      assertTrue(boolean0);
      assertEquals(41010, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = new Node(25, 144, 41);
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newString(29, "[A-Z0-9][A-Z0-9_]*", (-878), (-878));
      boolean boolean0 = NodeUtil.isNumericResult(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "^*7;|df!=?Ji^1L0^Pp", (-1461079330), (-342));
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      assertFalse(boolean0);
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = Node.newNumber((-728.1444646997), (-3961), (-3961));
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = new Node(106);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      node0.setType(21);
      node0.addChildrenToFront(node1);
      assertNotSame(node1, node0);
      
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_?3W}ivh0jUuZ4C'h", "_?3W}ivh0jUuZ4C'h");
      Node node1 = new Node(19, node0, node0);
      boolean boolean0 = NodeUtil.isBooleanResult(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newString(21, "+infinity", 1, 46);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = new Node(22, node0, node0, 1437, (-3667));
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = new Node(26, node0, node0, 114, 15);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newString(29, "com.google.javascript.jscomp.mozilla.rhino.NativeArray", 76, 49);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = Node.newNumber(1407.8163198695, 106, 106);
      Node node1 = new Node(30, node0, node0, 1, 2);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = new Node(31, 92, 10);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = new Node(32, node0, node0, 22, 71);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.TightenTypes$ConcreteSlot", 3276, 519);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertEquals(13419015, node0.getSourcePosition());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = new Node(34, node0, node0, 2465, 83);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Q4", 107, 519);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertEquals(38, node0.getType());
      assertFalse(boolean0);
      assertEquals(438791, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.AliasExternals$GlobalGatherer");
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = Node.newString(41, "valueOf", 34, 27);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = new Node(42, 1105, 27);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = Node.newString(44, "+infinity", 44, 44);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = new Node(45, 9, 1369);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newString(47, "+infinity", 47, 47);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = new Node(49, 0, 2);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node node1 = new Node(50, node0, node0, 3432, 875);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(43);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(789);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = Node.newString(97, "@1=>u}6.L.dPUD3 ", (-1524), 2967);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.TightenTypes$ConcreteSlot", 3276, 519);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.TightenTypes$ConcreteSlot", 3276, 519);
      Node node1 = new Node(97, node0, node0, 1, 103);
      int int0 = NodeUtil.getOpFromAssignmentOp(node1);
      assertEquals(13419015, node0.getSourcePosition());
      assertEquals(25, int0);
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = Node.newString(29, "[A-Z0-9][A-Z0-9_]*", (-878), (-878));
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.TightenTypes$ConcreteSlot", 3276, 519);
      NodeUtil.getPrototypeClassName(node0);
      assertEquals(13419015, node0.getSourcePosition());
      assertTrue(node0.isUnscopedQualifiedName());
      assertTrue(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "false", 47, 109);
      Node node1 = NodeUtil.newExpr(node0);
      assertEquals(130, node1.getType());
      
      boolean boolean0 = NodeUtil.isLValue(node0);
      assertFalse(boolean0);
      assertEquals(0, node0.getChildCount());
      assertEquals(192621, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = Node.newString("Ftm+=HjZ");
      Node node1 = NodeUtil.newVarNode("Ftm+=HjZ", node0);
      boolean boolean0 = NodeUtil.isVar(node1);
      assertTrue(boolean0);
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "", 4, 3363);
      Node node1 = NodeUtil.newExpr(node0);
      assertEquals(130, node1.getType());
      
      NodeUtil.getAssignedValue(node0);
      assertEquals(19747, node0.getSourcePosition());
      assertEquals(4, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_?3W}ivh0jUuZ4C'h", "zR Jo'0q3K");
      boolean boolean0 = NodeUtil.isString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = Node.newString("II,[wsyI");
      boolean boolean0 = NodeUtil.isString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = Node.newString(10, "y7,LRl>H@", (-40), (-40));
      boolean boolean0 = NodeUtil.isExprAssign(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = Node.newNumber((double) 65519, 65519, 65519);
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
      assertEquals(130, node1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_?3W}ivh0jUuZ4C'h", "zR Jo'0q3K");
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = Node.newNumber((double) 65519, 65519, 65519);
      Node node1 = new Node(85, node0, node0, 114, (-3276));
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = Node.newString("", (-2205), (-2205));
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = Node.newString(108, "_c");
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", 119, 148);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NAME Infinity 119 does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.AliasExternals$GlobalGatherer");
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newString(125, "[A-Z0-9][A-Z0-9_]*", 126, 746);
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newString("Ftm+=HjZ");
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Q4", 107, 519);
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertTrue(boolean0);
      assertEquals(438791, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLabelName((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = new Node(148, 148, 148);
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_?3W}ivh0jUuZ4C'h", "zR Jo'0q3K");
      Node node1 = new Node(4, node0, 34, (-2));
      NodeUtil.removeChild(node1, node0);
      assertTrue(node1.hasOneChild());
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newString(41, "_c", 41, 75);
      Node node1 = NodeUtil.newExpr(node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: NULL _c 41 of EXPR_RESULT 41
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = Node.newString(104, "_c", 108, 108);
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = Node.newString("-infinity");
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_?3W}ivh0jUuZ4C'h", "zR Jo'0q3K");
      Node node1 = new Node(4, node0, 34, (-2));
      boolean boolean0 = NodeUtil.tryMergeBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = Node.newString(47, "+infinity", 47, 47);
      boolean boolean0 = NodeUtil.isThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = new Node(42, 1105, 27);
      boolean boolean0 = NodeUtil.isThis(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = new Node(148, 148, 148);
      boolean boolean0 = NodeUtil.isArrayLiteral(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = Node.newNumber((double) 65516, 65516, 65516);
      node0.setType(105);
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionDeclaration(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.AliasExternals$GlobalGatherer");
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = Node.newNumber((double) 65519, 65519, 65519);
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertEquals(122, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.AliasExternals$GlobalGatherer");
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = Node.newNumber((-193.5369370019), 47, (-489));
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = Node.newNumber((-193.5369370019), 47, (-489));
      Node node1 = new Node(33, node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.AliasExternals$GlobalGatherer");
      String string0 = NodeUtil.getObjectLitKeyName(node0);
      assertEquals("com.google.javascript.jscomp.AliasExternals$GlobalGatherer", string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.TightenTypes$ConcreteSlot", 3276, 519);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: GETPROP 3276
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[5];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, false, jSTypeArray0);
      JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, functionType0);
      assertFalse(jSType0.isRecordType());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = new Node(115, 110, 638);
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = NodeUtil.opToStr(9);
      assertEquals("|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(93);
      assertEquals("+=", string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(10);
      assertEquals("^", string0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(11);
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(12);
      assertEquals("==", string0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = NodeUtil.opToStr(13);
      assertEquals("!=", string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(14);
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(15);
      assertEquals("<=", string0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(16);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = NodeUtil.opToStr(17);
      assertEquals(">=", string0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = NodeUtil.opToStr(18);
      assertEquals("<<", string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = NodeUtil.opToStr(19);
      assertEquals(">>", string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = NodeUtil.opToStr(20);
      assertEquals(">>>", string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(21);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = NodeUtil.opToStr(22);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(23);
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(24);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(25);
      assertEquals("%", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = NodeUtil.opToStr(26);
      assertEquals("!", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = NodeUtil.opToStr(27);
      assertEquals("~", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(28);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(29);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(30);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 30: NEW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(31);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 31: DELPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = NodeUtil.opToStr(32);
      assertEquals("typeof", string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = NodeUtil.opToStr(33);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = NodeUtil.opToStr(34);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = NodeUtil.opToStr(35);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = NodeUtil.opToStr(37);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(38);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 38: NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = NodeUtil.opToStr(39);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(40);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 40: STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(41);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 41: NULL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(42);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 42: THIS
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(43);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 43: FALSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(44);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 44: TRUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = NodeUtil.opToStr(45);
      assertNotNull(string0);
      assertEquals("===", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(46);
      assertEquals("!==", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = NodeUtil.opToStr(47);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = NodeUtil.opToStr(48);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 49: THROW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = NodeUtil.opToStr(54);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = NodeUtil.opToStr(55);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(64);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 64: OBJECTLIT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = NodeUtil.opToStr(66);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(67);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 67: DEL_REF
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = NodeUtil.opToStr(70);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = NodeUtil.opToStr(72);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 74: REF_NS_MEMBER
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = NodeUtil.opToStr(75);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(77);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 77: TRY
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(80);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 80: RB
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = NodeUtil.opToStr(82);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(83);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 83: LP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 84: RP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(85);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 85: COMMA
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(86);
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(88);
      assertEquals("^=", string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = NodeUtil.opToStr(92);
      assertEquals(">>>=", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(94);
      assertEquals("-=", string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = NodeUtil.opToStr(98);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = NodeUtil.opToStr(99);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = NodeUtil.opToStr(100);
      assertEquals("||", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = NodeUtil.opToStr(101);
      assertEquals("&&", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(102);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 102: INC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(103);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 103: DEC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = NodeUtil.opToStr(104);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = NodeUtil.opToStr(105);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = NodeUtil.opToStr(106);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = NodeUtil.opToStr(107);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = NodeUtil.opToStr(108);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(109);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 109: ELSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = NodeUtil.opToStr(110);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = NodeUtil.opToStr(111);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = NodeUtil.opToStr(112);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = NodeUtil.opToStr(113);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 114: DO
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(115);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 115: FOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = NodeUtil.opToStr(116);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 117: CONTINUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = NodeUtil.opToStr(118);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 119: WITH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 120: CATCH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(121);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 121: FINALLY
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = NodeUtil.opToStr(122);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String string0 = NodeUtil.opToStr(1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Node node0 = Node.newString(29, "[A-Z0-9][A-Z0-9_]*", (-878), (-878));
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Node node0 = new Node(42, 1105, 27);
      Node node1 = NodeUtil.getRootOfQualifiedName(node0);
      assertEquals(4, Node.DESCENDANTS_FLAG);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node node0 = Node.newString("Ftm+=HjZ");
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Q4", (-1045), 29);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.newName(googleCodingConvention0, "HEURISTIC", (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("undefined");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("[A-Z0-9][A-Z0-9_]*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "google", "T\"qM_Q&I \">iWl.wLtO");
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(4, Node.DESCENDANTS_FLAG);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = Node.newString("valueOf");
      Node node1 = NodeUtil.newName(defaultCodingConvention0, "prepareAst", node0, (String) null);
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertEquals(38, node1.getType());
      assertNotSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Q4", 107, 519);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertEquals(438791, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Node node0 = Node.newString(47, "+infinity", 47, 47);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("", (Node) null);
      assertEquals(118, node0.getType());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Node node0 = Node.newString("Ftm+=HjZ");
      Node node1 = NodeUtil.newVarNode("Ftm+=HjZ", node0);
      int int0 = NodeUtil.getNameReferenceCount(node1, "Ftm+=HjZ");
      assertEquals(118, node1.getType());
      assertEquals(1, int0);
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      Node node1 = NodeUtil.newVarNode("", node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
      assertEquals(122, node0.getType());
      assertTrue(boolean0);
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "~", (String) null);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Node node0 = Node.newNumber((double) 65519, 65519, 65519);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node node0 = Node.newNumber((double) 65519, 65519, 65519);
      Node node1 = NodeUtil.newExpr(node0);
      assertEquals(130, node1.getType());
      
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      boolean boolean0 = NodeUtil.has(node0, predicate0, predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node node0 = Node.newNumber((-728.1444646997), (-3961), (-3961));
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_BooleanResultPredicate0, nodeUtil_BooleanResultPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      boolean boolean0 = NodeUtil.containsFunction(node0);
      assertEquals(122, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Node node0 = new Node(2135);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      int int0 = NodeUtil.getCount(node0, nodeUtil_BooleanResultPredicate0, nodeUtil_BooleanResultPredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Node node0 = Node.newString(3477, "`6yPWOVAB(sl5Ga", (-24), 324);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Node node0 = Node.newString("-infinity");
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_?3W}ivh0jUuZ4C'h", "zR Jo'0q3K");
      boolean boolean0 = NodeUtil.hasCatchHandler(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "google", "T\"qM_Q&I \">iWl.wLtO");
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.SimpleDefinitionFinder$UseSiteGatheringCallback", "com.google.javascript.jscomp.SimpleDefinitionFinder$UseSiteGatheringCallback");
      assertEquals(1, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.AliasExternals$GlobalGatherer");
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.AliasExternals$GlobalGatherer");
      Node node1 = new Node(91, node0, node0);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node node0 = Node.newString(2098, "#.uD@FbZa", (-16), 4);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionJSDocInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      String string0 = NodeUtil.getSourceName(node0);
      assertEquals(" [testcode] ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Node node0 = new Node((-594));
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.TightenTypes$ConcreteSlot", 3276, 519);
      Node[] nodeArray0 = new Node[6];
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = new Node(0, (-2348), 0);
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertEquals(37, node1.getType());
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Node node0 = Node.newString(31, "com.google.javascript.jscomp.AliasExternals$GlobalGatherer");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = Node.newNumber(10.81161273894, 102, 102);
      Node node1 = new Node(33, node0, 2087, 12);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = new Node(42, 1105, 27);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Node node0 = Node.newString(47, "+infinity", 47, 47);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Node node0 = Node.newString(85, "T%):zA,}u-a2QA");
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = new Node(101, 1961, 1876);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "infinity", "~");
      Node node1 = new Node(102, node0, 105, 39);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Vector<Node> vector1 = new Vector<Node>();
      Node node1 = NodeUtil.newFunctionNode("b[)W+Mt~2q{", vector1, node0, 5, 8);
      assertEquals(105, node1.getType());
      
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_BooleanResultPredicate0);
      assertEquals(20488, node1.getSourcePosition());
      assertEquals(3, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "8PUF'$k", 40, 1);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
      assertEquals(163841, node0.getSourcePosition());
      assertFalse(boolean0);
  }
}
