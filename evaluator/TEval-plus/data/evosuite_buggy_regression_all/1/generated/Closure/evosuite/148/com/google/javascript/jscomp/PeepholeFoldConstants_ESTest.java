/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:17:19 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(26);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(32);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(24, Node.LASTUSE_PROP);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(91, 130, (-437));
      Node node1 = new Node(33, node0, node0, node0, 0, 42);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertEquals(0, node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(34, 63, 10);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(23, Node.VARIABLE_PROP);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(35);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(36, 4095, 50);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(4, Node.ENUM_PROP);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(37);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(10, Node.VARS_PROP);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(91);
      Node node1 = new Node(21, 13, 101);
      Node node2 = new Node(17, node1, node0, node0, (-1421), (-2989));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(17, node3.getType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-437), 130, (-437));
      Node node1 = new Node(7, 46, 34);
      Node node2 = new Node(9, node0, node0, node1, 3124, 32);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, Node.DESCENDANTS_FLAG);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(170);
      Node node1 = new Node(21);
      Node node2 = new Node(10, node0, node1, node0, node1, (-3625), (-2));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(97, 97, 97);
      Node node1 = new Node(21, (-3), 7);
      Node node2 = new Node(11, node1, node1, node0, 25, 4095);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(170, nodeArray0, 170, 170);
      Node node1 = new Node(4, 2, 12);
      Node node2 = new Node(12, node1, node1, node0, 44, 5);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(170);
      Node node1 = new Node(79, 2, 65);
      Node node2 = new Node(13, node0, node1, node1, 0, 48);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1669);
      Node node1 = new Node(1, 18, 44);
      Node node2 = new Node(14, node0, node0, node1, 17, 0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1669, 1669, 1669);
      Node node1 = new Node(1, 18, 44);
      Node node2 = new Node(15, node0, node0, node1, 17, 0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(17, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(10000);
      Node node1 = new Node(708, 965, 5);
      Node node2 = new Node(16, node0, node1, node1, 2, (-2865));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-437));
      Node node1 = new Node((-12), 96, (-2));
      Node node2 = new Node(18, node0, node1, node1, 84, 32);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1669);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(0, nodeArray0, 3, 2032);
      Node node2 = new Node(19, node1, node0, node0, 50, 89);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(19, node3.getType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(97, 97, 97);
      Node node1 = new Node(72, 147, 47);
      Node node2 = new Node(20, node0, node0, node1, 5, 2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(170, 170, 170);
      Node node1 = new Node(17, 26, 28);
      Node node2 = new Node(21, node1, node0, node0, 1, 10);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(170, nodeArray0, 170, 170);
      Node node1 = new Node(50);
      Node node2 = new Node(22, node1, node0, node0, 9, 7);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(22, node3.getType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-2967));
      Node node1 = new Node(0, 5, 37);
      Node node2 = new Node(23, node0, node0, node1, 23, 22);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-437));
      Node node1 = new Node(45, 36, 18);
      Node node2 = new Node(24, node0, node1, node1, node1, 19, 8);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(170);
      Node node1 = new Node(29);
      Node node2 = new Node(25, node0, node0, node1, 29, 36);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1632);
      Node node1 = new Node(1, 4, 44);
      Node node2 = new Node(28, node1, node0, node0, 10, 2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(10, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-437));
      Node node1 = new Node(49, 27, 2);
      Node node2 = new Node(30, node0, node0, node1, 44, 94);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(44, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(78);
      Node node1 = new Node(4, 43, 3371);
      Node node2 = new Node(31, node0, node0, node1, 12, 92);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(91, 130, (-437));
      Node node1 = new Node(7, 46, (-65));
      Node node2 = new Node(33, node1, node1, node0, 0, 42);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(90);
      Node node1 = new Node(33, 2, 50);
      Node node2 = new Node(36, node1, node1, node0, 29, 16);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(29, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(75);
      Node node1 = new Node(13);
      Node node2 = new Node(38, node0, node0, node1, 0, 40);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-437));
      Node node1 = new Node(45, 36, 18);
      Node node2 = new Node(39, node0, node1, node1, 48, 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(48, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-420));
      Node node1 = new Node(14, 43, (-1986));
      Node node2 = new Node(40, node0, node0, node1, 825, 28);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(60);
      Node node1 = new Node(1, 7, 2);
      Node node2 = new Node(41, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(170);
      Node node1 = new Node(65, 25, 29);
      Node node2 = new Node(42, node0, node0, node1, 11, 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(146);
      Node node1 = new Node(2, 184, 15);
      Node node2 = new Node(43, node0, node0, node1, 20, 55);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(55, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-457));
      Node node1 = Node.newNumber((double) 36);
      Node node2 = new Node(45, node0, node0, node1, 1, 18);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(75);
      Node node1 = new Node(1, 18, 44);
      Node node2 = new Node(46, node1, node1, node0, (-825), (-3));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1424);
      Node node1 = new Node(27, 12, 1);
      Node node2 = new Node(47, node1, node1, node0, 10, 92);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-426));
      Node node1 = Node.newNumber((double) 36);
      Node node2 = new Node(48, node0, node0, node1, node1, 44, 13);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(48, node3.getType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-1236));
      Node node1 = new Node(33);
      Node node2 = new Node(49, node1, node1, node0, 2637, 40);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2637, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(78);
      Node node1 = new Node(1, 7, 2);
      Node node2 = new Node(50, node1, node1, node0, (-3668), 49);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(170, nodeArray0, 170, 170);
      Node node1 = new Node(4, 2, 12);
      Node node2 = new Node(52, node0, node1, node1, 43, 30);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1669);
      Node node1 = new Node(1, 18, 44);
      Node node2 = new Node(53, node0, node0, node1, 17, 0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(17, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1669, 1669, 1669);
      Node node1 = new Node(1, 34, 39);
      Node node2 = new Node(58, node0, node0, node1, (-3), 37);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(97, 97, 97);
      Node node1 = new Node(21, (-3), 7);
      Node node2 = new Node(63, node1, node0, node0, 2, 8203);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(130);
      Node node1 = new Node(4095, 19, 168);
      Node node2 = new Node(65, node1, node1, node0, 19, 18);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(170, nodeArray0, 170, 170);
      Node node1 = new Node(50);
      Node node2 = new Node(66, node1, node0, node0, 9, 7);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(141, 141, 141);
      Node node1 = new Node(1);
      Node node2 = new Node(70, node1, node1, node0, 4, 643);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1669, 1669, 1669);
      Node node1 = Node.newNumber((double) 13);
      Node node2 = new Node(71, node0, node1, node1, 11, 5);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(71, node3.getType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(91, 130, (-437));
      Node node1 = new Node(7, (-1490), (-65));
      Node node2 = new Node(72, node0, node0, node1, 3124, 32);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(130, 130, 130);
      Node node1 = new Node(15, 20, 1);
      Node node2 = new Node(73, node1, node1, node0, 4, 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-444), (-444), (-444));
      Node node1 = new Node(92, 2, 12);
      Node node2 = new Node(77, node1, node1, node0, 15, 30);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(78);
      Node node1 = new Node(4, 1900, 88);
      Node node2 = new Node(78, node0, node0, node1, 78, 761);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(78, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(91, 130, (-437));
      Node node1 = new Node(1, 2842, 28);
      Node node2 = new Node(79, node0, node1, node1, 732, (-307));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(3895);
      Node node1 = new Node(36, 4095, 50);
      Node node2 = new Node(80, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(2113);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseTestCode("1M.E");
      Node node2 = new Node(81, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(97);
      Node node1 = new Node(79, 2, 0);
      Node node2 = new Node(82, node1, node0, node0, 9, 7);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(82, node3.getType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(170);
      Node node1 = new Node(4, 2, 12);
      Node node2 = new Node(84, node1, node0, node0, 9, 7);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(84, node3.getType());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(3902);
      Node node1 = new Node(1, 10, 2);
      Node node2 = new Node(85, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(97, 97, 97);
      Node node1 = new Node(21, (-3), 7);
      Node node2 = new Node(86, node1, node0, node0, 2, 8203);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1669, 1669, 1669);
      Node node1 = new Node(1, 34, (-1587));
      Node node2 = new Node(88, node0, node0, node1, (-3), 37);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(170, 170, 170);
      Node node1 = new Node(17, 26, 28);
      Node node2 = new Node(89, node1, node0, node0, 1, 10);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(10, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-437));
      Node node1 = new Node(49, 27, 2);
      Node node2 = new Node(90, node1, node0, node0, 1, 31);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(170, 170, 170);
      Node node1 = new Node(17, 26, 28);
      Node node2 = new Node(92, node1, node0, node0, 1, 10);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1661);
      Node node1 = new Node(2, 26, 46);
      Node node2 = new Node(95, node1, node0, node0, 49, 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(78, 78, 78);
      Node node1 = new Node(1, 7, 2);
      Node node2 = new Node(97, node1, node1, node0, 47, 25);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(170, 170, 170);
      Node node1 = new Node(17, 26, 28);
      Node node2 = new Node(98, node1, node0, node0, 1, 10);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1632);
      Node node1 = new Node(50, 2932, 21);
      Node node2 = new Node(99, node1, node0, node0, 180, 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(99, node3.getType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(2526);
      Node node1 = new Node(2, 23, 17);
      Node node2 = new Node(100, node1, node0, node0, 18, 12);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(78);
      Node node1 = new Node(32);
      Node node2 = new Node(101, node0, node0, node1, 29, 22);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(29, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1669);
      Node node1 = new Node(1, 18, 44);
      Node node2 = new Node(1431655764, node0, node0, node1, 17, 0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-420));
      Node node1 = new Node(32, node0, node0, node0, 20, 34);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-420));
      Node node1 = new Node(40, 19, 25);
      Node node2 = new Node(32, node1, node0, node0, 20, 34);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(314);
      Node node1 = new Node(27);
      node1.addChildToBack(node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(301);
      Node node1 = new Node(29);
      Node node2 = new Node(38);
      node1.addChildToFront(node0);
      Node node3 = new Node(4155, node1, node1, node2, 29, 38);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(29, node4.getType());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(97, 97, 97);
      Node node1 = new Node(21, (-3), 7);
      Node node2 = new Node(43, node0, node0, node0, 46, 20);
      Node node3 = new Node(86, node1, node2, node2, 2, 8203);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertTrue(node4.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(97, 97, 97);
      Node node1 = new Node(21, (-3), 7);
      Node node2 = node1.cloneNode();
      Node node3 = new Node(43, node2, node0, node0, 46, 20);
      Node node4 = new Node(86, node1, node3, node3, 2, 8203);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(100);
      Node node1 = new Node(37, node0, node0, node0, 20, 24);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertEquals(1, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-2953));
      Node node1 = new Node(0, 5, 37);
      Node node2 = new Node(37, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }
}
