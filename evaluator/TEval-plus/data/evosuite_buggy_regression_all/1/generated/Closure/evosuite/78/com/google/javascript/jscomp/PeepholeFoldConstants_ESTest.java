/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:10:52 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = new Node(27, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(28);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(78, "JSC_INDEX_OUT_OF_BOUNDS_ERROR", 78, 78);
      Node node1 = new Node(29, node0, 39, 2);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(32, 44, 32);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(5, Node.FUNCTION_PROP);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(37, 42, 7);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(13, Node.CASES_PROP);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("length");
      Node node1 = Node.newString(2, "length", (-1045), 24);
      Node node2 = new Node(12, node0, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(654, 43, 654);
      Node node1 = Node.newString(95, "T(0TTHyV#`J#Y", 47, 1);
      Node node2 = new Node(9, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-1588), (-1588), (-1588));
      Node node1 = Node.newString((-2003), "V:J;y=$:lQ6roi", (-2352), 49);
      Node node2 = new Node(10, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(82, "JSC_UNKNOWN_OVERRIDE", 97, 97);
      Node node1 = Node.newString(8, "JSC_UNKNOWN_OVERRIDE");
      Node node2 = new Node(11, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("sbstS", 1, 1);
      Node node1 = Node.newString(3194, "sbstS", 163, 36);
      Node node2 = new Node(13, node0, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString((-43), "", (-397), (-43));
      Node node1 = Node.newString(11, "", 10, 26);
      Node node2 = new Node(14, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      Node node2 = new Node(15, node0, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(15, node3.getType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(43, "T(0TT7HyV=`J#Y", 43, 43);
      Compiler compiler0 = new Compiler();
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "T(0TT7HyV=`J#Y", "59'0(bX3*9W0KOwx*~");
      Node node2 = new Node(16, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isLocalResultCall());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("msg.function.not.found.in");
      Node node1 = Node.newString(14, "msg.function.not.found.in");
      Node node2 = new Node(17, node0, node1, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(654, 654, 2216);
      Node node1 = Node.newString(539, "T(0TTHyV#`J#Y", 38, 2);
      Node node2 = new Node(19, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(654, 654, 654);
      Node node1 = Node.newString(30, "T(0TTHyV#`J#Y", 25, 6);
      Node node2 = new Node(20, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newString("", 3, 3);
      Node node1 = Node.newString(61, "", 10, 0);
      Node node2 = new Node(21, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(21, node3.getType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(172, 172, 172);
      Node node1 = Node.newString(8, "V:J;y=$:lQ6roi", 172, 49);
      Node node2 = new Node(22, node1, node1, node0, 34, 34);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(1289, "8V:J;y=$:lQ6ri", 1289, 1289);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node node2 = new Node(23, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(23, node3.getType());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(133);
      Node node1 = Node.newString(4, "JSC_INVALID_CAST", 4, 46);
      Node node2 = new Node(24, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(97, 97, 97);
      Node node1 = Node.newString(1, "8V:J;y=$:lQ6ri", 26, 24);
      Node node2 = new Node(25, node0, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(148, "JSC_INDEX_OUT_OF_BOUNDS_ROR", 148, 148);
      Node node1 = Node.newString((-3), "JSC_INDEX_OUT_OF_BOUNDS_ROR", 12, 41);
      Node node2 = new Node(31, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(";JMT}leZ)");
      Node node1 = Node.newString(32, ";JMT}leZ)", 22, 26);
      Node node2 = new Node(33, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(1289, "]4CNeF`9;Qc:", 1289, 1289);
      Node node1 = Node.newString(2, "]4CNeF`9;Qc:", (int) (byte)0, (int) (byte)0);
      Node node2 = new Node(34, node0, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(680, 5055, 5055);
      Node node1 = new Node(680, 5055, 5055);
      Node node2 = new Node(35, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("msg.funtion[not.found.in");
      Node node1 = Node.newString(14, "msg.funtion[not.found.in");
      Node node2 = new Node(36, node0, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-43));
      Node node1 = Node.newString(36, "JSC_INDEX_OUT_OF_BOUNDS_ERROR", 47, 37);
      Node node2 = new Node(38, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(38, node3.getType());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("length");
      Node node1 = Node.newString(77, "length", (-1045), 24);
      Node node2 = new Node(39, node0, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.SPECIALCALL_EVAL);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = Node.newString(0, "", 34, 101);
      Node node2 = new Node(40, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(63, 126, 63);
      Node node1 = Node.newString(100, "JSC_INDEX_OUT_OF_BOUNDS_ERROR", 43, 1);
      Node node2 = new Node(41, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(5, Node.FUNCTION_PROP);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(680, 680, 680);
      Node node1 = Node.newString(14, "com.google.javascript.jscomp.CombinedCompilerPass$CallbackWrapper");
      Node node2 = new Node(42, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(9, Node.FIXUPS_PROP);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(104, "V:J;y=$:lQ6ri", 104, 104);
      Node node1 = Node.newString(8, "V:J;y=$:lQ6ri", 104, 49);
      Node node2 = new Node(43, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(11, 11, 11);
      Node node1 = Node.newString(15, "8V:J;y=$:lQ6ri", 8, 3538);
      Node node2 = new Node(44, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(26, Node.DIRECTCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("msg.function.not.found.in");
      Node node1 = Node.newString("msg.function.not.found.in");
      Node node2 = new Node(45, node0, node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("+");
      Node node1 = Node.newString(36, "+", 1, 44);
      Node node2 = new Node(46, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(104, 104, 104);
      Node node1 = Node.newString(8, "V:J;y=$:lQ6roi", 104, 49);
      Node node2 = new Node(47, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("msg.function.not.found.in");
      Node node1 = new Node(16, 89, 2265);
      Node node2 = new Node(48, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(47, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("nh");
      Node node1 = Node.newString(36, "nh", 1, 44);
      Node node2 = new Node(49, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(36, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(30, 30, 30);
      Node node1 = Node.newString(47, "%HkviPaSCQ", 2, 21);
      Node node2 = new Node(50, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, Node.BREAK_PROP);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(11, 11, 11);
      Node node1 = Node.newString(33, "8V:J;y=$:lQ6ri", (-2), 34);
      Node node2 = new Node(53, node0, node1, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isOnlyModifiesThisCall());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Stig");
      Node node1 = new Node((-3));
      Node node2 = new Node(54, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(44, 44, 44);
      Node node1 = Node.newString(1631, "R", 13, 1524);
      Node node2 = new Node(55, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(49, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString((-43), "Unknown shift operator: ", (-43), (-43));
      Node node1 = new Node(12, 8, (-43));
      Node node2 = new Node(56, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("", 3, 3);
      Node node1 = Node.newString(61, "", 10, 0);
      Node node2 = new Node(57, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(33, Node.NAME_PROP);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = new Node(2);
      Node node2 = new Node(58, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(3, Node.CONTINUE_PROP);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("msg.funtion[not.found.in");
      Node node1 = Node.newString(14, "msg.funtion[not.found.in");
      Node node2 = new Node(59, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1574, (-1960), (-1960));
      Node node1 = Node.newString(38, "Unknown shift operator: ", 4, 122);
      Node node2 = new Node(62, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, Node.RIGHT);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(43, "T(0TT7HyV=`J#Y", 43, 43);
      Node node1 = Node.newString((-1811), "T(0TT7HyV=`J#Y", 1687, (-65));
      Node node2 = new Node(63, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(26, Node.DIRECTCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Unknown shift operator: ", (-34), (-34));
      Node node1 = Node.newString(36, "Unknown shift operator: ", 16, 28);
      Node node2 = new Node(64, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(47, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("8V:J;y$:lQ6ri", 60, 7);
      Node node1 = Node.newString(33, "8V:J;y$:lQ6ri", 2764, 34);
      Node node2 = new Node(65, node1, node0, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(48, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Ste`,X");
      Node node1 = Node.newString("Ste`,X", 434, 12);
      Node node2 = new Node(66, node1, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(9, Node.FIXUPS_PROP);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node(142, 142, 142);
      Node node1 = Node.newString(8, "V:J;y=$:lQ6roi", 142, 49);
      Node node2 = new Node(67, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = Node.newString(31, "NOT_SAFE_TO_FOLD", 29, 38);
      Node node2 = new Node(68, node0, node0, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(35, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(104, 104, 104);
      Node node1 = Node.newString(8, "V:J;y=$:lQ6roi", 104, 49);
      Node node2 = new Node(69, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(1289, "|{x\u0000k[HSp4X=%b:", 1289, 1289);
      Node node1 = new Node(26);
      Node node2 = new Node(70, node1, node1, node0, 70, 27);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(104, "V:J;y=$:lQ6ri", 104, 104);
      Node node1 = Node.newString(8, "V:J;y=$:lQ6ri", 104, 49);
      Node node2 = new Node(71, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("length");
      Node node1 = Node.newString(20, "length", 14, 930);
      Node node2 = new Node(72, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(48, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(90, "<", (-1001), (-1499));
      Node node1 = Node.newString(4, "JSC_IND4X_OUT_OF_BOyNDS_ERROR", 29, (-546));
      Node node2 = new Node(73, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Sig");
      Node node1 = new Node(2);
      Node node2 = new Node(74, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(15, Node.CASEARRAY_PROP);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("+8^8P{~JD}sZI- Bl|", (-1113), (-1113));
      Node node1 = new Node(37, 42, 7);
      Node node2 = new Node(75, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node(1289, 58, 58);
      Node node1 = new Node(177);
      Node node2 = new Node(76, node1, node0, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Stig");
      Node node1 = new Node((-3));
      Node node2 = new Node(77, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(1289, "]4CNeF`9;Qc:", 1289, 1289);
      Node node1 = Node.newString(2, "]4CNeF`9;Qc:", (int) (byte)0, (int) (byte)0);
      Node node2 = new Node(78, node1, node1, node0, 94, 27);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(49, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(1289, "]4CNeF`9;Qc:", 1289, 1289);
      Node node1 = Node.newString("]4CNeF`9;Qc:", 42, 39);
      Node node2 = new Node(79, node1, node1, node0, 79, 27);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(35, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("", 3, (-2004));
      Node node1 = Node.newString(2, "string", 1715, 20);
      Node node2 = new Node(80, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.PROPERTY_FLAG);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(44, 44, 44);
      Node node1 = Node.newString(19, "", 4, 27);
      Node node2 = new Node(82, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(680, 680, 680);
      Node node1 = Node.newString(30, "T(0TTHyV#`J#Y", 25, 6);
      Node node2 = new Node(83, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertSame(node2, node3);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(151, 151, 151);
      Node node1 = Node.newString(8, "V:J;y=$:lQ6roi", 151, 49);
      Node node2 = new Node(84, node1, node1, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, node3.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(178, 178, 178);
      Node node1 = Node.newString(8, "V:J;y=$:lQ6roi", 178, 49);
      Node node2 = new Node(85, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("8V:J;y$:lQ6ri", 60, 7);
      Node node1 = Node.newString(33, "8V:J;y$:lQ6ri", 45, 34);
      Node node2 = new Node(86, node1, node0, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(86, node3.getType());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(10, "[].join()", 29, 29);
      Node node1 = Node.newString(10, "kXa`RzsWnN\"", (-2), 45);
      Node node2 = new Node(87, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(104, "V:J;y=$:lQ6roi", 104, 104);
      Node node1 = Node.newString(8, "V:J;y=$:lQ6roi", 104, 49);
      Node node2 = new Node(88, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(24, Node.LASTUSE_PROP);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(1987, "", 1987, 1987);
      Node node1 = Node.newString((-32), "", 9, (-4170));
      Node node2 = new Node(89, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(19, Node.LABEL_PROP);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(111);
      Node node1 = Node.newString((-3903), "JSC_INDEX_OUT_OF_BOUNDS_ERROR", 17, 46);
      Node node2 = new Node(90, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, node3.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("length");
      Node node1 = Node.newString(2301, "", 13, (-1));
      Node node2 = new Node(91, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(6, Node.TEMP_PROP);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = Node.newString(4095, "", 35, 39);
      Node node2 = new Node(92, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(12, Node.REGEXP_PROP);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(97, 97, 97);
      Node node1 = Node.newString(1, "8V:J;y=$:lQ6ri", 26, 24);
      Node node2 = new Node(93, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(680, 680, 680);
      Node node1 = Node.newString(30, "T(0TTHyV#`J#Y", 25, 6);
      Node node2 = new Node(95, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(654, 654, 654);
      Node node1 = Node.newString(30, "T(0TTHyV#`J#Y", 25, 6);
      Node node2 = new Node(98, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(15, Node.CASEARRAY_PROP);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(63, 63, 63);
      Node node1 = Node.newString(19, "", 4, 27);
      Node node2 = new Node(99, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(654, 654, 654);
      Node node1 = Node.newString(30, "T(0TTHyV#`J#Y", 25, 6);
      Node node2 = new Node(100, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(570, "]4CNeF`9;Qc:", 2081, 43);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node node2 = new Node(101, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("*", (-1113), (-1113));
      Node node1 = new Node(37, 42, 7);
      Node node2 = new Node(0, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, Node.ENUM_PROP);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = new Node(122, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(1075, "JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS", 1075, 1075);
      Node node1 = new Node(18, node0, node0, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertEquals(18, node2.getType());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(51, "JSC_INDEX_OUT_OF_BOUNDS_ERROR", 3206, 3206);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(20, Node.FINALLY_PROP);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(52, "Stig", 52, 52);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(60, "Can't negate non-numeric value: {0}", 22, 16);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(0, node1.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(61, "", (-32), (-32));
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(30, 6, (-2098));
      Node node1 = new Node(81, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(94, "-vz");
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(318, "a]b~W*j1Q~DkX", 16, (-1324));
      Node node1 = new Node(96, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertEquals(96, node2.getType());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(97, 97, 97);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(46);
      Node node1 = new Node(21, node0, node0, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(38, "JSC_INDEX_OUT_OF_BOUNDS_ERROR", 101, 101);
      Node node1 = new Node(22, node0, node0, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-96.503654));
      Node node1 = new Node(89, node0, node0, node0, 15, 1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertEquals(1, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(98, 38, 98);
      Node node1 = new Node(29, node0, 39, 2);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(100, "Bad replacement configuration.", 74, (-827));
      Node node1 = new Node(88, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(101, "JSC_INDEX_OUT_OF_BOUNDS_ERROR");
      Node node1 = new Node(22, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("JSC_INDEX_OT_OF_BOUNDS_ERROR");
      Node node1 = new Node(22, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(44);
      Node node1 = new Node(32, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Unexpected node type: ");
      Node node1 = new Node((-1), node0, node0);
      Node node2 = new Node(32, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(32, node3.getType());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(44);
      Node node1 = Node.newString(40, "", 4, 189);
      Node node2 = new Node(32, node1, node0, node1, node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("Ste`,X");
      Node node1 = new Node(26, node0, node0, node0, (-3), 42);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(47, 47, 318);
      Node node1 = new Node(27, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node(142, 142, 142);
      Node node1 = Node.newString(451, "V:J;y=$:lQ6roi", 25, 35);
      Node node2 = new Node(21, node0, node0, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("JSC_INDEX_OUT_OF_BOUNDS_ROR", 148, 148);
      Node node1 = Node.newString((-3), "JSC_INDEX_OUT_OF_BOUNDS_ROR", 12, 41);
      Node node2 = new Node(16, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, Node.NON_SPECIALCALL);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("", (-1103), (-1103));
      Node node1 = Node.newString("");
      Node node2 = new Node(16, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(15, Node.CASEARRAY_PROP);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(30, 6, (-2098));
      Node node1 = new Node(81, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertSame(node2, node0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(76, "JSC_INDEXfOUT_OF_BOUNDS_ERROR", 76, 76);
      Node node1 = new Node(37, node0, node0, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(1, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(1289, "]4CNeF`9;Qc:", 1289, 1289);
      Node node1 = Node.newString("]4CNeF`9;Qc:", 42, 39);
      Node node2 = new Node(33, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }
}
