/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:00:13 GMT 2023
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.block.CenterArrangement;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setFixedDimension(0.05);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D0.equals(categoryAxis0);
      assertEquals(0.05, categoryAxis0.getFixedDimension(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.addChangeListener(thermometerPlot0);
      boolean boolean0 = categoryAxis3D0.hasListener(thermometerPlot0);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(boolean0);
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabelURL("org.jfree.chart.axis.Axis");
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D1.equals(categoryAxis3D0);
      assertFalse(categoryAxis3D1.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D1.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(boolean0);
      assertTrue(categoryAxis3D1.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D1.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryAxis categoryAxis1 = (CategoryAxis)categoryAxis0.clone();
      assertEquals(2.0F, categoryAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis1.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis1.isTickLabelsVisible());
      assertTrue(categoryAxis1.isAxisLineVisible());
      assertFalse(categoryAxis1.isTickMarksVisible());
      assertEquals(0.0, categoryAxis1.getLabelAngle(), 0.01);
      assertNotSame(categoryAxis1, categoryAxis0);
      assertTrue(categoryAxis1.isVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabelToolTip("T");
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D0.equals(categoryAxis3D1);
      assertTrue(categoryAxis3D1.isTickLabelsVisible());
      assertTrue(categoryAxis3D1.isAxisLineVisible());
      assertFalse(boolean0);
      assertEquals(2.0F, categoryAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis3D1.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D1.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D1.isVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.getLabelURL();
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("xm<@i YhX");
      ModuloAxis moduloAxis0 = new ModuloAxis("(V*_2|C[\"Q", periodAxis0.DEFAULT_RANGE);
      moduloAxis0.getLabelToolTip();
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setTickMarkInsideLength(1.0F);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D0.equals(categoryAxis0);
      assertEquals(1.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertTrue(categoryAxis3D0.isVisible());
      
      categoryAxis3D0.setVisible(true);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      subCategoryAxis0.setLabel((String) null);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(subCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("(V*_2|C[\"Q");
      subCategoryAxis0.setLabel("Jean-Luc SCHWAB");
      assertEquals("Jean-Luc SCHWAB", subCategoryAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Null 'font' argument.");
      categoryAxis3D0.setLabel("Null 'font' argument.");
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabel("kMWx");
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        categoryAxis3D0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Font font0 = Font.getFont("rzS3v", categoryAxis3D0.DEFAULT_AXIS_LABEL_FONT);
      categoryAxis3D0.setLabelFont(font0);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      // Undeclared exception!
      try { 
        categoryAxis0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        categoryAxis3D0.setLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        categoryAxis3D0.setAxisLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      RingPlot ringPlot0 = new RingPlot();
      Stroke stroke0 = ringPlot0.getSeparatorStroke();
      categoryAxis3D0.setAxisLineStroke(stroke0);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D1.equals(categoryAxis3D0);
      assertEquals(2.0F, categoryAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D1.getLabelAngle(), 0.01);
      assertFalse(categoryAxis3D1.isTickMarksVisible());
      assertTrue(categoryAxis3D1.isVisible());
      assertFalse(boolean0);
      assertTrue(categoryAxis3D1.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        categoryAxis3D0.setAxisLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      
      categoryAxis3D0.setTickLabelsVisible(true);
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        categoryAxis3D0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setTickLabelFont(categoryAxis0.DEFAULT_TICK_LABEL_FONT);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis0.setTickLabelPaint(categoryAxis3D0.DEFAULT_TICK_MARK_PAINT);
      boolean boolean0 = categoryAxis3D0.equals(categoryAxis0);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertFalse(boolean0);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateAxis0.DEFAULT_RANGE);
      // Undeclared exception!
      try { 
        moduloAxis0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("xm<@i YhX");
      // Undeclared exception!
      try { 
        categoryAxis3D0.setTickLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("xm<@i YhX");
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setTickLabelInsets(periodAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setTickMarksVisible(false);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      BasicStroke basicStroke0 = (BasicStroke)XYPlot.DEFAULT_GRIDLINE_STROKE;
      categoryAxis3D0.setTickMarkStroke(basicStroke0);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D0.equals(categoryAxis3D1);
      assertTrue(categoryAxis3D1.isAxisLineVisible());
      assertFalse(categoryAxis3D1.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D1.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0, categoryAxis3D1.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        categoryAxis3D0.setTickMarkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setTickMarkStroke(categoryAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      // Undeclared exception!
      try { 
        categoryAxis3D0.setTickMarkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      categoryAxis0.removeChangeListener(thermometerPlot0);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.removeChangeListener((AxisChangeListener) null);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D0.hasListener(multiplePiePlot0);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertFalse(boolean0);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)categoryAxis3D0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertTrue(categoryAxis3D0.isVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("u>iC");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(4.515625, rectangle2D_Double0.x, 0.01);
      assertTrue(categoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(15, 10, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(10);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      AxisState axisState0 = logarithmicAxis0.draw(graphics2D0, 1, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(15.0, axisState0.getCursor(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(15, 10, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'state' argument.");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      AxisState axisState0 = logarithmicAxis0.draw(graphics2D0, 0.0, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals((-35.609375), axisState0.getCursor(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw(graphics2D0, 10, (Rectangle2D) null, (Rectangle2D) null, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(15, 10, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 0, 2.0F, 2);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.data.time.Quarter");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      chartRenderingInfo0.setEntityCollection((EntityCollection) null);
      AxisState axisState0 = logarithmicAxis0.draw(graphics2D0, 10, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(43.96875, axisState0.getCursor(), 0.01);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("bJnAc{,Jz jz&My-");
      CenterArrangement centerArrangement0 = new CenterArrangement();
      LegendTitle legendTitle0 = new LegendTitle(thermometerPlot0, centerArrangement0, centerArrangement0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw((Graphics2D) null, 0, (Rectangle2D) null, (Rectangle2D) null, legendTitle0.DEFAULT_POSITION, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(15, 10, 3);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Null 'stae' argument.");
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(15);
      categoryAxis3D0.drawAxisLine(graphics2D0, 4.0, rectangle2D_Double0, rectangleEdge0);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("XB:\"/-gv(pTS$0");
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(371, 3);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        subCategoryAxis0.draw(graphics2D0, 1, (Rectangle2D) null, (Rectangle2D) null, (RectangleEdge) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D$Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D0.equals(categoryAxis3D1);
      assertEquals(0.0, categoryAxis3D1.getLabelAngle(), 0.01);
      assertTrue(boolean0);
      assertFalse(categoryAxis3D1.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D1.isAxisLineVisible());
      assertTrue(categoryAxis3D1.isTickLabelsVisible());
      assertTrue(categoryAxis3D1.isVisible());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      categoryAxis3D1.setVisible(false);
      boolean boolean0 = categoryAxis3D1.equals(categoryAxis3D0);
      assertFalse(boolean0);
      assertFalse(categoryAxis3D1.isVisible());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D("L53?#giRf._R,Rr0'");
      boolean boolean0 = categoryAxis3D1.equals(categoryAxis3D0);
      assertFalse(categoryAxis3D1.isTickMarksVisible());
      assertTrue(categoryAxis3D1.isVisible());
      assertTrue(categoryAxis3D1.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D1.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0, categoryAxis3D1.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      assertTrue(categoryAxis3D1.equals((Object)categoryAxis3D0));
      
      categoryAxis3D1.setLabelFont(categoryAxis3D0.DEFAULT_TICK_LABEL_FONT);
      boolean boolean0 = categoryAxis3D1.equals(categoryAxis3D0);
      assertFalse(categoryAxis3D1.equals((Object)categoryAxis3D0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      assertTrue(categoryAxis3D1.equals((Object)categoryAxis3D0));
      
      categoryAxis3D1.setLabelPaint(categoryAxis3D0.DEFAULT_AXIS_LINE_PAINT);
      boolean boolean0 = categoryAxis3D1.equals(categoryAxis3D0);
      assertFalse(categoryAxis3D1.equals((Object)categoryAxis3D0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      assertTrue(categoryAxis3D1.equals((Object)categoryAxis3D0));
      
      categoryAxis3D1.setLabelInsets(categoryAxis3D0.DEFAULT_TICK_LABEL_INSETS);
      boolean boolean0 = categoryAxis3D1.equals(categoryAxis3D0);
      assertFalse(categoryAxis3D1.equals((Object)categoryAxis3D0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabelAngle(0.05);
      boolean boolean0 = categoryAxis3D0.equals(categoryAxis0);
      assertEquals(0.05, categoryAxis3D0.getLabelAngle(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setAxisLineVisible(false);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D1.equals(categoryAxis3D0);
      assertFalse(boolean0);
      assertFalse(categoryAxis3D0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      assertTrue(categoryAxis3D1.equals((Object)categoryAxis3D0));
      
      categoryAxis3D1.setAxisLinePaint(categoryAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      boolean boolean0 = categoryAxis3D1.equals(categoryAxis3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      categoryAxis3D1.setTickLabelsVisible(false);
      boolean boolean0 = categoryAxis3D1.equals(categoryAxis3D0);
      assertFalse(categoryAxis3D1.isTickLabelsVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      assertTrue(categoryAxis3D1.equals((Object)categoryAxis3D0));
      
      categoryAxis3D1.setTickLabelFont(categoryAxis3D0.DEFAULT_AXIS_LABEL_FONT);
      boolean boolean0 = categoryAxis3D0.equals(categoryAxis3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      assertTrue(categoryAxis3D1.equals((Object)categoryAxis3D0));
      
      categoryAxis3D1.setTickLabelInsets(categoryAxis3D0.DEFAULT_AXIS_LABEL_INSETS);
      boolean boolean0 = categoryAxis3D0.equals(categoryAxis3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertFalse(categoryAxis3D0.isTickMarksVisible());
      
      categoryAxis3D0.setTickMarksVisible(true);
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      boolean boolean0 = categoryAxis3D1.equals(categoryAxis3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      categoryAxis3D1.setTickMarkOutsideLength(0.0F);
      boolean boolean0 = categoryAxis3D0.equals(categoryAxis3D1);
      assertFalse(boolean0);
      assertEquals(0.0F, categoryAxis3D1.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D();
      assertTrue(categoryAxis3D1.equals((Object)categoryAxis3D0));
      
      categoryAxis3D1.setTickMarkPaint(categoryAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      boolean boolean0 = categoryAxis3D1.equals(categoryAxis3D0);
      assertFalse(boolean0);
  }
}
