/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:39:15 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionDeserializer_ESTest extends CollectionDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2000);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      Class<JsonDeserializer> class1 = JsonDeserializer.class;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "xteZc", false, class1);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0, jsonLocationInstantiator0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        collectionDeserializer0.deserializeWithType((JsonParser) null, defaultDeserializationContext_Impl0, asPropertyTypeDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InputStream> class0 = InputStream.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2008);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      Boolean boolean0 = Boolean.TRUE;
      Class<PushbackInputStream> class1 = PushbackInputStream.class;
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(javaType0, classNameIdResolver0, "H]D<vUo=B]r", false, class1);
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, coreXMLDeserializers_Std0, asArrayTypeDeserializer0, (ValueInstantiator) null, coreXMLDeserializers_Std0, boolean0);
      CollectionDeserializer collectionDeserializer1 = new CollectionDeserializer(collectionDeserializer0);
      assertFalse(collectionDeserializer1.equals((Object)collectionDeserializer0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      Class<JsonDeserializer> class1 = JsonDeserializer.class;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "tj", true, class1);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0, jsonLocationInstantiator0);
      JavaType javaType1 = collectionDeserializer0.getContentType();
      assertNull(javaType1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<Integer> class1 = Integer.class;
      Class<POJONode> class2 = POJONode.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class2, 0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, classNameIdResolver0, (String) null, false, class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(mapType0, fromStringDeserializer_Std0, asWrapperTypeDeserializer0, jsonLocationInstantiator0);
      JsonDeserializer<Object> jsonDeserializer0 = collectionDeserializer0.getContentDeserializer();
      assertFalse(jsonDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2147483645);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "t>", false, class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0, jsonLocationInstantiator0);
      CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved(coreXMLDeserializers_Std0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      assertNotSame(collectionDeserializer1, collectionDeserializer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InputStream> class0 = InputStream.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2008);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "n5HP%*!k", true, class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      Boolean boolean0 = Boolean.TRUE;
      Class<POJONode> class1 = POJONode.class;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, classNameIdResolver0, "?M", true, class1);
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, coreXMLDeserializers_Std0, asWrapperTypeDeserializer0, jsonLocationInstantiator0, coreXMLDeserializers_Std0, boolean0);
      CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved(coreXMLDeserializers_Std0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0, boolean0);
      assertNotSame(collectionDeserializer1, collectionDeserializer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InputStream> class0 = InputStream.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2008);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      Boolean boolean0 = Boolean.TRUE;
      Class<PushbackInputStream> class1 = PushbackInputStream.class;
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(javaType0, classNameIdResolver0, "H]D<vUo=B]r", false, class1);
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, coreXMLDeserializers_Std0, asArrayTypeDeserializer0, (ValueInstantiator) null, coreXMLDeserializers_Std0, boolean0);
      CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved(coreXMLDeserializers_Std0, coreXMLDeserializers_Std0, asArrayTypeDeserializer0, boolean0);
      assertSame(collectionDeserializer1, collectionDeserializer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<Integer> class1 = Integer.TYPE;
      Class<POJONode> class2 = POJONode.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, (TypeIdResolver) null, "[k}-bX", true, class1);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(mapType0, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0, jsonLocationInstantiator0);
      Boolean boolean0 = Boolean.TRUE;
      CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, (JsonDeserializer<?>) null, asPropertyTypeDeserializer0, boolean0);
      assertFalse(collectionDeserializer1.isCachable());
      assertNotSame(collectionDeserializer1, collectionDeserializer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<Integer> class1 = Integer.class;
      Class<POJONode> class2 = POJONode.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class2, 0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, classNameIdResolver0, (String) null, false, class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(mapType0, fromStringDeserializer_Std0, asWrapperTypeDeserializer0, jsonLocationInstantiator0);
      boolean boolean0 = collectionDeserializer0.isCachable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, (String) null);
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InputStream> class0 = InputStream.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2008);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      Class<HashMap> class1 = HashMap.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(javaType0, classNameIdResolver0, (String) null, false, class1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, coreXMLDeserializers_Std0, asArrayTypeDeserializer0, (ValueInstantiator) null, coreXMLDeserializers_Std0, (Boolean) null);
      // Undeclared exception!
      try { 
        collectionDeserializer0.createContextual(defaultDeserializationContext_Impl0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleType> class0 = SimpleType.class;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InputStream> class0 = InputStream.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2008);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "n5HP%*!k", false, class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0, jsonLocationInstantiator0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("n5HP%*!k");
      try { 
        collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not instantiate value of type com.fasterxml.jackson.core.JsonLocation; no default creator found
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InputStream> class0 = InputStream.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2008);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "bFmT*#", true, class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("bFmT*#");
      Boolean boolean0 = Boolean.FALSE;
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0, jsonLocationInstantiator0, coreXMLDeserializers_Std0, boolean0);
      // Undeclared exception!
      try { 
        collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InputStream> class0 = InputStream.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2008);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Boolean boolean0 = Boolean.TRUE;
      Class<PushbackInputStream> class1 = PushbackInputStream.class;
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(javaType0, classNameIdResolver0, "H]D<vUo=B]r", false, class1);
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, coreXMLDeserializers_Std0, asArrayTypeDeserializer0, (ValueInstantiator) null, coreXMLDeserializers_Std0, boolean0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("Y");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.CollectionDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InputStream> class0 = InputStream.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2023);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "Y", false, class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0, jsonLocationInstantiator0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("H]D<vUo=B]r");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InputStream> class0 = InputStream.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2023);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "Y", false, class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0, jsonLocationInstantiator0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Boolean boolean0 = Boolean.valueOf("H]D<vUo=B]r");
      CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved(coreXMLDeserializers_Std0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0, boolean0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("H]D<vUo=B]r");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        collectionDeserializer1.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<Integer> class1 = Integer.TYPE;
      Class<POJONode> class2 = POJONode.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class2, 0);
      Boolean boolean0 = Boolean.TRUE;
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(mapType0, fromStringDeserializer_Std0, (TypeDeserializer) null, (ValueInstantiator) null, fromStringDeserializer_Std0, boolean0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Stack<Object> stack0 = new Stack<Object>();
      try { 
        collectionDeserializer0.handleNonArray(jsonParser0, deserializationContext0, stack0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.lang.NullPointerException) (through reference chain: java.lang.Object[0])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<String> class0 = String.class;
      Stack<Object> stack0 = new Stack<Object>();
      CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, stack0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference((JsonParser) null, "MI");
      collectionDeserializer_CollectionReferringAccumulator0.handleUnresolvedReference(unresolvedForwardReference0);
      collectionDeserializer_CollectionReferringAccumulator0.add(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      Stack<Object> stack0 = new Stack<Object>();
      CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, stack0);
      collectionDeserializer_CollectionReferringAccumulator0.add(stack0);
      assertEquals(1, stack0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, linkedHashSet0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[5];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      PipedReader pipedReader0 = new PipedReader();
      JsonLocation jsonLocation0 = jsonParser0.getTokenLocation();
      Class<POJONode> class1 = POJONode.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class1, class0, pipedReader0);
      ReadableObjectId readableObjectId0 = new ReadableObjectId(objectIdGenerator_IdKey0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "JSON", jsonLocation0, readableObjectId0);
      collectionDeserializer_CollectionReferringAccumulator0.handleUnresolvedReference(unresolvedForwardReference0);
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class2, 1026);
      // Undeclared exception!
      try { 
        collectionDeserializer_CollectionReferringAccumulator0.resolveForwardReference(objectIdGenerators_IntSequenceGenerator0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to resolve a forward reference with id [com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator@13] that wasn't previously seen as unresolved.
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator", e);
      }
  }
}
