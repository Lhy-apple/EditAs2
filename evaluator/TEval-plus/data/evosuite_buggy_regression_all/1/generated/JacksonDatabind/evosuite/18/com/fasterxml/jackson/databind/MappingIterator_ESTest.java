/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:33:47 GMT 2023
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MappingIterator_ESTest extends MappingIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MappingIterator<Integer> mappingIterator0 = MappingIterator.emptyIterator();
      // Undeclared exception!
      try { 
        mappingIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MappingIterator<String> mappingIterator0 = MappingIterator.emptyIterator();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.mappingException("zy]");
      // Undeclared exception!
      try { 
        mappingIterator0._handleIOException((IOException) jsonMappingException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zy]
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MappingIterator<String> mappingIterator0 = MappingIterator.emptyIterator();
      boolean boolean0 = mappingIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Stack<Boolean> stack0 = new Stack<Boolean>();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(stack0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(2845.913);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(numericNode0);
      MappingIterator<Object> mappingIterator0 = objectReader0.readValues(jsonParser0);
      try { 
        mappingIterator0.readAll();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not deserialize instance of java.util.Stack out of VALUE_NUMBER_FLOAT token
         //  at [Source: java.lang.String@0000000002; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParserDelegate0, jsonParserDelegate0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
      Class<Integer> class0 = Integer.class;
      MappingIterator<Integer> mappingIterator0 = objectMapper0.readValues((JsonParser) filteringParserDelegate0, class0);
      JsonParser jsonParser0 = mappingIterator0.getParser();
      assertSame(filteringParserDelegate0, jsonParser0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ObjectReader> class0 = ObjectReader.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      StringReader stringReader0 = new StringReader("");
      MappingIterator<IntNode> mappingIterator0 = objectReader0.readValues((Reader) stringReader0);
      JsonLocation jsonLocation0 = mappingIterator0.getCurrentLocation();
      assertEquals(1, jsonLocation0.getLineNr());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MappingIterator<Boolean> mappingIterator0 = MappingIterator.emptyIterator();
      // Undeclared exception!
      try { 
        mappingIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MappingIterator<String> mappingIterator0 = MappingIterator.emptyIterator();
      // Undeclared exception!
      try { 
        mappingIterator0.getParserSchema();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MappingIterator<String> mappingIterator0 = MappingIterator.emptyIterator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.withArray("");
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, jsonToken0, "scJ8r8Xi9k]]N[");
      // Undeclared exception!
      try { 
        mappingIterator0._handleMappingException(jsonMappingException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected token (null), expected VALUE_NULL: scJ8r8Xi9k]]N[
         //  at [Source: java.lang.String@0000000009; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      JsonDeserializer<JsonEncoding> jsonDeserializer0 = (JsonDeserializer<JsonEncoding>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      MappingIterator<Object> mappingIterator0 = objectReader0._newIterator((JavaType) null, (JsonParser) null, (DeserializationContext) null, (JsonDeserializer<?>) jsonDeserializer0, true, (Object) jsonFactory0);
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MappingIterator<Boolean> mappingIterator0 = MappingIterator.emptyIterator();
      mappingIterator0.close();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ObjectReader> class0 = ObjectReader.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      StringReader stringReader0 = new StringReader("");
      MappingIterator<IntNode> mappingIterator0 = objectReader0.readValues((Reader) stringReader0);
      mappingIterator0.close();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ObjectReader> class0 = ObjectReader.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      StringReader stringReader0 = new StringReader("");
      MappingIterator<IntNode> mappingIterator0 = objectReader0.readValues((Reader) stringReader0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(1);
      mappingIterator0._hasNextChecked = true;
      // Undeclared exception!
      try { 
        mappingIterator0.readAll((Collection<Object>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Stack<Boolean> stack0 = new Stack<Boolean>();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(stack0);
      DoubleNode doubleNode0 = new DoubleNode(2845.913);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(doubleNode0);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-1942));
      MappingIterator<Object> mappingIterator0 = objectReader0._bindAndReadValues(jsonParser0, (Object) byteArrayInputStream0);
      try { 
        mappingIterator0.nextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not deserialize instance of java.util.Stack out of VALUE_NUMBER_FLOAT token
         //  at [Source: java.lang.String@0000000002; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ObjectReader> class0 = ObjectReader.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.withArray("E|SG[J\"yMC|i.X#W");
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(arrayNode0);
      Boolean boolean0 = new Boolean(false);
      MappingIterator<Boolean> mappingIterator0 = objectReader0._bindAndReadValues(jsonParser0, (Object) boolean0);
      mappingIterator0.hasNextValue();
      MappingIterator<ObjectReader> mappingIterator1 = objectMapper0.readValues(jsonParser0, class0);
      // Undeclared exception!
      try { 
        mappingIterator1.nextValue();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 1, 0);
      Class<Boolean> class0 = Boolean.class;
      MappingIterator<Boolean> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      mappingIterator0.readAll((Collection<Boolean>) treeSet0);
      // Undeclared exception!
      try { 
        mappingIterator0.nextValue();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MappingIterator<String> mappingIterator0 = MappingIterator.emptyIterator();
      List<String> list0 = mappingIterator0.readAll((List<String>) null);
      assertNull(list0);
  }
}
