/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:41:31 GMT 2023
 */

package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import java.lang.reflect.Array;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdSubtypeResolver_ESTest extends StdSubtypeResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      stdSubtypeResolver0.registerSubtypes(classArray0);
      Class<String>[] classArray1 = (Class<String>[]) Array.newInstance(Class.class, 0);
      stdSubtypeResolver0.registerSubtypes(classArray1);
      assertEquals(0, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<Integer> class0 = Integer.TYPE;
      classArray0[0] = class0;
      stdSubtypeResolver0.registerSubtypes(classArray0);
      assertEquals(1, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      HashMap<NamedType, NamedType> hashMap0 = new HashMap<NamedType, NamedType>();
      Class<Object> class0 = Object.class;
      NamedType namedType0 = new NamedType(class0);
      stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType0, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      HashMap<NamedType, NamedType> hashMap0 = new HashMap<NamedType, NamedType>();
      Class<Object> class0 = Object.class;
      NamedType namedType0 = new NamedType(class0);
      hashMap0.put(namedType0, namedType0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType0, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      HashMap<NamedType, NamedType> hashMap0 = new HashMap<NamedType, NamedType>();
      Class<Object> class0 = Object.class;
      NamedType namedType0 = new NamedType(class0);
      NamedType namedType1 = new NamedType(class0, "1(N[YZ|bw");
      hashMap0.put(namedType1, namedType0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType1, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
      assertEquals("1(N[YZ|bw", namedType1.getName());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      Class<Integer> class0 = Integer.class;
      NamedType namedType0 = new NamedType(class0, "}s;&Q)TnED)}x");
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      HashMap<NamedType, NamedType> hashMap0 = new HashMap<NamedType, NamedType>();
      hashMap0.put(namedType0, namedType0);
      stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType0, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
      assertEquals(1, hashMap0.size());
  }
}
