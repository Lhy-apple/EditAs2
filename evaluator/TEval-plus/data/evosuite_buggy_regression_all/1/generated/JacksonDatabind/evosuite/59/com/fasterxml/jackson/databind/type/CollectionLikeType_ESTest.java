/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:38:24 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBase;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionLikeType_ESTest extends CollectionLikeType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      Class<Integer> class0 = Integer.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      String string0 = collectionLikeType0.getErasedSignature();
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals("Ljava/lang/Integer;", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, javaType0);
      String string0 = collectionLikeType0.toString();
      assertEquals("[collection-like type; class java.lang.String, contains [simple type, class java.lang.Object]]", string0);
      assertFalse(collectionLikeType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      Class<ReferenceType> class0 = ReferenceType.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler(simpleType0);
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
      assertFalse(collectionLikeType1.useStaticType());
      assertTrue(collectionLikeType1.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Integer> class0 = Integer.class;
      Class<MapType> class1 = MapType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      Object object0 = collectionLikeType0.getContentValueHandler();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      collectionType0.getContentTypeHandler();
      assertFalse(collectionType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      Class<Object> class0 = Object.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class0, javaTypeArray0);
      JavaType javaType0 = collectionLikeType0.refine(class0, typeBindings0, simpleType0, javaTypeArray0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeBase._bogusSuperClass(class0);
      ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      Class<SimpleType> class0 = SimpleType.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      String string0 = collectionLikeType0.getGenericSignature();
      assertEquals("Lcom/fasterxml/jackson/databind/type/SimpleType<Ljava/lang/Enum;>;", string0);
      assertFalse(collectionLikeType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withValueHandler(simpleType0);
      assertFalse(collectionLikeType1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      Class<ArrayType> class0 = ArrayType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[1];
      // Undeclared exception!
      try { 
        CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentValueHandler(class0);
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
      assertFalse(collectionLikeType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = collectionLikeType0._narrow(class0);
      assertFalse(javaType0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) collectionType0);
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(1, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionLikeType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      Class<Integer> class0 = Integer.class;
      TypeFactory typeFactory0 = new TypeFactory((LRUMap<Object, JavaType>) null);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class1, class0);
      JavaType javaType0 = collectionLikeType0.withContentType(simpleType0);
      assertNotSame(javaType0, collectionLikeType0);
      assertFalse(javaType0.equals((Object)collectionLikeType0));
      assertFalse(javaType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      Class<MapLikeType> class0 = MapLikeType.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      JavaType javaType0 = collectionLikeType0.withContentType(simpleType0);
      assertFalse(javaType0.useStaticType());
      assertSame(javaType0, collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) collectionLikeType1, (JavaType) collectionLikeType1);
      MapType mapType1 = mapType0.withStaticTyping();
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(collectionLikeType1.useStaticType());
      assertFalse(mapType1.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      Class<SimpleType> class0 = SimpleType.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      CollectionType collectionType0 = new CollectionType(simpleType0, collectionLikeType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionType0, collectionType0);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(referenceType0);
      boolean boolean0 = collectionType1.hasHandlers();
      assertTrue(boolean0);
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(collectionType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(582, (-1279));
      TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
      Class<MapType> class0 = MapType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, (JavaType) null);
      String string0 = collectionLikeType0.toCanonical();
      assertEquals("com.fasterxml.jackson.databind.type.MapType", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (JavaType) simpleType0);
      String string0 = collectionLikeType0.toCanonical();
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals("com.fasterxml.jackson.databind.type.ReferenceType<java.lang.Enum>", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Integer> class0 = Integer.class;
      Class<MapType> class1 = MapType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      boolean boolean0 = collectionLikeType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, javaType0);
      CollectionLikeType collectionLikeType1 = CollectionLikeType.construct((Class<?>) class0, (JavaType) collectionLikeType0);
      boolean boolean0 = collectionLikeType0.equals(collectionLikeType1);
      assertFalse(collectionLikeType1.useStaticType());
      assertFalse(boolean0);
      assertFalse(collectionLikeType1.equals((Object)collectionLikeType0));
  }
}
