/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:38:16 GMT 2023
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.ObjectBuffer;
import com.fasterxml.jackson.databind.util.RawValue;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.net.URI;
import java.net.URL;
import java.util.Collection;
import java.util.HashMap;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenBuffer_ESTest extends TokenBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      tokenBuffer0.enable(jsonGenerator_Feature0);
      assertEquals(287, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonParser jsonParser0 = null;
      TokenBuffer tokenBuffer0 = null;
      try {
        tokenBuffer0 = new TokenBuffer((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000049; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer0.writeEndObject();
      SerializedString serializedString0 = new SerializedString("[typeId=");
      tokenBuffer0._appendRaw(743, "[typeId=");
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeNumberField("v.>ushu", 2042.87718);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      String string0 = tokenBuffer0.toString();
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals("[TokenBuffer: ]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer_Parser0.nextFieldName((SerializableString) serializedString0);
      tokenBuffer_Parser0._codec = null;
      tokenBuffer_Parser0.overrideCurrentName("");
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      tokenBuffer_Parser0.getEmbeddedObject();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer0._append(jsonToken0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-2);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawUTF8String(byteArray0, (byte)7, (byte) (-2));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      tokenBuffer0.getCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes((CharacterEscapes) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = '*';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, (-2), (-745));
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      char[] charArray1 = new char[3];
      charArray1[0] = '>';
      charArray1[1] = 'R';
      charArray1[2] = '>';
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRawValue(charArray1, 0, (-745));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      tokenBuffer_Parser0.enable(jsonParser_Feature0);
      try { 
        tokenBuffer_Parser0.getByteValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000049; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "JSON");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper2 = objectMapper1.setTypeFactory(typeFactory0);
      Class<Locale.Category> class0 = Locale.Category.class;
      ObjectReader objectReader0 = objectMapper2.readerFor(class0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      tokenBuffer0.writeString("JSON");
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken1 = JsonToken.VALUE_NUMBER_INT;
      Byte byte0 = new Byte((byte)45);
      tokenBuffer_Segment0.append((-2214), jsonToken1, (Object) jsonToken0, (Object) byte0);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      boolean boolean0 = tokenBuffer_Segment1.hasIds();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer0.writeNumber(bigInteger0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(912, 912, (Object) tokenBuffer0, (Object) serializedString0, (Object) serializedString0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      String string0 = tokenBuffer_Parser0.nextFieldName();
      assertNull(string0);
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.appendRaw(8, 8, (Object) jsonFactory0, (Object) jsonFactory0, (Object) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.appendRaw(8, 8, (Object) null, (Object) null, (Object) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000049; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer0._append(jsonToken0);
      JsonToken jsonToken1 = JsonToken.VALUE_FALSE;
      JsonToken jsonToken2 = JsonToken.START_ARRAY;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(1509, jsonToken2, (Object) null, (Object) jsonToken1);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken2);
      assertNotNull(tokenBuffer_Segment2);
      
      boolean boolean0 = tokenBuffer_Segment2.hasIds();
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.writeStartArray((-1355));
      tokenBuffer0.writeNumberField("v.>ushu", 2042.87718);
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(16, (-976));
      tokenBuffer_Parser0.getValueAsDouble();
      tokenBuffer_Parser0.getCodec();
      tokenBuffer_Parser0.overrideCurrentName((String) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      assertEquals(31, tokenBuffer1.getFeatureMask());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)89;
      tokenBuffer0.writeBinaryField((String) null, byteArray0);
      tokenBuffer_Parser0.getText();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer0.writeBooleanField(" (", false);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer0._append(jsonToken0);
      tokenBuffer0.writeEndObject();
      tokenBuffer0.setFeatureMask(92);
      assertEquals(92, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      Class<Locale.Category> class0 = Locale.Category.class;
      objectMapper1.readerFor(class0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper1);
      JsonParser jsonParser0 = jsonFactory1.createParser((InputStream) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, (DeserializationContext) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0, (DeserializationContext) null);
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertEquals(31, tokenBuffer2.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      tokenBuffer0._append(jsonToken0);
      tokenBuffer0.writeEndObject();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer0.writeEndObject();
      SerializedString serializedString0 = new SerializedString("[typeId=");
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.overrideStdFeatures(16, 743);
      // Undeclared exception!
      tokenBuffer0.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      tokenBuffer0._append(jsonToken0);
      tokenBuffer0.writeEndObject();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGeneratorDelegate0.isEnabled(jsonGenerator_Feature0);
      JsonGenerator jsonGenerator0 = jsonGeneratorDelegate0.disable(jsonGenerator_Feature0);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      deserializationFeatureArray0[6] = deserializationFeature1;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw('q');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      Class<Locale.Category> class0 = Locale.Category.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      tokenBuffer0.writeString("JSON");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Object object0 = new Object();
      tokenBuffer0.writeObjectId(object0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      tokenBuffer_Parser0.getParsingContext();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonFactory0.enable(jsonGenerator_Feature0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.getCurrentLocation();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      tokenBuffer0.writeNumberField("2Im1za_", (double) (byte)0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw((String) null, (-337), (-385));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      SerializedString serializedString0 = new SerializedString("$.Qc4yf");
      tokenBuffer0._appendRaw(65534, serializedString0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getEmbeddedObject();
      tokenBuffer0.useDefaultPrettyPrinter();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      Class<Locale.Category> class0 = Locale.Category.class;
      objectMapper1.readerFor(class0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper1);
      JsonParser jsonParser0 = jsonFactory1.createParser((InputStream) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      typeFactory0.withClassLoader(classLoader1);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, (DeserializationContext) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0, (DeserializationContext) null);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimal1.toString();
      tokenBuffer1.writeObject(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.overrideCurrentName("Expected END_OBJECT after copying contents of a JsonParser into TokenBuffer, got ");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getEmbeddedObject();
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer0._append(jsonToken0);
      tokenBuffer_Parser0.getText();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      Class<Locale.Category> class0 = Locale.Category.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      LongNode longNode0 = LongNode.valueOf(16);
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.append((-4271), jsonToken0, (Object) jsonFactory0, (Object) longNode0, (Object) "twKvZ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4271
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(65534, jsonToken0);
      tokenBuffer_Segment1.hasIds();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      SerializedString serializedString0 = new SerializedString(" entries)");
      serializedString0.asQuotedChars();
      tokenBuffer0._appendRaw(1, serializedString0);
      tokenBuffer0.writeTypeId(" entries)");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer0._append(jsonToken0);
      tokenBuffer0.writeEndObject();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      Class<Float> class0 = Float.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectReader0, true, true);
      tokenBuffer_Parser0.peekNextToken();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      boolean boolean0 = false;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = 'w';
      charArray0[2] = 'I';
      charArray0[3] = 'v';
      charArray0[4] = '{';
      charArray0[5] = 'N';
      charArray0[6] = '+';
      charArray0[7] = 't';
      charArray0[8] = '+';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeString(charArray0, (-2347), (-2347));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      tokenBuffer0.writeNumberField(" entries)", (long) 1);
      SerializedString serializedString0 = new SerializedString(" entries)");
      tokenBuffer0._appendRaw(1, serializedString0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer0.writeNumber(0.0F);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      tokenBuffer0.disable(jsonGenerator_Feature0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      SerializedString serializedString0 = new SerializedString("$.Qc4yf");
      serializedString0.asQuotedUTF8();
      arrayNode0.asInt(5);
      tokenBuffer0._appendRaw(65534, serializedString0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      Double double0 = new Double(0.0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(65534, (-2793), (Object) double0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.isClosed();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getText();
      tokenBuffer0.writeObjectId(tokenBuffer_Segment0);
      tokenBuffer0.asParser((JsonParser) tokenBuffer_Parser0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer0.writeEndObject();
      SerializedString serializedString0 = new SerializedString("[typeId=");
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer0._append(jsonToken0);
      tokenBuffer0.writeEndObject();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonGenerator jsonGenerator0 = jsonGeneratorDelegate0.disable(jsonGenerator_Feature0);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      String string0 = "Internal error: should never end up through this code path";
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.getValueAsBoolean(false);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("Internal error: should never end up through this code path");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.getCurrentValue();
      tokenBuffer0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Locale.Category> class0 = Locale.Category.class;
      objectMapper1.readerFor(class0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper1);
      JsonParser jsonParser0 = jsonFactory1.createParser((InputStream) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, (DeserializationContext) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0, (DeserializationContext) null);
      tokenBuffer1.writeNull();
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      tokenBuffer1.append(tokenBuffer2);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(32750, jsonToken0);
      tokenBuffer_Segment1.hasIds();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      // Undeclared exception!
      try { 
        tokenBuffer0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      Integer integer0 = new Integer(1582);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(65534, jsonToken0, (Object) integer0);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0._next;
      Class<Locale.Category> class0 = Locale.Category.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectReader0, true, true);
      tokenBuffer_Parser0.peekNextToken();
      tokenBuffer0.canWriteBinaryNatively();
      tokenBuffer0.setCodec((ObjectCodec) null);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer0._append(jsonToken0);
      tokenBuffer0.asParser();
      // Undeclared exception!
      try { 
        tokenBuffer0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      tokenBuffer_Segment0.append(65534, jsonToken0, (Object) null, (Object) jsonParser0);
      JsonToken jsonToken1 = JsonToken.END_ARRAY;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(65534, jsonToken1);
      tokenBuffer_Segment1.hasIds();
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0._next;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.getTokenLocation();
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'h';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw(charArray0, 3388, 5368);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "JSON");
      TypeFactory.defaultInstance();
      Class<Locale.Category> class0 = Locale.Category.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      tokenBuffer0.writeString("JSON");
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1, true);
      tokenBuffer1.toString();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.toString();
      Object object0 = tokenBuffer0._typeId;
      tokenBuffer0.writeObject((Object) null);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw((SerializableString) serializedString0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "JSON");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper2 = objectMapper1.setTypeFactory(typeFactory0);
      Class<Locale.Category> class0 = Locale.Category.class;
      ObjectReader objectReader0 = objectMapper2.readerFor(class0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      tokenBuffer0.writeString("JSON");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      tokenBuffer0.getCurrentValue();
      tokenBuffer0.writeObject((Object) null);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGeneratorDelegate0.disable(jsonGenerator_Feature0);
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer0._append(jsonToken0);
      tokenBuffer0.writeNumberField("[PreAndSuffixTransformer('", 0.0F);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.peekNextToken();
      tokenBuffer_Segment0.findTypeId(5);
      tokenBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.appendRaw(8, 8, (Object) null, (Object) null, (Object) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeNumberField("", (-438.72F));
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.peekNextToken();
      tokenBuffer_Segment0.findTypeId((-12));
      tokenBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer0._append(jsonToken0);
      tokenBuffer0.writeEndObject();
      JsonToken jsonToken1 = JsonToken.END_OBJECT;
      tokenBuffer_Segment0.append((-1457), jsonToken1);
      Class<Locale.Category> class0 = Locale.Category.class;
      objectMapper0.readerFor(class0);
      tokenBuffer0.writeNumberField("", (float) 16);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      tokenBuffer_Parser0.peekNextToken();
      tokenBuffer_Segment0.findTypeId(16);
      tokenBuffer0.toString();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)39;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeUTF8String(byteArray0, (byte)36, 32768);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, (DeserializationContext) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0, (DeserializationContext) null);
      tokenBuffer0.append(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = false;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeNumber(0L);
      tokenBuffer0.writeNumber(0L);
      tokenBuffer0.writeObjectFieldStart((String) null);
      tokenBuffer0.close();
      tokenBuffer0.writeNumber((BigInteger) null);
      // Undeclared exception!
      try { 
        tokenBuffer0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.rawType(32768);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      tokenBuffer_Segment0.append(65534, jsonToken0, (Object) null, (Object) jsonParser0);
      JsonToken jsonToken1 = JsonToken.END_ARRAY;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(65534, jsonToken1);
      tokenBuffer_Segment1.hasIds();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.nextFieldName();
      tokenBuffer_Parser0.getTypeId();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      tokenBuffer_Segment0.append(65534, jsonToken0, (Object) null, (Object) jsonParser0);
      JsonGenerator jsonGenerator0 = tokenBuffer0.setHighestNonEscapedChar(16);
      tokenBuffer0.serialize(jsonGenerator0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, true);
      tokenBuffer_Parser0.peekNextToken();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeNumber(bigInteger0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      tokenBuffer_Segment0.append((-2195), jsonToken0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      tokenBuffer_Parser0.getCurrentName();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer0.writeEndObject();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = jsonGeneratorDelegate0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, false, true);
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(16, 16);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      tokenBuffer1.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      JsonNodeFactory.withExactBigDecimals(false);
      Long long0 = new Long(0L);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      tokenBuffer_Segment0.append((-3570), jsonToken0);
      tokenBuffer_Segment0.hasIds();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      tokenBuffer1.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.appendRaw(8, 8, (Object) null, (Object) null, (Object) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.firstToken();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getCurrentLocation();
      tokenBuffer_Parser0.getTextLength();
      tokenBuffer0.toString();
      SerializedString serializedString0 = new SerializedString("xpKh7!jY3{q-");
      tokenBuffer0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      Class<Locale.Category> class0 = Locale.Category.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      tokenBuffer0.writeString("JSON");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      tokenBuffer0.getFeatureMask();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.getObjectId();
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(86, 16);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      tokenBuffer0.writeNumberField("KsrCXx8", 16);
      tokenBuffer0.writeEndObject();
      tokenBuffer_Segment1.findTypeId(58);
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer_Parser0.nextToken();
      SerializedString serializedString0 = new SerializedString("[typeId=");
      tokenBuffer0.writeString((SerializableString) serializedString0);
      tokenBuffer_Parser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer0.writeEndObject();
      SerializedString serializedString0 = new SerializedString("[typeId=");
      tokenBuffer0._appendRaw((-684), "[typeId=");
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.close();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Double double0 = new Double(424.5826153);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      Long long0 = new Long((-1478));
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.setTypeFactory(typeFactory0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      Class<PipedInputStream> class0 = PipedInputStream.class;
      Class<Short> class1 = Short.class;
      objectMapper0.readerFor(class1);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(4362, jsonToken0, (Object) class0);
      tokenBuffer_Segment1.rawType((-1478));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      Class<Locale.Category> class0 = Locale.Category.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getText();
      BigDecimal bigDecimal0 = new BigDecimal((long) 16);
      BigDecimal bigDecimal1 = bigDecimal0.movePointRight(16);
      MathContext mathContext0 = MathContext.DECIMAL64;
      bigDecimal1.remainder(bigDecimal0, mathContext0);
      tokenBuffer0.writeNumber(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer_Parser0.nextFieldName((SerializableString) serializedString0);
      tokenBuffer_Parser0._codec = null;
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures((-682), 108);
      tokenBuffer_Parser0.getValueAsDouble();
      tokenBuffer_Parser0.getCodec();
      jsonParser0.overrideCurrentName((String) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0, deserializationContext0);
      tokenBuffer_Parser0.getValueAsInt();
      tokenBuffer1.serialize(tokenBuffer0);
      tokenBuffer0.toString();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      try { 
        tokenBuffer_Parser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000049; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      Class<Locale.Category> class0 = Locale.Category.class;
      objectMapper1.readerFor(class0);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0.writeNumber((short) (-538));
      tokenBuffer0.writeString(",");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      Class<Locale.Category> class0 = Locale.Category.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper1);
      JsonParser jsonParser0 = jsonFactory1.createParser((InputStream) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, (DeserializationContext) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0, (DeserializationContext) null);
      tokenBuffer0.isClosed();
      ObjectReader objectReader1 = objectReader0.with((Locale) null);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectReader1, false);
      tokenBuffer2.asParser(jsonParser0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, true, true);
      tokenBuffer_Parser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      tokenBuffer_Segment0.append(65534, jsonToken0, (Object) null, (Object) jsonParser0);
      JsonToken jsonToken1 = JsonToken.END_ARRAY;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(65534, jsonToken1);
      tokenBuffer_Segment1.hasIds();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URI uRI1 = MockURL.toURI(uRL0);
      MockFile mockFile0 = new MockFile(uRI1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      LongNode longNode0 = LongNode.valueOf(0L);
      tokenBuffer0._appendRaw(65534, longNode0);
      tokenBuffer_Parser0.hasTextCharacters();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = null;
      ObjectCodec objectCodec0 = null;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer_Parser0.nextFieldName((SerializableString) serializedString0);
      tokenBuffer_Parser0._codec = null;
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures((-682), 108);
      tokenBuffer_Parser0.getValueAsDouble();
      ObjectMapper objectMapper0 = new ObjectMapper();
      jsonParser0.overrideCurrentName((String) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      byte byte0 = (byte)2;
      byte[] byteArray0 = new byte[5];
      tokenBuffer0.writeBinaryField((String) null, byteArray0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("WB", (int) (byte)0, 108);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      System.setCurrentTimeMillis((-2101L));
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      char[] charArray0 = new char[6];
      charArray0[0] = '8';
      charArray0[1] = '[';
      charArray0[2] = '>';
      charArray0[3] = 'U';
      charArray0[4] = '.';
      charArray0[5] = 'w';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      MissingNode missingNode0 = MissingNode.getInstance();
      tokenBuffer0.writeTree(missingNode0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      Class<Locale.Category> class0 = Locale.Category.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      tokenBuffer0.writeString("JSON");
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.next();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, true, true);
      tokenBuffer_Parser0.version();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Double double0 = new Double(424.5826153);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      tokenBuffer_Segment0.next();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType javaType1 = objectMapper0.constructType(javaType0);
      ObjectReader objectReader0 = objectMapper0.readerFor(javaType1);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectReader0, false, false);
      try { 
        tokenBuffer_Parser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000049; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0._codec = null;
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures((-682), 108);
      tokenBuffer_Parser0.getValueAsDouble();
      tokenBuffer_Parser0.getCodec();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getDeserializationContext();
      tokenBuffer0.writeNumberField("", (float) 108);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Segment0.findTypeId((-682));
      tokenBuffer0.toString();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer_Parser0.nextFieldName((SerializableString) serializedString0);
      tokenBuffer_Parser0._codec = null;
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures((-682), 108);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S+/t+)FH1nf'2k~{Q,");
      tokenBuffer_Parser0.getValueAsDouble();
      tokenBuffer_Parser0.getCodec();
      jsonParser0.overrideCurrentName((String) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      byte byte0 = (byte)0;
      byte byte1 = (byte)66;
      byte[] byteArray0 = new byte[5];
      tokenBuffer0.writeBinaryField((String) null, byteArray0);
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      try { 
        jsonParser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000049; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      boolean boolean0 = new Boolean(true);
      tokenBuffer_Parser0._codec = null;
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures((-682), 108);
      tokenBuffer_Parser0.getValueAsDouble();
      tokenBuffer_Parser0.getCodec();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getDeserializationContext();
      tokenBuffer0.writeNumberField("", (float) 108);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      tokenBuffer_Segment0.findTypeId((-682));
      tokenBuffer0.toString();
      tokenBuffer0._append(jsonToken0, (Object) null);
      tokenBuffer0.version();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      boolean boolean0 = true;
      boolean boolean1 = false;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(9, 69);
      tokenBuffer_Parser0.getValueAsDouble();
      ObjectMapper objectMapper1 = new ObjectMapper();
      tokenBuffer_Parser0.overrideCurrentName((String) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      byte[] byteArray0 = new byte[0];
      tokenBuffer0.writeBinaryField("RP;", byteArray0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("WB", 16, 69);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      tokenBuffer0._append(jsonToken0);
      tokenBuffer0.writeEndObject();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGeneratorDelegate0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      tokenBuffer0._appendRaw(2490, jsonFactory0);
      tokenBuffer0.writeNumber((String) null);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TypeFactory.defaultInstance();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      tokenBuffer1._append(jsonToken0);
      tokenBuffer0.writeEndObject();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGeneratorDelegate0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory1 = new JsonFactory();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      tokenBuffer_Parser0.overrideStdFeatures(248, 16);
      JsonFactory jsonFactory2 = jsonFactory0.setCodec(objectMapper0);
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = 'a';
      charArray0[2] = 'U';
      charArray0[3] = 'G';
      charArray0[4] = '5';
      jsonFactory2.createParser(charArray0);
      tokenBuffer1.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.appendRaw(8, 8, (Object) null, (Object) null, (Object) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      tokenBuffer0._append(jsonToken0);
      tokenBuffer0.writeEndObject();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.overrideStdFeatures(8, 8);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      tokenBuffer1.writeNumber(bigDecimal0);
      tokenBuffer1.writeObjectId(jsonFactory0);
      tokenBuffer1.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.isClosed();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      RawValue rawValue0 = new RawValue(bigDecimal0, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, rawValue0, false);
      PipedReader pipedReader0 = new PipedReader(1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)23;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put(":Aywxd", bigDecimal0);
      objectNode1.putArray("VKtpzsKY{$5w");
      ValueNode valueNode0 = jsonNodeFactory0.rawValueNode(rawValue0);
      tokenBuffer0.writeTree(valueNode0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.writeString((String) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.putPOJO("", tokenBuffer_Segment0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((Set) null).when(pOJOPropertiesCollector0).getIgnoredPropertyNames();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Set<String> set0 = basicBeanDescription0.getIgnoredPropertyNames();
      objectNode0.retain((Collection<String>) set0);
      objectNode1.put((String) null, bigDecimal0);
      ArrayNode arrayNode0 = objectNode1.putArray("");
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      tokenBuffer2.writeTree(arrayNode0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      tokenBuffer0._append(jsonToken0);
      tokenBuffer0.writeEndObject();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(46, jsonToken0);
      Class<Locale.Category> class0 = Locale.Category.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      tokenBuffer0.writeNumberField("QN,M1Xr9B=M]N0", 2184.036F);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectReader0, true, false);
      tokenBuffer_Parser0.peekNextToken();
      tokenBuffer_Segment0.findTypeId(16);
      tokenBuffer0.toString();
      tokenBuffer_Segment1.append(86, jsonToken0, (Object) class0, (Object) typeFactory0, (Object) objectReader0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.getCurrentValue();
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(86, 16);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      tokenBuffer0.writeEndObject();
      tokenBuffer_Segment1.findTypeId(58);
      tokenBuffer_Parser0.nextToken();
      tokenBuffer_Parser0.nextToken();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = tokenBuffer0.configure(jsonGenerator_Feature0, false);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeNumber(bigInteger0);
      tokenBuffer0.isClosed();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      tokenBuffer_Parser0.getCurrentValue();
      tokenBuffer_Parser0.overrideStdFeatures((-780), 32768);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      tokenBuffer0.writeEndObject();
      tokenBuffer_Segment0.findTypeId(2750);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser1.nextToken();
      tokenBuffer_Parser0.nextToken();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator0 = tokenBuffer0.configure(jsonGenerator_Feature0, false);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      Class<Locale.Category> class0 = Locale.Category.class;
      objectMapper1.readerFor(class0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper1);
      JsonParser jsonParser0 = jsonFactory1.createParser((InputStream) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, (DeserializationContext) null);
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0, (DeserializationContext) null);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      tokenBuffer1.append(tokenBuffer2);
      tokenBuffer2.getCodec();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer_Parser0.nextFieldName((SerializableString) serializedString0);
      tokenBuffer_Parser0._codec = null;
      JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures((-682), 108);
      tokenBuffer_Parser0.getValueAsDouble();
      ObjectMapper objectMapper0 = new ObjectMapper();
      jsonParser0.overrideCurrentName("");
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      objectMapper0.isEnabled(jsonFactory_Feature0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectReader0, true, false);
      jsonParser0.overrideStdFeatures((byte)0, 46);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      tokenBuffer1.writeNumber(bigDecimal0);
      RawValue rawValue0 = new RawValue(serializedString0);
      tokenBuffer0.writeObjectId(rawValue0);
      tokenBuffer1.serialize(tokenBuffer0);
      jsonParser0.getCurrentLocation();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TypeFactory.defaultInstance();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      tokenBuffer1._append(jsonToken0);
      tokenBuffer0.writeEndObject();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGeneratorDelegate0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory1 = new JsonFactory();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      tokenBuffer1.writeNumberField("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", (-1L));
      tokenBuffer_Parser0.overrideStdFeatures(248, 16);
      JsonFactory jsonFactory2 = jsonFactory0.setCodec(objectMapper0);
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = 'a';
      charArray0[2] = 'U';
      charArray0[3] = 'G';
      charArray0[4] = '5';
      jsonFactory2.createParser(charArray0);
      tokenBuffer1.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.appendRaw(8, 8, (Object) null, (Object) null, (Object) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.firstToken();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser2.nextFieldName();
      tokenBuffer0.firstToken();
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer_Parser0.nextFieldName((SerializableString) serializedString0);
      tokenBuffer_Parser0._codec = null;
      tokenBuffer_Parser0.overrideCurrentName("");
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      tokenBuffer0.isClosed();
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer1.getOutputTarget();
      tokenBuffer0.writeObjectId((Object) null);
      tokenBuffer1.asParser((JsonParser) tokenBuffer_Parser0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      tokenBuffer1.writeRawValue("");
      tokenBuffer_Parser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.appendRaw(8, 8, (Object) null, (Object) null, (Object) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getCurrentLocation();
      tokenBuffer_Parser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      tokenBuffer0._append(jsonToken0);
      tokenBuffer0.writeEndObject();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGeneratorDelegate0.isEnabled(jsonGenerator_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGeneratorDelegate0.disable(jsonGenerator_Feature1);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.serialize(tokenBuffer1);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer_Parser0.nextFieldName((SerializableString) serializedString0);
      tokenBuffer_Parser0._codec = null;
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(312, jsonToken0, (Object) null, (Object) serializedString0, (Object) "Wy<");
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1._next;
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = tokenBuffer_Parser1.enable(jsonParser_Feature0);
      jsonParser0.nextToken();
      try { 
        tokenBuffer_Parser1.readBinaryValue((OutputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary
         //  at [Source: java.lang.String@0000000049; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TypeFactory.defaultInstance();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      tokenBuffer1._append(jsonToken0);
      tokenBuffer0.writeEndObject();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGeneratorDelegate0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory1 = new JsonFactory();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      tokenBuffer1.writeNumberField("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", (-1L));
      tokenBuffer_Parser0.overrideStdFeatures(248, 16);
      JsonFactory jsonFactory2 = jsonFactory0.setCodec(objectMapper0);
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      tokenBuffer0.append(tokenBuffer1);
      charArray0[1] = 'a';
      charArray0[2] = 'U';
      charArray0[3] = 'G';
      jsonGeneratorDelegate0.getOutputContext();
      charArray0[4] = '5';
      jsonFactory2.createParser(charArray0);
      tokenBuffer1.serialize(jsonGeneratorDelegate0);
      tokenBuffer_Parser0.close();
  }
}
