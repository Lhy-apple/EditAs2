/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:34:16 GMT 2023
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.module.SimpleSerializers;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.Serializers;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.math.BigInteger;
import java.net.InetSocketAddress;
import java.sql.Timestamp;
import java.util.EnumSet;
import java.util.Map;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BasicSerializerFactory_ESTest extends BasicSerializerFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<InetSocketAddress> class0 = InetSocketAddress.class;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.pair((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, (JavaType) null, annotatedClass0);
      // Undeclared exception!
      try { 
        beanSerializerFactory0.buildIteratorSerializer((SerializationConfig) null, (JavaType) null, basicBeanDescription0, false, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      assertNotSame(beanSerializerFactory0, serializerFactory0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      objectMapper0.writeValue((OutputStream) byteArrayOutputStream0, (Object) beanSerializerModifier0);
      assertEquals(689, byteArrayOutputStream0.size());
      assertEquals("{\"mockitoInterceptor\":{\"serializationSupport\":{},\"mockHandler\":{\"invocationContainer\":{\"invocationForStubbing\":null,\"stubbingsAscending\":[],\"invocations\":[],\"stubbingsDescending\":[]},\"mockSettings\":{\"outerClassInstance\":null,\"constructorArgs\":null,\"lenient\":false,\"stripAnnotations\":false,\"stubOnly\":false,\"typeToMock\":\"com.fasterxml.jackson.databind.ser.BeanSerializerModifier\",\"spiedInstance\":null,\"name\":null,\"invocationListeners\":[{\"copyOfMethodDescriptors\":[]}],\"stubbingLookupListeners\":[],\"verificationStartedListeners\":[],\"extraInterfaces\":[],\"mockName\":{\"default\":true},\"serializableMode\":\"NONE\",\"defaultAnswer\":\"RETURNS_DEFAULTS\",\"serializable\":false,\"usingConstructor\":false}}}}", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<EnumSet> class0 = EnumSet.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      // Undeclared exception!
      try { 
        beanSerializerFactory0.buildMapEntrySerializer((SerializationConfig) null, collectionType0, basicBeanDescription0, true, collectionType0, collectionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      Serializers.Base serializers_Base0 = new Serializers.Base();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(serializers_Base0);
      assertNotSame(beanSerializerFactory0, serializerFactory0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      SerializerFactoryConfig serializerFactoryConfig1 = beanSerializerFactory0.getFactoryConfig();
      assertSame(serializerFactoryConfig1, serializerFactoryConfig0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SimpleSerializers simpleSerializers0 = new SimpleSerializers();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalKeySerializers(simpleSerializers0);
      assertFalse(serializerFactory0.equals((Object)beanSerializerFactory0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<TextNode> class0 = TextNode.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      JsonSerializer<?> jsonSerializer0 = beanSerializerFactory0.buildEnumSetSerializer(simpleType0);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory((SerializerFactoryConfig) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      objectMapper0.writeValue((OutputStream) byteArrayOutputStream0, (Object) bigInteger0);
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IntNode intNode0 = IntNode.valueOf(2153);
      objectMapper0.writeValue((OutputStream) byteArrayOutputStream0, (Object) intNode0);
      assertTrue(intNode0.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      Class<Timestamp> class0 = Timestamp.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      JsonSerializer<?> jsonSerializer0 = beanSerializerFactory0.findSerializerByPrimaryType(defaultSerializerProvider_Impl0, simpleType0, basicBeanDescription0, true);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<Double> class0 = Double.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<?> jsonSerializer0 = beanSerializerFactory0.findSerializerByPrimaryType(defaultSerializerProvider_Impl0, simpleType0, basicBeanDescription0, true);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Double double0 = new Double(2035.10865001);
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      Class<String> class0 = String.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) null, (Object) double0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations((MapperConfig<?>) null, referenceType0, (ClassIntrospector.MixInResolver) null);
      JsonSerializer<?> jsonSerializer0 = beanSerializerFactory0.findSerializerByAddonType((SerializationConfig) null, referenceType0, basicBeanDescription0, true);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      Class<DecimalNode> class0 = DecimalNode.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, simpleType0);
      // Undeclared exception!
      try { 
        beanSerializerFactory0.findSerializerByAddonType((SerializationConfig) null, collectionLikeType0, (BeanDescription) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Class<InetSocketAddress> class1 = InetSocketAddress.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, arrayType0);
      JsonSerializer<?> jsonSerializer0 = beanSerializerFactory0.findSerializerByAddonType((SerializationConfig) null, collectionLikeType0, (BeanDescription) null, false);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<DeserializationFeature> class0 = DeserializationFeature.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        beanSerializerFactory0.buildContainerSerializer(defaultSerializerProvider_Impl0, arrayType0, (BeanDescription) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<DeserializationFeature> class0 = DeserializationFeature.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        beanSerializerFactory0.buildContainerSerializer(defaultSerializerProvider_Impl0, arrayType1, (BeanDescription) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<EnumSet> class0 = EnumSet.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      Class<Map> class1 = Map.class;
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) collectionType0, (JavaType) collectionType0);
      Object object0 = beanSerializerFactory0.findSuppressableContentValue((SerializationConfig) null, mapType0, basicBeanDescription0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<ShortNode> class0 = ShortNode.class;
      // Undeclared exception!
      try { 
        beanSerializerFactory0._verifyAsClass("j7D3Ckz[", "j7D3Ckz[", class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector.j7D3Ckz[() returned value of type java.lang.String: expected type JsonSerializer or Class<JsonSerializer> instead
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<IntNode> class0 = IntNode.class;
      Class<?> class1 = beanSerializerFactory0._verifyAsClass((Object) null, " with key-type annotation (", class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<String> class1 = String.class;
      Class<?> class2 = beanSerializerFactory0._verifyAsClass(class1, "I_w1*?", class0);
      assertEquals("class java.lang.String", class2.toString());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<ShortNode> class0 = ShortNode.class;
      Class<?> class1 = beanSerializerFactory0._verifyAsClass(class0, "Failed to narrow content type ", class0);
      assertNull(class1);
  }
}
