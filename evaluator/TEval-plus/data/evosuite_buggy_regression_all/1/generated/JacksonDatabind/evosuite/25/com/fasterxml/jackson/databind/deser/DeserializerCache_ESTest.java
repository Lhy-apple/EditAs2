/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:34:37 GMT 2023
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerCache;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.LinkedHashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeserializerCache_ESTest extends DeserializerCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DeserializerCache deserializerCache0 = new DeserializerCache();
      int int0 = deserializerCache0.cachedDeserializersCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeserializerCache deserializerCache0 = new DeserializerCache();
      Object object0 = deserializerCache0.writeReplace();
      assertSame(deserializerCache0, object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeserializerCache deserializerCache0 = new DeserializerCache();
      deserializerCache0.flushCachedDeserializers();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<DecimalNode> class0 = DecimalNode.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      Class<MissingNode> class1 = MissingNode.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (JavaType) mapLikeType0, (Object) null, (Object) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<LinkedHashMap> class2 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class2, (JavaType) referenceType0, (JavaType) referenceType0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) mapType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapLikeType0, (Object) objectMapper0, (Object) bigIntegerNode0);
      objectMapper0.canDeserialize((JavaType) referenceType0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) referenceType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<DecimalNode> class0 = DecimalNode.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      Class<LinkedHashMap> class1 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) simpleType0, (JavaType) mapLikeType0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) mapType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapLikeType0, (Object) objectMapper0, (Object) bigIntegerNode0);
      objectMapper0.canDeserialize((JavaType) referenceType0);
      boolean boolean0 = objectMapper0.canDeserialize((JavaType) referenceType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      CollectionType collectionType0 = CollectionType.construct(class0, mapLikeType0);
      boolean boolean0 = objectMapper0.canDeserialize((JavaType) collectionType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeserializerCache deserializerCache0 = new DeserializerCache();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        deserializerCache0.findValueDeserializer(defaultDeserializationContext_Impl0, beanDeserializerFactory0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      BigInteger bigInteger0 = BigInteger.ONE;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, " is not a Map(-like) type");
      Class<CoreXMLDeserializers.Std> class1 = CoreXMLDeserializers.Std.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (JavaType) mapLikeType0, (Object) bigInteger0, (Object) class1);
      boolean boolean0 = objectMapper0.canDeserialize((JavaType) referenceType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) mapLikeType0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) arrayType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<TextNode> class0 = TextNode.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      boolean boolean0 = objectMapper0.canDeserialize((JavaType) simpleType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeserializerCache deserializerCache0 = new DeserializerCache();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<DecimalNode> class0 = DecimalNode.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (TypeBindings) null);
      CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(decimalNode0);
      // Undeclared exception!
      try { 
        deserializerCache0.hasValueDeserializerFor(defaultDeserializationContext_Impl0, beanDeserializerFactory0, collectionType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) mapLikeType0);
      assertNotNull(objectReader0);
  }
}
