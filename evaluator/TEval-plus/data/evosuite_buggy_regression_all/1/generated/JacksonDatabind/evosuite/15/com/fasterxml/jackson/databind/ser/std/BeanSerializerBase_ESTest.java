/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:33:51 GMT 2023
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.File;
import java.lang.reflect.Type;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanSerializerBase_ESTest extends BeanSerializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<AsWrapperTypeSerializer> class0 = AsWrapperTypeSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      PropertyName propertyName0 = new PropertyName("w$C?Ba+8", "w$C?Ba+8");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, propertyName0, (ObjectIdGenerator<?>) objectIdGenerators_IntSequenceGenerator0, false);
      BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
      assertTrue(beanSerializerBase0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<AsWrapperTypeSerializer> class0 = AsWrapperTypeSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer((NameTransformer) null);
      assertTrue(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnyGetter();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      BeanPropertyWriter[] beanPropertyWriterArray0 = new BeanPropertyWriter[0];
      BeanSerializer beanSerializer0 = new BeanSerializer(simpleType0, beanSerializerBuilder0, beanPropertyWriterArray0, beanPropertyWriterArray0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      beanSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, simpleType0);
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<AsWrapperTypeSerializer> class0 = AsWrapperTypeSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      beanSerializer0.resolve(defaultSerializerProvider_Impl0);
      assertFalse(beanSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<AsWrapperTypeSerializer> class0 = AsWrapperTypeSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      boolean boolean0 = beanSerializer0.usesObjectId();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<AsWrapperTypeSerializer> class0 = AsWrapperTypeSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      // Undeclared exception!
      try { 
        beanSerializer0.serializeWithType(defaultSerializerProvider_Impl0, (JsonGenerator) null, defaultSerializerProvider_Impl0, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<AsWrapperTypeSerializer> class0 = AsWrapperTypeSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapLikeType0);
      beanSerializer0.serialize("*QIZ_R/]iQcQ8+(", jsonGeneratorDelegate0, defaultSerializerProvider_Impl0);
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<AsWrapperTypeSerializer> class0 = AsWrapperTypeSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, (BeanProperty) null, "w$C?Ba+8");
      JsonFactory jsonFactory0 = new JsonFactory();
      File file0 = MockFile.createTempFile(": can not find property with name '", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator(file0, jsonEncoding0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      // Undeclared exception!
      try { 
        ((BeanSerializerBase)beanSerializer0).serializeFieldsFiltered(asExistingPropertyTypeSerializer0, jsonGeneratorDelegate0, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<AsWrapperTypeSerializer> class0 = AsWrapperTypeSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
      JsonNode jsonNode0 = beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);
      assertEquals(2, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Class<AsWrapperTypeSerializer> class0 = AsWrapperTypeSerializer.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      MapType mapType0 = MapType.construct(class0, mapLikeType0, mapLikeType0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapType0);
      beanSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, mapType0);
      assertFalse(mapType0.isEnumType());
  }
}
