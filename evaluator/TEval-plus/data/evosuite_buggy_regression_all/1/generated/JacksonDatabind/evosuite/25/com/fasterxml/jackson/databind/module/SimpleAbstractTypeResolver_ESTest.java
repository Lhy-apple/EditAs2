/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:35:36 GMT 2023
 */

package com.fasterxml.jackson.databind.module;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.type.SimpleType;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleAbstractTypeResolver_ESTest extends SimpleAbstractTypeResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      JavaType javaType0 = simpleAbstractTypeResolver0.resolveAbstractType((DeserializationConfig) null, (JavaType) null);
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      Class<TypeNameIdResolver> class1 = TypeNameIdResolver.class;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver1 = simpleAbstractTypeResolver0.addMapping(class0, (Class<? extends TypeIdResolver>) class1);
      assertSame(simpleAbstractTypeResolver0, simpleAbstractTypeResolver1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        simpleAbstractTypeResolver0.addMapping(class0, (Class<?>) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not add mapping from class to itself
         //
         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      Class<Integer> class0 = Integer.class;
      Class<Vector> class1 = Vector.class;
      // Undeclared exception!
      try { 
        simpleAbstractTypeResolver0.addMapping((Class<Vector<Vector>>) class0, (Class<? extends Vector<Vector>>) class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not add mapping from class java.lang.Integer to java.util.Vector, as latter is not a subtype of former
         //
         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        simpleAbstractTypeResolver0.addMapping(class0, (Class<?>) class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not add mapping from class java.lang.Object since it is not abstract
         //
         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      JavaType javaType0 = simpleAbstractTypeResolver0.findTypeMapping((DeserializationConfig) null, simpleType0);
      assertNull(javaType0);
  }
}
