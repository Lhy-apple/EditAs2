/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:43:27 GMT 2023
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.CalendarSerializer;
import com.fasterxml.jackson.databind.ser.std.DateSerializer;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeSerializerBase_ESTest extends DateTimeSerializerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateSerializer dateSerializer0 = DateSerializer.instance;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      // Undeclared exception!
      try { 
        dateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null SerializerProvider passed for java.util.Date
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      DateSerializer dateSerializer0 = DateSerializer.instance;
      DateSerializer dateSerializer1 = dateSerializer0.withFormat((Boolean) null, stdDateFormat0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      dateSerializer1.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
      assertFalse(dateSerializer1.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handlePrimaryContextualization(calendarSerializer0, beanProperty_Bogus0);
      assertSame(calendarSerializer0, jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateSerializer dateSerializer0 = DateSerializer.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handlePrimaryContextualization(dateSerializer0, (BeanProperty) null);
      assertSame(dateSerializer0, jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Class<Object> class0 = Object.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      CalendarSerializer calendarSerializer0 = new CalendarSerializer((Boolean) null, stdDateFormat0);
      JsonNode jsonNode0 = calendarSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);
      assertEquals(1, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = new CalendarSerializer();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JsonNode jsonNode0 = calendarSerializer0.getSchema(serializerProvider0, (Type) resolvedRecursiveType0);
      assertEquals(1, jsonNode0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Locale locale0 = Locale.CHINA;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      CalendarSerializer calendarSerializer0 = new CalendarSerializer(boolean0, dateFormat0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        calendarSerializer0.serialize((Calendar) null, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.CalendarSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = new CalendarSerializer();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(serializerProvider0);
      calendarSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, resolvedRecursiveType0);
      assertFalse(calendarSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      DateSerializer dateSerializer0 = DateSerializer.instance;
      DateSerializer dateSerializer1 = dateSerializer0.withFormat((Boolean) null, stdDateFormat0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        dateSerializer1.serialize((Date) null, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DateSerializer dateSerializer0 = DateSerializer.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        dateSerializer0._serializeAsString((Date) null, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }
}
