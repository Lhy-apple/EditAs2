/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:00:20 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli2.DisplaySetting;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GroupImpl_ESTest extends GroupImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "gJ.g2TLM{<h9]~r'{v", "gJ.g2TLM{<h9]~r'{v", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.getProperties((Option) groupImpl0);
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals(0, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "s", "s", 916, 916);
      groupImpl0.getAnonymous();
      assertEquals(916, groupImpl0.getMaximum());
      assertEquals(916, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "c$W9ptP9!jQOX>ITtD0", " ", (-1107), 1114);
      linkedList0.push(groupImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      // Undeclared exception!
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "A ::szWcS", "Missing.option", 2237, 0);
      int int0 = groupImpl0.getMaximum();
      assertEquals(0, int0);
      assertEquals(2237, groupImpl0.getMinimum());
      assertEquals("A ::szWcS", groupImpl0.getPreferredName());
      assertEquals("Missing.option", groupImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", 49, 49);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D (-D<property>=<value>)");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("&w?|EYa{}!iB", "X", 0, 0, 'u', 's', dateValidator0, "` 51PO", linkedList0, 0);
      linkedList0.add(argumentImpl0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "&w?|EYa{}!iB", "&w?|EYa{}!iB", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "");
      assertFalse(linkedList0.contains(argumentImpl0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 34, (-2543));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
      assertEquals(34, groupImpl0.getMinimum());
      assertEquals((-2543), groupImpl0.getMaximum());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", (-2480), (-2480));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add(propertyOption0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", (-1183), (-1183));
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Passes properties and values to the application");
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", 21, 21);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
      assertEquals(21, groupImpl0.getMaximum());
      assertFalse(boolean0);
      assertEquals(21, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-2412), (-2412));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      LinkedList<Command> linkedList1 = new LinkedList<Command>();
      ListIterator<Command> listIterator0 = linkedList1.listIterator();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals((-2412), groupImpl0.getMinimum());
      assertEquals((-2412), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", 49, 49);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("-D (-D<property>=<value>)").when(listIterator0).next();
      doReturn(linkedList0).when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(49, groupImpl0.getMaximum());
      assertEquals("-D", groupImpl0.getPreferredName());
      assertEquals("Passes properties and values to the application", groupImpl0.getDescription());
      assertEquals(49, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", 49, 49);
      groupImpl0.toString();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("-D (-D<property>=<value>)", (Object) null).when(listIterator0).next();
      doReturn(linkedList0).when(listIterator0).previous();
      try { 
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected {0} while processing 
         //
         verifyException("org.apache.commons.cli2.option.PropertyOption", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", 49, 49);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("-D", writeableCommandLineImpl0).when(listIterator0).next();
      doReturn(linkedList0).when(listIterator0).previous();
      // Undeclared exception!
      try { 
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli2.commandline.WriteableCommandLineImpl cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.cli2.option.PropertyOption", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      LinkedHashSet<SourceDestArgument> linkedHashSet0 = new LinkedHashSet<SourceDestArgument>();
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Command> linkedList1 = new LinkedList<Command>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("X{jM+", "Ce!c9#q=Sl", (-2318), (-2318), 'U', '*', numberValidator0, "Argument.too.few.defaults", linkedList1, Integer.MAX_VALUE);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.few.defaults", "Ce!c9#q=Sl", 32, Integer.MAX_VALUE);
      DefaultOption defaultOption0 = new DefaultOption("", "", true, "Unexpected.token", "", linkedHashSet0, linkedHashSet0, true, sourceDestArgument0, groupImpl0, Integer.MAX_VALUE);
      linkedList0.add(defaultOption0);
      // Undeclared exception!
      try { 
        groupImpl0.validate((WriteableCommandLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.DefaultOption", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", (-586), (-586));
      linkedList0.add(propertyOption0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      groupImpl0.validate(writeableCommandLineImpl0);
      assertEquals("Passes properties and values to the application", groupImpl0.getDescription());
      assertEquals((-586), groupImpl0.getMaximum());
      assertEquals("-D", groupImpl0.getPreferredName());
      assertEquals((-586), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", 49, 49);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList1);
      writeableCommandLineImpl0.addOption(propertyOption0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option -D
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", (-1256), (-1256));
      linkedList0.addLast(propertyOption0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.addOption(propertyOption0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected -D while processing Passes properties and values to the application
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("oblAnE>^3!7@q", "oblAnE>^3!7@q", 61, 944, '1', '.', dateValidator0, "oblAnE>^3!7@q", linkedList0, Integer.MAX_VALUE);
      linkedList0.add(argumentImpl0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "&w?|EYa{}!iB", "&w?|EYa{}!iB", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s) oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q [oblAnE>^3!7@q
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "UnFexpected.token", "UnFexpected.token", 0, 0);
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        groupImpl0.appendUsage((StringBuffer) null, set0, (Comparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 2, 2);
      try { 
        groupImpl0.validate((WriteableCommandLine) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option 
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 0, (-2650));
      LinkedHashSet<ArgumentImpl> linkedHashSet0 = new LinkedHashSet<ArgumentImpl>();
      Comparator<SourceDestArgument> comparator0 = (Comparator<SourceDestArgument>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
      assertEquals((-2650), groupImpl0.getMaximum());
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add(propertyOption0);
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 85, 85);
      String string0 = groupImpl0.toString();
      assertEquals(2, linkedList0.size());
      assertEquals("-D (-D<property>=<value>|-D<property>=<value>)", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("&w?|EYa{}!iB", "X", 0, 0, 'u', 's', dateValidator0, "` 51PO", linkedList0, 0);
      linkedList0.add(argumentImpl0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "&w?|EYa{}!iB", "&w?|EYa{}!iB", 0, 0);
      String string0 = groupImpl0.toString();
      assertFalse(linkedList0.contains(argumentImpl0));
      assertEquals("[&w?|EYa{}!iB ()] ", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "c$W9ptP9!jQOX>ITtD0", " ", (-1107), 1114);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Comparator<SourceDestArgument> comparator0 = (Comparator<SourceDestArgument>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List list0 = groupImpl0.helpLines(1114, linkedHashSet0, comparator0);
      assertEquals("c$W9ptP9!jQOX>ITtD0", groupImpl0.getPreferredName());
      assertEquals(" ", groupImpl0.getDescription());
      assertEquals((-1107), groupImpl0.getMinimum());
      assertEquals(1114, groupImpl0.getMaximum());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "o", "o", 44, 44);
      List list0 = groupImpl0.helpLines(44, displaySetting0.ALL, (Comparator) null);
      assertEquals(44, groupImpl0.getMinimum());
      assertFalse(list0.isEmpty());
      assertEquals(44, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 16, 16);
      Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List list0 = groupImpl0.helpLines(16, displaySetting0.ALL, comparator0);
      assertEquals(1, linkedList0.size());
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", 21, 21);
      linkedList0.addLast(propertyOption0);
      Option option0 = groupImpl0.findOption("-D");
      assertEquals(21, groupImpl0.getMaximum());
      assertEquals(21, groupImpl0.getMinimum());
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", (-1256), (-1256));
      linkedList0.addLast(propertyOption0);
      groupImpl0.findOption("Passes properties and values to the application");
      assertEquals((-1256), groupImpl0.getMinimum());
      assertEquals((-1256), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "k:5*MMsa@50ir^HUIy", " (", 91, 91);
      boolean boolean0 = groupImpl0.isRequired();
      assertEquals(91, groupImpl0.getMinimum());
      assertEquals(91, groupImpl0.getMaximum());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", (-295), 2112);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertEquals(1, linkedList0.size());
      assertEquals(2112, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("oblAnE>^3!7@q", "oblAnE>^3!7@q", 61, 944, '1', '.', dateValidator0, "oblAnE>^3!7@q", linkedList0, Integer.MAX_VALUE);
      linkedList0.add(argumentImpl0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "&w?|EYa{}!iB", "&w?|EYa{}!iB", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertFalse(linkedList0.contains(argumentImpl0));
      assertEquals(0, groupImpl0.getMinimum());
  }
}
