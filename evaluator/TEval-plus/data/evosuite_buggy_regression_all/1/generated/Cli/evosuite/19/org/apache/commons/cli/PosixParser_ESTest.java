/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:00:43 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PosixParser_ESTest extends PosixParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "--=RnV7i}/{B";
      PosixParser posixParser0 = new PosixParser();
      // Undeclared exception!
      try { 
        posixParser0.flatten(options0, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      String[] stringArray1 = posixParser0.flatten((Options) null, stringArray0, true);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Option option0 = new Option("$", "--NO_ARGS_ALLOWED", false, "$");
      Options options1 = options0.addOption(option0);
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-$]!(HeU-Jv0OAF:";
      stringArray0[1] = "$";
      stringArray0[2] = "a";
      stringArray0[3] = "a";
      stringArray0[4] = "H>wU>xE?Ig|'7EY";
      stringArray0[5] = "--NO_ARGS_ALLOWED";
      stringArray0[6] = "c";
      stringArray0[7] = "-$]!(HeU-Jv0OAF:";
      stringArray0[8] = "$";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, false);
      try { 
        posixParser0.parse(options1, stringArray1, properties0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -$]!(HeU-Jv0OAF:
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Options options0 = new Options();
      PosixParser posixParser0 = new PosixParser();
      Option option0 = new Option("NO_ARGS_ALLOWED", "", true, "H>wU>xE?Ig|'7EY");
      options0.addOption(option0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-NO_ARGS_ALLOWED";
      // Undeclared exception!
      try { 
        posixParser0.flatten(options0, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "--";
      stringArray0[1] = "$]!(HeU-J5v0OAF:X";
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      assertEquals(11, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "q-";
      PosixParser posixParser0 = new PosixParser();
      options0.addOption("", "q-", false, "q-");
      posixParser0.flatten(options0, stringArray0, false);
      posixParser0.burstToken("q-", false);
      posixParser0.burstToken("-H>wU>xE?Ig|'7EY", true);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "T-";
      PosixParser posixParser0 = new PosixParser();
      options0.addOption("", "T-", true, "T-");
      posixParser0.flatten(options0, stringArray0, true);
      posixParser0.burstToken("T-", true);
      posixParser0.burstToken("OnA+)6c3j{+3", true);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-a";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-a";
      // Undeclared exception!
      try { 
        posixParser0.flatten(options0, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Options options0 = new Options();
      PosixParser posixParser0 = new PosixParser();
      Options options1 = options0.addOption("", "", true, "-a");
      String[] stringArray0 = new String[0];
      posixParser0.flatten(options1, stringArray0, true);
      posixParser0.burstToken("--Uls4-{hoIG+DfG z+", true);
  }
}
