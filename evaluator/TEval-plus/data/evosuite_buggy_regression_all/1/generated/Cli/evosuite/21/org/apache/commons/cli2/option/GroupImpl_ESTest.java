/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:01:14 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import org.apache.commons.cli2.DisplaySetting;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.option.Switch;
import org.apache.commons.cli2.validation.FileValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GroupImpl_ESTest extends GroupImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 1498, 1498, false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.getSwitch((Option) groupImpl0);
      assertEquals(1498, groupImpl0.getMaximum());
      assertEquals(1498, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "mlhb=(nTY5pEb6=&Si", "", 0, 0, true);
      groupImpl0.getAnonymous();
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals(0, groupImpl0.getMaximum());
      assertEquals("mlhb=(nTY5pEb6=&Si", groupImpl0.getPreferredName());
      assertEquals("", groupImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-148), (-148), false);
      int int0 = groupImpl0.getMaximum();
      assertEquals((-148), groupImpl0.getMinimum());
      assertEquals((-148), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      FileValidator fileValidator0 = new FileValidator();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("}tV>U'uSY=", "", 4835, 4835, 'y', '^', fileValidator0, "^xDBQpl{yqrR8", linkedList0, 4835);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, ':', ':', "ps(OP9W+o+R(_R", linkedList0);
      linkedList0.add((ArgumentImpl) sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "}tV>U'uSY=", (-1111), (-1111), true);
      groupImpl0.toString();
      assertEquals(0, linkedList0.size());
      assertEquals((-1111), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.validation.ClassValidator", "org.apache.commons.cli2.validation.ClassValidator", 2650, 2650, false);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) null, (String) null);
      assertEquals(2650, groupImpl0.getMinimum());
      assertFalse(boolean0);
      assertEquals(2650, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "b6>}V$|Y~gh^bX(Qi.O", (-77), (-5757), true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "org.apache.commons.cli2.option.Command");
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption("", "", 32);
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "]", "R", (-3564), (-2249), false);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      PropertyOption propertyOption0 = new PropertyOption();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "", 124, 124, false);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
      assertEquals(124, groupImpl0.getMinimum());
      assertFalse(boolean0);
      assertEquals("", groupImpl0.getDescription());
      assertEquals(124, groupImpl0.getMaximum());
      assertEquals("Passes properties and values to the application", groupImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 2147483645, 2277, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<DefaultOption> listIterator0 = (ListIterator<DefaultOption>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(listIterator0).hasNext();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(2147483645, groupImpl0.getMinimum());
      assertEquals(2277, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "T L*b3$x<k!", "T L*b3$x<k!", (-2473), (-1582), true);
      LinkedList<PropertyOption> linkedList1 = new LinkedList<PropertyOption>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("T L*b3$x<k!").when(listIterator0).next();
      doReturn("T L*b3$x<k!").when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals((-1582), groupImpl0.getMaximum());
      assertEquals((-2473), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "T L*b3$x<k!", "T L*b3$x<k!", (-2473), (-1582), true);
      LinkedList<PropertyOption> linkedList1 = new LinkedList<PropertyOption>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn((Object) null).when(listIterator0).next();
      doReturn((Object) null).when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals((-1582), groupImpl0.getMaximum());
      assertEquals((-2473), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-942), (-942), true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      groupImpl0.validate(writeableCommandLineImpl0);
      assertEquals((-942), groupImpl0.getMaximum());
      assertEquals((-942), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      LinkedList<Command> linkedList1 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList1, "", "%aWIIk(MAR@Y~", (-815), (-815), false);
      linkedList0.add(groupImpl0);
      GroupImpl groupImpl1 = new GroupImpl(linkedList0, "q2rv]", "q2rv]", (-815), (-815), false);
      String string0 = groupImpl1.toString();
      assertEquals(1, linkedList0.size());
      assertEquals("[q2rv] ([ ()])]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.validation.ClassValidator", "org.apache.commons.cli2.validation.ClassValidator", (-2250), (-2), true);
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli2.validation.ClassValidator");
      LinkedHashSet<PropertyOption> linkedHashSet0 = new LinkedHashSet<PropertyOption>();
      groupImpl0.appendUsage(stringBuffer0, (Set) linkedHashSet0, (Comparator) null, "org.apache.commons.cli2.validation.ClassValidator");
      assertEquals(98, stringBuffer0.length());
      assertEquals((-2250), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "Xgi]HD[luCeP@&Eqf", (-2250), (-2250), true);
      StringBuffer stringBuffer0 = new StringBuffer("Missing.option");
      LinkedHashSet<PropertyOption> linkedHashSet0 = new LinkedHashSet<PropertyOption>();
      Comparator<Switch> comparator0 = (Comparator<Switch>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      groupImpl0.appendUsage(stringBuffer0, (Set) linkedHashSet0, (Comparator) comparator0, "Xgi]HD[luCeP@&Eqf");
      assertEquals((-2250), groupImpl0.getMaximum());
      assertFalse(groupImpl0.isRequired());
      assertEquals(14, stringBuffer0.length());
      assertEquals((-2250), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption("+", "org.apache.commons.cli2.option.Command", (-1));
      linkedList0.add(propertyOption0);
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 2147483645, 2277, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option |
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.validation.ClassValidator", "org.apache.commons.cli2.validation.ClassValidator", (-2250), (-2250), false);
      LinkedHashSet<DefaultOption> linkedHashSet0 = new LinkedHashSet<DefaultOption>();
      List list0 = groupImpl0.helpLines((-2250), linkedHashSet0, (Comparator) null);
      assertEquals((-2250), groupImpl0.getMaximum());
      assertEquals((-2250), groupImpl0.getMinimum());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption("-D", "+4:?", (-1620));
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "R9M", "-D", (-1620), (-1620), true);
      groupImpl0.findOption("Passes properties and values to the application");
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption("-D", "-D", (-1620));
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "", (-1620), Integer.MAX_VALUE, false);
      groupImpl0.findOption("-D");
      assertEquals(1, linkedList0.size());
      assertEquals(Integer.MAX_VALUE, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "(&o7[a%#]rL\nV", "(&o7[a%#]rL\nV", 2464, 2464, true);
      linkedList0.add(groupImpl0);
      LinkedList<ArgumentImpl> linkedList1 = new LinkedList<ArgumentImpl>();
      GroupImpl groupImpl1 = new GroupImpl(linkedList0, "(&o7[a%#]rL\nV", "(&o7[a%#]rL\nV", 2464, 2464, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl1, linkedList1);
      // Undeclared exception!
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption("+", "org.apache.commons.cli2.option.Command", (-1));
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 2147483645, 2277, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertEquals(1, linkedList0.size());
      assertEquals(2147483645, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("E@M,gV=YE{$Pa\"X", "E@M,gV=YE{$Pa\"X", (-1), (-1), 'f', 'f', numberValidator0, "mw[6hV#J=", linkedList0, (-312));
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'f', 'H', "--", linkedList0);
      linkedList0.add(sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "E@M,gV=YE{$Pa\"X", 0, 0, true);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertFalse(linkedList0.contains(sourceDestArgument0));
      assertEquals(0, linkedList0.size());
  }
}
