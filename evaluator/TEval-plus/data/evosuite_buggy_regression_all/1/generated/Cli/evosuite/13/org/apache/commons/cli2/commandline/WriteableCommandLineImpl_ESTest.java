/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 12:59:14 GMT 2023
 */

package org.apache.commons.cli2.commandline;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.validation.FileValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriteableCommandLineImpl_ESTest extends WriteableCommandLineImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption("j%lA$ZWma]:]y", "j%lA$ZWma]:]y", 32);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
      String string0 = writeableCommandLineImpl0.getProperty("j%lA$ZWma]:]y", "-D");
      assertEquals("-D", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("\"q", "\"q", (-189), (-189), 'O', 'O', fileValidator0, "\"q", linkedList0, (-189));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      Set set0 = writeableCommandLineImpl0.getOptionTriggers();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Cla0sV;lidator.class.accesU", "Cla0sV;lidator.class.accesU", (-169), (-169), 'Y', 'Y', fileValidator0, "Cla0sV;lidator.class.accesU", linkedList0, (-169));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      writeableCommandLineImpl0.addProperty("--", "DISPLAY_GROUP_EXPANDED");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.commandline.WriteableCommandLineImpl", "org.apache.commons.cli2.commandline.WriteableCommandLineImpl", (-129), (-129), 'Y', 'Y', fileValidator0, "org.apache.commons.cli2.commandline.WriteableCommandLineImpl", linkedList0, (-129));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      Set set0 = writeableCommandLineImpl0.getProperties();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      List list0 = writeableCommandLineImpl0.getOptions();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("\"*6", "\"*6", (-189), (-189), 'R', 'R', fileValidator0, "\"*6", linkedList0, (-189));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      List list0 = writeableCommandLineImpl0.getNormalised();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Cla0sV;lidator.class.accesU", "Cla0sV;lidator.class.accesU", (-169), (-169), 'Y', 'Y', fileValidator0, "Cla0sV;lidator.class.accesU", linkedList0, (-169));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      writeableCommandLineImpl0.addValue(argumentImpl0, writeableCommandLineImpl0);
      List list0 = writeableCommandLineImpl0.getValues((Option) argumentImpl0, (List) linkedList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption("j%lA$ZWma]:]y", "S-GC0K{5>'Zx~p:4", 10);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
      writeableCommandLineImpl0.addSwitch(propertyOption0, true);
      Boolean boolean0 = writeableCommandLineImpl0.getSwitch((Option) propertyOption0);
      writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, boolean0);
      assertEquals("S-GC0K{5>'Zx~p:4", propertyOption0.getDescription());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addValue(propertyOption0, boolean0);
      assertEquals(68, propertyOption0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("c", "c", (-457), (-457), 'o', 'o', fileValidator0, "c", linkedList0, (-457));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      writeableCommandLineImpl0.addValue(argumentImpl0, argumentImpl0);
      writeableCommandLineImpl0.addValue(argumentImpl0, argumentImpl0);
      assertEquals((-457), argumentImpl0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("=*", "=*", (-457), (-457), '^', '^', fileValidator0, "=*", linkedList0, (-457));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      writeableCommandLineImpl0.addSwitch(argumentImpl0, false);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.addSwitch(argumentImpl0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Switch already set.
         //
         verifyException("org.apache.commons.cli2.commandline.WriteableCommandLineImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption("j%lA$ZWma]:]y", "j%lA$ZWma]:]y", 32);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
      boolean boolean0 = writeableCommandLineImpl0.hasOption((Option) propertyOption0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption("j%lA$ZWma]:]y", "j%lA$ZWma]:]y", 32);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
      writeableCommandLineImpl0.addSwitch(propertyOption0, true);
      boolean boolean0 = writeableCommandLineImpl0.hasOption((Option) propertyOption0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption("j%lA$ZWma]:]y", "j%lA$ZWma]:]y", 32);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
      Object object0 = writeableCommandLineImpl0.getValue("=");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingInstance();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Cla0sV;lidator.class.accesU", "Cla0sV;lidator.class.accesU", (-189), (-189), 'Y', 'Y', fileValidator0, "Cla0sV;lidator.class.accesU", linkedList0, (-189));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      List list0 = writeableCommandLineImpl0.getValues((Option) argumentImpl0, (List) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Cla0sV;lidator.class.accesU", "Cla0sV;lidator.class.accesU", (-183), (-183), 'h', 'h', fileValidator0, "Cla0sV;lidator.class.accesU", linkedList0, (-183));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      Boolean boolean0 = writeableCommandLineImpl0.getSwitch((Option) argumentImpl0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption("j%lA$ZWma]:]y", "j%lA$ZWma]:]y", 32);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
      boolean boolean0 = writeableCommandLineImpl0.looksLikeOption("Passes properties and values to the application");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption("j>lA$ZWma]&]y", "S-GC0K{5>'Zx~p:4", 32);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
      boolean boolean0 = writeableCommandLineImpl0.looksLikeOption("j>lA$ZWma]&]y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      linkedList0.add((Object) "j%lA$ZWma]:]yPasses properties and values to the application");
      String string0 = writeableCommandLineImpl0.toString();
      assertEquals("\"j%lA$ZWma]:]yPasses properties and values to the application\"", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      linkedList0.add((Object) "");
      linkedList0.add((Object) writeableCommandLineImpl0);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli2.commandline.WriteableCommandLineImpl cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.cli2.commandline.WriteableCommandLineImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Cla0sV;lidator.class.accesU", "Cla0sV;lidator.class.accesU", (-189), (-189), 'J', 'J', fileValidator0, "Cla0sV;lidator.class.accesU", linkedList0, (-189));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      writeableCommandLineImpl0.setDefaultValues(argumentImpl0, linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption((String) null, (String) null, (-1));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.setDefaultValues(propertyOption0, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.OptionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingInstance();
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Cla0sV;1idator.class.accesU", "Cla0sV;1idator.class.accesU", (-182), (-182), 'Y', 'Y', fileValidator0, "Cla0sV;1idator.class.accesU", linkedList0, (-182));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      writeableCommandLineImpl0.setDefaultSwitch(argumentImpl0, (Boolean) null);
      assertFalse(argumentImpl0.isRequired());
  }
}
