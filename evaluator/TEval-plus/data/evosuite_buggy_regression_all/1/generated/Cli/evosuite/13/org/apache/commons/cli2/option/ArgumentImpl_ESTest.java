/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:00:15 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import org.apache.commons.cli2.DisplaySetting;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.FileValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArgumentImpl_ESTest extends ArgumentImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("!fX_C-SVF", "!fX_C-SVF", 0, 0, 'W', 'W', dateValidator0, "!fX_C-SVF", linkedList0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      argumentImpl0.defaults(writeableCommandLineImpl0);
      assertEquals('W', argumentImpl0.getInitialSeparator());
      assertEquals(0, argumentImpl0.getMinimum());
      assertEquals('W', argumentImpl0.getSubsequentSeparator());
      assertEquals("!fX_C-SVF", argumentImpl0.getPreferredName());
      assertEquals("!fX_C-SVF", argumentImpl0.getConsumeRemaining());
      assertEquals(0, argumentImpl0.getMaximum());
      assertEquals("!fX_C-SVF", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("/k]Rh|", "", 32, 32, '2', 'f', numberValidator0, " ...", linkedList0, 32);
      char char0 = argumentImpl0.getInitialSeparator();
      assertEquals("", argumentImpl0.getDescription());
      assertEquals('2', char0);
      assertEquals(" ...", argumentImpl0.getConsumeRemaining());
      assertEquals('f', argumentImpl0.getSubsequentSeparator());
      assertEquals(32, argumentImpl0.getMinimum());
      assertEquals("/k]Rh|", argumentImpl0.getPreferredName());
      assertEquals(32, argumentImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("M0e=vd=oDm<'", "M0e=vd=oDm<'", 3731, 3731, 'm', 'm', fileValidator0, "M0e=vd=oDm<'", linkedList0, 2271);
      argumentImpl0.getDefaultValues();
      assertEquals("M0e=vd=oDm<'", argumentImpl0.getPreferredName());
      assertEquals(3731, argumentImpl0.getMaximum());
      assertEquals('m', argumentImpl0.getInitialSeparator());
      assertEquals("M0e=vd=oDm<'", argumentImpl0.getConsumeRemaining());
      assertEquals(3731, argumentImpl0.getMinimum());
      assertEquals('m', argumentImpl0.getSubsequentSeparator());
      assertEquals("M0e=vd=oDm<'", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, (String) null, (-934), (-934), 'p', 'p', fileValidator0, "CNE7rZy6=&*CFw", linkedList0, (-934));
      boolean boolean0 = argumentImpl0.canProcess((WriteableCommandLine) null, (String) null);
      assertEquals((-934), argumentImpl0.getMaximum());
      assertEquals("CNE7rZy6=&*CFw", argumentImpl0.getConsumeRemaining());
      assertEquals('p', argumentImpl0.getInitialSeparator());
      assertEquals('p', argumentImpl0.getSubsequentSeparator());
      assertEquals((-934), argumentImpl0.getMinimum());
      assertTrue(boolean0);
      assertEquals("arg", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("/k]Rh|", "", 32, 32, '2', 'f', numberValidator0, " ...", linkedList0, 32);
      assertEquals(32, argumentImpl0.getMaximum());
      assertEquals(32, argumentImpl0.getMinimum());
      
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      char char0 = sourceDestArgument0.getSubsequentSeparator();
      assertEquals("/k]Rh|", argumentImpl0.getPreferredName());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals(64, sourceDestArgument0.getMaximum());
      assertEquals('2', argumentImpl0.getInitialSeparator());
      assertEquals(64, sourceDestArgument0.getMinimum());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals(" ...", argumentImpl0.getConsumeRemaining());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateValidator dateValidator0 = new DateValidator(linkedList0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("RgKrTYA 7rV", "RgKrTYA 7rV", 0, 0, 'I', 's', dateValidator0, "RgKrTYA 7rV", linkedList0, 0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      argumentImpl0.helpLines(0, linkedHashSet0, (Comparator) null);
      assertEquals("RgKrTYA 7rV", argumentImpl0.getDescription());
      assertEquals("RgKrTYA 7rV", argumentImpl0.getPreferredName());
      assertEquals('s', argumentImpl0.getSubsequentSeparator());
      assertEquals('I', argumentImpl0.getInitialSeparator());
      assertEquals("RgKrTYA 7rV", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("bx&", "bx&", 0, 62, '\u0019', '\u0019', dateValidator0, "bx&", linkedList0, 1917);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      assertEquals(0, argumentImpl0.getMinimum());
      
      argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
      assertEquals("bx&", argumentImpl0.getDescription());
      assertEquals("bx&", argumentImpl0.getConsumeRemaining());
      assertEquals('\u0019', argumentImpl0.getInitialSeparator());
      assertEquals("bx&", argumentImpl0.getPreferredName());
      assertEquals('\u0019', argumentImpl0.getSubsequentSeparator());
      assertEquals(62, argumentImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("M0e=vd=oDm<'", "M0e=vd=oDm<'", 3731, 3731, 'm', 'm', fileValidator0, "M0e=vd=oDm<'", linkedList0, 2271);
      String string0 = argumentImpl0.getConsumeRemaining();
      assertEquals("M0e=vd=oDm<'", argumentImpl0.getPreferredName());
      assertEquals("M0e=vd=oDm<'", argumentImpl0.getDescription());
      assertEquals('m', argumentImpl0.getInitialSeparator());
      assertEquals("M0e=vd=oDm<'", string0);
      assertEquals('m', argumentImpl0.getSubsequentSeparator());
      assertEquals(3731, argumentImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("e%pT@&2K", "e%pT@&2K", 60, 60, 'n', 'n', numberValidator0, "$4]$@1wtB}I", linkedList0, 60);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals("e%pT@&2K", argumentImpl0.getPreferredName());
      assertEquals('n', argumentImpl0.getSubsequentSeparator());
      assertEquals("e%pT@&2K", argumentImpl0.getDescription());
      assertEquals("$4]$@1wtB}I", argumentImpl0.getConsumeRemaining());
      assertEquals('n', argumentImpl0.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Oq|>^AX%g*qk>w:", (String) null, 0, 0, 'y', 'y', fileValidator0, (String) null, (List) null, 0);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      sourceDestArgument0.getValidator();
      assertEquals('y', argumentImpl0.getSubsequentSeparator());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("Oq|>^AX%g*qk>w:", argumentImpl0.getPreferredName());
      assertEquals('y', argumentImpl0.getInitialSeparator());
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("bx&", "bx&", 1917, 96, '\u0019', '\u0019', dateValidator0, "bx&", linkedList0, 1917);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum number of values must not exceed maximum number
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Nk`3vuW{Z", "Nk`3vuW{Z", 3, 3, 'b', 'b', numberValidator0, "Nk`3vuW{Z", linkedList0, 3);
      Object object0 = new Object();
      linkedList0.add(object0);
      SourceDestArgument sourceDestArgument0 = null;
      try {
        sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'b', '\u0000', "--", linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not enough default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Nk`3vuW{Z", "Nk`3vuW{Z", (-2805), (-2805), 'n', 'n', numberValidator0, "\"R\"u'%*GN%", linkedList0, (-2805));
      Object object0 = new Object();
      linkedList0.add(object0);
      SourceDestArgument sourceDestArgument0 = null;
      try {
        sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'n', '\u0000', "--", linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too many default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("+Bf);c%'jaH0 <^J%O", "--", 0, 32, 'U', 'u', numberValidator0, "--", linkedList0, 49);
      assertEquals("--", argumentImpl0.getConsumeRemaining());
      assertEquals("+Bf);c%'jaH0 <^J%O", argumentImpl0.getPreferredName());
      assertEquals('U', argumentImpl0.getInitialSeparator());
      assertEquals("--", argumentImpl0.getDescription());
      assertEquals('u', argumentImpl0.getSubsequentSeparator());
      assertEquals(32, argumentImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Nk`3vuW{Z", "Nk`3vuW{Z", 3, 3, 'b', 'b', numberValidator0, "Nk`3vuW{Z", linkedList0, 3);
      Object object0 = new Object();
      linkedList0.add(object0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      assertEquals("Nk`3vuW{Z", argumentImpl0.getConsumeRemaining());
      
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, false).when(listIterator0).hasNext();
      doReturn("Nk`3vuW{Z", object0).when(listIterator0).next();
      argumentImpl0.processValues(writeableCommandLineImpl0, listIterator0, argumentImpl0);
      assertEquals('b', argumentImpl0.getSubsequentSeparator());
      assertEquals("Nk`3vuW{Z", argumentImpl0.getPreferredName());
      assertEquals("Nk`3vuW{Z", argumentImpl0.getDescription());
      assertEquals('b', argumentImpl0.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.option.ArgumentImpl", "\"org.apache.commons.cli2.option.ArgumentImpl", 1, 3656, 'o', 'o', dateValidator0, "\"org.apache.commons.cli2.option.ArgumentImpl", linkedList0, 14924);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.addLast("org.apache.commons.cli2.option.ArgumentImpl");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      argumentImpl0.processValues(writeableCommandLineImpl0, listIterator0, (Option) null);
      assertTrue(listIterator0.hasPrevious());
      assertEquals(5, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Nk`3vuW{Z", "", 60, 60, 'n', 'n', numberValidator0, "$4]$@1wtB}I", linkedList0, 60);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.addLast("Nk`3vuW{Z");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      sourceDestArgument0.processValues(writeableCommandLineImpl0, listIterator0, argumentImpl0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("bx&", "bx&", (-2555), (-2555), 'G', 'G', dateValidator0, "bx&", linkedList0, 1910);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      // Undeclared exception!
      try { 
        argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2555
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateValidator dateValidator0 = new DateValidator();
      LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("bx&", "bx&", (-2555), 62, '=', '=', dateValidator0, "bx&", linkedList0, 1910);
      String string0 = argumentImpl0.toString();
      assertEquals(62, argumentImpl0.getMaximum());
      assertEquals('=', argumentImpl0.getSubsequentSeparator());
      assertEquals('=', argumentImpl0.getInitialSeparator());
      assertEquals("bx&", argumentImpl0.getDescription());
      assertEquals("[<bx&1> [<bx&2> [<bx&3> [<bx&4> [<bx&5> [<bx&6> [<bx&7> [<bx&8> [<bx&9> [<bx&10> [<bx&11> [<bx&12> [<bx&13> [<bx&14> [<bx&15> [<bx&16> [<bx&17> [<bx&18> [<bx&19> [<bx&20> [<bx&21> [<bx&22> [<bx&23> [<bx&24> [<bx&25> [<bx&26> [<bx&27> [<bx&28> [<bx&29> [<bx&30> [<bx&31> [<bx&32> [<bx&33> [<bx&34> [<bx&35> [<bx&36> [<bx&37> [<bx&38> [<bx&39> [<bx&40> [<bx&41> [<bx&42> [<bx&43> [<bx&44> [<bx&45> [<bx&46> [<bx&47> [<bx&48> [<bx&49> [<bx&50> [<bx&51> [<bx&52> [<bx&53> [<bx&54> [<bx&55> [<bx&56> [<bx&57> [<bx&58> [<bx&59> [<bx&60> [<bx&61> [<bx&62>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.option.ArgumentImpl", "org.apache.commons.cli2.option.ArgumentImpl", 1, 1, 'd', '/', dateValidator0, "\"Switch.disabled.startsWith.enabled", linkedList0, 1);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      try { 
        argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s) org.apache.commons.cli2.option.ArgumentImpl
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "|RzK&JsSLA~", 254, Integer.MAX_VALUE, '-', '=', numberValidator0, "", linkedList0, 9963);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      try { 
        argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s)   ...
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("jlLn-SboI6/", "|bx&B", (-2555), 9962, 'A', 'A', dateValidator0, "jlLn-SboI6/", linkedList0, 1910);
      StringBuffer stringBuffer0 = new StringBuffer("jlLn-SboI6/");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      argumentImpl0.appendUsage(stringBuffer0, linkedHashSet0, (Comparator) null);
      assertEquals(149439, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Nk`3vuW{Z", "Nk`3vuW{Z", 3, 3, 'n', 'n', numberValidator0, "\"R\"u'%*GN%", linkedList0, 3);
      linkedList0.add((Object) "\"R\"u'%*GN%");
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      argumentImpl0.processValues(writeableCommandLineImpl0, listIterator0, (Option) null);
      assertTrue(listIterator0.hasPrevious());
      assertEquals("Nk`3vuW{Z", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.option.Switch", "DISPLAY_PARENT_ARGUMENT", 3906, 3906, 'o', 'o', dateValidator0, "\"", linkedList0, 3906);
      // Undeclared exception!
      try { 
        argumentImpl0.stripBoundaryQuotes("\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      NumberValidator numberValidator0 = new NumberValidator(numberFormat0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("~T@h4i", "~T@h4i", (-1419), (-1419), 'M', 'R', numberValidator0, "", linkedList0, 2);
      boolean boolean0 = argumentImpl0.isRequired();
      assertEquals('M', argumentImpl0.getInitialSeparator());
      assertEquals("~T@h4i", argumentImpl0.getDescription());
      assertEquals('R', argumentImpl0.getSubsequentSeparator());
      assertFalse(boolean0);
      assertEquals((-1419), argumentImpl0.getMaximum());
      assertEquals("~T@h4i", argumentImpl0.getPreferredName());
      assertEquals("", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("M0e=vd=oDm<'", "M0e=vd=oDm<'", 3731, 3731, 'm', 'm', fileValidator0, "M0e=vd=oDm<'", linkedList0, 2271);
      boolean boolean0 = argumentImpl0.isRequired();
      assertEquals('m', argumentImpl0.getInitialSeparator());
      assertEquals(3731, argumentImpl0.getMaximum());
      assertEquals('m', argumentImpl0.getSubsequentSeparator());
      assertEquals("M0e=vd=oDm<'", argumentImpl0.getPreferredName());
      assertTrue(boolean0);
      assertEquals("M0e=vd=oDm<'", argumentImpl0.getDescription());
  }
}
