/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:26:09 GMT 2023
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.util.Date;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SevenZOutputFile_ESTest extends SevenZOutputFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GE<O@JYtlZ~*>*qx:=");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "GE<O@JYtlZ~*>*qx:=");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      byte[] byteArray0 = new byte[7];
      sevenZOutputFile0.write(byteArray0);
      sevenZOutputFile0.closeArchiveEntry();
      sevenZOutputFile0.finish();
      assertEquals(135L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GE<O@JYtlZ~*>*qx:=");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZMethod sevenZMethod0 = SevenZMethod.LZMA;
      sevenZOutputFile0.setContentCompression(sevenZMethod0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      sevenZOutputFile0.write((-3131));
      sevenZOutputFile0.write((-1984365303));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = MockFile.createTempFile("prC@wp^", "prC@wp^");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(file0);
      sevenZOutputFile0.close();
      sevenZOutputFile0.close();
      assertEquals(44L, file0.length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("P</U", "P</U");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.closeArchiveEntry();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("X(,");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      byte[] byteArray0 = new byte[0];
      sevenZOutputFile0.write(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("CE=h6,[^O");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      sevenZOutputFile0.finish();
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Unimplemented");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "Unimplemented");
      sevenZArchiveEntry0.setAntiItem(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.finish();
      assertEquals(93L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GE<O@JYtlZ~*>*qx:=", "GE<O@JYtlZ~*>*qx:=");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "GE<O@JYtlZ~*>*qx:=");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      Date date0 = dumpArchiveEntry0.getLastModifiedDate();
      sevenZArchiveEntry0.setCreationDate(date0);
      sevenZOutputFile0.finish();
      assertEquals(112L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GE<O@JYtlZ~*>*qx:=", "GE<O@JYtlZ~*>*qx:=");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "GE<O@JYtlZ~*>*qx:=");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      Date date0 = dumpArchiveEntry0.getLastModifiedDate();
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "GE<O@JYtlZ~*>*qx:=");
      sevenZArchiveEntry1.setCreationDate(date0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.finish();
      assertEquals(159L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GE<O@JYtlZ~*>*qx:=", "GE<O@JYtlZ~*>*qx:=");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "GE<O@JYtlZ~*>*qx:=");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)37);
      Date date0 = tarArchiveEntry0.getModTime();
      sevenZArchiveEntry0.setAccessDate(date0);
      sevenZOutputFile0.finish();
      assertEquals(112L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GE<O@JYtlZ~*>*qx:=", "GE<O@JYtlZ~*>*qx:=");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "GE<O@JYtlZ~*>*qx:=");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)37);
      Date date0 = tarArchiveEntry0.getModTime();
      sevenZArchiveEntry1.setAccessDate(date0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.finish();
      assertEquals(123L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("P</U");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setName("$QK?Z:(EEE]dm<");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.finish();
      assertEquals(80L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GE<O@JYtlZ~*>*qx:=", "GE<O@JYtlZ~*>*qx:=");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "GE<O@JYtlZ~*>*qx:=");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZArchiveEntry0.setHasWindowsAttributes(true);
      sevenZOutputFile0.finish();
      assertEquals(108L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GE<O@JYtlZ~*>*qx:=", "GE<O@JYtlZ~*>*qx:=");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "GE<O@JYtlZ~*>*qx:=");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "GE<O@JYtlZ~*>*qx:=");
      sevenZArchiveEntry1.setHasWindowsAttributes(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.finish();
      assertEquals(155L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GE<O@JYtlZ~*>*qx:=");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "GE<O@JYtlZ~*>*qx:=");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.finish();
      assertEquals(379L, mockFile0.length());
  }
}
