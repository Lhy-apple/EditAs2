/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:26:07 GMT 2023
 */

package org.apache.commons.compress.compressors.deflate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.PipedInputStream;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeflateCompressorInputStream_ESTest extends DeflateCompressorInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(mockFileInputStream0);
      deflateCompressorInputStream0.close();
      assertEquals(0, deflateCompressorInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(9);
      DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(pipedInputStream0);
      long long0 = deflateCompressorInputStream0.skip(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        deflateCompressorInputStream0.read(byteArray0, (-1984), (-1984));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(byteArrayInputStream0);
      int int0 = deflateCompressorInputStream0.available();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DeflateParameters deflateParameters0 = new DeflateParameters();
      deflateParameters0.setWithZlibHeader(false);
      DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(mockFileInputStream0, deflateParameters0);
      assertEquals(0L, deflateCompressorInputStream0.getBytesRead());
  }
}
