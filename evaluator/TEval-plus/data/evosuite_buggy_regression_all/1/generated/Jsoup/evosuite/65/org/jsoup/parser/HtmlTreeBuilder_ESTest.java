/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:50:39 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ruby");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ")qO`sJGkynI", (ParseErrorList) null, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ruby");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parse(stringReader0, "ruby", (ParseErrorList) null, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.name("ruby");
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      StringReader stringReader0 = new StringReader("nth-last-of-type");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(357);
      htmlTreeBuilder0.parse(stringReader0, "body", parseErrorList0, parseSettings0);
      boolean boolean0 = htmlTreeBuilder0.processStartTag("body");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Element element0 = new Element("tfoot");
      element0.html("optgroup");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inButtonScope("plaintext");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setPendingTableCharacters((List<String>) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("j5ao]+O_");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "j5ao]+O_", (ParseErrorList) null, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader(":9\"KvzX(2f\"@5");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, ":9\"KvzX(2f\"@5", (ParseErrorList) null, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.processEndTag(":9\"KvzX(2f\"@5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inTableScope("embed");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Element element0 = new Element("heaqd");
      // Undeclared exception!
      try { 
        element0.wrap("~79[bs `");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Element element0 = new Element("style");
      element0.html("style");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Element element0 = new Element("script");
      element0.html("script");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("plaintext");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("select", element0, "$^BezLN'rvccl)vSs", parseErrorList0, parseSettings0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tag tag0 = Tag.valueOf("caption");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "caption", attributes0);
      Element element0 = formElement0.html("caption");
      assertEquals("caption", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document(":only-of-type");
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("|O#Y3q|LOXu");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parse(stringReader0, "|O#Y3q|LOXu", (ParseErrorList) null, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = false;
      token_StartTag0.selfClosing = true;
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.name("|O#Y3q|LOXu");
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("|O#Y3q|LOXu");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parse(stringReader0, "|O#Y3q|LOXu", (ParseErrorList) null, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      token_StartTag0.name("tbody");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("LTy_Ciy|00");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parse(stringReader0, "LTy_Ciy|00", (ParseErrorList) null, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("script", attributes0);
      htmlTreeBuilder0.insertForm(token_StartTag1, true);
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertNull(token_Character0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("vxZK");
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      htmlTreeBuilder0.parse(stringReader0, "vxZK", (ParseErrorList) null, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("style", attributes0);
      htmlTreeBuilder0.insertForm(token_StartTag1, true);
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertNull(token_Character0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("|O#Y3q|LOXu");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "|O#Y3q|LOXu", (ParseErrorList) null, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      htmlTreeBuilder0.setFosterInserts(true);
      token_StartTag0.name("|O#Y3q|LOXu");
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      assertEquals(2, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Element element0 = new Element(" 71q>Y=y#Pdx|");
      element0.html("%b^Q;& b4L<?");
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("j5ao]+O_");
      htmlTreeBuilder0.parse(stringReader0, "j5ao]+O_", (ParseErrorList) null, parseSettings0);
      Element element0 = htmlTreeBuilder0.currentElement();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ruby");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parse(stringReader0, "ruby", (ParseErrorList) null, parseSettings0);
      Element element0 = htmlTreeBuilder0.getFromStack("html");
      assertNotNull(element0);
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("`XQ}k");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "`XQ}k", (ParseErrorList) null, parseSettings0);
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Evaluator$IndexEquals");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "ruby", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.push(document0);
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertTrue(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Element element0 = new Element("tr");
      htmlTreeBuilder0.parseFragment("-r", element0, "-r", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.popStackToClose("-r");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("Unexpected token [%s] when in state [%s]");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parseFragment("Unexpected token [%s] when in state [%s]", document0, "Unexpected token [%s] when in state [%s]", parseErrorList0, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("details", attributes0);
      htmlTreeBuilder0.insertForm(token_StartTag0, true);
      htmlTreeBuilder0.popStackToClose("details");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("tfoot");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parseFragment("8lx", document0, "tr", parseErrorList0, (ParseSettings) null);
      String[] stringArray0 = new String[0];
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document(":only-of-type");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parseFragment(":only-of-type", document0, "dl", parseErrorList0, (ParseSettings) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "dl";
      stringArray0[1] = ":only-of-type";
      stringArray0[2] = "dl";
      stringArray0[3] = "hgroup";
      stringArray0[4] = "html";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      StringReader stringReader0 = new StringReader("ZYU9F*Xl*$a");
      htmlTreeBuilder0.parse(stringReader0, "ZYU9F*Xl*$a", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.popStackToBefore("ZYU9F*Xl*$a");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ruby");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.parse(stringReader0, "^O/_gHLoSdSB\"d9J", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.popStackToBefore("html");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(1847);
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      htmlTreeBuilder0.initialiseParse(stringReader0, "colgroup", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.clearStackToTableBodyContext();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("style");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.parse(stringReader0, "table", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.clearStackToTableBodyContext();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ruby");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "ruby", (ParseErrorList) null, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ruby");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "ruby", (ParseErrorList) null, parseSettings0);
      Element element0 = document0.body();
      htmlTreeBuilder0.insertOnStackAfter(element0, element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ruby");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ")qO`sJGkynI", (ParseErrorList) null, parseSettings0);
      Element element0 = document0.body();
      htmlTreeBuilder0.replaceOnStack(element0, (Element) null);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("syle");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder0.initialiseParse(stringReader0, "hgroup", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.resetInsertionMode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Element element0 = new Element("select");
      element0.html("select");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Element element0 = new Element("td");
      element0.html("tr");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Element element0 = new Element("th");
      Element element1 = element0.html("th");
      assertEquals(1, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Element element0 = new Element("tbody");
      element0.html("tbody");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Element element0 = new Element("thead");
      element0.html("td");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Element element0 = new Element("colgroup");
      Element element1 = element0.html("tr");
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = htmlTreeBuilder0.errors;
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Element element0 = new Element("table");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("Wd-S/,VB", element0, "table", parseErrorList0, parseSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Element element0 = new Element("head");
      element0.html("head");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Element element0 = new Element("frameset");
      Element element1 = element0.html("RU&R_W5]kS7_EG@^X7");
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Element element0 = new Element("html");
      element0.html("html");
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      htmlTreeBuilder0.resetInsertionMode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("|O#Y3q|LOXu");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "|O#Y3q|LOXu", (ParseErrorList) null, parseSettings0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("|O#Y3q|LOXu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ruby");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "ruby", (ParseErrorList) null, parseSettings0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("body");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.selectAvaluator$IndexEquals");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "org.jsoup.selectAvaluator$IndexEquals", (ParseErrorList) null, parseSettings0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inScope("org.jsoup.selectAvaluator$IndexEquals");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("oPJq+#4bSs&\"8cc");
      ParseErrorList parseErrorList0 = new ParseErrorList(2298, 2298);
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      htmlTreeBuilder0.initialiseParse(stringReader0, "oPJq+#4bSs&\"8cc", parseErrorList0, parseSettings0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("*zau ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("|O#Y3q|LOXu");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "|O#Y3q|LOXu", (ParseErrorList) null, parseSettings0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("InSelectInTable");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      StringReader stringReader0 = new StringReader("ZYU9F*Xl*$a");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "ZYU9F*Xl*$a", (ParseErrorList) null, parseSettings0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("body");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("LTy_Ciy|00");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parse(stringReader0, "LTy_Ciy|00", (ParseErrorList) null, parseSettings0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("script", attributes0);
      htmlTreeBuilder0.insertForm(token_StartTag1, true);
      htmlTreeBuilder0.generateImpliedEndTags("script");
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ruby");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      htmlTreeBuilder0.parse(stringReader0, "ruby", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.generateImpliedEndTags("ruby");
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.selectAEvaluator$IndexEquals");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      htmlTreeBuilder0.parse(stringReader0, "org.jsoup.selectAEvaluator$IndexEquals", (ParseErrorList) null, parseSettings0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("plaintext");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parseFragment("plaintext", document0, "plaintext", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("thead");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "thead", (ParseErrorList) null, parseSettings0);
      Element element0 = document0.body();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("thead");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "thead", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      htmlTreeBuilder0.reconstructFormattingElements();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Element element0 = new Element("embed");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parseFragment("embed", element0, "embed", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ruby");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Wd-S/,VB", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ruby");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "ruby", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ruby");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "ruby", (ParseErrorList) null, parseSettings0);
      Document document1 = htmlTreeBuilder0.parse(stringReader0, "ruby", (ParseErrorList) null, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(document1);
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("embed");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parseFragment("embed", document0, "rW-z)2'", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("dxhFXXHztR");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("embed");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      htmlTreeBuilder0.parseFragment("embed", document0, "rW-z)2'", parseErrorList0, parseSettings0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("dxhFXXHztR");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ruby");
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "nZ}o<c{Ma", (ParseErrorList) null, parseSettings0);
      Element element0 = document0.body();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("body");
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
  }
}
