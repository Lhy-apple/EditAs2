/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:50:55 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.StringWriter;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("^");
      document0.appendText("org.jsoup.select.Evaluator$IsLastChild");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.getElementsMatchingText(">X\"Fl+&");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("onFQ{");
      // Undeclared exception!
      try { 
        document0.child(69);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 69, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document(" ");
      // Undeclared exception!
      try { 
        document0.html(" ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("lzxb;QZ:YA)Kd2M");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("qsource");
      Element element0 = document0.attr("qsource", true);
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("onFQ{");
      Elements elements0 = document0.getElementsByAttributeValue("onFQ{", "onFQ{");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("source");
      Elements elements0 = document0.getElementsByAttributeValueStarting("source", "source");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Element element0 = new Element("DoctyfeNamAe");
      Tag tag0 = Tag.valueOf("DoctyfeNamAe");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "AfterDoctypeName", attributes0);
      element0.prependChild(formElement0);
      String string0 = formElement0.cssSelector();
      assertEquals("DoctyfeNamAe > DoctyfeNamAe", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("time");
      Element element0 = document0.prepend("time");
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("&#x");
      // Undeclared exception!
      try { 
        document0.after("&#x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("org.jMoupnnodes.Elemeut");
      Elements elements0 = document0.getElementsByIndexLessThan((-1));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document(">V}nx,Q%u(");
      Elements elements0 = document0.getElementsByAttributeStarting(">V}nx,Q%u(");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("class");
      Elements elements0 = document0.getElementsByIndexEquals((-951));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("surcX");
      Elements elements0 = document0.getElementsMatchingOwnText("surcX");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("MGQV;lDYJ!B:v`g*_");
      // Undeclared exception!
      try { 
        document0.wrap("MGQV;lDYJ!B:v`g*_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Document.createShell("NhsV");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      Element element0 = document0.val("org.jsoup.nodes.Element");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("onFQ{");
      Elements elements0 = document0.getElementsByAttributeValueMatching("onFQ{", "");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("DoctypHNamm");
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      boolean boolean0 = document0.is((Evaluator) evaluator_IsFirstChild0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document(">V}nx,Q%u(");
      Elements elements0 = document0.getElementsByAttributeValueEnding(">V}nx,Q%u(", ">V}nx,Q%u(");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("source");
      Elements elements0 = document0.getElementsByClass("source");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("^");
      Elements elements0 = document0.getElementsContainingText("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document(">V}nx,Q%u(");
      Elements elements0 = document0.getElementsByAttributeValueContaining(">V}nx,Q%u(", ">V}nx,Q%u(");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("0wU");
      Elements elements0 = document0.getElementsByAttributeValueNot("0wU", "0wU");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("og.jsoupnoes.ttribte");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("NV");
      Elements elements0 = document0.getElementsByAttribute("NV");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("source");
      // Undeclared exception!
      try { 
        document0.before("source");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      Document document1 = (Document)document0.removeClass(":nth-child(%d)");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("NLYJDD+x");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("}3JO-_gwD,=u<");
      // Undeclared exception!
      try { 
        document0.is("}3JO-_gwD,=u<");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '}3JO-_gwD,=u<': unexpected token at '}3JO-_gwD,=u<'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("^");
      Elements elements0 = document0.getElementsByTag("org.jsoup.select.Evaluator$IsLastChild");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("1.0");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1161);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Element element0 = new Element("Tag name must not be empty.");
      Element element1 = element0.prependElement("Tag name must not be empty.");
      Elements elements0 = element1.parents();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document(">V}nx,Q%u(");
      Element element0 = document0.prependElement(">V}nx,Q%u(");
      Elements elements0 = element0.parents();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("OkjHiM|@Xyo9$^$;PK4");
      Element element0 = document0.prependElement("'D,Fw6");
      document0.appendText("OkjHiM|@Xyo9$^$;PK4");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("BDbgpVt,t");
      Element element0 = document0.appendText("BDbgpVt,t");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("onFQ{");
      document0.prependElement("onFQ{");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("source");
      document0.prependElement("source");
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("source");
      DataNode dataNode0 = new DataNode("source", "source");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("MGQV;tlDYJ!B:v`g*_");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      Element element0 = document0.insertChildren(0, linkedList0);
      assertEquals("MGQV;tlDYJ!B:v`g*_", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("onFQ{");
      List<DataNode> list0 = document0.dataNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1988), list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("MGQV;tlDYYJ!B:v`g*_");
      LinkedHashSet<XmlDeclaration> linkedHashSet0 = new LinkedHashSet<XmlDeclaration>();
      // Undeclared exception!
      try { 
        document0.insertChildren(30, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("BaseURI must not be null");
      document0.toggleClass("BaseURI must not be null");
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("(N$G`Z%");
      Element element0 = document0.prependElement("CommentEndBang");
      element0.after((Node) document0);
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Element element0 = new Element("DoctyfeNamAe");
      Tag tag0 = Tag.valueOf("DoctyfeNamAe");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "AfterDoctypeName", attributes0);
      element0.prependChild(formElement0);
      Element element1 = element0.prependElement("DoctyfeNamAe");
      String string0 = element1.cssSelector();
      assertEquals("DoctyfeNamAe > DoctyfeNamAe:nth-child(1)", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("7.;^WOHwNnv@ixy-j'");
      Elements elements0 = document0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document(".");
      Element element0 = document0.prependElement("onFQ{");
      element0.before((Node) document0);
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Element element0 = new Element("DoctyfeNamAe");
      Element element1 = element0.prependElement("DoctyfeNamAe");
      Element element2 = element1.nextElementSibling();
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("org.jsoup.parser.HtmlTreeBuilderState$Constants");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Element element0 = new Element("source");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("(N$G`Z%");
      Element element0 = document0.prependElement("CommentEndBang");
      element0.after((Node) document0);
      Element element1 = document0.previousElementSibling();
      assertEquals("CommentEndBang", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("OkjHiM|@Xyo9$^$;PK4");
      Element element0 = document0.prependElement("OkjHiM|@Xyo9$^$;PK4");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("OkjHiM|@Xyno9$^$;PK4");
      Element element0 = document0.prependElement("OkjHiM|@Xyno9$^$;PK4");
      element0.after((Node) document0);
      Element element1 = element0.firstElementSibling();
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("onFQ{");
      Element element0 = document0.prependElement("onFQ{");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("onFQ{");
      Element element0 = document0.prependElement("<}Nx|<_3z 3^gZs");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      element0.addChildren(nodeArray0);
      Element element1 = element0.lastElementSibling();
      assertEquals("#root", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("DoctyfeNamAe");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("source");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      Comment comment0 = new Comment("?", "\"U_p+^IzUB:5n-");
      nodeArray0[1] = (Node) comment0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("?", ",|Xl^&u\" 2GM;}TAl-", false);
      nodeArray0[6] = (Node) xmlDeclaration0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.getElementsMatchingText(":ImmediateParent%s");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("^");
      Element element0 = document0.tagName("br");
      Element element1 = element0.prependElement("br");
      element1.appendText("org.jsoup.select.Evaluator$IsLastChild");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      element0.getElementsMatchingText(">X\"Fl+&");
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("^");
      document0.prependElement("br");
      Pattern pattern0 = Pattern.compile("org.jsoup.select.Evaluator$IsLastChild", (-1389));
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("source");
      document0.appendText("source");
      Elements elements0 = document0.getElementsContainingOwnText("source");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("source");
      DataNode dataNode0 = new DataNode("source", "dy(=,{g[e&k5hpj'EQ");
      document0.prependChild(dataNode0);
      Elements elements0 = document0.getElementsContainingOwnText("source");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("onFQ{");
      Element element0 = document0.prependElement("textarea");
      element0.appendText("onFQ{");
      Elements elements0 = document0.getElementsMatchingText("textarea");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("source");
      document0.prependElement("source");
      Elements elements0 = document0.getElementsContainingOwnText("source");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DataNode dataNode0 = new DataNode("*qUM.", "*qUM.");
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("'R0HWr~'Y>0l4B'72TC");
      document0.prependElement("textarea");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("");
      document0.appendText("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("source");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      DocumentType documentType0 = new DocumentType("#RG{K)#[8f@GQ}<C;?", "#RG{K)#[8f@GQ}<C;?", "X86t|N", "source", "class");
      nodeArray0[7] = (Node) documentType0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      try { 
        document0.hasText();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("#");
      Element element0 = document0.prependElement("#");
      element0.appendText("#");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("source");
      Comment comment0 = new Comment("46sOI nUq@{`IL!=@:", "source");
      document0.appendChild(comment0);
      String string0 = document0.data();
      assertEquals("46sOI nUq@{`IL!=@:", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("source");
      document0.prependElement("source");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("Ig");
      document0.appendText("Ig");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("Children collection to be inserted must not be null.");
      document0.toggleClass("br");
      boolean boolean0 = document0.hasClass("Children collection to be inserted must not be null.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("BaseURI must no be null");
      document0.toggleClass("BaseURI must no be null");
      boolean boolean0 = document0.hasClass("Tag name must not be empty.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element");
      document0.addClass("org.jsoup.nodes.Element");
      boolean boolean0 = element0.hasClass("org.jsoup.nodes.Element");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("OkjHiM|@Xyo9$^$;PK4");
      Element element0 = document0.toggleClass("ilsAK4-");
      document0.addClass(" />");
      boolean boolean0 = element0.hasClass("UQnJ;7(:SkyT'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("PPe){rbxY=L,j8");
      document0.toggleClass("Children collection to be inse\ted must not be null.");
      document0.addClass("Children collection to be inse\ted must not be null.");
      boolean boolean0 = document0.hasClass("must");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("1g");
      Element element0 = document0.toggleClass("1g");
      document0.addClass("Pattern syntax error: ");
      boolean boolean0 = element0.hasClass("1g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("onFQ{");
      Element element0 = document0.toggleClass("onFQ{");
      document0.addClass("onFQ{");
      Element element1 = element0.toggleClass("onFQ{");
      assertSame(document0, element1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("'R0HWr~'Y>0l4B'72TC");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("'R0HWr~'Y>0l4B'72TC");
      Element element0 = document0.prependElement("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("'R0HWr~'Y>0l4B'72TC");
      Element element0 = document0.prependElement("textarea");
      element0.val("'R0HWr~'Y>0l4B'72TC");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("source");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(charArrayWriter0, 46, document_OutputSettings1);
      assertEquals("<#root>", charArrayWriter0.toString());
      assertEquals(7, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("^");
      Element element0 = document0.tagName("br");
      element0.prependElement("br");
      document0.html();
      assertEquals("br", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("source");
      document0.tagName("source");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-926), document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = new Document("OkjHiM|@Xyo9$^$;PK4");
      Document document1 = document0.clone();
      Element element0 = document0.appendChild(document1);
      document0.prependElement("br");
      String string0 = element0.html();
      assertEquals("<br>\n<#root></#root>", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = new Document("NV");
      document0.prependElement("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      String string0 = document1.html();
      assertEquals("<br />", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = new Document("source");
      Element element0 = document0.prependElement("source");
      element0.appendText("source");
      String string0 = document0.html();
      assertEquals("<source>source</source>", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("L(ptW[#.@m/r~/ &z@X");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      StringWriter stringWriter0 = new StringWriter();
      document0.outerHtmlTail(stringWriter0, (-10384369), document_OutputSettings1);
      assertEquals("</#root>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = new Document("onFQ{");
      Element element0 = document0.prependElement("onFQ{");
      element0.appendText("onFQ{");
      String string0 = document0.html();
      assertEquals("<onFQ{>\n onFQ{\n</onFQ{>", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = new Document("source");
      Element element0 = document0.prependElement("source");
      StringBuilder stringBuilder0 = new StringBuilder();
      element0.appendText("source");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element0.outerHtmlTail(stringBuilder0, (-1505), document_OutputSettings0);
      assertEquals("</source>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = new Document("source");
      Element element0 = document0.prependElement("source");
      StringBuilder stringBuilder0 = new StringBuilder();
      element0.appendText("source");
      element0.prependText("fwr8>W*b ;otP@uC");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(stringBuilder0, (-1505), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Document document0 = new Document("^");
      Document document1 = (Document)document0.tagName("br");
      document1.prependElement("br");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      document1.outerHtmlTail(stringBuilder0, 3151, document_OutputSettings0);
      assertEquals("br", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Document document0 = new Document("source");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Element element0 = new Element("ils{AK4-m");
      StringBuilder stringBuilder0 = new StringBuilder();
      element0.prependElement("ils{AK4-m");
      // Undeclared exception!
      try { 
        element0.html((Appendable) stringBuilder0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
