/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 13:50:57 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LeafNode_ESTest extends LeafNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TextNode textNode0 = new TextNode("org.jsoup.nodes.LeafNode", "!9$s");
      // Undeclared exception!
      try { 
        textNode0.removeAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Comment comment0 = new Comment("52$3(9");
      CDataNode cDataNode0 = new CDataNode("52$3(9");
      cDataNode0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        cDataNode0.wrap("52$3(9");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.LeafNode", "org.jsoup.nodes.LeafNode");
      String string0 = dataNode0.absUrl("j_`m9h;QV");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("fieldset");
      TextNode textNode0 = cDataNode0.splitText(0);
      assertEquals(0, textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("", "cdD22(j!s4O9^Z:<S6");
      dataNode0.setBaseUri("");
      assertEquals(0, dataNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("fieldset", "fieldset", "+N\t|7$ax_B", "+N\t|7$ax_B", "+N\t|7$ax_B");
      assertFalse(documentType0.hasParent());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("fieldset");
      cDataNode0.attr("fieldset", "fieldset");
      TextNode textNode0 = cDataNode0.splitText(0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("fieldset");
      String string0 = cDataNode0.attr("fieldset");
      assertEquals("", string0);
  }
}
